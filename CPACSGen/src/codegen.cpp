#include <vector>
#include <cctype>
#include <fstream>

#include "codegen.h"

auto CapitalizeFirstLetter(std::string str) {
	if (str.empty())
		throw std::runtime_error("String is empty");

	str[0] = std::toupper(str[0]);

	return str;
}

void writeFields(std::ofstream& hpp, const std::vector<Field>& members) {
	for (const auto& m : members)
		hpp << "\t\t" << m.type << " " << m.fieldName() << ";\n";
}

void writeAccessorDeclarations(std::ofstream& hpp, const std::vector<Field>& members) {
	for (const auto& m : members) {
		hpp << "\t\tTIGL_EXPORT " << m.type << " Get" << CapitalizeFirstLetter(m.name) << "() const;\n";
		hpp << "\t\tTIGL_EXPORT void Set" << CapitalizeFirstLetter(m.name) << "(const " << m.type << "& value);\n";
		hpp << "\n";
	}
}

void writeAccessorImplementations(std::ofstream& cpp, const std::string& className, const std::vector<Field>& members) {
	for (const auto& m : members) {
		cpp << "\t" << m.type << " " << className << "::Get" << CapitalizeFirstLetter(m.name) << "() const { return " << m.fieldName() << "; }\n";
		cpp << "\tvoid " << className << "::Set" << CapitalizeFirstLetter(m.name) << "(const " << m.type << "& value) { " << m.fieldName() << " = value; }\n";
		cpp << "\n";
	}
}

void writeIODeclarations(std::ofstream& hpp, const std::string& className, const std::vector<Field>& members) {
	hpp << "\t\tTIGL_EXPORT void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);\n";
	hpp << "\t\tTIGL_EXPORT void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);\n";
	hpp << "\n";
}

void writeIOImplementations(std::ofstream& cpp, const std::string& className, const std::vector<Field>& members) {
	// read
	cpp << "\tvoid " << className << "::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) {\n";
	for (const auto& m : members) {
		cpp << "\t\t// read " << (m.attribute ? "attribute" : "element") << " " << m.name << "\n";
		if (m.attribute) {
			// we check for the attribute's existence anyway and report errors
			cpp << "\t\tif (TixiCheckAttribute(tixiHandle, xpath, " << m.name << ")) {\n";
			cpp << "\t\t\t" << m.fieldName() << " = TixiGetTextAttribute(tixiHandle, xpath, " << m.name << ");\n";
			if (m.cardinality == Cardinality::One) {
				// attribute must exist
				cpp << "\t\t} else {\n";
				cpp << "\t\t\tLOG(WARNING) << \"Required attribute " << m.name << " is missing\";\n";
				cpp << "\t\t}\n";
			} else
				cpp << "\t\t}\n";
		} else {
			cpp << "\t\tif (TixiCheckElement(tixiHandle, xpath + \"/\" + " << m.name << ")) {\n";
			cpp << "\t\t\t" << m.fieldName() << " = TixiGetTextElement(tixiHandle, xpath + \"/\" + " << m.name << ");\n";
			if (m.cardinality == Cardinality::One || m.cardinality == Cardinality::Many) {
				// element must exist
				cpp << "\t\t} else {\n";
				cpp << "\t\t\tLOG(WARNING) << \"Required element " << m.name << " is missing\";\n";
				cpp << "\t\t}\n";
			} else
				cpp << "\t\t}\n";
		}
		cpp << "\n";
	}
	cpp << "\t}\n";
	cpp << "\n";


	// write
	cpp << "\tvoid " << className << "::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) {\n";
	for (const auto& m : members) {
		cpp << "\t\t// write " << (m.attribute ? "attribute" : "element") << " " << m.name << "\n";
		if (m.attribute)
			cpp << "\t\tTixiSaveTextAttribute(tixiHandle, xpath, \"" << m.name << "\", " << m.fieldName() << ");\n";
		else
			cpp << "\t\tTixiSaveTextElement(tixiHandle, xpath, \"" << m.name << "\", " << m.fieldName() << ");\n";
		cpp << "\n";
	}
	cpp << "\t}\n";
	cpp << "\n";
}

void writeLicenseHeader(std::ofstream& f) {
	f << "// This file was autogenerated by CPACSGen, do not edit\n";
	f << "//\n";
	f << "// Licensed under the Apache License, Version 2.0 (the \"License\")\n";
	f << "// you may not use this file except in compliance with the License.\n";
	f << "// You may obtain a copy of the License at\n";
	f << "//\n";
	f << "//     http://www.apache.org/licenses/LICENSE-2.0\n";
	f << "//\n";
	f << "// Unless required by applicable law or agreed to in writing, software\n";
	f << "// distributed under the License is distributed on an \"AS IS\" BASIS,\n";
	f << "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n";
	f << "// See the License for the specific language governing permissions and\n";
	f << "// limitations under the License.\n";
	f << "\n";
}


void generateCode(const std::string& outputLocation, const std::vector<Class>& classes) {
	std::system(("mkdir " + outputLocation).c_str()); // TODO

	for (const auto& c : classes) {

		//
		// create header file
		//

		std::ofstream hpp(outputLocation + "/" + c.name + ".h");
		hpp.exceptions(std::ios::failbit | std::ios::badbit);

		hpp << "#pragma once\n";
		hpp << "\n";

		// file header
		writeLicenseHeader(hpp);

		// includes
		hpp << "#include <string>\n";
		hpp << "#include \"tixi.h\"\n";
		hpp << "\n";

		// namespace
		hpp << "namespace tigl {\n";

		// class name and base class
		hpp << "\tclass " << c.name << (c.base.empty() ? "" : " : public " + c.base) << " {\n";
		hpp << "\tpublic:\n";

		// ctor
		hpp << "\t\tTIGL_EXPORT " << c.name << "();\n";
		hpp << "\n";

		// io
		writeIODeclarations(hpp, c.name, c.fields);

		// accessors
		writeAccessorDeclarations(hpp, c.fields);

		hpp << "\tprivate:\n";

		// fields
		writeFields(hpp, c.fields);
		hpp << "\n";

		hpp << "\t};\n";
		hpp << "}\n";
		hpp << "\n";

		//
		// create source file
		//

		std::ofstream cpp(outputLocation + "/" + c.name + ".cpp");
		cpp.exceptions(std::ios::failbit | std::ios::badbit);

		// file header
		writeLicenseHeader(cpp);

		// includes
		cpp << "#include \"IOHelper.h\"\n";
		cpp << "#include \"" << c.name << ".h\"\n";
		cpp << "\n";

		// namespace
		cpp << "namespace tigl {\n";

		// ctor
		cpp << "\t" << c.name << "::" << c.name << "() {}\n";
		cpp << "\n";

		// io
		writeIOImplementations(cpp, c.name, c.fields);

		// accessors
		writeAccessorImplementations(cpp, c.name, c.fields);

		cpp << "}\n";
		cpp << "\n";
	}
}