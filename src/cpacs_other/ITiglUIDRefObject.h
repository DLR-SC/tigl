/*
* Copyright (c) 2020 RISC Software GmbH
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#pragma once

#include <string>

namespace tigl
{

class CTiglUIDManager;
class CTiglUIDObject;

/**
 * @brief Abstract interface for all classes referencing at least one UID
 *
 * This class is used by the cpacs code generator as base class for all classes
 * which reference one or more UIDs. It provides a function for obtaining the
 * next object upwards in the CPACS tree which contains a UID (might be the
 * object itself), as well as a function for the notification when a UID has
 * changed.
 * The interface is used by the CTiglUIDManager for managing the dependencies
 * between CPACS objects which are connected via UID references and for handling
 * changes of UIDs which are referenced.
 * The implementation of the abstract functions in the derived classes is
*  completely generated by the cpacs code generator.
 */
class ITiglUIDRefObject
{
public:
    virtual ~ITiglUIDRefObject() = default;

private:
    friend class CTiglUIDManager;

    virtual const CTiglUIDObject* GetNextUIDObject() const = 0;
    virtual void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) = 0;
};

}
