// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSAircraftControlElements;

    // This class is used in:
    // CPACSAircraftControlElements

    /// @brief Control element
    /// 
    /// Specification of an control element setting. A control element can be a controlDistributor
    /// or an individual control device, such as a control surface or a landing gear.
    /// 
    class CPACSAircraftControlElement : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSAircraftControlElement(CPACSAircraftControlElements* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSAircraftControlElement();

        TIGL_EXPORT CPACSAircraftControlElements* GetParent();

        TIGL_EXPORT const CPACSAircraftControlElements* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetControlDeviceUID_choice1() const;
        TIGL_EXPORT virtual void SetControlDeviceUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetControlParameter_choice1() const;
        TIGL_EXPORT virtual void SetControlParameter_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetControlDistributorUID_choice2() const;
        TIGL_EXPORT virtual void SetControlDistributorUID_choice2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetCommandInput_choice2() const;
        TIGL_EXPORT virtual void SetCommandInput_choice2(const boost::optional<double>& value);

    protected:
        CPACSAircraftControlElements* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Reference to the uID of a control device, e.g. a control surface or a landing gear
        boost::optional<std::string> m_controlDeviceUID_choice1;

        /// Control parameter of the control device
        boost::optional<double>      m_controlParameter_choice1;

        /// Reference to a control distributor uID
        boost::optional<std::string> m_controlDistributorUID_choice2;

        /// Value of the command parameter of a control distributor. If not given explicitly in the control distributor, linear interpolation between the neighboring points is required.
        boost::optional<double>      m_commandInput_choice2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSAircraftControlElement(const CPACSAircraftControlElement&) = delete;
        CPACSAircraftControlElement& operator=(const CPACSAircraftControlElement&) = delete;

        CPACSAircraftControlElement(CPACSAircraftControlElement&&) = delete;
        CPACSAircraftControlElement& operator=(CPACSAircraftControlElement&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSAircraftControlElement = generated::CPACSAircraftControlElement;
using CCPACSAircraftControlElements = generated::CPACSAircraftControlElements;
} // namespace tigl
