// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSAxle.h"
#include "CPACSAxleAssembly.h"
#include "CPACSLandingGearComponentAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSAxle::CPACSAxle(CPACSAxleAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_length(0)
        , m_shaftProperties(this, m_uidMgr)
        , m_numberOfWheels(0)
        , m_wheel(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSAxleAssembly);
    }

    CPACSAxle::CPACSAxle(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_length(0)
        , m_shaftProperties(this, m_uidMgr)
        , m_numberOfWheels(0)
        , m_wheel(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSLandingGearComponentAssembly);
    }

    CPACSAxle::~CPACSAxle()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CTiglUIDObject* CPACSAxle::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSAxleAssembly>()) {
                return GetParent<CPACSAxleAssembly>()->GetNextUIDParent();
            }
            if (IsParent<CPACSLandingGearComponentAssembly>()) {
                return GetParent<CPACSLandingGearComponentAssembly>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSAxle::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSAxleAssembly>()) {
                return GetParent<CPACSAxleAssembly>()->GetNextUIDParent();
            }
            if (IsParent<CPACSLandingGearComponentAssembly>()) {
                return GetParent<CPACSLandingGearComponentAssembly>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSAxle::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSAxle::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSAxle::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element length
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/length")) {
            m_length = tixi::TixiGetElement<double>(tixiHandle, xpath + "/length");
        }
        else {
            LOG(ERROR) << "Required element length is missing at xpath " << xpath;
        }

        // read element shaftProperties
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/shaftProperties")) {
            m_shaftProperties.ReadCPACS(tixiHandle, xpath + "/shaftProperties");
        }
        else {
            LOG(ERROR) << "Required element shaftProperties is missing at xpath " << xpath;
        }

        // read element numberOfWheels
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/numberOfWheels")) {
            m_numberOfWheels = tixi::TixiGetElement<int>(tixiHandle, xpath + "/numberOfWheels");
        }
        else {
            LOG(ERROR) << "Required element numberOfWheels is missing at xpath " << xpath;
        }

        // read element sideOfFirstWheel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sideOfFirstWheel")) {
            m_sideOfFirstWheel = stringToCPACSAxle_sideOfFirstWheel(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/sideOfFirstWheel"));
        }
        else {
            LOG(ERROR) << "Required element sideOfFirstWheel is missing at xpath " << xpath;
        }

        // read element wheel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/wheel")) {
            m_wheel.ReadCPACS(tixiHandle, xpath + "/wheel");
        }
        else {
            LOG(ERROR) << "Required element wheel is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSAxle::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element length
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/length");
        tixi::TixiSaveElement(tixiHandle, xpath + "/length", m_length);

        // write element shaftProperties
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shaftProperties");
        m_shaftProperties.WriteCPACS(tixiHandle, xpath + "/shaftProperties");

        // write element numberOfWheels
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfWheels");
        tixi::TixiSaveElement(tixiHandle, xpath + "/numberOfWheels", m_numberOfWheels);

        // write element sideOfFirstWheel
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sideOfFirstWheel");
        tixi::TixiSaveElement(tixiHandle, xpath + "/sideOfFirstWheel", CPACSAxle_sideOfFirstWheelToString(m_sideOfFirstWheel));

        // write element wheel
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wheel");
        m_wheel.WriteCPACS(tixiHandle, xpath + "/wheel");

    }

    const std::string& CPACSAxle::GetUID() const
    {
        return m_uID;
    }

    void CPACSAxle::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSAxle::GetLength() const
    {
        return m_length;
    }

    void CPACSAxle::SetLength(const double& value)
    {
        m_length = value;
    }

    const CPACSStrutProperties& CPACSAxle::GetShaftProperties() const
    {
        return m_shaftProperties;
    }

    CPACSStrutProperties& CPACSAxle::GetShaftProperties()
    {
        return m_shaftProperties;
    }

    const int& CPACSAxle::GetNumberOfWheels() const
    {
        return m_numberOfWheels;
    }

    void CPACSAxle::SetNumberOfWheels(const int& value)
    {
        m_numberOfWheels = value;
    }

    const CPACSAxle_sideOfFirstWheel& CPACSAxle::GetSideOfFirstWheel() const
    {
        return m_sideOfFirstWheel;
    }

    void CPACSAxle::SetSideOfFirstWheel(const CPACSAxle_sideOfFirstWheel& value)
    {
        m_sideOfFirstWheel = value;
    }

    const CPACSWheel& CPACSAxle::GetWheel() const
    {
        return m_wheel;
    }

    CPACSWheel& CPACSAxle::GetWheel()
    {
        return m_wheel;
    }

} // namespace generated
} // namespace tigl
