// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAxle.h"

namespace tigl
{
    namespace generated
    {
        CPACSAxle::CPACSAxle(){}
        CPACSAxle::~CPACSAxle() {}
        
        void CPACSAxle::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element shaft
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shaft")) {
                m_shaft.ReadCPACS(tixiHandle, xpath + "/shaft");
            }
            else {
                LOG(ERROR) << "Required element shaft is missing";
            }
            
            // read element wheelUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wheelUID")) {
                m_wheelUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/wheelUID");
            }
            else {
                LOG(ERROR) << "Required element wheelUID is missing";
            }
            
            // read element numberOfWheels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfWheels")) {
                m_numberOfWheels = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfWheels");
            }
            else {
                LOG(ERROR) << "Required element numberOfWheels is missing";
            }
            
        }
        
        void CPACSAxle::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element shaft
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shaft");
            m_shaft.WriteCPACS(tixiHandle, xpath + "/shaft");
            
            // write element wheelUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wheelUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/wheelUID", m_wheelUID);
            
            // write element numberOfWheels
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfWheels");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfWheels", m_numberOfWheels);
            
        }
        
        const std::string& CPACSAxle::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSAxle::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSStrut& CPACSAxle::GetShaft() const
        {
            return m_shaft;
        }
        
        CPACSStrut& CPACSAxle::GetShaft()
        {
            return m_shaft;
        }
        
        const std::string& CPACSAxle::GetWheelUID() const
        {
            return m_wheelUID;
        }
        
        void CPACSAxle::SetWheelUID(const std::string& value)
        {
            m_wheelUID = value;
        }
        
        const int& CPACSAxle::GetNumberOfWheels() const
        {
            return m_numberOfWheels;
        }
        
        void CPACSAxle::SetNumberOfWheels(const int& value)
        {
            m_numberOfWheels = value;
        }
        
    }
}
