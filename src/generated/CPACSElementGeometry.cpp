// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSBattery.h"
#include "CPACSElectricMotor.h"
#include "CPACSElementGeometry.h"
#include "CPACSGasTurbine.h"
#include "CPACSGearBox.h"
#include "CPACSGenerator.h"
#include "CPACSHeatExchanger.h"
#include "CPACSTurboGenerator.h"
#include "CPACSVehicleElementBase.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSElementGeometry::CPACSElementGeometry(CPACSBattery* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSBattery);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSElectricMotor* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElectricMotor);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSGasTurbine* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGasTurbine);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSGearBox* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGearBox);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSGenerator* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGenerator);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSHeatExchanger* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSHeatExchanger);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSTurboGenerator* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTurboGenerator);
    }

    CPACSElementGeometry::CPACSElementGeometry(CPACSVehicleElementBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSVehicleElementBase);
    }

    CPACSElementGeometry::~CPACSElementGeometry()
    {
    }

    const CTiglUIDObject* CPACSElementGeometry::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSBattery>()) {
                return GetParent<CPACSBattery>();
            }
            if (IsParent<CPACSElectricMotor>()) {
                return GetParent<CPACSElectricMotor>();
            }
            if (IsParent<CPACSGasTurbine>()) {
                return GetParent<CPACSGasTurbine>();
            }
            if (IsParent<CPACSGearBox>()) {
                return GetParent<CPACSGearBox>();
            }
            if (IsParent<CPACSGenerator>()) {
                return GetParent<CPACSGenerator>();
            }
            if (IsParent<CPACSHeatExchanger>()) {
                return GetParent<CPACSHeatExchanger>();
            }
            if (IsParent<CPACSTurboGenerator>()) {
                return GetParent<CPACSTurboGenerator>();
            }
            if (IsParent<CPACSVehicleElementBase>()) {
                return GetParent<CPACSVehicleElementBase>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSElementGeometry::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSBattery>()) {
                return GetParent<CPACSBattery>();
            }
            if (IsParent<CPACSElectricMotor>()) {
                return GetParent<CPACSElectricMotor>();
            }
            if (IsParent<CPACSGasTurbine>()) {
                return GetParent<CPACSGasTurbine>();
            }
            if (IsParent<CPACSGearBox>()) {
                return GetParent<CPACSGearBox>();
            }
            if (IsParent<CPACSGenerator>()) {
                return GetParent<CPACSGenerator>();
            }
            if (IsParent<CPACSHeatExchanger>()) {
                return GetParent<CPACSHeatExchanger>();
            }
            if (IsParent<CPACSTurboGenerator>()) {
                return GetParent<CPACSTurboGenerator>();
            }
            if (IsParent<CPACSVehicleElementBase>()) {
                return GetParent<CPACSVehicleElementBase>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSElementGeometry::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSElementGeometry::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSElementGeometry::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute boundingShape
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "boundingShape")) {
            m_boundingShape = tixi::TixiGetAttribute<bool>(tixiHandle, xpath, "boundingShape");
        }

        // read element cuboid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cuboid")) {
            m_cuboid_choice1 = boost::in_place(this);
            try {
                m_cuboid_choice1->ReadCPACS(tixiHandle, xpath + "/cuboid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read cuboid at xpath " << xpath << ": " << e.what();
                m_cuboid_choice1 = boost::none;
            }
        }

        // read element cylinder
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cylinder")) {
            m_cylinder_choice2 = boost::in_place(this);
            try {
                m_cylinder_choice2->ReadCPACS(tixiHandle, xpath + "/cylinder");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read cylinder at xpath " << xpath << ": " << e.what();
                m_cylinder_choice2 = boost::none;
            }
        }

        // read element ellipsoid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
            m_ellipsoid_choice3 = boost::in_place(this);
            try {
                m_ellipsoid_choice3->ReadCPACS(tixiHandle, xpath + "/ellipsoid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read ellipsoid at xpath " << xpath << ": " << e.what();
                m_ellipsoid_choice3 = boost::none;
            }
        }

        // read element multiSegmentShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/multiSegmentShape")) {
            m_multiSegmentShape_choice4 = boost::in_place(this, m_uidMgr);
            try {
                m_multiSegmentShape_choice4->ReadCPACS(tixiHandle, xpath + "/multiSegmentShape");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read multiSegmentShape at xpath " << xpath << ": " << e.what();
                m_multiSegmentShape_choice4 = boost::none;
            }
        }

        // read element external
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/external")) {
            m_external_choice5 = boost::in_place(this, m_uidMgr);
            try {
                m_external_choice5->ReadCPACS(tixiHandle, xpath + "/external");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read external at xpath " << xpath << ": " << e.what();
                m_external_choice5 = boost::none;
            }
        }

        // read element addtionalParts
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/addtionalParts")) {
            m_addtionalParts = boost::in_place(this, m_uidMgr);
            try {
                m_addtionalParts->ReadCPACS(tixiHandle, xpath + "/addtionalParts");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read addtionalParts at xpath " << xpath << ": " << e.what();
                m_addtionalParts = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSElementGeometry::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "cuboid", "cylinder", "ellipsoid", "multiSegmentShape", "external", "addtionalParts" };

        // write attribute boundingShape
        if (m_boundingShape) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "boundingShape", *m_boundingShape);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "boundingShape")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "boundingShape");
            }
        }

        // write element cuboid
        if (m_cuboid_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/cuboid", childElemOrder);
            m_cuboid_choice1->WriteCPACS(tixiHandle, xpath + "/cuboid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/cuboid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/cuboid");
            }
        }

        // write element cylinder
        if (m_cylinder_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/cylinder", childElemOrder);
            m_cylinder_choice2->WriteCPACS(tixiHandle, xpath + "/cylinder");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/cylinder")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/cylinder");
            }
        }

        // write element ellipsoid
        if (m_ellipsoid_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/ellipsoid", childElemOrder);
            m_ellipsoid_choice3->WriteCPACS(tixiHandle, xpath + "/ellipsoid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ellipsoid");
            }
        }

        // write element multiSegmentShape
        if (m_multiSegmentShape_choice4) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/multiSegmentShape", childElemOrder);
            m_multiSegmentShape_choice4->WriteCPACS(tixiHandle, xpath + "/multiSegmentShape");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/multiSegmentShape")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/multiSegmentShape");
            }
        }

        // write element external
        if (m_external_choice5) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/external", childElemOrder);
            m_external_choice5->WriteCPACS(tixiHandle, xpath + "/external");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/external")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/external");
            }
        }

        // write element addtionalParts
        if (m_addtionalParts) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/addtionalParts", childElemOrder);
            m_addtionalParts->WriteCPACS(tixiHandle, xpath + "/addtionalParts");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/addtionalParts")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/addtionalParts");
            }
        }

    }

    bool CPACSElementGeometry::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_cuboid_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cylinder_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_cylinder_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_ellipsoid_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_cylinder_choice2.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_multiSegmentShape_choice4.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_cylinder_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_external_choice5.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_cylinder_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<bool>& CPACSElementGeometry::GetBoundingShape() const
    {
        return m_boundingShape;
    }

    void CPACSElementGeometry::SetBoundingShape(const boost::optional<bool>& value)
    {
        m_boundingShape = value;
    }

    const boost::optional<CPACSCuboid>& CPACSElementGeometry::GetCuboid_choice1() const
    {
        return m_cuboid_choice1;
    }

    boost::optional<CPACSCuboid>& CPACSElementGeometry::GetCuboid_choice1()
    {
        return m_cuboid_choice1;
    }

    const boost::optional<CPACSCylinder>& CPACSElementGeometry::GetCylinder_choice2() const
    {
        return m_cylinder_choice2;
    }

    boost::optional<CPACSCylinder>& CPACSElementGeometry::GetCylinder_choice2()
    {
        return m_cylinder_choice2;
    }

    const boost::optional<CPACSEllipsoid>& CPACSElementGeometry::GetEllipsoid_choice3() const
    {
        return m_ellipsoid_choice3;
    }

    boost::optional<CPACSEllipsoid>& CPACSElementGeometry::GetEllipsoid_choice3()
    {
        return m_ellipsoid_choice3;
    }

    const boost::optional<CPACSMultiSegmentShape>& CPACSElementGeometry::GetMultiSegmentShape_choice4() const
    {
        return m_multiSegmentShape_choice4;
    }

    boost::optional<CPACSMultiSegmentShape>& CPACSElementGeometry::GetMultiSegmentShape_choice4()
    {
        return m_multiSegmentShape_choice4;
    }

    const boost::optional<CPACSExternalGeometry>& CPACSElementGeometry::GetExternal_choice5() const
    {
        return m_external_choice5;
    }

    boost::optional<CPACSExternalGeometry>& CPACSElementGeometry::GetExternal_choice5()
    {
        return m_external_choice5;
    }

    const boost::optional<CPACSElementGeometryAddtionalParts>& CPACSElementGeometry::GetAddtionalParts() const
    {
        return m_addtionalParts;
    }

    boost::optional<CPACSElementGeometryAddtionalParts>& CPACSElementGeometry::GetAddtionalParts()
    {
        return m_addtionalParts;
    }

    CPACSCuboid& CPACSElementGeometry::GetCuboid_choice1(CreateIfNotExistsTag)
    {
        if (!m_cuboid_choice1)
            m_cuboid_choice1 = boost::in_place(this);
        return *m_cuboid_choice1;
    }

    void CPACSElementGeometry::RemoveCuboid_choice1()
    {
        m_cuboid_choice1 = boost::none;
    }

    CPACSCylinder& CPACSElementGeometry::GetCylinder_choice2(CreateIfNotExistsTag)
    {
        if (!m_cylinder_choice2)
            m_cylinder_choice2 = boost::in_place(this);
        return *m_cylinder_choice2;
    }

    void CPACSElementGeometry::RemoveCylinder_choice2()
    {
        m_cylinder_choice2 = boost::none;
    }

    CPACSEllipsoid& CPACSElementGeometry::GetEllipsoid_choice3(CreateIfNotExistsTag)
    {
        if (!m_ellipsoid_choice3)
            m_ellipsoid_choice3 = boost::in_place(this);
        return *m_ellipsoid_choice3;
    }

    void CPACSElementGeometry::RemoveEllipsoid_choice3()
    {
        m_ellipsoid_choice3 = boost::none;
    }

    CPACSMultiSegmentShape& CPACSElementGeometry::GetMultiSegmentShape_choice4(CreateIfNotExistsTag)
    {
        if (!m_multiSegmentShape_choice4)
            m_multiSegmentShape_choice4 = boost::in_place(this, m_uidMgr);
        return *m_multiSegmentShape_choice4;
    }

    void CPACSElementGeometry::RemoveMultiSegmentShape_choice4()
    {
        m_multiSegmentShape_choice4 = boost::none;
    }

    CPACSExternalGeometry& CPACSElementGeometry::GetExternal_choice5(CreateIfNotExistsTag)
    {
        if (!m_external_choice5)
            m_external_choice5 = boost::in_place(this, m_uidMgr);
        return *m_external_choice5;
    }

    void CPACSElementGeometry::RemoveExternal_choice5()
    {
        m_external_choice5 = boost::none;
    }

    CPACSElementGeometryAddtionalParts& CPACSElementGeometry::GetAddtionalParts(CreateIfNotExistsTag)
    {
        if (!m_addtionalParts)
            m_addtionalParts = boost::in_place(this, m_uidMgr);
        return *m_addtionalParts;
    }

    void CPACSElementGeometry::RemoveAddtionalParts()
    {
        m_addtionalParts = boost::none;
    }

} // namespace generated
} // namespace tigl
