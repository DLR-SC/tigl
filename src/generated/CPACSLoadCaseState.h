// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSAtmosphericConditions.h"
#include "CPACSTrimParameters.h"
#include "CPACSPointXYZ.h"
#include "CPACSAttitudeAndMotion.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFlightLoadCase
        // CPACSGroundLoadCase
        
        // generated from /xsd:schema/xsd:complexType[495]
        class CPACSLoadCaseState
        {
        public:
            TIGL_EXPORT CPACSLoadCaseState();
            TIGL_EXPORT virtual ~CPACSLoadCaseState();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasAtmosphericConditions() const;
            TIGL_EXPORT const CPACSAtmosphericConditions& GetAtmosphericConditions() const;
            TIGL_EXPORT CPACSAtmosphericConditions& GetAtmosphericConditions();
            
            TIGL_EXPORT bool HasTrimParameters() const;
            TIGL_EXPORT const CPACSTrimParameters& GetTrimParameters() const;
            TIGL_EXPORT CPACSTrimParameters& GetTrimParameters();
            
            TIGL_EXPORT bool HasWind() const;
            TIGL_EXPORT const CPACSPointXYZ& GetWind() const;
            TIGL_EXPORT CPACSPointXYZ& GetWind();
            
            TIGL_EXPORT bool HasAttitudeAndMotion() const;
            TIGL_EXPORT const CPACSAttitudeAndMotion& GetAttitudeAndMotion() const;
            TIGL_EXPORT CPACSAttitudeAndMotion& GetAttitudeAndMotion();
            
        protected:
            boost::optional<CPACSAtmosphericConditions> m_atmosphericConditions;
            boost::optional<CPACSTrimParameters>        m_trimParameters;
            boost::optional<CPACSPointXYZ>              m_wind;
            boost::optional<CPACSAttitudeAndMotion>     m_attitudeAndMotion;
            
        private:
            #ifdef HAVE_CPP11
            CPACSLoadCaseState(const CPACSLoadCaseState&) = delete;
            CPACSLoadCaseState& operator=(const CPACSLoadCaseState&) = delete;
            
            CPACSLoadCaseState(CPACSLoadCaseState&&) = delete;
            CPACSLoadCaseState& operator=(CPACSLoadCaseState&&) = delete;
            #else
            CPACSLoadCaseState(const CPACSLoadCaseState&);
            CPACSLoadCaseState& operator=(const CPACSLoadCaseState&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSLoadCaseState = generated::CPACSLoadCaseState;
    #else
    typedef generated::CPACSLoadCaseState CCPACSLoadCaseState;
    #endif
}
