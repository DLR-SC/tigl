// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingCells.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingCell.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingCell::CPACSWingCell(CCPACSWingCells* parent) :
            m_positioningLeadingEdge(reinterpret_cast<CCPACSWingCell*>(this)), 
            m_positioningTrailingEdge(reinterpret_cast<CCPACSWingCell*>(this)), 
            m_positioningInnerBorder(reinterpret_cast<CCPACSWingCell*>(this)), 
            m_positioningOuterBorder(reinterpret_cast<CCPACSWingCell*>(this))
        {
            //assert(parent != NULL);
            m_parent = parent;
        }
        
        CPACSWingCell::~CPACSWingCell() {}
        
        CCPACSWingCells* CPACSWingCell::GetParent() const
        {
            return m_parent;
        }
        
        void CPACSWingCell::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element skin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/skin")) {
                m_skin.ReadCPACS(tixiHandle, xpath + "/skin");
            }
            else {
                LOG(ERROR) << "Required element skin is missing";
            }
            
            // read element positioningLeadingEdge
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positioningLeadingEdge")) {
                m_positioningLeadingEdge.ReadCPACS(tixiHandle, xpath + "/positioningLeadingEdge");
            }
            else {
                LOG(ERROR) << "Required element positioningLeadingEdge is missing";
            }
            
            // read element positioningTrailingEdge
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positioningTrailingEdge")) {
                m_positioningTrailingEdge.ReadCPACS(tixiHandle, xpath + "/positioningTrailingEdge");
            }
            else {
                LOG(ERROR) << "Required element positioningTrailingEdge is missing";
            }
            
            // read element positioningInnerBorder
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positioningInnerBorder")) {
                m_positioningInnerBorder.ReadCPACS(tixiHandle, xpath + "/positioningInnerBorder");
            }
            else {
                LOG(ERROR) << "Required element positioningInnerBorder is missing";
            }
            
            // read element positioningOuterBorder
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positioningOuterBorder")) {
                m_positioningOuterBorder.ReadCPACS(tixiHandle, xpath + "/positioningOuterBorder");
            }
            else {
                LOG(ERROR) << "Required element positioningOuterBorder is missing";
            }
            
        }
        
        void CPACSWingCell::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element skin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skin");
            m_skin.WriteCPACS(tixiHandle, xpath + "/skin");
            
            // write element positioningLeadingEdge
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positioningLeadingEdge");
            m_positioningLeadingEdge.WriteCPACS(tixiHandle, xpath + "/positioningLeadingEdge");
            
            // write element positioningTrailingEdge
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positioningTrailingEdge");
            m_positioningTrailingEdge.WriteCPACS(tixiHandle, xpath + "/positioningTrailingEdge");
            
            // write element positioningInnerBorder
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positioningInnerBorder");
            m_positioningInnerBorder.WriteCPACS(tixiHandle, xpath + "/positioningInnerBorder");
            
            // write element positioningOuterBorder
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positioningOuterBorder");
            m_positioningOuterBorder.WriteCPACS(tixiHandle, xpath + "/positioningOuterBorder");
            
        }
        
        const std::string& CPACSWingCell::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSWingCell::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSWingSkin& CPACSWingCell::GetSkin() const
        {
            return m_skin;
        }
        
        CPACSWingSkin& CPACSWingCell::GetSkin()
        {
            return m_skin;
        }
        
        const CCPACSWingCellPositionChordwise& CPACSWingCell::GetPositioningLeadingEdge() const
        {
            return m_positioningLeadingEdge;
        }
        
        CCPACSWingCellPositionChordwise& CPACSWingCell::GetPositioningLeadingEdge()
        {
            return m_positioningLeadingEdge;
        }
        
        const CCPACSWingCellPositionChordwise& CPACSWingCell::GetPositioningTrailingEdge() const
        {
            return m_positioningTrailingEdge;
        }
        
        CCPACSWingCellPositionChordwise& CPACSWingCell::GetPositioningTrailingEdge()
        {
            return m_positioningTrailingEdge;
        }
        
        const CCPACSWingCellPositionSpanwise& CPACSWingCell::GetPositioningInnerBorder() const
        {
            return m_positioningInnerBorder;
        }
        
        CCPACSWingCellPositionSpanwise& CPACSWingCell::GetPositioningInnerBorder()
        {
            return m_positioningInnerBorder;
        }
        
        const CCPACSWingCellPositionSpanwise& CPACSWingCell::GetPositioningOuterBorder() const
        {
            return m_positioningOuterBorder;
        }
        
        CCPACSWingCellPositionSpanwise& CPACSWingCell::GetPositioningOuterBorder()
        {
            return m_positioningOuterBorder;
        }
        
    }
}
