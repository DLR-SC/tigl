// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSUIDGroupDefinition.h"

namespace tigl
{
    namespace generated
    {
        CPACSUIDGroupDefinition::CPACSUIDGroupDefinition(){}
        CPACSUIDGroupDefinition::~CPACSUIDGroupDefinition() {}
        
        void CPACSUIDGroupDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element structuralMemberUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralMemberUID")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralMemberUID", m_structuralMemberUID);
            }
            
            // read element structuralElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementUID")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralElementUID", m_structuralElementUID);
            }
            
            // read element entityUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/entityUID")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/entityUID", m_entityUID);
            }
            
        }
        
        void CPACSUIDGroupDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element structuralMemberUID
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralMemberUID", m_structuralMemberUID);
            
            // write element structuralElementUID
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralElementUID", m_structuralElementUID);
            
            // write element entityUID
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/entityUID", m_entityUID);
            
        }
        
        const std::string& CPACSUIDGroupDefinition::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSUIDGroupDefinition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSUIDGroupDefinition::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSUIDGroupDefinition::GetName() const
        {
            return *m_name;
        }
        
        void CPACSUIDGroupDefinition::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSUIDGroupDefinition::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSUIDGroupDefinition::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSUIDGroupDefinition::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::vector<std::string>& CPACSUIDGroupDefinition::GetStructuralMemberUID() const
        {
            return m_structuralMemberUID;
        }
        
        void CPACSUIDGroupDefinition::SetStructuralMemberUID(const std::vector<std::string>& value)
        {
            m_structuralMemberUID = value;
        }
        
        const std::vector<std::string>& CPACSUIDGroupDefinition::GetStructuralElementUID() const
        {
            return m_structuralElementUID;
        }
        
        void CPACSUIDGroupDefinition::SetStructuralElementUID(const std::vector<std::string>& value)
        {
            m_structuralElementUID = value;
        }
        
        const std::vector<std::string>& CPACSUIDGroupDefinition::GetEntityUID() const
        {
            return m_entityUID;
        }
        
        void CPACSUIDGroupDefinition::SetEntityUID(const std::vector<std::string>& value)
        {
            m_entityUID = value;
        }
        
    }
}
