// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSGenericMass.h"
#include "CPACSMEquippedEngines.h"
#include "CPACSMBleedAirSystem.h"
#include "CPACSMEngineControl.h"
#include "CPACSMFuelSystem.h"
#include "CPACSMInterGasSystem.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSMManufacturerEmpty
        
        // generated from /xsd:schema/xsd:complexType[587]
        class CPACSMPowerUnits
        {
        public:
            TIGL_EXPORT CPACSMPowerUnits();
            TIGL_EXPORT virtual ~CPACSMPowerUnits();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CPACSGenericMass& GetMassDescription() const;
            TIGL_EXPORT CPACSGenericMass& GetMassDescription();
            
            TIGL_EXPORT bool HasMEngines() const;
            TIGL_EXPORT const CPACSMEquippedEngines& GetMEngines() const;
            TIGL_EXPORT CPACSMEquippedEngines& GetMEngines();
            
            TIGL_EXPORT bool HasMBleedAirSystem() const;
            TIGL_EXPORT const CPACSMBleedAirSystem& GetMBleedAirSystem() const;
            TIGL_EXPORT CPACSMBleedAirSystem& GetMBleedAirSystem();
            
            TIGL_EXPORT bool HasMEngineControl() const;
            TIGL_EXPORT const CPACSMEngineControl& GetMEngineControl() const;
            TIGL_EXPORT CPACSMEngineControl& GetMEngineControl();
            
            TIGL_EXPORT bool HasMFuelSystem() const;
            TIGL_EXPORT const CPACSMFuelSystem& GetMFuelSystem() const;
            TIGL_EXPORT CPACSMFuelSystem& GetMFuelSystem();
            
            TIGL_EXPORT bool HasMInterGasSystem() const;
            TIGL_EXPORT const CPACSMInterGasSystem& GetMInterGasSystem() const;
            TIGL_EXPORT CPACSMInterGasSystem& GetMInterGasSystem();
            
        protected:
            CPACSGenericMass                       m_massDescription;
            boost::optional<CPACSMEquippedEngines> m_mEngines;
            boost::optional<CPACSMBleedAirSystem>  m_mBleedAirSystem;
            boost::optional<CPACSMEngineControl>   m_mEngineControl;
            boost::optional<CPACSMFuelSystem>      m_mFuelSystem;
            boost::optional<CPACSMInterGasSystem>  m_mInterGasSystem;
            
        private:
            #ifdef HAVE_CPP11
            CPACSMPowerUnits(const CPACSMPowerUnits&) = delete;
            CPACSMPowerUnits& operator=(const CPACSMPowerUnits&) = delete;
            
            CPACSMPowerUnits(CPACSMPowerUnits&&) = delete;
            CPACSMPowerUnits& operator=(CPACSMPowerUnits&&) = delete;
            #else
            CPACSMPowerUnits(const CPACSMPowerUnits&);
            CPACSMPowerUnits& operator=(const CPACSMPowerUnits&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSMPowerUnits = generated::CPACSMPowerUnits;
    #else
    typedef generated::CPACSMPowerUnits CCPACSMPowerUnits;
    #endif
}
