// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSLeadingEdgeHollow.h"
#include "CPACSLeadingEdgeShape.h"
#include "CPACSContourReference.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSControlSurfaceOuterShapeLeadingEdge
        
        // generated from /xsd:schema/xsd:complexType[169]
        class CPACSControlSurfaceBorderLeadingEdge
        {
        public:
            TIGL_EXPORT CPACSControlSurfaceBorderLeadingEdge();
            TIGL_EXPORT virtual ~CPACSControlSurfaceBorderLeadingEdge();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetEtaLE() const;
            TIGL_EXPORT void SetEtaLE(const double& value);
            
            TIGL_EXPORT bool HasEtaTE() const;
            TIGL_EXPORT const double& GetEtaTE() const;
            TIGL_EXPORT void SetEtaTE(const double& value);
            
            TIGL_EXPORT bool HasXsiTE_choice1() const;
            TIGL_EXPORT const double& GetXsiTE_choice1() const;
            TIGL_EXPORT void SetXsiTE_choice1(const double& value);
            
            TIGL_EXPORT bool HasXsiTEUpper_choice2() const;
            TIGL_EXPORT const double& GetXsiTEUpper_choice2() const;
            TIGL_EXPORT void SetXsiTEUpper_choice2(const double& value);
            
            TIGL_EXPORT bool HasXsiTELower_choice2() const;
            TIGL_EXPORT const double& GetXsiTELower_choice2() const;
            TIGL_EXPORT void SetXsiTELower_choice2(const double& value);
            
            TIGL_EXPORT bool HasInnerShape_choice1() const;
            TIGL_EXPORT const CPACSLeadingEdgeHollow& GetInnerShape_choice1() const;
            TIGL_EXPORT CPACSLeadingEdgeHollow& GetInnerShape_choice1();
            
            TIGL_EXPORT bool HasLeadingEdgeShape_choice2() const;
            TIGL_EXPORT const CPACSLeadingEdgeShape& GetLeadingEdgeShape_choice2() const;
            TIGL_EXPORT CPACSLeadingEdgeShape& GetLeadingEdgeShape_choice2();
            
            TIGL_EXPORT bool HasAirfoil_choice3() const;
            TIGL_EXPORT const CPACSContourReference& GetAirfoil_choice3() const;
            TIGL_EXPORT CPACSContourReference& GetAirfoil_choice3();
            
        protected:
            double                                  m_etaLE;
            boost::optional<double>                 m_etaTE;
            boost::optional<double>                 m_xsiTE_choice1;
            boost::optional<double>                 m_xsiTEUpper_choice2;
            boost::optional<double>                 m_xsiTELower_choice2;
            boost::optional<CPACSLeadingEdgeHollow> m_innerShape_choice1;
            boost::optional<CPACSLeadingEdgeShape>  m_leadingEdgeShape_choice2;
            boost::optional<CPACSContourReference>  m_airfoil_choice3;
            
        private:
            #ifdef HAVE_CPP11
            CPACSControlSurfaceBorderLeadingEdge(const CPACSControlSurfaceBorderLeadingEdge&) = delete;
            CPACSControlSurfaceBorderLeadingEdge& operator=(const CPACSControlSurfaceBorderLeadingEdge&) = delete;
            
            CPACSControlSurfaceBorderLeadingEdge(CPACSControlSurfaceBorderLeadingEdge&&) = delete;
            CPACSControlSurfaceBorderLeadingEdge& operator=(CPACSControlSurfaceBorderLeadingEdge&&) = delete;
            #else
            CPACSControlSurfaceBorderLeadingEdge(const CPACSControlSurfaceBorderLeadingEdge&);
            CPACSControlSurfaceBorderLeadingEdge& operator=(const CPACSControlSurfaceBorderLeadingEdge&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSControlSurfaceBorderLeadingEdge = generated::CPACSControlSurfaceBorderLeadingEdge;
    #else
    typedef generated::CPACSControlSurfaceBorderLeadingEdge CCPACSControlSurfaceBorderLeadingEdge;
    #endif
}
