// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearComponentAssembly.h"
#include "CPACSPintleStruts.h"
#include "CPACSSideStruts.h"
#include "CPACSStrutAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSStrutAssembly::CPACSStrutAssembly(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_strutProperties(this, m_uidMgr)
        , m_mainStrutRelativePosition(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSLandingGearComponentAssembly);
    }

    CPACSStrutAssembly::CPACSStrutAssembly(CPACSPintleStruts* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_strutProperties(this, m_uidMgr)
        , m_mainStrutRelativePosition(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSPintleStruts);
    }

    CPACSStrutAssembly::CPACSStrutAssembly(CPACSSideStruts* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_strutProperties(this, m_uidMgr)
        , m_mainStrutRelativePosition(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSideStruts);
    }

    CPACSStrutAssembly::~CPACSStrutAssembly()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (m_actuatorUID && !m_actuatorUID->empty()) m_uidMgr->TryUnregisterReference(*m_actuatorUID, *this);
        }
    }

    const CTiglUIDObject* CPACSStrutAssembly::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSLandingGearComponentAssembly>()) {
                return GetParent<CPACSLandingGearComponentAssembly>()->GetNextUIDParent();
            }
            if (IsParent<CPACSPintleStruts>()) {
                return GetParent<CPACSPintleStruts>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSideStruts>()) {
                return GetParent<CPACSSideStruts>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSStrutAssembly::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSLandingGearComponentAssembly>()) {
                return GetParent<CPACSLandingGearComponentAssembly>()->GetNextUIDParent();
            }
            if (IsParent<CPACSPintleStruts>()) {
                return GetParent<CPACSPintleStruts>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSideStruts>()) {
                return GetParent<CPACSSideStruts>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSStrutAssembly::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSStrutAssembly::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSStrutAssembly::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element strutProperties
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/strutProperties")) {
            m_strutProperties.ReadCPACS(tixiHandle, xpath + "/strutProperties");
        }
        else {
            LOG(ERROR) << "Required element strutProperties is missing at xpath " << xpath;
        }

        // read element mainStrutRelativePosition
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mainStrutRelativePosition")) {
            m_mainStrutRelativePosition = tixi::TixiGetElement<double>(tixiHandle, xpath + "/mainStrutRelativePosition");
        }
        else {
            LOG(ERROR) << "Required element mainStrutRelativePosition is missing at xpath " << xpath;
        }

        // read element endPoint
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/endPoint")) {
            m_endPoint_choice1 = boost::in_place(this, m_uidMgr);
            try {
                m_endPoint_choice1->ReadCPACS(tixiHandle, xpath + "/endPoint");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read endPoint at xpath " << xpath << ": " << e.what();
                m_endPoint_choice1 = boost::none;
            }
        }

        // read element relEndPoint
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relEndPoint")) {
            m_relEndPoint_choice2 = boost::in_place(this, m_uidMgr);
            try {
                m_relEndPoint_choice2->ReadCPACS(tixiHandle, xpath + "/relEndPoint");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read relEndPoint at xpath " << xpath << ": " << e.what();
                m_relEndPoint_choice2 = boost::none;
            }
        }

        // read element relStrutEndPoint
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relStrutEndPoint")) {
            m_relStrutEndPoint_choice3 = boost::in_place(this, m_uidMgr);
            try {
                m_relStrutEndPoint_choice3->ReadCPACS(tixiHandle, xpath + "/relStrutEndPoint");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read relStrutEndPoint at xpath " << xpath << ": " << e.what();
                m_relStrutEndPoint_choice3 = boost::none;
            }
        }

        // read element attachment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/attachment")) {
            m_attachment = boost::in_place(this, m_uidMgr);
            try {
                m_attachment->ReadCPACS(tixiHandle, xpath + "/attachment");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read attachment at xpath " << xpath << ": " << e.what();
                m_attachment = boost::none;
            }
        }

        // read element actuatorUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/actuatorUID")) {
            m_actuatorUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/actuatorUID");
            if (m_actuatorUID->empty()) {
                LOG(WARNING) << "Optional element actuatorUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_actuatorUID->empty()) m_uidMgr->RegisterReference(*m_actuatorUID, *this);
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSStrutAssembly::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "strutProperties", "mainStrutRelativePosition", "endPoint", "relEndPoint", "relStrutEndPoint", "attachment", "actuatorUID" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element strutProperties
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/strutProperties", childElemOrder);
        m_strutProperties.WriteCPACS(tixiHandle, xpath + "/strutProperties");

        // write element mainStrutRelativePosition
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/mainStrutRelativePosition", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/mainStrutRelativePosition", m_mainStrutRelativePosition);

        // write element endPoint
        if (m_endPoint_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/endPoint", childElemOrder);
            m_endPoint_choice1->WriteCPACS(tixiHandle, xpath + "/endPoint");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/endPoint")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/endPoint");
            }
        }

        // write element relEndPoint
        if (m_relEndPoint_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/relEndPoint", childElemOrder);
            m_relEndPoint_choice2->WriteCPACS(tixiHandle, xpath + "/relEndPoint");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/relEndPoint")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/relEndPoint");
            }
        }

        // write element relStrutEndPoint
        if (m_relStrutEndPoint_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/relStrutEndPoint", childElemOrder);
            m_relStrutEndPoint_choice3->WriteCPACS(tixiHandle, xpath + "/relStrutEndPoint");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/relStrutEndPoint")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/relStrutEndPoint");
            }
        }

        // write element attachment
        if (m_attachment) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/attachment", childElemOrder);
            m_attachment->WriteCPACS(tixiHandle, xpath + "/attachment");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/attachment")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/attachment");
            }
        }

        // write element actuatorUID
        if (m_actuatorUID) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/actuatorUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/actuatorUID", *m_actuatorUID);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/actuatorUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/actuatorUID");
            }
        }

    }

    bool CPACSStrutAssembly::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_endPoint_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_relEndPoint_choice2.is_initialized()
                        ||
                        m_relStrutEndPoint_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_relEndPoint_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_endPoint_choice1.is_initialized()
                        ||
                        m_relStrutEndPoint_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_relStrutEndPoint_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_endPoint_choice1.is_initialized()
                        ||
                        m_relEndPoint_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSStrutAssembly::GetUID() const
    {
        return m_uID;
    }

    void CPACSStrutAssembly::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const CPACSStrutProperties& CPACSStrutAssembly::GetStrutProperties() const
    {
        return m_strutProperties;
    }

    CPACSStrutProperties& CPACSStrutAssembly::GetStrutProperties()
    {
        return m_strutProperties;
    }

    const double& CPACSStrutAssembly::GetMainStrutRelativePosition() const
    {
        return m_mainStrutRelativePosition;
    }

    void CPACSStrutAssembly::SetMainStrutRelativePosition(const double& value)
    {
        m_mainStrutRelativePosition = value;
    }

    const boost::optional<CCPACSPointAbsRel>& CPACSStrutAssembly::GetEndPoint_choice1() const
    {
        return m_endPoint_choice1;
    }

    boost::optional<CCPACSPointAbsRel>& CPACSStrutAssembly::GetEndPoint_choice1()
    {
        return m_endPoint_choice1;
    }

    const boost::optional<CPACSEtaXsiRelHeightPoint>& CPACSStrutAssembly::GetRelEndPoint_choice2() const
    {
        return m_relEndPoint_choice2;
    }

    boost::optional<CPACSEtaXsiRelHeightPoint>& CPACSStrutAssembly::GetRelEndPoint_choice2()
    {
        return m_relEndPoint_choice2;
    }

    const boost::optional<CPACSRelativeStrutPosition>& CPACSStrutAssembly::GetRelStrutEndPoint_choice3() const
    {
        return m_relStrutEndPoint_choice3;
    }

    boost::optional<CPACSRelativeStrutPosition>& CPACSStrutAssembly::GetRelStrutEndPoint_choice3()
    {
        return m_relStrutEndPoint_choice3;
    }

    const boost::optional<CPACSLandingGearStrutAttachment>& CPACSStrutAssembly::GetAttachment() const
    {
        return m_attachment;
    }

    boost::optional<CPACSLandingGearStrutAttachment>& CPACSStrutAssembly::GetAttachment()
    {
        return m_attachment;
    }

    const boost::optional<std::string>& CPACSStrutAssembly::GetActuatorUID() const
    {
        return m_actuatorUID;
    }

    void CPACSStrutAssembly::SetActuatorUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_actuatorUID && !m_actuatorUID->empty()) m_uidMgr->TryUnregisterReference(*m_actuatorUID, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_actuatorUID = value;
    }

    CCPACSPointAbsRel& CPACSStrutAssembly::GetEndPoint_choice1(CreateIfNotExistsTag)
    {
        if (!m_endPoint_choice1)
            m_endPoint_choice1 = boost::in_place(this, m_uidMgr);
        return *m_endPoint_choice1;
    }

    void CPACSStrutAssembly::RemoveEndPoint_choice1()
    {
        m_endPoint_choice1 = boost::none;
    }

    CPACSEtaXsiRelHeightPoint& CPACSStrutAssembly::GetRelEndPoint_choice2(CreateIfNotExistsTag)
    {
        if (!m_relEndPoint_choice2)
            m_relEndPoint_choice2 = boost::in_place(this, m_uidMgr);
        return *m_relEndPoint_choice2;
    }

    void CPACSStrutAssembly::RemoveRelEndPoint_choice2()
    {
        m_relEndPoint_choice2 = boost::none;
    }

    CPACSRelativeStrutPosition& CPACSStrutAssembly::GetRelStrutEndPoint_choice3(CreateIfNotExistsTag)
    {
        if (!m_relStrutEndPoint_choice3)
            m_relStrutEndPoint_choice3 = boost::in_place(this, m_uidMgr);
        return *m_relStrutEndPoint_choice3;
    }

    void CPACSStrutAssembly::RemoveRelStrutEndPoint_choice3()
    {
        m_relStrutEndPoint_choice3 = boost::none;
    }

    CPACSLandingGearStrutAttachment& CPACSStrutAssembly::GetAttachment(CreateIfNotExistsTag)
    {
        if (!m_attachment)
            m_attachment = boost::in_place(this, m_uidMgr);
        return *m_attachment;
    }

    void CPACSStrutAssembly::RemoveAttachment()
    {
        m_attachment = boost::none;
    }

    const CTiglUIDObject* CPACSStrutAssembly::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSStrutAssembly::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_actuatorUID && *m_actuatorUID == oldUid) {
            m_actuatorUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
