// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadReferenceAxisPoint.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadReferenceAxisPoint::CPACSLoadReferenceAxisPoint(){}
        CPACSLoadReferenceAxisPoint::~CPACSLoadReferenceAxisPoint() {}
        
        void CPACSLoadReferenceAxisPoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element x
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/x")) {
                m_x_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/x");
            }
            
            // read element y
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/y")) {
                m_y_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/y");
            }
            
            // read element z
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/z")) {
                m_z_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/z");
            }
            
            // read element eta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eta")) {
                m_eta_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/eta");
            }
            
            // read element xsi
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsi")) {
                m_xsi_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsi");
            }
            
        }
        
        void CPACSLoadReferenceAxisPoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element x
            if (m_x_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/x");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/x", *m_x_choice1);
            }
            
            // write element y
            if (m_y_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/y");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/y", *m_y_choice1);
            }
            
            // write element z
            if (m_z_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/z", *m_z_choice1);
            }
            
            // write element eta
            if (m_eta_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/eta", *m_eta_choice2);
            }
            
            // write element xsi
            if (m_xsi_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsi");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsi", *m_xsi_choice2);
            }
            
        }
        
        bool CPACSLoadReferenceAxisPoint::HasX_choice1() const
        {
            return static_cast<bool>(m_x_choice1);
        }
        
        const double& CPACSLoadReferenceAxisPoint::GetX_choice1() const
        {
            return *m_x_choice1;
        }
        
        void CPACSLoadReferenceAxisPoint::SetX_choice1(const double& value)
        {
            m_x_choice1 = value;
        }
        
        bool CPACSLoadReferenceAxisPoint::HasY_choice1() const
        {
            return static_cast<bool>(m_y_choice1);
        }
        
        const double& CPACSLoadReferenceAxisPoint::GetY_choice1() const
        {
            return *m_y_choice1;
        }
        
        void CPACSLoadReferenceAxisPoint::SetY_choice1(const double& value)
        {
            m_y_choice1 = value;
        }
        
        bool CPACSLoadReferenceAxisPoint::HasZ_choice1() const
        {
            return static_cast<bool>(m_z_choice1);
        }
        
        const double& CPACSLoadReferenceAxisPoint::GetZ_choice1() const
        {
            return *m_z_choice1;
        }
        
        void CPACSLoadReferenceAxisPoint::SetZ_choice1(const double& value)
        {
            m_z_choice1 = value;
        }
        
        bool CPACSLoadReferenceAxisPoint::HasEta_choice2() const
        {
            return static_cast<bool>(m_eta_choice2);
        }
        
        const double& CPACSLoadReferenceAxisPoint::GetEta_choice2() const
        {
            return *m_eta_choice2;
        }
        
        void CPACSLoadReferenceAxisPoint::SetEta_choice2(const double& value)
        {
            m_eta_choice2 = value;
        }
        
        bool CPACSLoadReferenceAxisPoint::HasXsi_choice2() const
        {
            return static_cast<bool>(m_xsi_choice2);
        }
        
        const double& CPACSLoadReferenceAxisPoint::GetXsi_choice2() const
        {
            return *m_xsi_choice2;
        }
        
        void CPACSLoadReferenceAxisPoint::SetXsi_choice2(const double& value)
        {
            m_xsi_choice2 = value;
        }
        
    }
}
