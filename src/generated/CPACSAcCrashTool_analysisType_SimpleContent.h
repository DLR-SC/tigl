// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSAcCrashTool_analysisType
        
        // generated from /xsd:schema/xsd:complexType[3]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:element[2]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSAcCrashTool_analysisType_SimpleContent
        #else
        enum CPACSAcCrashTool_analysisType_SimpleContent
        #endif
        {
            sectionModelling,
            sectionDrop,
            fuselageModelling,
            fuselageCrash
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSAcCrashTool_analysisType_SimpleContentToString(const CPACSAcCrashTool_analysisType_SimpleContent& value)
        {
            switch(value) {
            case CPACSAcCrashTool_analysisType_SimpleContent::sectionModelling: return "sectionModelling";
            case CPACSAcCrashTool_analysisType_SimpleContent::sectionDrop: return "sectionDrop";
            case CPACSAcCrashTool_analysisType_SimpleContent::fuselageModelling: return "fuselageModelling";
            case CPACSAcCrashTool_analysisType_SimpleContent::fuselageCrash: return "fuselageCrash";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSAcCrashTool_analysisType_SimpleContent");
            }
        }
        inline CPACSAcCrashTool_analysisType_SimpleContent stringToCPACSAcCrashTool_analysisType_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "sectionmodelling") { return CPACSAcCrashTool_analysisType_SimpleContent::sectionModelling; }
            if (toLower(value) == "sectiondrop") { return CPACSAcCrashTool_analysisType_SimpleContent::sectionDrop; }
            if (toLower(value) == "fuselagemodelling") { return CPACSAcCrashTool_analysisType_SimpleContent::fuselageModelling; }
            if (toLower(value) == "fuselagecrash") { return CPACSAcCrashTool_analysisType_SimpleContent::fuselageCrash; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSAcCrashTool_analysisType_SimpleContent");
        }
        #else
        inline std::string CPACSAcCrashTool_analysisType_SimpleContentToString(const CPACSAcCrashTool_analysisType_SimpleContent& value)
        {
            switch(value) {
            case sectionModelling: return "sectionModelling";
            case sectionDrop: return "sectionDrop";
            case fuselageModelling: return "fuselageModelling";
            case fuselageCrash: return "fuselageCrash";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSAcCrashTool_analysisType_SimpleContent");
            }
        }
        inline CPACSAcCrashTool_analysisType_SimpleContent stringToCPACSAcCrashTool_analysisType_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "sectionmodelling") { return sectionModelling; }
            if (toLower(value) == "sectiondrop") { return sectionDrop; }
            if (toLower(value) == "fuselagemodelling") { return fuselageModelling; }
            if (toLower(value) == "fuselagecrash") { return fuselageCrash; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSAcCrashTool_analysisType_SimpleContent");
        }
        #endif
    }
}
