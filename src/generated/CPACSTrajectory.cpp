// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTrajectory.h"

namespace tigl
{
    namespace generated
    {
        CPACSTrajectory::CPACSTrajectory(){}
        CPACSTrajectory::~CPACSTrajectory() {}
        
        void CPACSTrajectory::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element missionUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/missionUID")) {
                m_missionUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/missionUID");
            }
            else {
                LOG(ERROR) << "Required element missionUID is missing";
            }
            
            // read element global
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/global")) {
                m_global = boost::in_place();
                try {
                    m_global->ReadCPACS(tixiHandle, xpath + "/global");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read global at xpath << " << xpath << ": " << e.what();
                    m_global = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read global at xpath << " << xpath << ": " << e.getError();
                    m_global = boost::none;
                }
            }
            
            // read element flightPoints
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightPoints")) {
                m_flightPoints = boost::in_place();
                try {
                    m_flightPoints->ReadCPACS(tixiHandle, xpath + "/flightPoints");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightPoints at xpath << " << xpath << ": " << e.what();
                    m_flightPoints = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightPoints at xpath << " << xpath << ": " << e.getError();
                    m_flightPoints = boost::none;
                }
            }
            
        }
        
        void CPACSTrajectory::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element missionUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/missionUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/missionUID", m_missionUID);
            
            // write element global
            if (m_global) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/global");
                m_global->WriteCPACS(tixiHandle, xpath + "/global");
            }
            
            // write element flightPoints
            if (m_flightPoints) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightPoints");
                m_flightPoints->WriteCPACS(tixiHandle, xpath + "/flightPoints");
            }
            
        }
        
        const std::string& CPACSTrajectory::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSTrajectory::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSTrajectory::GetName() const
        {
            return m_name;
        }
        
        void CPACSTrajectory::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSTrajectory::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSTrajectory::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSTrajectory::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSTrajectory::GetMissionUID() const
        {
            return m_missionUID;
        }
        
        void CPACSTrajectory::SetMissionUID(const std::string& value)
        {
            m_missionUID = value;
        }
        
        bool CPACSTrajectory::HasGlobal() const
        {
            return static_cast<bool>(m_global);
        }
        
        const CPACSTrajectoryGlobal& CPACSTrajectory::GetGlobal() const
        {
            return *m_global;
        }
        
        CPACSTrajectoryGlobal& CPACSTrajectory::GetGlobal()
        {
            return *m_global;
        }
        
        bool CPACSTrajectory::HasFlightPoints() const
        {
            return static_cast<bool>(m_flightPoints);
        }
        
        const CPACSFlightPoint& CPACSTrajectory::GetFlightPoints() const
        {
            return *m_flightPoints;
        }
        
        CPACSFlightPoint& CPACSTrajectory::GetFlightPoints()
        {
            return *m_flightPoints;
        }
        
    }
}
