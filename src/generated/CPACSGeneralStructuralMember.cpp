// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSGeneralStructuralMemberPosition.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGeneralStructuralMember.h"

namespace tigl
{
    namespace generated
    {
        CPACSGeneralStructuralMember::CPACSGeneralStructuralMember(){}
        CPACSGeneralStructuralMember::~CPACSGeneralStructuralMember() {}
        
        void CPACSGeneralStructuralMember::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element standardMemberPosition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/standardMemberPosition")) {
                m_standardMemberPosition = boost::in_place();
                try {
                    m_standardMemberPosition->ReadCPACS(tixiHandle, xpath + "/standardMemberPosition");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read standardMemberPosition at xpath << " << xpath << ": " << e.what();
                    m_standardMemberPosition = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read standardMemberPosition at xpath << " << xpath << ": " << e.getError();
                    m_standardMemberPosition = boost::none;
                }
            }
            
            // read element structuralMemberPosition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralMemberPosition")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralMemberPosition", m_structuralMemberPosition);
            }
            
        }
        
        void CPACSGeneralStructuralMember::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element standardMemberPosition
            if (m_standardMemberPosition) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/standardMemberPosition");
                m_standardMemberPosition->WriteCPACS(tixiHandle, xpath + "/standardMemberPosition");
            }
            
            // write element structuralMemberPosition
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralMemberPosition", m_structuralMemberPosition);
            
        }
        
        bool CPACSGeneralStructuralMember::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSGeneralStructuralMember::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSGeneralStructuralMember::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSGeneralStructuralMember::HasStandardMemberPosition() const
        {
            return static_cast<bool>(m_standardMemberPosition);
        }
        
        const CPACSGeneralStructuralMemberPosition& CPACSGeneralStructuralMember::GetStandardMemberPosition() const
        {
            return *m_standardMemberPosition;
        }
        
        CPACSGeneralStructuralMemberPosition& CPACSGeneralStructuralMember::GetStandardMemberPosition()
        {
            return *m_standardMemberPosition;
        }
        
        const std::vector<unique_ptr<CPACSGeneralStructuralMemberPosition>>& CPACSGeneralStructuralMember::GetStructuralMemberPosition() const
        {
            return m_structuralMemberPosition;
        }
        
        std::vector<unique_ptr<CPACSGeneralStructuralMemberPosition>>& CPACSGeneralStructuralMember::GetStructuralMemberPosition()
        {
            return m_structuralMemberPosition;
        }
        
    }
}
