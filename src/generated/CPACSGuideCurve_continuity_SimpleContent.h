// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSGuideCurve_continuity
        
        // generated from /xsd:schema/xsd:complexType[421]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:choice[1]/xsd:sequence[1]/xsd:element[2]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSGuideCurve_continuity_SimpleContent
        #else
        enum CPACSGuideCurve_continuity_SimpleContent
        #endif
        {
            C0,
            C1_from_previous,
            C2_from_previous,
            C1_to_previous,
            C2_to_previous
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSGuideCurve_continuity_SimpleContentToString(const CPACSGuideCurve_continuity_SimpleContent& value)
        {
            switch(value) {
            case CPACSGuideCurve_continuity_SimpleContent::C0: return "C0";
            case CPACSGuideCurve_continuity_SimpleContent::C1_from_previous: return "C1 from previous";
            case CPACSGuideCurve_continuity_SimpleContent::C2_from_previous: return "C2 from previous";
            case CPACSGuideCurve_continuity_SimpleContent::C1_to_previous: return "C1 to previous";
            case CPACSGuideCurve_continuity_SimpleContent::C2_to_previous: return "C2 to previous";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSGuideCurve_continuity_SimpleContent");
            }
        }
        inline CPACSGuideCurve_continuity_SimpleContent stringToCPACSGuideCurve_continuity_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "c0") { return CPACSGuideCurve_continuity_SimpleContent::C0; }
            if (toLower(value) == "c1 from previous") { return CPACSGuideCurve_continuity_SimpleContent::C1_from_previous; }
            if (toLower(value) == "c2 from previous") { return CPACSGuideCurve_continuity_SimpleContent::C2_from_previous; }
            if (toLower(value) == "c1 to previous") { return CPACSGuideCurve_continuity_SimpleContent::C1_to_previous; }
            if (toLower(value) == "c2 to previous") { return CPACSGuideCurve_continuity_SimpleContent::C2_to_previous; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSGuideCurve_continuity_SimpleContent");
        }
        #else
        inline std::string CPACSGuideCurve_continuity_SimpleContentToString(const CPACSGuideCurve_continuity_SimpleContent& value)
        {
            switch(value) {
            case C0: return "C0";
            case C1_from_previous: return "C1 from previous";
            case C2_from_previous: return "C2 from previous";
            case C1_to_previous: return "C1 to previous";
            case C2_to_previous: return "C2 to previous";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSGuideCurve_continuity_SimpleContent");
            }
        }
        inline CPACSGuideCurve_continuity_SimpleContent stringToCPACSGuideCurve_continuity_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "c0") { return C0; }
            if (toLower(value) == "c1 from previous") { return C1_from_previous; }
            if (toLower(value) == "c2 from previous") { return C2_from_previous; }
            if (toLower(value) == "c1 to previous") { return C1_to_previous; }
            if (toLower(value) == "c2 to previous") { return C2_to_previous; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSGuideCurve_continuity_SimpleContent");
        }
        #endif
    }
}
