// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightPoint.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightPoint::CPACSFlightPoint(){}
        CPACSFlightPoint::~CPACSFlightPoint() {}
        
        void CPACSFlightPoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element index
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/index")) {
                m_index.ReadCPACS(tixiHandle, xpath + "/index");
            }
            else {
                LOG(ERROR) << "Required element index is missing";
            }
            
            // read element segmentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/segmentUID")) {
                m_segmentUID.ReadCPACS(tixiHandle, xpath + "/segmentUID");
            }
            else {
                LOG(ERROR) << "Required element segmentUID is missing";
            }
            
            // read element flightTime
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightTime")) {
                m_flightTime = boost::in_place();
                try {
                    m_flightTime->ReadCPACS(tixiHandle, xpath + "/flightTime");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightTime at xpath << " << xpath << ": " << e.what();
                    m_flightTime = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightTime at xpath << " << xpath << ": " << e.getError();
                    m_flightTime = boost::none;
                }
            }
            
            // read element flightDistance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightDistance")) {
                m_flightDistance = boost::in_place();
                try {
                    m_flightDistance->ReadCPACS(tixiHandle, xpath + "/flightDistance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightDistance at xpath << " << xpath << ": " << e.what();
                    m_flightDistance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightDistance at xpath << " << xpath << ": " << e.getError();
                    m_flightDistance = boost::none;
                }
            }
            
            // read element groundDistance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/groundDistance")) {
                m_groundDistance = boost::in_place();
                try {
                    m_groundDistance->ReadCPACS(tixiHandle, xpath + "/groundDistance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read groundDistance at xpath << " << xpath << ": " << e.what();
                    m_groundDistance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read groundDistance at xpath << " << xpath << ": " << e.getError();
                    m_groundDistance = boost::none;
                }
            }
            
            // read element staticPressure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/staticPressure")) {
                m_staticPressure = boost::in_place();
                try {
                    m_staticPressure->ReadCPACS(tixiHandle, xpath + "/staticPressure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read staticPressure at xpath << " << xpath << ": " << e.what();
                    m_staticPressure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read staticPressure at xpath << " << xpath << ": " << e.getError();
                    m_staticPressure = boost::none;
                }
            }
            
            // read element tAS
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tAS")) {
                m_tAS = boost::in_place();
                try {
                    m_tAS->ReadCPACS(tixiHandle, xpath + "/tAS");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read tAS at xpath << " << xpath << ": " << e.what();
                    m_tAS = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read tAS at xpath << " << xpath << ": " << e.getError();
                    m_tAS = boost::none;
                }
            }
            
            // read element cAS
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cAS")) {
                m_cAS = boost::in_place();
                try {
                    m_cAS->ReadCPACS(tixiHandle, xpath + "/cAS");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cAS at xpath << " << xpath << ": " << e.what();
                    m_cAS = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cAS at xpath << " << xpath << ": " << e.getError();
                    m_cAS = boost::none;
                }
            }
            
            // read element angleOfAttack
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
                m_angleOfAttack = boost::in_place();
                try {
                    m_angleOfAttack->ReadCPACS(tixiHandle, xpath + "/angleOfAttack");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read angleOfAttack at xpath << " << xpath << ": " << e.what();
                    m_angleOfAttack = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read angleOfAttack at xpath << " << xpath << ": " << e.getError();
                    m_angleOfAttack = boost::none;
                }
            }
            
            // read element angleOfYaw
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfYaw")) {
                m_angleOfYaw = boost::in_place();
                try {
                    m_angleOfYaw->ReadCPACS(tixiHandle, xpath + "/angleOfYaw");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read angleOfYaw at xpath << " << xpath << ": " << e.what();
                    m_angleOfYaw = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read angleOfYaw at xpath << " << xpath << ": " << e.getError();
                    m_angleOfYaw = boost::none;
                }
            }
            
            // read element angleOfRoll
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfRoll")) {
                m_angleOfRoll = boost::in_place();
                try {
                    m_angleOfRoll->ReadCPACS(tixiHandle, xpath + "/angleOfRoll");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read angleOfRoll at xpath << " << xpath << ": " << e.what();
                    m_angleOfRoll = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read angleOfRoll at xpath << " << xpath << ": " << e.getError();
                    m_angleOfRoll = boost::none;
                }
            }
            
            // read element mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                m_mass = boost::in_place();
                try {
                    m_mass->ReadCPACS(tixiHandle, xpath + "/mass");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mass at xpath << " << xpath << ": " << e.what();
                    m_mass = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mass at xpath << " << xpath << ": " << e.getError();
                    m_mass = boost::none;
                }
            }
            
            // read element fuelFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuelFlow")) {
                m_fuelFlow = boost::in_place();
                try {
                    m_fuelFlow->ReadCPACS(tixiHandle, xpath + "/fuelFlow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuelFlow at xpath << " << xpath << ": " << e.what();
                    m_fuelFlow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuelFlow at xpath << " << xpath << ": " << e.getError();
                    m_fuelFlow = boost::none;
                }
            }
            
            // read element cOFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cOFlow")) {
                m_cOFlow = boost::in_place();
                try {
                    m_cOFlow->ReadCPACS(tixiHandle, xpath + "/cOFlow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cOFlow at xpath << " << xpath << ": " << e.what();
                    m_cOFlow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cOFlow at xpath << " << xpath << ": " << e.getError();
                    m_cOFlow = boost::none;
                }
            }
            
            // read element cO2Flow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cO2Flow")) {
                m_cO2Flow = boost::in_place();
                try {
                    m_cO2Flow->ReadCPACS(tixiHandle, xpath + "/cO2Flow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cO2Flow at xpath << " << xpath << ": " << e.what();
                    m_cO2Flow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cO2Flow at xpath << " << xpath << ": " << e.getError();
                    m_cO2Flow = boost::none;
                }
            }
            
            // read element nOXFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nOXFlow")) {
                m_nOXFlow = boost::in_place();
                try {
                    m_nOXFlow->ReadCPACS(tixiHandle, xpath + "/nOXFlow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read nOXFlow at xpath << " << xpath << ": " << e.what();
                    m_nOXFlow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read nOXFlow at xpath << " << xpath << ": " << e.getError();
                    m_nOXFlow = boost::none;
                }
            }
            
            // read element sootFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sootFlow")) {
                m_sootFlow = boost::in_place();
                try {
                    m_sootFlow->ReadCPACS(tixiHandle, xpath + "/sootFlow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read sootFlow at xpath << " << xpath << ": " << e.what();
                    m_sootFlow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read sootFlow at xpath << " << xpath << ": " << e.getError();
                    m_sootFlow = boost::none;
                }
            }
            
            // read element hCFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hCFlow")) {
                m_hCFlow = boost::in_place();
                try {
                    m_hCFlow->ReadCPACS(tixiHandle, xpath + "/hCFlow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read hCFlow at xpath << " << xpath << ": " << e.what();
                    m_hCFlow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read hCFlow at xpath << " << xpath << ": " << e.getError();
                    m_hCFlow = boost::none;
                }
            }
            
            // read element sO2Flow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sO2Flow")) {
                m_sO2Flow = boost::in_place();
                try {
                    m_sO2Flow->ReadCPACS(tixiHandle, xpath + "/sO2Flow");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read sO2Flow at xpath << " << xpath << ": " << e.what();
                    m_sO2Flow = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read sO2Flow at xpath << " << xpath << ": " << e.getError();
                    m_sO2Flow = boost::none;
                }
            }
            
            // read element gearDeflections
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/gearDeflections")) {
                m_gearDeflections = boost::in_place();
                try {
                    m_gearDeflections->ReadCPACS(tixiHandle, xpath + "/gearDeflections");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read gearDeflections at xpath << " << xpath << ": " << e.what();
                    m_gearDeflections = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read gearDeflections at xpath << " << xpath << ": " << e.getError();
                    m_gearDeflections = boost::none;
                }
            }
            
            // read element controlSurfaceDeflections
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaceDeflections")) {
                m_controlSurfaceDeflections = boost::in_place();
                try {
                    m_controlSurfaceDeflections->ReadCPACS(tixiHandle, xpath + "/controlSurfaceDeflections");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfaceDeflections at xpath << " << xpath << ": " << e.what();
                    m_controlSurfaceDeflections = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfaceDeflections at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfaceDeflections = boost::none;
                }
            }
            
            // read element thrust
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thrust")) {
                m_thrust_choice1 = boost::in_place();
                try {
                    m_thrust_choice1->ReadCPACS(tixiHandle, xpath + "/thrust");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read thrust at xpath << " << xpath << ": " << e.what();
                    m_thrust_choice1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read thrust at xpath << " << xpath << ": " << e.getError();
                    m_thrust_choice1 = boost::none;
                }
            }
            
            // read element n1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/n1")) {
                m_n1_choice2 = boost::in_place();
                try {
                    m_n1_choice2->ReadCPACS(tixiHandle, xpath + "/n1");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read n1 at xpath << " << xpath << ": " << e.what();
                    m_n1_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read n1 at xpath << " << xpath << ": " << e.getError();
                    m_n1_choice2 = boost::none;
                }
            }
            
            // read element refLocation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/refLocation")) {
                m_refLocation_choice1 = boost::in_place();
                try {
                    m_refLocation_choice1->ReadCPACS(tixiHandle, xpath + "/refLocation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read refLocation at xpath << " << xpath << ": " << e.what();
                    m_refLocation_choice1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read refLocation at xpath << " << xpath << ": " << e.getError();
                    m_refLocation_choice1 = boost::none;
                }
            }
            
            // read element currentLocation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/currentLocation")) {
                m_currentLocation_choice1 = boost::in_place();
                try {
                    m_currentLocation_choice1->ReadCPACS(tixiHandle, xpath + "/currentLocation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read currentLocation at xpath << " << xpath << ": " << e.what();
                    m_currentLocation_choice1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read currentLocation at xpath << " << xpath << ": " << e.getError();
                    m_currentLocation_choice1 = boost::none;
                }
            }
            
            // read element latitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/latitude")) {
                m_latitude_choice2 = boost::in_place();
                try {
                    m_latitude_choice2->ReadCPACS(tixiHandle, xpath + "/latitude");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read latitude at xpath << " << xpath << ": " << e.what();
                    m_latitude_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read latitude at xpath << " << xpath << ": " << e.getError();
                    m_latitude_choice2 = boost::none;
                }
            }
            
            // read element longitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/longitude")) {
                m_longitude_choice2 = boost::in_place();
                try {
                    m_longitude_choice2->ReadCPACS(tixiHandle, xpath + "/longitude");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read longitude at xpath << " << xpath << ": " << e.what();
                    m_longitude_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read longitude at xpath << " << xpath << ": " << e.getError();
                    m_longitude_choice2 = boost::none;
                }
            }
            
            // read element altitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
                m_altitude_choice2 = boost::in_place();
                try {
                    m_altitude_choice2->ReadCPACS(tixiHandle, xpath + "/altitude");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read altitude at xpath << " << xpath << ": " << e.what();
                    m_altitude_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read altitude at xpath << " << xpath << ": " << e.getError();
                    m_altitude_choice2 = boost::none;
                }
            }
            
        }
        
        void CPACSFlightPoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element index
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/index");
            m_index.WriteCPACS(tixiHandle, xpath + "/index");
            
            // write element segmentUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segmentUID");
            m_segmentUID.WriteCPACS(tixiHandle, xpath + "/segmentUID");
            
            // write element flightTime
            if (m_flightTime) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightTime");
                m_flightTime->WriteCPACS(tixiHandle, xpath + "/flightTime");
            }
            
            // write element flightDistance
            if (m_flightDistance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightDistance");
                m_flightDistance->WriteCPACS(tixiHandle, xpath + "/flightDistance");
            }
            
            // write element groundDistance
            if (m_groundDistance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/groundDistance");
                m_groundDistance->WriteCPACS(tixiHandle, xpath + "/groundDistance");
            }
            
            // write element staticPressure
            if (m_staticPressure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/staticPressure");
                m_staticPressure->WriteCPACS(tixiHandle, xpath + "/staticPressure");
            }
            
            // write element tAS
            if (m_tAS) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tAS");
                m_tAS->WriteCPACS(tixiHandle, xpath + "/tAS");
            }
            
            // write element cAS
            if (m_cAS) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cAS");
                m_cAS->WriteCPACS(tixiHandle, xpath + "/cAS");
            }
            
            // write element angleOfAttack
            if (m_angleOfAttack) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfAttack");
                m_angleOfAttack->WriteCPACS(tixiHandle, xpath + "/angleOfAttack");
            }
            
            // write element angleOfYaw
            if (m_angleOfYaw) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfYaw");
                m_angleOfYaw->WriteCPACS(tixiHandle, xpath + "/angleOfYaw");
            }
            
            // write element angleOfRoll
            if (m_angleOfRoll) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfRoll");
                m_angleOfRoll->WriteCPACS(tixiHandle, xpath + "/angleOfRoll");
            }
            
            // write element mass
            if (m_mass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
                m_mass->WriteCPACS(tixiHandle, xpath + "/mass");
            }
            
            // write element fuelFlow
            if (m_fuelFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuelFlow");
                m_fuelFlow->WriteCPACS(tixiHandle, xpath + "/fuelFlow");
            }
            
            // write element cOFlow
            if (m_cOFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cOFlow");
                m_cOFlow->WriteCPACS(tixiHandle, xpath + "/cOFlow");
            }
            
            // write element cO2Flow
            if (m_cO2Flow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cO2Flow");
                m_cO2Flow->WriteCPACS(tixiHandle, xpath + "/cO2Flow");
            }
            
            // write element nOXFlow
            if (m_nOXFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nOXFlow");
                m_nOXFlow->WriteCPACS(tixiHandle, xpath + "/nOXFlow");
            }
            
            // write element sootFlow
            if (m_sootFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sootFlow");
                m_sootFlow->WriteCPACS(tixiHandle, xpath + "/sootFlow");
            }
            
            // write element hCFlow
            if (m_hCFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hCFlow");
                m_hCFlow->WriteCPACS(tixiHandle, xpath + "/hCFlow");
            }
            
            // write element sO2Flow
            if (m_sO2Flow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sO2Flow");
                m_sO2Flow->WriteCPACS(tixiHandle, xpath + "/sO2Flow");
            }
            
            // write element gearDeflections
            if (m_gearDeflections) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gearDeflections");
                m_gearDeflections->WriteCPACS(tixiHandle, xpath + "/gearDeflections");
            }
            
            // write element controlSurfaceDeflections
            if (m_controlSurfaceDeflections) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaceDeflections");
                m_controlSurfaceDeflections->WriteCPACS(tixiHandle, xpath + "/controlSurfaceDeflections");
            }
            
            // write element thrust
            if (m_thrust_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thrust");
                m_thrust_choice1->WriteCPACS(tixiHandle, xpath + "/thrust");
            }
            
            // write element n1
            if (m_n1_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/n1");
                m_n1_choice2->WriteCPACS(tixiHandle, xpath + "/n1");
            }
            
            // write element refLocation
            if (m_refLocation_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/refLocation");
                m_refLocation_choice1->WriteCPACS(tixiHandle, xpath + "/refLocation");
            }
            
            // write element currentLocation
            if (m_currentLocation_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/currentLocation");
                m_currentLocation_choice1->WriteCPACS(tixiHandle, xpath + "/currentLocation");
            }
            
            // write element latitude
            if (m_latitude_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/latitude");
                m_latitude_choice2->WriteCPACS(tixiHandle, xpath + "/latitude");
            }
            
            // write element longitude
            if (m_longitude_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/longitude");
                m_longitude_choice2->WriteCPACS(tixiHandle, xpath + "/longitude");
            }
            
            // write element altitude
            if (m_altitude_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/altitude");
                m_altitude_choice2->WriteCPACS(tixiHandle, xpath + "/altitude");
            }
            
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetIndex() const
        {
            return m_index;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetIndex()
        {
            return m_index;
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetSegmentUID() const
        {
            return m_segmentUID;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetSegmentUID()
        {
            return m_segmentUID;
        }
        
        bool CPACSFlightPoint::HasFlightTime() const
        {
            return static_cast<bool>(m_flightTime);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetFlightTime() const
        {
            return *m_flightTime;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetFlightTime()
        {
            return *m_flightTime;
        }
        
        bool CPACSFlightPoint::HasFlightDistance() const
        {
            return static_cast<bool>(m_flightDistance);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetFlightDistance() const
        {
            return *m_flightDistance;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetFlightDistance()
        {
            return *m_flightDistance;
        }
        
        bool CPACSFlightPoint::HasGroundDistance() const
        {
            return static_cast<bool>(m_groundDistance);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetGroundDistance() const
        {
            return *m_groundDistance;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetGroundDistance()
        {
            return *m_groundDistance;
        }
        
        bool CPACSFlightPoint::HasStaticPressure() const
        {
            return static_cast<bool>(m_staticPressure);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetStaticPressure() const
        {
            return *m_staticPressure;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetStaticPressure()
        {
            return *m_staticPressure;
        }
        
        bool CPACSFlightPoint::HasTAS() const
        {
            return static_cast<bool>(m_tAS);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetTAS() const
        {
            return *m_tAS;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetTAS()
        {
            return *m_tAS;
        }
        
        bool CPACSFlightPoint::HasCAS() const
        {
            return static_cast<bool>(m_cAS);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetCAS() const
        {
            return *m_cAS;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetCAS()
        {
            return *m_cAS;
        }
        
        bool CPACSFlightPoint::HasAngleOfAttack() const
        {
            return static_cast<bool>(m_angleOfAttack);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetAngleOfAttack() const
        {
            return *m_angleOfAttack;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetAngleOfAttack()
        {
            return *m_angleOfAttack;
        }
        
        bool CPACSFlightPoint::HasAngleOfYaw() const
        {
            return static_cast<bool>(m_angleOfYaw);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetAngleOfYaw() const
        {
            return *m_angleOfYaw;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetAngleOfYaw()
        {
            return *m_angleOfYaw;
        }
        
        bool CPACSFlightPoint::HasAngleOfRoll() const
        {
            return static_cast<bool>(m_angleOfRoll);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetAngleOfRoll() const
        {
            return *m_angleOfRoll;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetAngleOfRoll()
        {
            return *m_angleOfRoll;
        }
        
        bool CPACSFlightPoint::HasMass() const
        {
            return static_cast<bool>(m_mass);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetMass() const
        {
            return *m_mass;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetMass()
        {
            return *m_mass;
        }
        
        bool CPACSFlightPoint::HasFuelFlow() const
        {
            return static_cast<bool>(m_fuelFlow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetFuelFlow() const
        {
            return *m_fuelFlow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetFuelFlow()
        {
            return *m_fuelFlow;
        }
        
        bool CPACSFlightPoint::HasCOFlow() const
        {
            return static_cast<bool>(m_cOFlow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetCOFlow() const
        {
            return *m_cOFlow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetCOFlow()
        {
            return *m_cOFlow;
        }
        
        bool CPACSFlightPoint::HasCO2Flow() const
        {
            return static_cast<bool>(m_cO2Flow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetCO2Flow() const
        {
            return *m_cO2Flow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetCO2Flow()
        {
            return *m_cO2Flow;
        }
        
        bool CPACSFlightPoint::HasNOXFlow() const
        {
            return static_cast<bool>(m_nOXFlow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetNOXFlow() const
        {
            return *m_nOXFlow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetNOXFlow()
        {
            return *m_nOXFlow;
        }
        
        bool CPACSFlightPoint::HasSootFlow() const
        {
            return static_cast<bool>(m_sootFlow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetSootFlow() const
        {
            return *m_sootFlow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetSootFlow()
        {
            return *m_sootFlow;
        }
        
        bool CPACSFlightPoint::HasHCFlow() const
        {
            return static_cast<bool>(m_hCFlow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetHCFlow() const
        {
            return *m_hCFlow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetHCFlow()
        {
            return *m_hCFlow;
        }
        
        bool CPACSFlightPoint::HasSO2Flow() const
        {
            return static_cast<bool>(m_sO2Flow);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetSO2Flow() const
        {
            return *m_sO2Flow;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetSO2Flow()
        {
            return *m_sO2Flow;
        }
        
        bool CPACSFlightPoint::HasGearDeflections() const
        {
            return static_cast<bool>(m_gearDeflections);
        }
        
        const CPACSGearDeflectionVectors& CPACSFlightPoint::GetGearDeflections() const
        {
            return *m_gearDeflections;
        }
        
        CPACSGearDeflectionVectors& CPACSFlightPoint::GetGearDeflections()
        {
            return *m_gearDeflections;
        }
        
        bool CPACSFlightPoint::HasControlSurfaceDeflections() const
        {
            return static_cast<bool>(m_controlSurfaceDeflections);
        }
        
        const CPACSControlSurfaceDeflectionVectors& CPACSFlightPoint::GetControlSurfaceDeflections() const
        {
            return *m_controlSurfaceDeflections;
        }
        
        CPACSControlSurfaceDeflectionVectors& CPACSFlightPoint::GetControlSurfaceDeflections()
        {
            return *m_controlSurfaceDeflections;
        }
        
        bool CPACSFlightPoint::HasThrust_choice1() const
        {
            return static_cast<bool>(m_thrust_choice1);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetThrust_choice1() const
        {
            return *m_thrust_choice1;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetThrust_choice1()
        {
            return *m_thrust_choice1;
        }
        
        bool CPACSFlightPoint::HasN1_choice2() const
        {
            return static_cast<bool>(m_n1_choice2);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetN1_choice2() const
        {
            return *m_n1_choice2;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetN1_choice2()
        {
            return *m_n1_choice2;
        }
        
        bool CPACSFlightPoint::HasRefLocation_choice1() const
        {
            return static_cast<bool>(m_refLocation_choice1);
        }
        
        const CCPACSPointListXYZ& CPACSFlightPoint::GetRefLocation_choice1() const
        {
            return *m_refLocation_choice1;
        }
        
        CCPACSPointListXYZ& CPACSFlightPoint::GetRefLocation_choice1()
        {
            return *m_refLocation_choice1;
        }
        
        bool CPACSFlightPoint::HasCurrentLocation_choice1() const
        {
            return static_cast<bool>(m_currentLocation_choice1);
        }
        
        const CCPACSPointListXYZ& CPACSFlightPoint::GetCurrentLocation_choice1() const
        {
            return *m_currentLocation_choice1;
        }
        
        CCPACSPointListXYZ& CPACSFlightPoint::GetCurrentLocation_choice1()
        {
            return *m_currentLocation_choice1;
        }
        
        bool CPACSFlightPoint::HasLatitude_choice2() const
        {
            return static_cast<bool>(m_latitude_choice2);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetLatitude_choice2() const
        {
            return *m_latitude_choice2;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetLatitude_choice2()
        {
            return *m_latitude_choice2;
        }
        
        bool CPACSFlightPoint::HasLongitude_choice2() const
        {
            return static_cast<bool>(m_longitude_choice2);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetLongitude_choice2() const
        {
            return *m_longitude_choice2;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetLongitude_choice2()
        {
            return *m_longitude_choice2;
        }
        
        bool CPACSFlightPoint::HasAltitude_choice2() const
        {
            return static_cast<bool>(m_altitude_choice2);
        }
        
        const CCPACSStringVector& CPACSFlightPoint::GetAltitude_choice2() const
        {
            return *m_altitude_choice2;
        }
        
        CCPACSStringVector& CPACSFlightPoint::GetAltitude_choice2()
        {
            return *m_altitude_choice2;
        }
        
    }
}
