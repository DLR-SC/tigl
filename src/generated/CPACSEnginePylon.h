// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSTransformation.h>
#include <CCPACSWingSections.h>
#include <CCPACSWingSegments.h>
#include <CCPACSPositionings.h>
#include "CPACSPylonStructure.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSEnginePylons
        
        // generated from /xsd:schema/xsd:complexType[305]
        class CPACSEnginePylon
        {
        public:
            TIGL_EXPORT CPACSEnginePylon();
            TIGL_EXPORT virtual ~CPACSEnginePylon();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const std::string& GetParentUID() const;
            TIGL_EXPORT void SetParentUID(const std::string& value);
            
            TIGL_EXPORT const CCPACSTransformation& GetTransformation() const;
            TIGL_EXPORT CCPACSTransformation& GetTransformation();
            
            TIGL_EXPORT bool HasSections() const;
            TIGL_EXPORT const CCPACSWingSections& GetSections() const;
            TIGL_EXPORT CCPACSWingSections& GetSections();
            
            TIGL_EXPORT bool HasSegments() const;
            TIGL_EXPORT const CCPACSWingSegments& GetSegments() const;
            TIGL_EXPORT CCPACSWingSegments& GetSegments();
            
            TIGL_EXPORT bool HasPositionings() const;
            TIGL_EXPORT const CCPACSPositionings& GetPositionings() const;
            TIGL_EXPORT CCPACSPositionings& GetPositionings();
            
            TIGL_EXPORT bool HasLoadCarryingStructure() const;
            TIGL_EXPORT const CPACSPylonStructure& GetLoadCarryingStructure() const;
            TIGL_EXPORT CPACSPylonStructure& GetLoadCarryingStructure();
            
        protected:
            std::string                          m_uID;
            boost::optional<std::string>         m_name;
            boost::optional<std::string>         m_description;
            std::string                          m_parentUID;
            CCPACSTransformation                 m_transformation;
            boost::optional<CCPACSWingSections>  m_sections;
            boost::optional<CCPACSWingSegments>  m_segments;
            boost::optional<CCPACSPositionings>  m_positionings;
            boost::optional<CPACSPylonStructure> m_loadCarryingStructure;
            
        private:
            #ifdef HAVE_CPP11
            CPACSEnginePylon(const CPACSEnginePylon&) = delete;
            CPACSEnginePylon& operator=(const CPACSEnginePylon&) = delete;
            
            CPACSEnginePylon(CPACSEnginePylon&&) = delete;
            CPACSEnginePylon& operator=(CPACSEnginePylon&&) = delete;
            #else
            CPACSEnginePylon(const CPACSEnginePylon&);
            CPACSEnginePylon& operator=(const CPACSEnginePylon&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSEnginePylon = generated::CPACSEnginePylon;
    #else
    typedef generated::CPACSEnginePylon CCPACSEnginePylon;
    #endif
}
