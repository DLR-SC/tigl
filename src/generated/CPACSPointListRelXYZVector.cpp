// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSGuideCurveProfile.h"
#include "CPACSPointListRelXYZVector.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPointListRelXYZVector::CPACSPointListRelXYZVector(CCPACSGuideCurveProfile* parent)
        : m_rX(reinterpret_cast<CCPACSPointListRelXYZVector*>(this))
        , m_rY(reinterpret_cast<CCPACSPointListRelXYZVector*>(this))
        , m_rZ(reinterpret_cast<CCPACSPointListRelXYZVector*>(this))
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPointListRelXYZVector::~CPACSPointListRelXYZVector()
    {
    }

    const CCPACSGuideCurveProfile* CPACSPointListRelXYZVector::GetParent() const
    {
        return m_parent;
    }

    CCPACSGuideCurveProfile* CPACSPointListRelXYZVector::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPointListRelXYZVector::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSPointListRelXYZVector::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSPointListRelXYZVector::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element rX
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rX")) {
            m_rX.ReadCPACS(tixiHandle, xpath + "/rX");
        }
        else {
            LOG(ERROR) << "Required element rX is missing at xpath " << xpath;
        }

        // read element rY
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rY")) {
            m_rY.ReadCPACS(tixiHandle, xpath + "/rY");
        }
        else {
            LOG(ERROR) << "Required element rY is missing at xpath " << xpath;
        }

        // read element rZ
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rZ")) {
            m_rZ.ReadCPACS(tixiHandle, xpath + "/rZ");
        }
        else {
            LOG(ERROR) << "Required element rZ is missing at xpath " << xpath;
        }

    }

    void CPACSPointListRelXYZVector::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "rX", "rY", "rZ" };

        // write element rX
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/rX", childElemOrder);
        m_rX.WriteCPACS(tixiHandle, xpath + "/rX");

        // write element rY
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/rY", childElemOrder);
        m_rY.WriteCPACS(tixiHandle, xpath + "/rY");

        // write element rZ
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/rZ", childElemOrder);
        m_rZ.WriteCPACS(tixiHandle, xpath + "/rZ");

    }

    const CCPACSStringVector& CPACSPointListRelXYZVector::GetRX() const
    {
        return m_rX;
    }

    CCPACSStringVector& CPACSPointListRelXYZVector::GetRX()
    {
        return m_rX;
    }

    const CCPACSStringVector& CPACSPointListRelXYZVector::GetRY() const
    {
        return m_rY;
    }

    CCPACSStringVector& CPACSPointListRelXYZVector::GetRY()
    {
        return m_rY;
    }

    const CCPACSStringVector& CPACSPointListRelXYZVector::GetRZ() const
    {
        return m_rZ;
    }

    CCPACSStringVector& CPACSPointListRelXYZVector::GetRZ()
    {
        return m_rZ;
    }

} // namespace generated
} // namespace tigl
