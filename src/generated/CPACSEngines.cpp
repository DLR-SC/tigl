// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSEngine.h"
#include "CPACSEngines.h"
#include "CPACSVehicles.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSEngines::CPACSEngines(CPACSVehicles* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSEngines::~CPACSEngines()
    {
    }

    const CPACSVehicles* CPACSEngines::GetParent() const
    {
        return m_parent;
    }

    CPACSVehicles* CPACSEngines::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSEngines::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSEngines::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSEngines::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSEngines::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSEngines::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element engine
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/engine")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/engine", m_engines, 1, tixi::xsdUnbounded, reinterpret_cast<CCPACSEngines*>(this), m_uidMgr);
        }

    }

    void CPACSEngines::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element engine
        tixi::TixiSaveElements(tixiHandle, xpath + "/engine", m_engines);

    }

    const std::vector<std::unique_ptr<CPACSEngine>>& CPACSEngines::GetEngines() const
    {
        return m_engines;
    }

    std::vector<std::unique_ptr<CPACSEngine>>& CPACSEngines::GetEngines()
    {
        return m_engines;
    }

    CPACSEngine& CPACSEngines::AddEngine()
    {
        m_engines.push_back(make_unique<CPACSEngine>(reinterpret_cast<CCPACSEngines*>(this), m_uidMgr));
        return *m_engines.back();
    }

    void CPACSEngines::RemoveEngine(CPACSEngine& ref)
    {
        for (std::size_t i = 0; i < m_engines.size(); i++) {
            if (m_engines[i].get() == &ref) {
                m_engines.erase(m_engines.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
