// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGearInterfacePressureFloor.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGearInterfacePressureFloor::CPACSLandingGearInterfacePressureFloor(){}
        CPACSLandingGearInterfacePressureFloor::~CPACSLandingGearInterfacePressureFloor() {}
        
        void CPACSLandingGearInterfacePressureFloor::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element positionZStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionZStringerUID")) {
                m_positionZStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionZStringerUID");
            }
            else {
                LOG(ERROR) << "Required element positionZStringerUID is missing";
            }
            
            // read element membraneRadius
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/membraneRadius")) {
                m_membraneRadius = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/membraneRadius");
            }
            else {
                LOG(ERROR) << "Required element membraneRadius is missing";
            }
            
            // read element sheetElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
                m_sheetElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            }
            else {
                LOG(ERROR) << "Required element sheetElementUID is missing";
            }
            
            // read element reinforcementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reinforcementElementUID")) {
                m_reinforcementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/reinforcementElementUID");
            }
            else {
                LOG(ERROR) << "Required element reinforcementElementUID is missing";
            }
            
        }
        
        void CPACSLandingGearInterfacePressureFloor::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element positionZStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionZStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionZStringerUID", m_positionZStringerUID);
            
            // write element membraneRadius
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/membraneRadius");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/membraneRadius", m_membraneRadius);
            
            // write element sheetElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);
            
            // write element reinforcementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reinforcementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/reinforcementElementUID", m_reinforcementElementUID);
            
        }
        
        bool CPACSLandingGearInterfacePressureFloor::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSLandingGearInterfacePressureFloor::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSLandingGearInterfacePressureFloor::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSLandingGearInterfacePressureFloor::GetPositionZStringerUID() const
        {
            return m_positionZStringerUID;
        }
        
        void CPACSLandingGearInterfacePressureFloor::SetPositionZStringerUID(const std::string& value)
        {
            m_positionZStringerUID = value;
        }
        
        const double& CPACSLandingGearInterfacePressureFloor::GetMembraneRadius() const
        {
            return m_membraneRadius;
        }
        
        void CPACSLandingGearInterfacePressureFloor::SetMembraneRadius(const double& value)
        {
            m_membraneRadius = value;
        }
        
        const std::string& CPACSLandingGearInterfacePressureFloor::GetSheetElementUID() const
        {
            return m_sheetElementUID;
        }
        
        void CPACSLandingGearInterfacePressureFloor::SetSheetElementUID(const std::string& value)
        {
            m_sheetElementUID = value;
        }
        
        const std::string& CPACSLandingGearInterfacePressureFloor::GetReinforcementElementUID() const
        {
            return m_reinforcementElementUID;
        }
        
        void CPACSLandingGearInterfacePressureFloor::SetReinforcementElementUID(const std::string& value)
        {
            m_reinforcementElementUID = value;
        }
        
    }
}
