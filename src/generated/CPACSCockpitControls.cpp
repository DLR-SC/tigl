// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSCockpitControl.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCockpitControls.h"

namespace tigl
{
    namespace generated
    {
        CPACSCockpitControls::CPACSCockpitControls(){}
        CPACSCockpitControls::~CPACSCockpitControls() {}
        
        void CPACSCockpitControls::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element stickPitch
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/stickPitch")) {
                m_stickPitch.ReadCPACS(tixiHandle, xpath + "/stickPitch");
            }
            else {
                LOG(ERROR) << "Required element stickPitch is missing";
            }
            
            // read element stickRoll
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/stickRoll")) {
                m_stickRoll.ReadCPACS(tixiHandle, xpath + "/stickRoll");
            }
            else {
                LOG(ERROR) << "Required element stickRoll is missing";
            }
            
            // read element pedals
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pedals")) {
                m_pedals.ReadCPACS(tixiHandle, xpath + "/pedals");
            }
            else {
                LOG(ERROR) << "Required element pedals is missing";
            }
            
            // read element cockpitControl
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cockpitControl")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/cockpitControl", m_cockpitControl);
            }
            
        }
        
        void CPACSCockpitControls::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element stickPitch
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stickPitch");
            m_stickPitch.WriteCPACS(tixiHandle, xpath + "/stickPitch");
            
            // write element stickRoll
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stickRoll");
            m_stickRoll.WriteCPACS(tixiHandle, xpath + "/stickRoll");
            
            // write element pedals
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pedals");
            m_pedals.WriteCPACS(tixiHandle, xpath + "/pedals");
            
            // write element cockpitControl
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/cockpitControl", m_cockpitControl);
            
        }
        
        const CPACSCockpitControl& CPACSCockpitControls::GetStickPitch() const
        {
            return m_stickPitch;
        }
        
        CPACSCockpitControl& CPACSCockpitControls::GetStickPitch()
        {
            return m_stickPitch;
        }
        
        const CPACSCockpitControl& CPACSCockpitControls::GetStickRoll() const
        {
            return m_stickRoll;
        }
        
        CPACSCockpitControl& CPACSCockpitControls::GetStickRoll()
        {
            return m_stickRoll;
        }
        
        const CPACSCockpitControl& CPACSCockpitControls::GetPedals() const
        {
            return m_pedals;
        }
        
        CPACSCockpitControl& CPACSCockpitControls::GetPedals()
        {
            return m_pedals;
        }
        
        const std::vector<unique_ptr<CPACSCockpitControl>>& CPACSCockpitControls::GetCockpitControl() const
        {
            return m_cockpitControl;
        }
        
        std::vector<unique_ptr<CPACSCockpitControl>>& CPACSCockpitControls::GetCockpitControl()
        {
            return m_cockpitControl;
        }
        
    }
}
