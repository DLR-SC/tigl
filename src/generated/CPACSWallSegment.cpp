// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSWallSegment.h"
#include "CPACSWallSegments.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSWallSegment::CPACSWallSegment(CPACSWallSegments* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_phi(0.0)
        , m_wallPositionUIDs(reinterpret_cast<CCPACSFuselageWallSegment*>(this))
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSWallSegment::~CPACSWallSegment()
    {
        if (m_uidMgr && m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
    }

    const CPACSWallSegments* CPACSWallSegment::GetParent() const
    {
        return m_parent;
    }

    CPACSWallSegments* CPACSWallSegment::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSWallSegment::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSWallSegment::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSWallSegment::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSWallSegment::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSWallSegment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID->empty()) {
                LOG(WARNING) << "Optional attribute uID is present but empty at xpath " << xpath;
            }
        }

        // read element phi
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/phi")) {
            m_phi = tixi::TixiGetElement<double>(tixiHandle, xpath + "/phi");
        }
        else {
            LOG(ERROR) << "Required element phi is missing at xpath " << xpath;
        }

        // read element negativeExtrusion
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/negativeExtrusion")) {
            m_negativeExtrusion = tixi::TixiGetElement<bool>(tixiHandle, xpath + "/negativeExtrusion");
        }

        // read element flushConnectionStart
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/flushConnectionStart")) {
            m_flushConnectionStart = tixi::TixiGetElement<bool>(tixiHandle, xpath + "/flushConnectionStart");
        }

        // read element flushConnectionEnd
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/flushConnectionEnd")) {
            m_flushConnectionEnd = tixi::TixiGetElement<bool>(tixiHandle, xpath + "/flushConnectionEnd");
        }

        // read element boundingElementUIDs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/boundingElementUIDs")) {
            m_boundingElementUIDs = boost::in_place(reinterpret_cast<CCPACSFuselageWallSegment*>(this));
            try {
                m_boundingElementUIDs->ReadCPACS(tixiHandle, xpath + "/boundingElementUIDs");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read boundingElementUIDs at xpath " << xpath << ": " << e.what();
                m_boundingElementUIDs = boost::none;
            }
        }

        // read element structuralWallElementUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralWallElementUID")) {
            m_structuralWallElementUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralWallElementUID");
            if (m_structuralWallElementUID->empty()) {
                LOG(WARNING) << "Optional element structuralWallElementUID is present but empty at xpath " << xpath;
            }
        }

        // read element wallPositionUIDs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/wallPositionUIDs")) {
            m_wallPositionUIDs.ReadCPACS(tixiHandle, xpath + "/wallPositionUIDs");
        }
        else {
            LOG(ERROR) << "Required element wallPositionUIDs is missing at xpath " << xpath;
        }

        if (m_uidMgr && m_uID) m_uidMgr->RegisterObject(*m_uID, *this);
    }

    void CPACSWallSegment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        if (m_uID) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "uID");
            }
        }

        // write element phi
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phi");
        tixi::TixiSaveElement(tixiHandle, xpath + "/phi", m_phi);

        // write element negativeExtrusion
        if (m_negativeExtrusion) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/negativeExtrusion");
            tixi::TixiSaveElement(tixiHandle, xpath + "/negativeExtrusion", *m_negativeExtrusion);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/negativeExtrusion")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/negativeExtrusion");
            }
        }

        // write element flushConnectionStart
        if (m_flushConnectionStart) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flushConnectionStart");
            tixi::TixiSaveElement(tixiHandle, xpath + "/flushConnectionStart", *m_flushConnectionStart);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/flushConnectionStart")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/flushConnectionStart");
            }
        }

        // write element flushConnectionEnd
        if (m_flushConnectionEnd) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flushConnectionEnd");
            tixi::TixiSaveElement(tixiHandle, xpath + "/flushConnectionEnd", *m_flushConnectionEnd);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/flushConnectionEnd")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/flushConnectionEnd");
            }
        }

        // write element boundingElementUIDs
        if (m_boundingElementUIDs) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/boundingElementUIDs");
            m_boundingElementUIDs->WriteCPACS(tixiHandle, xpath + "/boundingElementUIDs");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/boundingElementUIDs")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/boundingElementUIDs");
            }
        }

        // write element structuralWallElementUID
        if (m_structuralWallElementUID) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralWallElementUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/structuralWallElementUID", *m_structuralWallElementUID);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralWallElementUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralWallElementUID");
            }
        }

        // write element wallPositionUIDs
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wallPositionUIDs");
        m_wallPositionUIDs.WriteCPACS(tixiHandle, xpath + "/wallPositionUIDs");

    }

    const boost::optional<std::string>& CPACSWallSegment::GetUID() const
    {
        return m_uID;
    }

    void CPACSWallSegment::SetUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (!m_uID && value) {
                m_uidMgr->RegisterObject(*value, *this);
            }
            else if (m_uID && !value) {
                m_uidMgr->TryUnregisterObject(*m_uID);
            }
            else if (m_uID && value) {
                m_uidMgr->UpdateObjectUID(*m_uID, *value);
            }
        }
        m_uID = value;
    }

    const double& CPACSWallSegment::GetPhi() const
    {
        return m_phi;
    }

    void CPACSWallSegment::SetPhi(const double& value)
    {
        m_phi = value;
    }

    const boost::optional<bool>& CPACSWallSegment::GetNegativeExtrusion() const
    {
        return m_negativeExtrusion;
    }

    void CPACSWallSegment::SetNegativeExtrusion(const boost::optional<bool>& value)
    {
        m_negativeExtrusion = value;
    }

    const boost::optional<bool>& CPACSWallSegment::GetFlushConnectionStart() const
    {
        return m_flushConnectionStart;
    }

    void CPACSWallSegment::SetFlushConnectionStart(const boost::optional<bool>& value)
    {
        m_flushConnectionStart = value;
    }

    const boost::optional<bool>& CPACSWallSegment::GetFlushConnectionEnd() const
    {
        return m_flushConnectionEnd;
    }

    void CPACSWallSegment::SetFlushConnectionEnd(const boost::optional<bool>& value)
    {
        m_flushConnectionEnd = value;
    }

    const boost::optional<CPACSBoundingElementUIDs>& CPACSWallSegment::GetBoundingElementUIDs() const
    {
        return m_boundingElementUIDs;
    }

    boost::optional<CPACSBoundingElementUIDs>& CPACSWallSegment::GetBoundingElementUIDs()
    {
        return m_boundingElementUIDs;
    }

    const boost::optional<std::string>& CPACSWallSegment::GetStructuralWallElementUID() const
    {
        return m_structuralWallElementUID;
    }

    void CPACSWallSegment::SetStructuralWallElementUID(const boost::optional<std::string>& value)
    {
        m_structuralWallElementUID = value;
    }

    const CPACSWallPositionUIDs& CPACSWallSegment::GetWallPositionUIDs() const
    {
        return m_wallPositionUIDs;
    }

    CPACSWallPositionUIDs& CPACSWallSegment::GetWallPositionUIDs()
    {
        return m_wallPositionUIDs;
    }

    CPACSBoundingElementUIDs& CPACSWallSegment::GetBoundingElementUIDs(CreateIfNotExistsTag)
    {
        if (!m_boundingElementUIDs)
            m_boundingElementUIDs = boost::in_place(reinterpret_cast<CCPACSFuselageWallSegment*>(this));
        return *m_boundingElementUIDs;
    }

    void CPACSWallSegment::RemoveBoundingElementUIDs()
    {
        m_boundingElementUIDs = boost::none;
    }

} // namespace generated
} // namespace tigl
