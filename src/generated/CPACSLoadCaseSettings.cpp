// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseSettings.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseSettings::CPACSLoadCaseSettings(){}
        CPACSLoadCaseSettings::~CPACSLoadCaseSettings() {}
        
        void CPACSLoadCaseSettings::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element controlSurfaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaces")) {
                m_controlSurfaces = boost::in_place();
                try {
                    m_controlSurfaces->ReadCPACS(tixiHandle, xpath + "/controlSurfaces");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.what();
                    m_controlSurfaces = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfaces = boost::none;
                }
            }
            
            // read element controlInputs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlInputs")) {
                m_controlInputs = boost::in_place();
                try {
                    m_controlInputs->ReadCPACS(tixiHandle, xpath + "/controlInputs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlInputs at xpath << " << xpath << ": " << e.what();
                    m_controlInputs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlInputs at xpath << " << xpath << ": " << e.getError();
                    m_controlInputs = boost::none;
                }
            }
            
            // read element landingGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGears")) {
                m_landingGears = boost::in_place();
                try {
                    m_landingGears->ReadCPACS(tixiHandle, xpath + "/landingGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGears at xpath << " << xpath << ": " << e.what();
                    m_landingGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGears at xpath << " << xpath << ": " << e.getError();
                    m_landingGears = boost::none;
                }
            }
            
            // read element engines
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/engines")) {
                m_engines = boost::in_place();
                try {
                    m_engines->ReadCPACS(tixiHandle, xpath + "/engines");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read engines at xpath << " << xpath << ": " << e.what();
                    m_engines = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read engines at xpath << " << xpath << ": " << e.getError();
                    m_engines = boost::none;
                }
            }
            
            // read element cabinPressure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cabinPressure")) {
                m_cabinPressure = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cabinPressure");
            }
            
        }
        
        void CPACSLoadCaseSettings::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element controlSurfaces
            if (m_controlSurfaces) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaces");
                m_controlSurfaces->WriteCPACS(tixiHandle, xpath + "/controlSurfaces");
            }
            
            // write element controlInputs
            if (m_controlInputs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlInputs");
                m_controlInputs->WriteCPACS(tixiHandle, xpath + "/controlInputs");
            }
            
            // write element landingGears
            if (m_landingGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGears");
                m_landingGears->WriteCPACS(tixiHandle, xpath + "/landingGears");
            }
            
            // write element engines
            if (m_engines) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/engines");
                m_engines->WriteCPACS(tixiHandle, xpath + "/engines");
            }
            
            // write element cabinPressure
            if (m_cabinPressure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cabinPressure");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cabinPressure", *m_cabinPressure);
            }
            
        }
        
        bool CPACSLoadCaseSettings::HasControlSurfaces() const
        {
            return static_cast<bool>(m_controlSurfaces);
        }
        
        const CPACSControlSurfaceDeflections& CPACSLoadCaseSettings::GetControlSurfaces() const
        {
            return *m_controlSurfaces;
        }
        
        CPACSControlSurfaceDeflections& CPACSLoadCaseSettings::GetControlSurfaces()
        {
            return *m_controlSurfaces;
        }
        
        bool CPACSLoadCaseSettings::HasControlInputs() const
        {
            return static_cast<bool>(m_controlInputs);
        }
        
        const CPACSControlInputs& CPACSLoadCaseSettings::GetControlInputs() const
        {
            return *m_controlInputs;
        }
        
        CPACSControlInputs& CPACSLoadCaseSettings::GetControlInputs()
        {
            return *m_controlInputs;
        }
        
        bool CPACSLoadCaseSettings::HasLandingGears() const
        {
            return static_cast<bool>(m_landingGears);
        }
        
        const CPACSLoadCaseLandingGears& CPACSLoadCaseSettings::GetLandingGears() const
        {
            return *m_landingGears;
        }
        
        CPACSLoadCaseLandingGears& CPACSLoadCaseSettings::GetLandingGears()
        {
            return *m_landingGears;
        }
        
        bool CPACSLoadCaseSettings::HasEngines() const
        {
            return static_cast<bool>(m_engines);
        }
        
        const CPACSLoadCaseEngines& CPACSLoadCaseSettings::GetEngines() const
        {
            return *m_engines;
        }
        
        CPACSLoadCaseEngines& CPACSLoadCaseSettings::GetEngines()
        {
            return *m_engines;
        }
        
        bool CPACSLoadCaseSettings::HasCabinPressure() const
        {
            return static_cast<bool>(m_cabinPressure);
        }
        
        const double& CPACSLoadCaseSettings::GetCabinPressure() const
        {
            return *m_cabinPressure;
        }
        
        void CPACSLoadCaseSettings::SetCabinPressure(const double& value)
        {
            m_cabinPressure = value;
        }
        
    }
}
