// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSBatteries.h"
#include "CPACSElectricMotors.h"
#include "CPACSGasTurbines.h"
#include "CPACSGearBoxes.h"
#include "CPACSGenerators.h"
#include "CPACSGenericComponents.h"
#include "CPACSHeatExchangers.h"
#include "CPACSTurboGenerators.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSVehicles;

    // This class is used in:
    // CPACSVehicles

    /// @brief System elements
    /// 
    /// 
    class CPACSSystemElements
    {
    public:
        TIGL_EXPORT CPACSSystemElements(CPACSVehicles* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSSystemElements();

        TIGL_EXPORT CPACSVehicles* GetParent();

        TIGL_EXPORT const CPACSVehicles* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<CPACSElectricMotors>& GetElectricMotors() const;
        TIGL_EXPORT virtual boost::optional<CPACSElectricMotors>& GetElectricMotors();

        TIGL_EXPORT virtual const boost::optional<CPACSTurboGenerators>& GetTurboGenerators() const;
        TIGL_EXPORT virtual boost::optional<CPACSTurboGenerators>& GetTurboGenerators();

        TIGL_EXPORT virtual const boost::optional<CPACSHeatExchangers>& GetHeatExchangers() const;
        TIGL_EXPORT virtual boost::optional<CPACSHeatExchangers>& GetHeatExchangers();

        TIGL_EXPORT virtual const boost::optional<CPACSBatteries>& GetBatteries() const;
        TIGL_EXPORT virtual boost::optional<CPACSBatteries>& GetBatteries();

        TIGL_EXPORT virtual const boost::optional<CPACSGasTurbines>& GetGasTurbines() const;
        TIGL_EXPORT virtual boost::optional<CPACSGasTurbines>& GetGasTurbines();

        TIGL_EXPORT virtual const boost::optional<CPACSGearBoxes>& GetGearBoxes() const;
        TIGL_EXPORT virtual boost::optional<CPACSGearBoxes>& GetGearBoxes();

        TIGL_EXPORT virtual const boost::optional<CPACSGenerators>& GetGenerators() const;
        TIGL_EXPORT virtual boost::optional<CPACSGenerators>& GetGenerators();

        TIGL_EXPORT virtual const boost::optional<CPACSGenericComponents>& GetGenericComponents() const;
        TIGL_EXPORT virtual boost::optional<CPACSGenericComponents>& GetGenericComponents();

        TIGL_EXPORT virtual CPACSElectricMotors& GetElectricMotors(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveElectricMotors();

        TIGL_EXPORT virtual CPACSTurboGenerators& GetTurboGenerators(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveTurboGenerators();

        TIGL_EXPORT virtual CPACSHeatExchangers& GetHeatExchangers(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveHeatExchangers();

        TIGL_EXPORT virtual CPACSBatteries& GetBatteries(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveBatteries();

        TIGL_EXPORT virtual CPACSGasTurbines& GetGasTurbines(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveGasTurbines();

        TIGL_EXPORT virtual CPACSGearBoxes& GetGearBoxes(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveGearBoxes();

        TIGL_EXPORT virtual CPACSGenerators& GetGenerators(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveGenerators();

        TIGL_EXPORT virtual CPACSGenericComponents& GetGenericComponents(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveGenericComponents();

    protected:
        CPACSVehicles* m_parent;

        CTiglUIDManager* m_uidMgr;

        boost::optional<CPACSElectricMotors>    m_electricMotors;
        boost::optional<CPACSTurboGenerators>   m_turboGenerators;
        boost::optional<CPACSHeatExchangers>    m_heatExchangers;
        boost::optional<CPACSBatteries>         m_batteries;
        boost::optional<CPACSGasTurbines>       m_gasTurbines;
        boost::optional<CPACSGearBoxes>         m_gearBoxes;
        boost::optional<CPACSGenerators>        m_generators;
        boost::optional<CPACSGenericComponents> m_genericComponents;

    private:
        CPACSSystemElements(const CPACSSystemElements&) = delete;
        CPACSSystemElements& operator=(const CPACSSystemElements&) = delete;

        CPACSSystemElements(CPACSSystemElements&&) = delete;
        CPACSSystemElements& operator=(CPACSSystemElements&&) = delete;
    };
} // namespace generated

// CPACSSystemElements is customized, use type CCPACSSystemElements directly

// Aliases in tigl namespace
using CCPACSVehicles = generated::CPACSVehicles;
} // namespace tigl
