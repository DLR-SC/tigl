// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSRotorcraftGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSRotorcraftGlobal::CPACSRotorcraftGlobal(){}
        CPACSRotorcraftGlobal::~CPACSRotorcraftGlobal() {}
        
        void CPACSRotorcraftGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element paxSeats
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxSeats")) {
                m_paxSeats = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/paxSeats");
            }
            
            // read element cargoCapacity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cargoCapacity")) {
                m_cargoCapacity = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cargoCapacity");
            }
            
            // read element machCruise
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/machCruise")) {
                m_machCruise = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/machCruise");
            }
            
            // read element configuration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/configuration")) {
                m_configuration = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/configuration");
            }
            
        }
        
        void CPACSRotorcraftGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element paxSeats
            if (m_paxSeats) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxSeats");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/paxSeats", *m_paxSeats);
            }
            
            // write element cargoCapacity
            if (m_cargoCapacity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoCapacity");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cargoCapacity", *m_cargoCapacity);
            }
            
            // write element machCruise
            if (m_machCruise) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/machCruise");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/machCruise", *m_machCruise);
            }
            
            // write element configuration
            if (m_configuration) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/configuration");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/configuration", *m_configuration);
            }
            
        }
        
        bool CPACSRotorcraftGlobal::HasPaxSeats() const
        {
            return static_cast<bool>(m_paxSeats);
        }
        
        const int& CPACSRotorcraftGlobal::GetPaxSeats() const
        {
            return *m_paxSeats;
        }
        
        void CPACSRotorcraftGlobal::SetPaxSeats(const int& value)
        {
            m_paxSeats = value;
        }
        
        bool CPACSRotorcraftGlobal::HasCargoCapacity() const
        {
            return static_cast<bool>(m_cargoCapacity);
        }
        
        const double& CPACSRotorcraftGlobal::GetCargoCapacity() const
        {
            return *m_cargoCapacity;
        }
        
        void CPACSRotorcraftGlobal::SetCargoCapacity(const double& value)
        {
            m_cargoCapacity = value;
        }
        
        bool CPACSRotorcraftGlobal::HasMachCruise() const
        {
            return static_cast<bool>(m_machCruise);
        }
        
        const double& CPACSRotorcraftGlobal::GetMachCruise() const
        {
            return *m_machCruise;
        }
        
        void CPACSRotorcraftGlobal::SetMachCruise(const double& value)
        {
            m_machCruise = value;
        }
        
        bool CPACSRotorcraftGlobal::HasConfiguration() const
        {
            return static_cast<bool>(m_configuration);
        }
        
        const std::string& CPACSRotorcraftGlobal::GetConfiguration() const
        {
            return *m_configuration;
        }
        
        void CPACSRotorcraftGlobal::SetConfiguration(const std::string& value)
        {
            m_configuration = value;
        }
        
    }
}
