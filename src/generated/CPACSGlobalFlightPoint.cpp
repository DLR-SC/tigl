// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSFlightPoints.h"
#include "CPACSGlobalFlightPoint.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSGlobalFlightPoint::CPACSGlobalFlightPoint(CPACSFlightPoints* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_altitude(0)
        , m_environment(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSGlobalFlightPoint::~CPACSGlobalFlightPoint()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSFlightPoints* CPACSGlobalFlightPoint::GetParent() const
    {
        return m_parent;
    }

    CPACSFlightPoints* CPACSGlobalFlightPoint::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSGlobalFlightPoint::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSGlobalFlightPoint::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSGlobalFlightPoint::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSGlobalFlightPoint::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSGlobalFlightPoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element altitude
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
            m_altitude = tixi::TixiGetElement<double>(tixiHandle, xpath + "/altitude");
        }
        else {
            LOG(ERROR) << "Required element altitude is missing at xpath " << xpath;
        }

        // read element machNumber
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
            m_machNumber_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/machNumber");
        }

        // read element calibratedAirSpeed
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/calibratedAirSpeed")) {
            m_calibratedAirSpeed_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/calibratedAirSpeed");
        }

        // read element trueAirSpeed
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/trueAirSpeed")) {
            m_trueAirSpeed_choice3 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/trueAirSpeed");
        }

        // read element environment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/environment")) {
            m_environment.ReadCPACS(tixiHandle, xpath + "/environment");
        }
        else {
            LOG(ERROR) << "Required element environment is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSGlobalFlightPoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "altitude", "machNumber", "calibratedAirSpeed", "trueAirSpeed", "environment" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element altitude
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/altitude", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/altitude", m_altitude);

        // write element machNumber
        if (m_machNumber_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/machNumber", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/machNumber", *m_machNumber_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/machNumber");
            }
        }

        // write element calibratedAirSpeed
        if (m_calibratedAirSpeed_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/calibratedAirSpeed", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/calibratedAirSpeed", *m_calibratedAirSpeed_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/calibratedAirSpeed")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/calibratedAirSpeed");
            }
        }

        // write element trueAirSpeed
        if (m_trueAirSpeed_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/trueAirSpeed", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/trueAirSpeed", *m_trueAirSpeed_choice3);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/trueAirSpeed")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/trueAirSpeed");
            }
        }

        // write element environment
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/environment", childElemOrder);
        m_environment.WriteCPACS(tixiHandle, xpath + "/environment");

    }

    bool CPACSGlobalFlightPoint::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_machNumber_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_calibratedAirSpeed_choice2.is_initialized()
                        ||
                        m_trueAirSpeed_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_calibratedAirSpeed_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_machNumber_choice1.is_initialized()
                        ||
                        m_trueAirSpeed_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_trueAirSpeed_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_machNumber_choice1.is_initialized()
                        ||
                        m_calibratedAirSpeed_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSGlobalFlightPoint::GetUID() const
    {
        return m_uID;
    }

    void CPACSGlobalFlightPoint::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSGlobalFlightPoint::GetName() const
    {
        return m_name;
    }

    void CPACSGlobalFlightPoint::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSGlobalFlightPoint::GetDescription() const
    {
        return m_description;
    }

    void CPACSGlobalFlightPoint::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const double& CPACSGlobalFlightPoint::GetAltitude() const
    {
        return m_altitude;
    }

    void CPACSGlobalFlightPoint::SetAltitude(const double& value)
    {
        m_altitude = value;
    }

    const boost::optional<double>& CPACSGlobalFlightPoint::GetMachNumber_choice1() const
    {
        return m_machNumber_choice1;
    }

    void CPACSGlobalFlightPoint::SetMachNumber_choice1(const boost::optional<double>& value)
    {
        m_machNumber_choice1 = value;
    }

    const boost::optional<double>& CPACSGlobalFlightPoint::GetCalibratedAirSpeed_choice2() const
    {
        return m_calibratedAirSpeed_choice2;
    }

    void CPACSGlobalFlightPoint::SetCalibratedAirSpeed_choice2(const boost::optional<double>& value)
    {
        m_calibratedAirSpeed_choice2 = value;
    }

    const boost::optional<double>& CPACSGlobalFlightPoint::GetTrueAirSpeed_choice3() const
    {
        return m_trueAirSpeed_choice3;
    }

    void CPACSGlobalFlightPoint::SetTrueAirSpeed_choice3(const boost::optional<double>& value)
    {
        m_trueAirSpeed_choice3 = value;
    }

    const CPACSEnvironment& CPACSGlobalFlightPoint::GetEnvironment() const
    {
        return m_environment;
    }

    CPACSEnvironment& CPACSGlobalFlightPoint::GetEnvironment()
    {
        return m_environment;
    }

} // namespace generated
} // namespace tigl
