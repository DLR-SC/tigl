// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include "tigl_internal.h"
#include <CCPACSPoint.h>

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAircraftModel
        // CPACSAirfoilAeroPerformance
        // CPACSFuselageAeroPerformance
        // CPACSGlobalAeroPerformance
        // CPACSRotorcraftModel
        // CPACSWingAeroPerformance
        
        // generated from /xsd:schema/xsd:complexType[727]
        class CPACSReference
        {
        public:
            TIGL_EXPORT CPACSReference();
            TIGL_EXPORT virtual ~CPACSReference();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetArea() const;
            TIGL_EXPORT void SetArea(const double& value);
            
            TIGL_EXPORT const double& GetLength() const;
            TIGL_EXPORT void SetLength(const double& value);
            
            TIGL_EXPORT const CCPACSPoint& GetPoint() const;
            TIGL_EXPORT CCPACSPoint& GetPoint();
            
        protected:
            double      m_area;
            double      m_length;
            CCPACSPoint m_point;
            
        private:
            #ifdef HAVE_CPP11
            CPACSReference(const CPACSReference&) = delete;
            CPACSReference& operator=(const CPACSReference&) = delete;
            
            CPACSReference(CPACSReference&&) = delete;
            CPACSReference& operator=(CPACSReference&&) = delete;
            #else
            CPACSReference(const CPACSReference&);
            CPACSReference& operator=(const CPACSReference&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSReference = generated::CPACSReference;
    #else
    typedef generated::CPACSReference CCPACSReference;
    #endif
}
