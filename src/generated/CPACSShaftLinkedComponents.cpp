// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSShaftLinkedComponents.h"

namespace tigl
{
    namespace generated
    {
        CPACSShaftLinkedComponents::CPACSShaftLinkedComponents(){}
        CPACSShaftLinkedComponents::~CPACSShaftLinkedComponents() {}
        
        void CPACSShaftLinkedComponents::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element engineUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/engineUID")) {
                m_engineUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/engineUID");
            }
            
            // read element transmissionShaftInputUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transmissionShaftInputUID")) {
                m_transmissionShaftInputUID_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/transmissionShaftInputUID");
            }
            
            // read element transmissionShaftOutputUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transmissionShaftOutputUID")) {
                m_transmissionShaftOutputUID_choice3 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/transmissionShaftOutputUID");
            }
            
            // read element rotorUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotorUID")) {
                m_rotorUID_choice4 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/rotorUID");
            }
            
        }
        
        void CPACSShaftLinkedComponents::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element engineUID
            if (m_engineUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/engineUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/engineUID", *m_engineUID_choice1);
            }
            
            // write element transmissionShaftInputUID
            if (m_transmissionShaftInputUID_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transmissionShaftInputUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/transmissionShaftInputUID", *m_transmissionShaftInputUID_choice2);
            }
            
            // write element transmissionShaftOutputUID
            if (m_transmissionShaftOutputUID_choice3) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transmissionShaftOutputUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/transmissionShaftOutputUID", *m_transmissionShaftOutputUID_choice3);
            }
            
            // write element rotorUID
            if (m_rotorUID_choice4) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotorUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rotorUID", *m_rotorUID_choice4);
            }
            
        }
        
        bool CPACSShaftLinkedComponents::HasEngineUID_choice1() const
        {
            return static_cast<bool>(m_engineUID_choice1);
        }
        
        const std::string& CPACSShaftLinkedComponents::GetEngineUID_choice1() const
        {
            return *m_engineUID_choice1;
        }
        
        void CPACSShaftLinkedComponents::SetEngineUID_choice1(const std::string& value)
        {
            m_engineUID_choice1 = value;
        }
        
        bool CPACSShaftLinkedComponents::HasTransmissionShaftInputUID_choice2() const
        {
            return static_cast<bool>(m_transmissionShaftInputUID_choice2);
        }
        
        const std::string& CPACSShaftLinkedComponents::GetTransmissionShaftInputUID_choice2() const
        {
            return *m_transmissionShaftInputUID_choice2;
        }
        
        void CPACSShaftLinkedComponents::SetTransmissionShaftInputUID_choice2(const std::string& value)
        {
            m_transmissionShaftInputUID_choice2 = value;
        }
        
        bool CPACSShaftLinkedComponents::HasTransmissionShaftOutputUID_choice3() const
        {
            return static_cast<bool>(m_transmissionShaftOutputUID_choice3);
        }
        
        const std::string& CPACSShaftLinkedComponents::GetTransmissionShaftOutputUID_choice3() const
        {
            return *m_transmissionShaftOutputUID_choice3;
        }
        
        void CPACSShaftLinkedComponents::SetTransmissionShaftOutputUID_choice3(const std::string& value)
        {
            m_transmissionShaftOutputUID_choice3 = value;
        }
        
        bool CPACSShaftLinkedComponents::HasRotorUID_choice4() const
        {
            return static_cast<bool>(m_rotorUID_choice4);
        }
        
        const std::string& CPACSShaftLinkedComponents::GetRotorUID_choice4() const
        {
            return *m_rotorUID_choice4;
        }
        
        void CPACSShaftLinkedComponents::SetRotorUID_choice4(const std::string& value)
        {
            m_rotorUID_choice4 = value;
        }
        
    }
}
