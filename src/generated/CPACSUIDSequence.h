// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include <vector>
#include "CTiglError.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSComponent;
class CCPACSDuctAssembly;

namespace generated
{
    class CPACSLandingGearStrutAttachment;

    // This class is used in:
    // CPACSComponent
    // CPACSDuctAssembly
    // CPACSLandingGearStrutAttachment

    /// @brief List of uIDs
    /// 
    /// 
    class CPACSUIDSequence : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSUIDSequence(CCPACSComponent* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSUIDSequence(CCPACSDuctAssembly* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSUIDSequence(CPACSLandingGearStrutAttachment* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSUIDSequence();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CCPACSComponent>::value || std::is_same<P, CCPACSDuctAssembly>::value || std::is_same<P, CPACSLandingGearStrutAttachment>::value, "template argument for P is not a parent class of CPACSUIDSequence");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CCPACSComponent>::value || std::is_same<P, CCPACSDuctAssembly>::value || std::is_same<P, CPACSLandingGearStrutAttachment>::value, "template argument for P is not a parent class of CPACSUIDSequence");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::string>& GetUIDs() const;
        TIGL_EXPORT virtual void AddToUIDs(const std::string& value);
        TIGL_EXPORT virtual bool RemoveFromUIDs(const std::string& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// Reference to a uID
        std::vector<std::string> m_uIDs;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSUIDSequence(const CPACSUIDSequence&) = delete;
        CPACSUIDSequence& operator=(const CPACSUIDSequence&) = delete;

        CPACSUIDSequence(CPACSUIDSequence&&) = delete;
        CPACSUIDSequence& operator=(CPACSUIDSequence&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSUIDSequence = generated::CPACSUIDSequence;
using CCPACSLandingGearStrutAttachment = generated::CPACSLandingGearStrutAttachment;
} // namespace tigl
