// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSPointListXYZ.h>
#include "CPACSMassInertiaVector.h"
#include "CPACSWeightAndBalancemPaxx.h"
#include "CPACSWeightAndBalancemCargos.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSOperationalCase
        
        // generated from /xsd:schema/xsd:complexType[881]
        class CPACSWeightAndBalancePayload
        {
        public:
            TIGL_EXPORT CPACSWeightAndBalancePayload();
            TIGL_EXPORT virtual ~CPACSWeightAndBalancePayload();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CCPACSStringVector& GetMass() const;
            TIGL_EXPORT CCPACSStringVector& GetMass();
            
            TIGL_EXPORT const CCPACSPointListXYZ& GetCoG() const;
            TIGL_EXPORT CCPACSPointListXYZ& GetCoG();
            
            TIGL_EXPORT const CPACSMassInertiaVector& GetMassInertia() const;
            TIGL_EXPORT CPACSMassInertiaVector& GetMassInertia();
            
            TIGL_EXPORT bool HasMPaxx() const;
            TIGL_EXPORT const CPACSWeightAndBalancemPaxx& GetMPaxx() const;
            TIGL_EXPORT CPACSWeightAndBalancemPaxx& GetMPaxx();
            
            TIGL_EXPORT bool HasMCargos() const;
            TIGL_EXPORT const CPACSWeightAndBalancemCargos& GetMCargos() const;
            TIGL_EXPORT CPACSWeightAndBalancemCargos& GetMCargos();
            
        protected:
            CCPACSStringVector                            m_mass;
            CCPACSPointListXYZ                            m_coG;
            CPACSMassInertiaVector                        m_massInertia;
            boost::optional<CPACSWeightAndBalancemPaxx>   m_mPaxx;
            boost::optional<CPACSWeightAndBalancemCargos> m_mCargos;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWeightAndBalancePayload(const CPACSWeightAndBalancePayload&) = delete;
            CPACSWeightAndBalancePayload& operator=(const CPACSWeightAndBalancePayload&) = delete;
            
            CPACSWeightAndBalancePayload(CPACSWeightAndBalancePayload&&) = delete;
            CPACSWeightAndBalancePayload& operator=(CPACSWeightAndBalancePayload&&) = delete;
            #else
            CPACSWeightAndBalancePayload(const CPACSWeightAndBalancePayload&);
            CPACSWeightAndBalancePayload& operator=(const CPACSWeightAndBalancePayload&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSWeightAndBalancePayload = generated::CPACSWeightAndBalancePayload;
    #else
    typedef generated::CPACSWeightAndBalancePayload CCPACSWeightAndBalancePayload;
    #endif
}
