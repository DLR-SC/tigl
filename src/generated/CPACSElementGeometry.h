// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSCone.h"
#include "CPACSCuboid.h"
#include "CPACSElementGeometryAddtionalParts.h"
#include "CPACSEllipsoid.h"
#include "CPACSExternalGeometry.h"
#include "CPACSMultiSegmentShape.h"
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSBattery;
    class CPACSElectricMotor;
    class CPACSGasTurbine;
    class CPACSGearBox;
    class CPACSGenerator;
    class CPACSHeatExchanger;
    class CPACSTurboGenerator;
    class CPACSVehicleElementBase;

    // This class is used in:
    // CPACSBattery
    // CPACSElectricMotor
    // CPACSGasTurbine
    // CPACSGearBox
    // CPACSGenerator
    // CPACSHeatExchanger
    // CPACSTurboGenerator
    // CPACSVehicleElementBase

    /// @brief Geometry
    /// 
    /// @see geometryBaseTypes
    /// 
    class CPACSElementGeometry
    {
    public:
        TIGL_EXPORT CPACSElementGeometry(CPACSBattery* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSElectricMotor* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSGasTurbine* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSGearBox* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSGenerator* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSHeatExchanger* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSTurboGenerator* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementGeometry(CPACSVehicleElementBase* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSElementGeometry();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSBattery>::value || std::is_same<P, CPACSElectricMotor>::value || std::is_same<P, CPACSGasTurbine>::value || std::is_same<P, CPACSGearBox>::value || std::is_same<P, CPACSGenerator>::value || std::is_same<P, CPACSHeatExchanger>::value || std::is_same<P, CPACSTurboGenerator>::value || std::is_same<P, CPACSVehicleElementBase>::value, "template argument for P is not a parent class of CPACSElementGeometry");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSBattery>::value || std::is_same<P, CPACSElectricMotor>::value || std::is_same<P, CPACSGasTurbine>::value || std::is_same<P, CPACSGearBox>::value || std::is_same<P, CPACSGenerator>::value || std::is_same<P, CPACSHeatExchanger>::value || std::is_same<P, CPACSTurboGenerator>::value || std::is_same<P, CPACSVehicleElementBase>::value, "template argument for P is not a parent class of CPACSElementGeometry");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<bool>& GetBoundingShape() const;
        TIGL_EXPORT virtual void SetBoundingShape(const boost::optional<bool>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSCuboid>& GetCuboid_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSCuboid>& GetCuboid_choice1();

        TIGL_EXPORT virtual const boost::optional<CPACSCone>& GetCone_choice2() const;
        TIGL_EXPORT virtual boost::optional<CPACSCone>& GetCone_choice2();

        TIGL_EXPORT virtual const boost::optional<CPACSEllipsoid>& GetEllipsoid_choice3() const;
        TIGL_EXPORT virtual boost::optional<CPACSEllipsoid>& GetEllipsoid_choice3();

        TIGL_EXPORT virtual const boost::optional<CPACSMultiSegmentShape>& GetMultiSegmentShape_choice4() const;
        TIGL_EXPORT virtual boost::optional<CPACSMultiSegmentShape>& GetMultiSegmentShape_choice4();

        TIGL_EXPORT virtual const boost::optional<CPACSExternalGeometry>& GetExternal_choice5() const;
        TIGL_EXPORT virtual boost::optional<CPACSExternalGeometry>& GetExternal_choice5();

        TIGL_EXPORT virtual const boost::optional<CPACSElementGeometryAddtionalParts>& GetAddtionalParts() const;
        TIGL_EXPORT virtual boost::optional<CPACSElementGeometryAddtionalParts>& GetAddtionalParts();

        TIGL_EXPORT virtual CPACSCuboid& GetCuboid_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCuboid_choice1();

        TIGL_EXPORT virtual CPACSCone& GetCone_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCone_choice2();

        TIGL_EXPORT virtual CPACSEllipsoid& GetEllipsoid_choice3(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEllipsoid_choice3();

        TIGL_EXPORT virtual CPACSMultiSegmentShape& GetMultiSegmentShape_choice4(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveMultiSegmentShape_choice4();

        TIGL_EXPORT virtual CPACSExternalGeometry& GetExternal_choice5(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveExternal_choice5();

        TIGL_EXPORT virtual CPACSElementGeometryAddtionalParts& GetAddtionalParts(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAddtionalParts();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        boost::optional<bool>                               m_boundingShape;
        boost::optional<CPACSCuboid>                        m_cuboid_choice1;
        boost::optional<CPACSCone>                          m_cone_choice2;
        boost::optional<CPACSEllipsoid>                     m_ellipsoid_choice3;
        boost::optional<CPACSMultiSegmentShape>             m_multiSegmentShape_choice4;
        boost::optional<CPACSExternalGeometry>              m_external_choice5;
        boost::optional<CPACSElementGeometryAddtionalParts> m_addtionalParts;

    private:
        CPACSElementGeometry(const CPACSElementGeometry&) = delete;
        CPACSElementGeometry& operator=(const CPACSElementGeometry&) = delete;

        CPACSElementGeometry(CPACSElementGeometry&&) = delete;
        CPACSElementGeometry& operator=(CPACSElementGeometry&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSElementGeometry = generated::CPACSElementGeometry;
using CCPACSBattery = generated::CPACSBattery;
using CCPACSElectricMotor = generated::CPACSElectricMotor;
using CCPACSGasTurbine = generated::CPACSGasTurbine;
using CCPACSGearBox = generated::CPACSGearBox;
using CCPACSGenerator = generated::CPACSGenerator;
using CCPACSHeatExchanger = generated::CPACSHeatExchanger;
using CCPACSTurboGenerator = generated::CPACSTurboGenerator;
using CCPACSVehicleElementBase = generated::CPACSVehicleElementBase;
} // namespace tigl
