// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include "CPACSPointList.h"
#include "CPACSPointList.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSCertificationCases
        
        // generated from /xsd:schema/xsd:complexType[877]
        class CPACSWeightAndBalanceCase
        {
        public:
            TIGL_EXPORT CPACSWeightAndBalanceCase();
            TIGL_EXPORT virtual ~CPACSWeightAndBalanceCase();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const CCPACSStringVector& GetMass() const;
            TIGL_EXPORT CCPACSStringVector& GetMass();
            
            TIGL_EXPORT bool HasCoG() const;
            TIGL_EXPORT const CPACSPointList& GetCoG() const;
            TIGL_EXPORT CPACSPointList& GetCoG();
            
            TIGL_EXPORT bool HasMassIntertia() const;
            TIGL_EXPORT const CPACSPointList& GetMassIntertia() const;
            TIGL_EXPORT CPACSPointList& GetMassIntertia();
            
        protected:
            std::string                     m_uID;
            boost::optional<std::string>    m_name;
            boost::optional<std::string>    m_description;
            CCPACSStringVector              m_mass;
            boost::optional<CPACSPointList> m_coG;
            boost::optional<CPACSPointList> m_massIntertia;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWeightAndBalanceCase(const CPACSWeightAndBalanceCase&) = delete;
            CPACSWeightAndBalanceCase& operator=(const CPACSWeightAndBalanceCase&) = delete;
            
            CPACSWeightAndBalanceCase(CPACSWeightAndBalanceCase&&) = delete;
            CPACSWeightAndBalanceCase& operator=(CPACSWeightAndBalanceCase&&) = delete;
            #else
            CPACSWeightAndBalanceCase(const CPACSWeightAndBalanceCase&);
            CPACSWeightAndBalanceCase& operator=(const CPACSWeightAndBalanceCase&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSWeightAndBalanceCase = generated::CPACSWeightAndBalanceCase;
    #else
    typedef generated::CPACSWeightAndBalanceCase CCPACSWeightAndBalanceCase;
    #endif
}
