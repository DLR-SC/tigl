// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSRectangleProfile;
    class CPACSSuperEllipseProfile;

    // This class is used in:
    // CPACSRectangleProfile
    // CPACSSuperEllipseProfile

    /// @brief doubleBaseType
    /// 
    /// Base type for double nodes (including external data
    /// attributes)
    /// The double base type can include optional uncertainty
    /// information. The description of uncertainties is placed in
    /// addtional attributes. First, it is described by an attribute
    /// that describes the type of uncertainty function called
    /// functionName. The functionName attribute includes the tag name
    /// of the distribution function which is listened in the table
    /// shown below. Each uncertainty function is further describes by a
    /// set of parameters that are described in the table below.
    /// @see uncertaintyFunctions
    /// 
    class CPACSPosExcl0DoubleBase
    {
    public:
        TIGL_EXPORT CPACSPosExcl0DoubleBase(CPACSRectangleProfile* parent);
        TIGL_EXPORT CPACSPosExcl0DoubleBase(CPACSSuperEllipseProfile* parent);

        TIGL_EXPORT virtual ~CPACSPosExcl0DoubleBase();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSRectangleProfile>::value || std::is_same<P, CPACSSuperEllipseProfile>::value, "template argument for P is not a parent class of CPACSPosExcl0DoubleBase");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSRectangleProfile>::value || std::is_same<P, CPACSSuperEllipseProfile>::value, "template argument for P is not a parent class of CPACSPosExcl0DoubleBase");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalDataNodePath() const;
        TIGL_EXPORT virtual void SetExternalDataNodePath(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalFileName() const;
        TIGL_EXPORT virtual void SetExternalFileName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalDataDirectory() const;
        TIGL_EXPORT virtual void SetExternalDataDirectory(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetMu() const;
        TIGL_EXPORT virtual void SetMu(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetDelta() const;
        TIGL_EXPORT virtual void SetDelta(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetA() const;
        TIGL_EXPORT virtual void SetA(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetB() const;
        TIGL_EXPORT virtual void SetB(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetC() const;
        TIGL_EXPORT virtual void SetC(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetV() const;
        TIGL_EXPORT virtual void SetV(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetW() const;
        TIGL_EXPORT virtual void SetW(const boost::optional<double>& value);

        TIGL_EXPORT virtual const double& GetValue() const;
        TIGL_EXPORT virtual void SetValue(const double& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        boost::optional<std::string> m_externalDataNodePath;
        boost::optional<std::string> m_externalFileName;
        boost::optional<std::string> m_externalDataDirectory;
        boost::optional<double>      m_mu;
        boost::optional<double>      m_delta;
        boost::optional<double>      m_a;
        boost::optional<double>      m_b;
        boost::optional<double>      m_c;
        boost::optional<double>      m_v;
        boost::optional<double>      m_w;
        double                       m_value;

    private:
        CPACSPosExcl0DoubleBase(const CPACSPosExcl0DoubleBase&) = delete;
        CPACSPosExcl0DoubleBase& operator=(const CPACSPosExcl0DoubleBase&) = delete;

        CPACSPosExcl0DoubleBase(CPACSPosExcl0DoubleBase&&) = delete;
        CPACSPosExcl0DoubleBase& operator=(CPACSPosExcl0DoubleBase&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSPosExcl0DoubleBase = generated::CPACSPosExcl0DoubleBase;
using CCPACSRectangleProfile = generated::CPACSRectangleProfile;
using CCPACSSuperEllipseProfile = generated::CPACSSuperEllipseProfile;
} // namespace tigl
