// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSMaterial.h"
#include "CPACSSpecificHeatMap.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSpecificHeatMap::CPACSSpecificHeatMap(CPACSMaterial* parent)
        : m_temperature(this)
        , m_specificHeat(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSpecificHeatMap::~CPACSSpecificHeatMap()
    {
    }

    const CPACSMaterial* CPACSSpecificHeatMap::GetParent() const
    {
        return m_parent;
    }

    CPACSMaterial* CPACSSpecificHeatMap::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSpecificHeatMap::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSSpecificHeatMap::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSSpecificHeatMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element temperature
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/temperature")) {
            m_temperature.ReadCPACS(tixiHandle, xpath + "/temperature");
        }
        else {
            LOG(ERROR) << "Required element temperature is missing at xpath " << xpath;
        }

        // read element specificHeat
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/specificHeat")) {
            m_specificHeat.ReadCPACS(tixiHandle, xpath + "/specificHeat");
        }
        else {
            LOG(ERROR) << "Required element specificHeat is missing at xpath " << xpath;
        }

    }

    void CPACSSpecificHeatMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element temperature
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/temperature");
        m_temperature.WriteCPACS(tixiHandle, xpath + "/temperature");

        // write element specificHeat
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/specificHeat");
        m_specificHeat.WriteCPACS(tixiHandle, xpath + "/specificHeat");

    }

    const CCPACSStringVector& CPACSSpecificHeatMap::GetTemperature() const
    {
        return m_temperature;
    }

    CCPACSStringVector& CPACSSpecificHeatMap::GetTemperature()
    {
        return m_temperature;
    }

    const CCPACSStringVector& CPACSSpecificHeatMap::GetSpecificHeat() const
    {
        return m_specificHeat;
    }

    CCPACSStringVector& CPACSSpecificHeatMap::GetSpecificHeat()
    {
        return m_specificHeat;
    }

} // namespace generated
} // namespace tigl
