// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSControlSurfaceHingePoint.h"
#include "CPACSControlSurfacePath.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceHingePoint::CPACSControlSurfaceHingePoint(CPACSControlSurfacePath* parent)
        : m_hingeXsi(0)
        , m_hingeRelHeight(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceHingePoint::~CPACSControlSurfaceHingePoint()
    {
    }

    const CPACSControlSurfacePath* CPACSControlSurfaceHingePoint::GetParent() const
    {
        return m_parent;
    }

    CPACSControlSurfacePath* CPACSControlSurfaceHingePoint::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSControlSurfaceHingePoint::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSControlSurfaceHingePoint::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSControlSurfaceHingePoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element hingeXsi
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/hingeXsi")) {
            m_hingeXsi = tixi::TixiGetElement<double>(tixiHandle, xpath + "/hingeXsi");
        }
        else {
            LOG(ERROR) << "Required element hingeXsi is missing at xpath " << xpath;
        }

        // read element hingeRelHeight
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/hingeRelHeight")) {
            m_hingeRelHeight = tixi::TixiGetElement<double>(tixiHandle, xpath + "/hingeRelHeight");
        }
        else {
            LOG(ERROR) << "Required element hingeRelHeight is missing at xpath " << xpath;
        }

    }

    void CPACSControlSurfaceHingePoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "hingeXsi", "hingeRelHeight" };

        // write element hingeXsi
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/hingeXsi", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/hingeXsi", m_hingeXsi);

        // write element hingeRelHeight
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/hingeRelHeight", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/hingeRelHeight", m_hingeRelHeight);

    }

    const double& CPACSControlSurfaceHingePoint::GetHingeXsi() const
    {
        return m_hingeXsi;
    }

    void CPACSControlSurfaceHingePoint::SetHingeXsi(const double& value)
    {
        m_hingeXsi = value;
    }

    const double& CPACSControlSurfaceHingePoint::GetHingeRelHeight() const
    {
        return m_hingeRelHeight;
    }

    void CPACSControlSurfaceHingePoint::SetHingeRelHeight(const double& value)
    {
        m_hingeRelHeight = value;
    }

} // namespace generated
} // namespace tigl
