// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSAtmosphericConditions_model.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSLoadCaseState
        
        // generated from /xsd:schema/xsd:complexType[72]
        class CPACSAtmosphericConditions
        {
        public:
            TIGL_EXPORT CPACSAtmosphericConditions();
            TIGL_EXPORT virtual ~CPACSAtmosphericConditions();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasStaticPressure() const;
            TIGL_EXPORT const double& GetStaticPressure() const;
            TIGL_EXPORT void SetStaticPressure(const double& value);
            
            TIGL_EXPORT bool HasDensity() const;
            TIGL_EXPORT const double& GetDensity() const;
            TIGL_EXPORT void SetDensity(const double& value);
            
            TIGL_EXPORT bool HasTemperature() const;
            TIGL_EXPORT const double& GetTemperature() const;
            TIGL_EXPORT void SetTemperature(const double& value);
            
            TIGL_EXPORT bool HasSpeedOfSound() const;
            TIGL_EXPORT const double& GetSpeedOfSound() const;
            TIGL_EXPORT void SetSpeedOfSound(const double& value);
            
            TIGL_EXPORT bool HasDynamicViscosity() const;
            TIGL_EXPORT const double& GetDynamicViscosity() const;
            TIGL_EXPORT void SetDynamicViscosity(const double& value);
            
            TIGL_EXPORT bool HasKinematicViscosity() const;
            TIGL_EXPORT const double& GetKinematicViscosity() const;
            TIGL_EXPORT void SetKinematicViscosity(const double& value);
            
            TIGL_EXPORT const CPACSAtmosphericConditions_model& GetModel() const;
            TIGL_EXPORT CPACSAtmosphericConditions_model& GetModel();
            
            TIGL_EXPORT const double& GetAltitude() const;
            TIGL_EXPORT void SetAltitude(const double& value);
            
            TIGL_EXPORT bool HasDeltaTemperature() const;
            TIGL_EXPORT const double& GetDeltaTemperature() const;
            TIGL_EXPORT void SetDeltaTemperature(const double& value);
            
        protected:
            boost::optional<double>          m_staticPressure;
            boost::optional<double>          m_density;
            boost::optional<double>          m_temperature;
            boost::optional<double>          m_speedOfSound;
            boost::optional<double>          m_dynamicViscosity;
            boost::optional<double>          m_kinematicViscosity;
            CPACSAtmosphericConditions_model m_model;
            double                           m_altitude;
            boost::optional<double>          m_deltaTemperature;
            
        private:
            #ifdef HAVE_CPP11
            CPACSAtmosphericConditions(const CPACSAtmosphericConditions&) = delete;
            CPACSAtmosphericConditions& operator=(const CPACSAtmosphericConditions&) = delete;
            
            CPACSAtmosphericConditions(CPACSAtmosphericConditions&&) = delete;
            CPACSAtmosphericConditions& operator=(CPACSAtmosphericConditions&&) = delete;
            #else
            CPACSAtmosphericConditions(const CPACSAtmosphericConditions&);
            CPACSAtmosphericConditions& operator=(const CPACSAtmosphericConditions&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSAtmosphericConditions = generated::CPACSAtmosphericConditions;
    #else
    typedef generated::CPACSAtmosphericConditions CCPACSAtmosphericConditions;
    #endif
}
