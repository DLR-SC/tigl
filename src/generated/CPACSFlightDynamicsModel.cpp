// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightDynamicsModel.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightDynamicsModel::CPACSFlightDynamicsModel(){}
        CPACSFlightDynamicsModel::~CPACSFlightDynamicsModel() {}
        
        void CPACSFlightDynamicsModel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element xLonNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xLonNames")) {
                m_xLonNames.ReadCPACS(tixiHandle, xpath + "/xLonNames");
            }
            else {
                LOG(ERROR) << "Required element xLonNames is missing";
            }
            
            // read element yLonNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yLonNames")) {
                m_yLonNames.ReadCPACS(tixiHandle, xpath + "/yLonNames");
            }
            else {
                LOG(ERROR) << "Required element yLonNames is missing";
            }
            
            // read element uLonNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/uLonNames")) {
                m_uLonNames.ReadCPACS(tixiHandle, xpath + "/uLonNames");
            }
            else {
                LOG(ERROR) << "Required element uLonNames is missing";
            }
            
            // read element xLatNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xLatNames")) {
                m_xLatNames.ReadCPACS(tixiHandle, xpath + "/xLatNames");
            }
            else {
                LOG(ERROR) << "Required element xLatNames is missing";
            }
            
            // read element yLatNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yLatNames")) {
                m_yLatNames.ReadCPACS(tixiHandle, xpath + "/yLatNames");
            }
            else {
                LOG(ERROR) << "Required element yLatNames is missing";
            }
            
            // read element uLatNames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/uLatNames")) {
                m_uLatNames.ReadCPACS(tixiHandle, xpath + "/uLatNames");
            }
            else {
                LOG(ERROR) << "Required element uLatNames is missing";
            }
            
        }
        
        void CPACSFlightDynamicsModel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element xLonNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xLonNames");
            m_xLonNames.WriteCPACS(tixiHandle, xpath + "/xLonNames");
            
            // write element yLonNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yLonNames");
            m_yLonNames.WriteCPACS(tixiHandle, xpath + "/yLonNames");
            
            // write element uLonNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uLonNames");
            m_uLonNames.WriteCPACS(tixiHandle, xpath + "/uLonNames");
            
            // write element xLatNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xLatNames");
            m_xLatNames.WriteCPACS(tixiHandle, xpath + "/xLatNames");
            
            // write element yLatNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yLatNames");
            m_yLatNames.WriteCPACS(tixiHandle, xpath + "/yLatNames");
            
            // write element uLatNames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uLatNames");
            m_uLatNames.WriteCPACS(tixiHandle, xpath + "/uLatNames");
            
        }
        
        bool CPACSFlightDynamicsModel::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSFlightDynamicsModel::GetName() const
        {
            return *m_name;
        }
        
        void CPACSFlightDynamicsModel::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSFlightDynamicsModel::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSFlightDynamicsModel::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSFlightDynamicsModel::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetXLonNames() const
        {
            return m_xLonNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetXLonNames()
        {
            return m_xLonNames;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetYLonNames() const
        {
            return m_yLonNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetYLonNames()
        {
            return m_yLonNames;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetULonNames() const
        {
            return m_uLonNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetULonNames()
        {
            return m_uLonNames;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetXLatNames() const
        {
            return m_xLatNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetXLatNames()
        {
            return m_xLatNames;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetYLatNames() const
        {
            return m_yLatNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetYLatNames()
        {
            return m_yLatNames;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsModel::GetULatNames() const
        {
            return m_uLatNames;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsModel::GetULatNames()
        {
            return m_uLatNames;
        }
        
    }
}
