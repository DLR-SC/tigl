// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <CCPACSWingCellPositionChordwise.h>
#include <CCPACSWingCellPositionSpanwise.h>
#include <string>
#include <tixi.h>
#include "CPACSWingSkin.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSWingCells;

namespace generated
{
    // This class is used in:
    // CPACSWingCells

    // generated from /xsd:schema/xsd:complexType[940]
    /// @brief Cell of the wing
    /// 
    /// A cell defines a special region of the wing. Within
    /// this region skin and stringer properties can be defined that
    /// differer from the properties of the rest of the wing. In general
    /// a cell is defined by defining four borders â€“ the cell leading
    /// and trailing edge and the inner border and the outer border.
    /// Those borders can either be defined by using eta/xsi coordinates
    /// or by referencing to spars and ribs. Mixed definitions (e.g.
    /// forward border is defined due to a spar, side borders due to eta
    /// coordinates) is allowed. In general a cell is quadrilateral. But
    /// if e.g. the spar, which is used for the definition of the
    /// trailing edge, has a kink, the cell can have more than four
    /// corners.
    /// The cell leading and trailing edge (= forward and rear
    /// border) can either be defined by referencing to a spar
    /// (->sparUID) or by the defining the xsi (=relative chord)
    /// coordinates of the border (xsi1 = inner end; xsi2 = outer end).
    /// The cell inner and outer border can either be defined
    /// by referencing to a rib (->ribDefinitionUID and ribNumber) or
    /// by the defining the eta (=relative spanwise) coordinates of the
    /// border (eta1 = forward end; eta2 = rear end).
    /// Some examples for wing cells can be found in the
    /// picture below:
    /// @see cells
    /// 
    class CPACSWingCell : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSWingCell(CCPACSWingCells* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWingCell();

        TIGL_EXPORT CCPACSWingCells* GetParent();

        TIGL_EXPORT const CCPACSWingCells* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const CPACSWingSkin& GetSkin() const;
        TIGL_EXPORT virtual CPACSWingSkin& GetSkin();

        TIGL_EXPORT virtual const CCPACSWingCellPositionChordwise& GetPositioningLeadingEdge() const;
        TIGL_EXPORT virtual CCPACSWingCellPositionChordwise& GetPositioningLeadingEdge();

        TIGL_EXPORT virtual const CCPACSWingCellPositionChordwise& GetPositioningTrailingEdge() const;
        TIGL_EXPORT virtual CCPACSWingCellPositionChordwise& GetPositioningTrailingEdge();

        TIGL_EXPORT virtual const CCPACSWingCellPositionSpanwise& GetPositioningInnerBorder() const;
        TIGL_EXPORT virtual CCPACSWingCellPositionSpanwise& GetPositioningInnerBorder();

        TIGL_EXPORT virtual const CCPACSWingCellPositionSpanwise& GetPositioningOuterBorder() const;
        TIGL_EXPORT virtual CCPACSWingCellPositionSpanwise& GetPositioningOuterBorder();

    protected:
        CCPACSWingCells* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                     m_uID;
        CPACSWingSkin                   m_skin;
        CCPACSWingCellPositionChordwise m_positioningLeadingEdge;
        CCPACSWingCellPositionChordwise m_positioningTrailingEdge;
        CCPACSWingCellPositionSpanwise  m_positioningInnerBorder;
        CCPACSWingCellPositionSpanwise  m_positioningOuterBorder;

    private:
        CPACSWingCell(const CPACSWingCell&) = delete;
        CPACSWingCell& operator=(const CPACSWingCell&) = delete;

        CPACSWingCell(CPACSWingCell&&) = delete;
        CPACSWingCell& operator=(CPACSWingCell&&) = delete;
    };
} // namespace generated

// CPACSWingCell is customized, use type CCPACSWingCell directly
} // namespace tigl
