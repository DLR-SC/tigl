// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSControlSurfaceOuterShapeLeadingEdge.h"
#include "CPACSControlSurfaceBorderLeadingEdge.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceBorderLeadingEdge::CPACSControlSurfaceBorderLeadingEdge(CCPACSControlSurfaceOuterShapeLeadingEdge* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_etaLE(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceBorderLeadingEdge::~CPACSControlSurfaceBorderLeadingEdge()
    {
    }

    const CCPACSControlSurfaceOuterShapeLeadingEdge* CPACSControlSurfaceBorderLeadingEdge::GetParent() const
    {
        return m_parent;
    }

    CCPACSControlSurfaceOuterShapeLeadingEdge* CPACSControlSurfaceBorderLeadingEdge::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSControlSurfaceBorderLeadingEdge::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSControlSurfaceBorderLeadingEdge::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSControlSurfaceBorderLeadingEdge::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfaceBorderLeadingEdge::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSControlSurfaceBorderLeadingEdge::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element etaLE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaLE")) {
            m_etaLE.ReadCPACS(tixiHandle, xpath + "/etaLE");
        }
        else {
            LOG(ERROR) << "Required element etaLE is missing at xpath " << xpath;
        }

        // read element etaTE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
            m_etaTE = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
            try {
                m_etaTE->ReadCPACS(tixiHandle, xpath + "/etaTE");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read etaTE at xpath " << xpath << ": " << e.what();
                m_etaTE = boost::none;
            }
        }

        // read element xsiTE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTE")) {
            m_xsiTE_choice1 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
            try {
                m_xsiTE_choice1->ReadCPACS(tixiHandle, xpath + "/xsiTE");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read xsiTE at xpath " << xpath << ": " << e.what();
                m_xsiTE_choice1 = boost::none;
            }
        }

        // read element xsiTEUpper
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTEUpper")) {
            m_xsiTEUpper_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/xsiTEUpper");
        }

        // read element xsiTELower
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTELower")) {
            m_xsiTELower_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/xsiTELower");
        }

        // read element innerShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerShape")) {
            m_innerShape_choice1 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this));
            try {
                m_innerShape_choice1->ReadCPACS(tixiHandle, xpath + "/innerShape");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read innerShape at xpath " << xpath << ": " << e.what();
                m_innerShape_choice1 = boost::none;
            }
        }

        // read element leadingEdgeShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeShape")) {
            m_leadingEdgeShape_choice2 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this));
            try {
                m_leadingEdgeShape_choice2->ReadCPACS(tixiHandle, xpath + "/leadingEdgeShape");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read leadingEdgeShape at xpath " << xpath << ": " << e.what();
                m_leadingEdgeShape_choice2 = boost::none;
            }
        }

        // read element airfoil
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoil")) {
            m_airfoil_choice3 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
            try {
                m_airfoil_choice3->ReadCPACS(tixiHandle, xpath + "/airfoil");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read airfoil at xpath " << xpath << ": " << e.what();
                m_airfoil_choice3 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSControlSurfaceBorderLeadingEdge::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "etaLE", "etaTE", "xsiTE", "xsiTEUpper", "xsiTELower", "innerShape", "leadingEdgeShape", "airfoil" };

        // write element etaLE
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/etaLE", childElemOrder);
        m_etaLE.WriteCPACS(tixiHandle, xpath + "/etaLE");

        // write element etaTE
        if (m_etaTE) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/etaTE", childElemOrder);
            m_etaTE->WriteCPACS(tixiHandle, xpath + "/etaTE");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/etaTE");
            }
        }

        // write element xsiTE
        if (m_xsiTE_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/xsiTE", childElemOrder);
            m_xsiTE_choice1->WriteCPACS(tixiHandle, xpath + "/xsiTE");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/xsiTE");
            }
        }

        // write element xsiTEUpper
        if (m_xsiTEUpper_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/xsiTEUpper", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/xsiTEUpper", *m_xsiTEUpper_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTEUpper")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/xsiTEUpper");
            }
        }

        // write element xsiTELower
        if (m_xsiTELower_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/xsiTELower", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/xsiTELower", *m_xsiTELower_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTELower")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/xsiTELower");
            }
        }

        // write element innerShape
        if (m_innerShape_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/innerShape", childElemOrder);
            m_innerShape_choice1->WriteCPACS(tixiHandle, xpath + "/innerShape");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerShape")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/innerShape");
            }
        }

        // write element leadingEdgeShape
        if (m_leadingEdgeShape_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/leadingEdgeShape", childElemOrder);
            m_leadingEdgeShape_choice2->WriteCPACS(tixiHandle, xpath + "/leadingEdgeShape");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeShape")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/leadingEdgeShape");
            }
        }

        // write element airfoil
        if (m_airfoil_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/airfoil", childElemOrder);
            m_airfoil_choice3->WriteCPACS(tixiHandle, xpath + "/airfoil");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoil")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/airfoil");
            }
        }

    }

    bool CPACSControlSurfaceBorderLeadingEdge::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_xsiTE_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_xsiTEUpper_choice2.is_initialized()
                        ||
                        m_xsiTELower_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_xsiTEUpper_choice2.is_initialized()
                    &&
                    m_xsiTELower_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_xsiTE_choice1.is_initialized()
                    )
                )
                == 1
            )
            &&
            (
                (
                    // mandatory elements of this choice must be there
                    true // m_innerShape_choice1 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_leadingEdgeShape_choice2.is_initialized()
                        ||
                        m_airfoil_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    true // m_leadingEdgeShape_choice2 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_innerShape_choice1.is_initialized()
                        ||
                        m_airfoil_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    true // m_airfoil_choice3 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_innerShape_choice1.is_initialized()
                        ||
                        m_leadingEdgeShape_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const CCPACSEtaIsoLine& CPACSControlSurfaceBorderLeadingEdge::GetEtaLE() const
    {
        return m_etaLE;
    }

    CCPACSEtaIsoLine& CPACSControlSurfaceBorderLeadingEdge::GetEtaLE()
    {
        return m_etaLE;
    }

    const boost::optional<CCPACSEtaIsoLine>& CPACSControlSurfaceBorderLeadingEdge::GetEtaTE() const
    {
        return m_etaTE;
    }

    boost::optional<CCPACSEtaIsoLine>& CPACSControlSurfaceBorderLeadingEdge::GetEtaTE()
    {
        return m_etaTE;
    }

    const boost::optional<CCPACSXsiIsoLine>& CPACSControlSurfaceBorderLeadingEdge::GetXsiTE_choice1() const
    {
        return m_xsiTE_choice1;
    }

    boost::optional<CCPACSXsiIsoLine>& CPACSControlSurfaceBorderLeadingEdge::GetXsiTE_choice1()
    {
        return m_xsiTE_choice1;
    }

    const boost::optional<double>& CPACSControlSurfaceBorderLeadingEdge::GetXsiTEUpper_choice2() const
    {
        return m_xsiTEUpper_choice2;
    }

    void CPACSControlSurfaceBorderLeadingEdge::SetXsiTEUpper_choice2(const boost::optional<double>& value)
    {
        m_xsiTEUpper_choice2 = value;
    }

    const boost::optional<double>& CPACSControlSurfaceBorderLeadingEdge::GetXsiTELower_choice2() const
    {
        return m_xsiTELower_choice2;
    }

    void CPACSControlSurfaceBorderLeadingEdge::SetXsiTELower_choice2(const boost::optional<double>& value)
    {
        m_xsiTELower_choice2 = value;
    }

    const boost::optional<CPACSLeadingEdgeHollow>& CPACSControlSurfaceBorderLeadingEdge::GetInnerShape_choice1() const
    {
        return m_innerShape_choice1;
    }

    boost::optional<CPACSLeadingEdgeHollow>& CPACSControlSurfaceBorderLeadingEdge::GetInnerShape_choice1()
    {
        return m_innerShape_choice1;
    }

    const boost::optional<CPACSLeadingEdgeShape>& CPACSControlSurfaceBorderLeadingEdge::GetLeadingEdgeShape_choice2() const
    {
        return m_leadingEdgeShape_choice2;
    }

    boost::optional<CPACSLeadingEdgeShape>& CPACSControlSurfaceBorderLeadingEdge::GetLeadingEdgeShape_choice2()
    {
        return m_leadingEdgeShape_choice2;
    }

    const boost::optional<CPACSContourReference>& CPACSControlSurfaceBorderLeadingEdge::GetAirfoil_choice3() const
    {
        return m_airfoil_choice3;
    }

    boost::optional<CPACSContourReference>& CPACSControlSurfaceBorderLeadingEdge::GetAirfoil_choice3()
    {
        return m_airfoil_choice3;
    }

    CCPACSEtaIsoLine& CPACSControlSurfaceBorderLeadingEdge::GetEtaTE(CreateIfNotExistsTag)
    {
        if (!m_etaTE)
            m_etaTE = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
        return *m_etaTE;
    }

    void CPACSControlSurfaceBorderLeadingEdge::RemoveEtaTE()
    {
        m_etaTE = boost::none;
    }

    CCPACSXsiIsoLine& CPACSControlSurfaceBorderLeadingEdge::GetXsiTE_choice1(CreateIfNotExistsTag)
    {
        if (!m_xsiTE_choice1)
            m_xsiTE_choice1 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
        return *m_xsiTE_choice1;
    }

    void CPACSControlSurfaceBorderLeadingEdge::RemoveXsiTE_choice1()
    {
        m_xsiTE_choice1 = boost::none;
    }

    CPACSLeadingEdgeHollow& CPACSControlSurfaceBorderLeadingEdge::GetInnerShape_choice1(CreateIfNotExistsTag)
    {
        if (!m_innerShape_choice1)
            m_innerShape_choice1 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this));
        return *m_innerShape_choice1;
    }

    void CPACSControlSurfaceBorderLeadingEdge::RemoveInnerShape_choice1()
    {
        m_innerShape_choice1 = boost::none;
    }

    CPACSLeadingEdgeShape& CPACSControlSurfaceBorderLeadingEdge::GetLeadingEdgeShape_choice2(CreateIfNotExistsTag)
    {
        if (!m_leadingEdgeShape_choice2)
            m_leadingEdgeShape_choice2 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this));
        return *m_leadingEdgeShape_choice2;
    }

    void CPACSControlSurfaceBorderLeadingEdge::RemoveLeadingEdgeShape_choice2()
    {
        m_leadingEdgeShape_choice2 = boost::none;
    }

    CPACSContourReference& CPACSControlSurfaceBorderLeadingEdge::GetAirfoil_choice3(CreateIfNotExistsTag)
    {
        if (!m_airfoil_choice3)
            m_airfoil_choice3 = boost::in_place(reinterpret_cast<CCPACSControlSurfaceBorderLeadingEdge*>(this), m_uidMgr);
        return *m_airfoil_choice3;
    }

    void CPACSControlSurfaceBorderLeadingEdge::RemoveAirfoil_choice3()
    {
        m_airfoil_choice3 = boost::none;
    }

} // namespace generated
} // namespace tigl
