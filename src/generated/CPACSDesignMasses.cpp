// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDesignMasses.h"

namespace tigl
{
    namespace generated
    {
        CPACSDesignMasses::CPACSDesignMasses(){}
        CPACSDesignMasses::~CPACSDesignMasses() {}
        
        void CPACSDesignMasses::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element mTOM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mTOM")) {
                m_mTOM.ReadCPACS(tixiHandle, xpath + "/mTOM");
            }
            else {
                LOG(ERROR) << "Required element mTOM is missing";
            }
            
            // read element mZFM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mZFM")) {
                m_mZFM.ReadCPACS(tixiHandle, xpath + "/mZFM");
            }
            else {
                LOG(ERROR) << "Required element mZFM is missing";
            }
            
            // read element mMLM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mMLM")) {
                m_mMLM.ReadCPACS(tixiHandle, xpath + "/mMLM");
            }
            else {
                LOG(ERROR) << "Required element mMLM is missing";
            }
            
            // read element mMRM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mMRM")) {
                m_mMRM.ReadCPACS(tixiHandle, xpath + "/mMRM");
            }
            else {
                LOG(ERROR) << "Required element mMRM is missing";
            }
            
        }
        
        void CPACSDesignMasses::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element mTOM
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mTOM");
            m_mTOM.WriteCPACS(tixiHandle, xpath + "/mTOM");
            
            // write element mZFM
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mZFM");
            m_mZFM.WriteCPACS(tixiHandle, xpath + "/mZFM");
            
            // write element mMLM
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mMLM");
            m_mMLM.WriteCPACS(tixiHandle, xpath + "/mMLM");
            
            // write element mMRM
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mMRM");
            m_mMRM.WriteCPACS(tixiHandle, xpath + "/mMRM");
            
        }
        
        const CPACSGenericMass& CPACSDesignMasses::GetMTOM() const
        {
            return m_mTOM;
        }
        
        CPACSGenericMass& CPACSDesignMasses::GetMTOM()
        {
            return m_mTOM;
        }
        
        const CPACSGenericMass& CPACSDesignMasses::GetMZFM() const
        {
            return m_mZFM;
        }
        
        CPACSGenericMass& CPACSDesignMasses::GetMZFM()
        {
            return m_mZFM;
        }
        
        const CPACSGenericMass& CPACSDesignMasses::GetMMLM() const
        {
            return m_mMLM;
        }
        
        CPACSGenericMass& CPACSDesignMasses::GetMMLM()
        {
            return m_mMLM;
        }
        
        const CPACSGenericMass& CPACSDesignMasses::GetMMRM() const
        {
            return m_mMRM;
        }
        
        CPACSGenericMass& CPACSDesignMasses::GetMMRM()
        {
            return m_mMRM;
        }
        
    }
}
