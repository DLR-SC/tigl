// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSGenericCost.h"
#include "CPACSCostComponents.h"
#include "CPACSCostPowerUnits.h"
#include "CPACSCostSystems.h"
#include "CPACSCostFurnishings.h"
#include "CPACSGenericCost.h"
#include "CPACSGenericCost.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSMonetaryValuesAnalysis
        
        // generated from /xsd:schema/xsd:complexType[726]
        class CPACSRecurringCost
        {
        public:
            TIGL_EXPORT CPACSRecurringCost();
            TIGL_EXPORT virtual ~CPACSRecurringCost();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const int& GetProductionQuantity() const;
            TIGL_EXPORT void SetProductionQuantity(const int& value);
            
            TIGL_EXPORT const CPACSGenericCost& GetCostDescription() const;
            TIGL_EXPORT CPACSGenericCost& GetCostDescription();
            
            TIGL_EXPORT bool HasComponents() const;
            TIGL_EXPORT const CPACSCostComponents& GetComponents() const;
            TIGL_EXPORT CPACSCostComponents& GetComponents();
            
            TIGL_EXPORT bool HasPowerUnits() const;
            TIGL_EXPORT const CPACSCostPowerUnits& GetPowerUnits() const;
            TIGL_EXPORT CPACSCostPowerUnits& GetPowerUnits();
            
            TIGL_EXPORT bool HasSystems() const;
            TIGL_EXPORT const CPACSCostSystems& GetSystems() const;
            TIGL_EXPORT CPACSCostSystems& GetSystems();
            
            TIGL_EXPORT bool HasFurnishings() const;
            TIGL_EXPORT const CPACSCostFurnishings& GetFurnishings() const;
            TIGL_EXPORT CPACSCostFurnishings& GetFurnishings();
            
            TIGL_EXPORT bool HasOperatorItems() const;
            TIGL_EXPORT const CPACSGenericCost& GetOperatorItems() const;
            TIGL_EXPORT CPACSGenericCost& GetOperatorItems();
            
            TIGL_EXPORT bool HasFinalAssembly() const;
            TIGL_EXPORT const CPACSGenericCost& GetFinalAssembly() const;
            TIGL_EXPORT CPACSGenericCost& GetFinalAssembly();
            
        protected:
            int                                   m_productionQuantity;
            CPACSGenericCost                      m_costDescription;
            boost::optional<CPACSCostComponents>  m_components;
            boost::optional<CPACSCostPowerUnits>  m_powerUnits;
            boost::optional<CPACSCostSystems>     m_systems;
            boost::optional<CPACSCostFurnishings> m_furnishings;
            boost::optional<CPACSGenericCost>     m_operatorItems;
            boost::optional<CPACSGenericCost>     m_finalAssembly;
            
        private:
            #ifdef HAVE_CPP11
            CPACSRecurringCost(const CPACSRecurringCost&) = delete;
            CPACSRecurringCost& operator=(const CPACSRecurringCost&) = delete;
            
            CPACSRecurringCost(CPACSRecurringCost&&) = delete;
            CPACSRecurringCost& operator=(CPACSRecurringCost&&) = delete;
            #else
            CPACSRecurringCost(const CPACSRecurringCost&);
            CPACSRecurringCost& operator=(const CPACSRecurringCost&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSRecurringCost = generated::CPACSRecurringCost;
    #else
    typedef generated::CPACSRecurringCost CCPACSRecurringCost;
    #endif
}
