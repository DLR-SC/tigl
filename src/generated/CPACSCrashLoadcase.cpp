// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashLoadcase.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashLoadcase::CPACSCrashLoadcase(){}
        CPACSCrashLoadcase::~CPACSCrashLoadcase() {}
        
        void CPACSCrashLoadcase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element crashStartX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashStartX")) {
                m_crashStartX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/crashStartX");
            }
            
            // read element crashEndX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashEndX")) {
                m_crashEndX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/crashEndX");
            }
            
            // read element crashInitialVelocity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashInitialVelocity")) {
                m_crashInitialVelocity.ReadCPACS(tixiHandle, xpath + "/crashInitialVelocity");
            }
            else {
                LOG(ERROR) << "Required element crashInitialVelocity is missing";
            }
            
            // read element crashInitialRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashInitialRotation")) {
                m_crashInitialRotation = boost::in_place();
                try {
                    m_crashInitialRotation->ReadCPACS(tixiHandle, xpath + "/crashInitialRotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashInitialRotation at xpath << " << xpath << ": " << e.what();
                    m_crashInitialRotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashInitialRotation at xpath << " << xpath << ": " << e.getError();
                    m_crashInitialRotation = boost::none;
                }
            }
            
            // read element crashInitialRotationalVelocity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashInitialRotationalVelocity")) {
                m_crashInitialRotationalVelocity = boost::in_place();
                try {
                    m_crashInitialRotationalVelocity->ReadCPACS(tixiHandle, xpath + "/crashInitialRotationalVelocity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashInitialRotationalVelocity at xpath << " << xpath << ": " << e.what();
                    m_crashInitialRotationalVelocity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashInitialRotationalVelocity at xpath << " << xpath << ": " << e.getError();
                    m_crashInitialRotationalVelocity = boost::none;
                }
            }
            
            // read element referencePointForRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/referencePointForRotation")) {
                m_referencePointForRotation = boost::in_place();
                try {
                    m_referencePointForRotation->ReadCPACS(tixiHandle, xpath + "/referencePointForRotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read referencePointForRotation at xpath << " << xpath << ": " << e.what();
                    m_referencePointForRotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read referencePointForRotation at xpath << " << xpath << ": " << e.getError();
                    m_referencePointForRotation = boost::none;
                }
            }
            
            // read element crashAccelerationField
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashAccelerationField")) {
                m_crashAccelerationField = boost::in_place();
                try {
                    m_crashAccelerationField->ReadCPACS(tixiHandle, xpath + "/crashAccelerationField");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashAccelerationField at xpath << " << xpath << ": " << e.what();
                    m_crashAccelerationField = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashAccelerationField at xpath << " << xpath << ": " << e.getError();
                    m_crashAccelerationField = boost::none;
                }
            }
            
            // read element ImpactSurfaceDefinition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ImpactSurfaceDefinition")) {
                m_ImpactSurfaceDefinition = boost::in_place();
                try {
                    m_ImpactSurfaceDefinition->ReadCPACS(tixiHandle, xpath + "/ImpactSurfaceDefinition");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ImpactSurfaceDefinition at xpath << " << xpath << ": " << e.what();
                    m_ImpactSurfaceDefinition = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ImpactSurfaceDefinition at xpath << " << xpath << ": " << e.getError();
                    m_ImpactSurfaceDefinition = boost::none;
                }
            }
            
        }
        
        void CPACSCrashLoadcase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element crashStartX
            if (m_crashStartX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashStartX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashStartX", *m_crashStartX);
            }
            
            // write element crashEndX
            if (m_crashEndX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashEndX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashEndX", *m_crashEndX);
            }
            
            // write element crashInitialVelocity
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashInitialVelocity");
            m_crashInitialVelocity.WriteCPACS(tixiHandle, xpath + "/crashInitialVelocity");
            
            // write element crashInitialRotation
            if (m_crashInitialRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashInitialRotation");
                m_crashInitialRotation->WriteCPACS(tixiHandle, xpath + "/crashInitialRotation");
            }
            
            // write element crashInitialRotationalVelocity
            if (m_crashInitialRotationalVelocity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashInitialRotationalVelocity");
                m_crashInitialRotationalVelocity->WriteCPACS(tixiHandle, xpath + "/crashInitialRotationalVelocity");
            }
            
            // write element referencePointForRotation
            if (m_referencePointForRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referencePointForRotation");
                m_referencePointForRotation->WriteCPACS(tixiHandle, xpath + "/referencePointForRotation");
            }
            
            // write element crashAccelerationField
            if (m_crashAccelerationField) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashAccelerationField");
                m_crashAccelerationField->WriteCPACS(tixiHandle, xpath + "/crashAccelerationField");
            }
            
            // write element ImpactSurfaceDefinition
            if (m_ImpactSurfaceDefinition) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ImpactSurfaceDefinition");
                m_ImpactSurfaceDefinition->WriteCPACS(tixiHandle, xpath + "/ImpactSurfaceDefinition");
            }
            
        }
        
        bool CPACSCrashLoadcase::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSCrashLoadcase::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSCrashLoadcase::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSCrashLoadcase::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSCrashLoadcase::GetName() const
        {
            return *m_name;
        }
        
        void CPACSCrashLoadcase::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSCrashLoadcase::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSCrashLoadcase::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSCrashLoadcase::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSCrashLoadcase::HasCrashStartX() const
        {
            return static_cast<bool>(m_crashStartX);
        }
        
        const double& CPACSCrashLoadcase::GetCrashStartX() const
        {
            return *m_crashStartX;
        }
        
        void CPACSCrashLoadcase::SetCrashStartX(const double& value)
        {
            m_crashStartX = value;
        }
        
        bool CPACSCrashLoadcase::HasCrashEndX() const
        {
            return static_cast<bool>(m_crashEndX);
        }
        
        const double& CPACSCrashLoadcase::GetCrashEndX() const
        {
            return *m_crashEndX;
        }
        
        void CPACSCrashLoadcase::SetCrashEndX(const double& value)
        {
            m_crashEndX = value;
        }
        
        const CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialVelocity() const
        {
            return m_crashInitialVelocity;
        }
        
        CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialVelocity()
        {
            return m_crashInitialVelocity;
        }
        
        bool CPACSCrashLoadcase::HasCrashInitialRotation() const
        {
            return static_cast<bool>(m_crashInitialRotation);
        }
        
        const CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialRotation() const
        {
            return *m_crashInitialRotation;
        }
        
        CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialRotation()
        {
            return *m_crashInitialRotation;
        }
        
        bool CPACSCrashLoadcase::HasCrashInitialRotationalVelocity() const
        {
            return static_cast<bool>(m_crashInitialRotationalVelocity);
        }
        
        const CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialRotationalVelocity() const
        {
            return *m_crashInitialRotationalVelocity;
        }
        
        CPACSPointXYZ& CPACSCrashLoadcase::GetCrashInitialRotationalVelocity()
        {
            return *m_crashInitialRotationalVelocity;
        }
        
        bool CPACSCrashLoadcase::HasReferencePointForRotation() const
        {
            return static_cast<bool>(m_referencePointForRotation);
        }
        
        const CPACSPointXYZ& CPACSCrashLoadcase::GetReferencePointForRotation() const
        {
            return *m_referencePointForRotation;
        }
        
        CPACSPointXYZ& CPACSCrashLoadcase::GetReferencePointForRotation()
        {
            return *m_referencePointForRotation;
        }
        
        bool CPACSCrashLoadcase::HasCrashAccelerationField() const
        {
            return static_cast<bool>(m_crashAccelerationField);
        }
        
        const CPACSPointXYZ& CPACSCrashLoadcase::GetCrashAccelerationField() const
        {
            return *m_crashAccelerationField;
        }
        
        CPACSPointXYZ& CPACSCrashLoadcase::GetCrashAccelerationField()
        {
            return *m_crashAccelerationField;
        }
        
        bool CPACSCrashLoadcase::HasImpactSurfaceDefinition() const
        {
            return static_cast<bool>(m_ImpactSurfaceDefinition);
        }
        
        const CPACSCrashLoadcase_ImpactSurfaceDefinition& CPACSCrashLoadcase::GetImpactSurfaceDefinition() const
        {
            return *m_ImpactSurfaceDefinition;
        }
        
        CPACSCrashLoadcase_ImpactSurfaceDefinition& CPACSCrashLoadcase::GetImpactSurfaceDefinition()
        {
            return *m_ImpactSurfaceDefinition;
        }
        
    }
}
