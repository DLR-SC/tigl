// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSProfileGeometry
        
        // generated from /xsd:schema/xsd:complexType[238]
        class CPACSCst2D
        {
        public:
            TIGL_EXPORT CPACSCst2D();
            TIGL_EXPORT virtual ~CPACSCst2D();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT virtual const CCPACSStringVector& GetPsi() const;
            TIGL_EXPORT virtual CCPACSStringVector& GetPsi();
            
            TIGL_EXPORT virtual const double& GetUpperN1() const;
            TIGL_EXPORT virtual void SetUpperN1(const double& value);
            
            TIGL_EXPORT virtual const double& GetUpperN2() const;
            TIGL_EXPORT virtual void SetUpperN2(const double& value);
            
            TIGL_EXPORT virtual const CCPACSStringVector& GetUpperB() const;
            TIGL_EXPORT virtual CCPACSStringVector& GetUpperB();
            
            TIGL_EXPORT virtual const double& GetLowerN1() const;
            TIGL_EXPORT virtual void SetLowerN1(const double& value);
            
            TIGL_EXPORT virtual const double& GetLowerN2() const;
            TIGL_EXPORT virtual void SetLowerN2(const double& value);
            
            TIGL_EXPORT virtual const CCPACSStringVector& GetLowerB() const;
            TIGL_EXPORT virtual CCPACSStringVector& GetLowerB();
            
            TIGL_EXPORT virtual const boost::optional<double>& GetTrailingEdgeThickness() const;
            TIGL_EXPORT virtual void SetTrailingEdgeThickness(const double& value);
            TIGL_EXPORT virtual void SetTrailingEdgeThickness(const boost::optional<double>& value);
            
        protected:
            CCPACSStringVector      m_psi;
            double                  m_upperN1;
            double                  m_upperN2;
            CCPACSStringVector      m_upperB;
            double                  m_lowerN1;
            double                  m_lowerN2;
            CCPACSStringVector      m_lowerB;
            boost::optional<double> m_trailingEdgeThickness;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCst2D(const CPACSCst2D&) = delete;
            CPACSCst2D& operator=(const CPACSCst2D&) = delete;
            
            CPACSCst2D(CPACSCst2D&&) = delete;
            CPACSCst2D& operator=(CPACSCst2D&&) = delete;
            #else
            CPACSCst2D(const CPACSCst2D&);
            CPACSCst2D& operator=(const CPACSCst2D&);
            #endif
        };
    }
    
    // CPACSCst2D is customized, use type CCPACSWingProfileCST directly
}
