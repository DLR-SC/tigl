// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSProfileBasedStructuralElement.h"
#include "CPACSMaterialDefinitionForProfileBasedPoint.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSMaterialDefinitionForProfileBasedPoint::CPACSMaterialDefinitionForProfileBasedPoint(CCPACSProfileBasedStructuralElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_crossSectionArea(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSMaterialDefinitionForProfileBasedPoint::~CPACSMaterialDefinitionForProfileBasedPoint()
    {
        if (m_uidMgr) {
            if (m_pointUID && !m_pointUID->empty()) m_uidMgr->TryUnregisterReference(*m_pointUID, *this);
            if (!m_materialUID.empty()) m_uidMgr->TryUnregisterReference(m_materialUID, *this);
        }
    }

    const CCPACSProfileBasedStructuralElement* CPACSMaterialDefinitionForProfileBasedPoint::GetParent() const
    {
        return m_parent;
    }

    CCPACSProfileBasedStructuralElement* CPACSMaterialDefinitionForProfileBasedPoint::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSMaterialDefinitionForProfileBasedPoint::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSMaterialDefinitionForProfileBasedPoint::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSMaterialDefinitionForProfileBasedPoint::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSMaterialDefinitionForProfileBasedPoint::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element pointUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/pointUID")) {
            m_pointUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/pointUID");
            if (m_pointUID->empty()) {
                LOG(WARNING) << "Optional element pointUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_pointUID->empty()) m_uidMgr->RegisterReference(*m_pointUID, *this);
        }

        // read element materialUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
            m_materialUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
            if (m_materialUID.empty()) {
                LOG(WARNING) << "Required element materialUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_materialUID.empty()) m_uidMgr->RegisterReference(m_materialUID, *this);
        }
        else {
            LOG(ERROR) << "Required element materialUID is missing at xpath " << xpath;
        }

        // read element crossSectionArea
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/crossSectionArea")) {
            m_crossSectionArea = tixi::TixiGetElement<double>(tixiHandle, xpath + "/crossSectionArea");
        }
        else {
            LOG(ERROR) << "Required element crossSectionArea is missing at xpath " << xpath;
        }

        // read element optionalAux1
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux1")) {
            m_optionalAux1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/optionalAux1");
        }

        // read element optionalAux2
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux2")) {
            m_optionalAux2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/optionalAux2");
        }

    }

    void CPACSMaterialDefinitionForProfileBasedPoint::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "pointUID", "materialUID", "crossSectionArea", "optionalAux1", "optionalAux2" };

        // write element pointUID
        if (m_pointUID) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/pointUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/pointUID", *m_pointUID);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/pointUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/pointUID");
            }
        }

        // write element materialUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/materialUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", m_materialUID);

        // write element crossSectionArea
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/crossSectionArea", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/crossSectionArea", m_crossSectionArea);

        // write element optionalAux1
        if (m_optionalAux1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/optionalAux1", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/optionalAux1", *m_optionalAux1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux1")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/optionalAux1");
            }
        }

        // write element optionalAux2
        if (m_optionalAux2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/optionalAux2", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/optionalAux2", *m_optionalAux2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/optionalAux2")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/optionalAux2");
            }
        }

    }

    const boost::optional<std::string>& CPACSMaterialDefinitionForProfileBasedPoint::GetPointUID() const
    {
        return m_pointUID;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::SetPointUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_pointUID && !m_pointUID->empty()) m_uidMgr->TryUnregisterReference(*m_pointUID, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_pointUID = value;
    }

    const std::string& CPACSMaterialDefinitionForProfileBasedPoint::GetMaterialUID() const
    {
        return m_materialUID;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::SetMaterialUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_materialUID.empty()) m_uidMgr->TryUnregisterReference(m_materialUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_materialUID = value;
    }

    const double& CPACSMaterialDefinitionForProfileBasedPoint::GetCrossSectionArea() const
    {
        return m_crossSectionArea;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::SetCrossSectionArea(const double& value)
    {
        m_crossSectionArea = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBasedPoint::GetOptionalAux1() const
    {
        return m_optionalAux1;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux1(const boost::optional<double>& value)
    {
        m_optionalAux1 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBasedPoint::GetOptionalAux2() const
    {
        return m_optionalAux2;
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::SetOptionalAux2(const boost::optional<double>& value)
    {
        m_optionalAux2 = value;
    }

    const CTiglUIDObject* CPACSMaterialDefinitionForProfileBasedPoint::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSMaterialDefinitionForProfileBasedPoint::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_pointUID && *m_pointUID == oldUid) {
            m_pointUID = newUid;
        }
        if (m_materialUID == oldUid) {
            m_materialUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
