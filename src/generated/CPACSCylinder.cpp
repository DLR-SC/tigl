// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCylinder.h"
#include "CPACSElementGeometry.h"
#include "CPACSElementGeometryAddtionalPart.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCylinder::CPACSCylinder(CPACSElementGeometry* parent)
        : m_radius(0)
        , m_height(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometry);
    }

    CPACSCylinder::CPACSCylinder(CPACSElementGeometryAddtionalPart* parent)
        : m_radius(0)
        , m_height(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometryAddtionalPart);
    }

    CPACSCylinder::~CPACSCylinder()
    {
    }

    const CTiglUIDObject* CPACSCylinder::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCylinder::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    void CPACSCylinder::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element radius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/radius")) {
            m_radius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/radius");
        }
        else {
            LOG(ERROR) << "Required element radius is missing at xpath " << xpath;
        }

        // read element height
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/height")) {
            m_height = tixi::TixiGetElement<double>(tixiHandle, xpath + "/height");
        }
        else {
            LOG(ERROR) << "Required element height is missing at xpath " << xpath;
        }

    }

    void CPACSCylinder::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element radius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/radius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/radius", m_radius);

        // write element height
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/height");
        tixi::TixiSaveElement(tixiHandle, xpath + "/height", m_height);

    }

    const double& CPACSCylinder::GetRadius() const
    {
        return m_radius;
    }

    void CPACSCylinder::SetRadius(const double& value)
    {
        m_radius = value;
    }

    const double& CPACSCylinder::GetHeight() const
    {
        return m_height;
    }

    void CPACSCylinder::SetHeight(const double& value)
    {
        m_height = value;
    }

} // namespace generated
} // namespace tigl
