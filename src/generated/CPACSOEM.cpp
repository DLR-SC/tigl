// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSOEM.h"

namespace tigl
{
    namespace generated
    {
        CPACSOEM::CPACSOEM(){}
        CPACSOEM::~CPACSOEM() {}
        
        void CPACSOEM::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mEM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEM")) {
                m_mEM = boost::in_place();
                try {
                    m_mEM->ReadCPACS(tixiHandle, xpath + "/mEM");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEM at xpath << " << xpath << ": " << e.what();
                    m_mEM = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEM at xpath << " << xpath << ": " << e.getError();
                    m_mEM = boost::none;
                }
            }
            
            // read element mOperatorItems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mOperatorItems")) {
                m_mOperatorItems = boost::in_place();
                try {
                    m_mOperatorItems->ReadCPACS(tixiHandle, xpath + "/mOperatorItems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mOperatorItems at xpath << " << xpath << ": " << e.what();
                    m_mOperatorItems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mOperatorItems at xpath << " << xpath << ": " << e.getError();
                    m_mOperatorItems = boost::none;
                }
            }
            
        }
        
        void CPACSOEM::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mEM
            if (m_mEM) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEM");
                m_mEM->WriteCPACS(tixiHandle, xpath + "/mEM");
            }
            
            // write element mOperatorItems
            if (m_mOperatorItems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mOperatorItems");
                m_mOperatorItems->WriteCPACS(tixiHandle, xpath + "/mOperatorItems");
            }
            
        }
        
        const CPACSGenericMass& CPACSOEM::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSOEM::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSOEM::HasMEM() const
        {
            return static_cast<bool>(m_mEM);
        }
        
        const CPACSMManufacturerEmpty& CPACSOEM::GetMEM() const
        {
            return *m_mEM;
        }
        
        CPACSMManufacturerEmpty& CPACSOEM::GetMEM()
        {
            return *m_mEM;
        }
        
        bool CPACSOEM::HasMOperatorItems() const
        {
            return static_cast<bool>(m_mOperatorItems);
        }
        
        const CPACSMOperatorItems& CPACSOEM::GetMOperatorItems() const
        {
            return *m_mOperatorItems;
        }
        
        CPACSMOperatorItems& CPACSOEM::GetMOperatorItems()
        {
            return *m_mOperatorItems;
        }
        
    }
}
