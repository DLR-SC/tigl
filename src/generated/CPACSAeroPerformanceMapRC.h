// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include "CPACSTool.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSDampingDerivativesRates.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAeroPerformanceMaps
        
        // generated from /xsd:schema/xsd:complexType[33]
        class CPACSAeroPerformanceMapRC
        {
        public:
            TIGL_EXPORT CPACSAeroPerformanceMapRC();
            TIGL_EXPORT virtual ~CPACSAeroPerformanceMapRC();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CCPACSStringVector& GetMachNumber() const;
            TIGL_EXPORT CCPACSStringVector& GetMachNumber();
            
            TIGL_EXPORT const CCPACSStringVector& GetReynoldsNumber() const;
            TIGL_EXPORT CCPACSStringVector& GetReynoldsNumber();
            
            TIGL_EXPORT const CCPACSStringVector& GetAngleOfYaw() const;
            TIGL_EXPORT CCPACSStringVector& GetAngleOfYaw();
            
            TIGL_EXPORT const CCPACSStringVector& GetAngleOfAttack() const;
            TIGL_EXPORT CCPACSStringVector& GetAngleOfAttack();
            
            TIGL_EXPORT bool HasAnalysisTool() const;
            TIGL_EXPORT const CPACSTool& GetAnalysisTool() const;
            TIGL_EXPORT CPACSTool& GetAnalysisTool();
            
            TIGL_EXPORT bool HasAnalysisLevel() const;
            TIGL_EXPORT const int& GetAnalysisLevel() const;
            TIGL_EXPORT void SetAnalysisLevel(const int& value);
            
            TIGL_EXPORT bool HasCfx() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCfx() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCfx();
            
            TIGL_EXPORT bool HasCfy() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCfy() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCfy();
            
            TIGL_EXPORT bool HasCfz() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCfz() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCfz();
            
            TIGL_EXPORT bool HasCmx() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCmx() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCmx();
            
            TIGL_EXPORT bool HasCmy() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCmy() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCmy();
            
            TIGL_EXPORT bool HasCmz() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetCmz() const;
            TIGL_EXPORT CPACSStringArrayBase& GetCmz();
            
            TIGL_EXPORT bool HasDampingDerivatives() const;
            TIGL_EXPORT const CPACSDampingDerivativesRates& GetDampingDerivatives() const;
            TIGL_EXPORT CPACSDampingDerivativesRates& GetDampingDerivatives();
            
        protected:
            CCPACSStringVector                            m_machNumber;
            CCPACSStringVector                            m_reynoldsNumber;
            CCPACSStringVector                            m_angleOfYaw;
            CCPACSStringVector                            m_angleOfAttack;
            boost::optional<CPACSTool>                    m_analysisTool;
            boost::optional<int>                          m_analysisLevel;
            boost::optional<CPACSStringArrayBase>         m_cfx;
            boost::optional<CPACSStringArrayBase>         m_cfy;
            boost::optional<CPACSStringArrayBase>         m_cfz;
            boost::optional<CPACSStringArrayBase>         m_cmx;
            boost::optional<CPACSStringArrayBase>         m_cmy;
            boost::optional<CPACSStringArrayBase>         m_cmz;
            boost::optional<CPACSDampingDerivativesRates> m_dampingDerivatives;
            
        private:
            #ifdef HAVE_CPP11
            CPACSAeroPerformanceMapRC(const CPACSAeroPerformanceMapRC&) = delete;
            CPACSAeroPerformanceMapRC& operator=(const CPACSAeroPerformanceMapRC&) = delete;
            
            CPACSAeroPerformanceMapRC(CPACSAeroPerformanceMapRC&&) = delete;
            CPACSAeroPerformanceMapRC& operator=(CPACSAeroPerformanceMapRC&&) = delete;
            #else
            CPACSAeroPerformanceMapRC(const CPACSAeroPerformanceMapRC&);
            CPACSAeroPerformanceMapRC& operator=(const CPACSAeroPerformanceMapRC&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSAeroPerformanceMapRC = generated::CPACSAeroPerformanceMapRC;
    #else
    typedef generated::CPACSAeroPerformanceMapRC CCPACSAeroPerformanceMapRC;
    #endif
}
