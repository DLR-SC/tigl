// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSteffsValidationParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSSteffsValidationParameters::CPACSSteffsValidationParameters(){}
        CPACSSteffsValidationParameters::~CPACSSteffsValidationParameters() {}
        
        void CPACSSteffsValidationParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element validation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/validation")) {
                m_validation = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/validation");
            }
            else {
                LOG(ERROR) << "Required element validation is missing";
            }
            
            // read element validationModel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/validationModel")) {
                m_validationModel.ReadCPACS(tixiHandle, xpath + "/validationModel");
            }
            else {
                LOG(ERROR) << "Required element validationModel is missing";
            }
            
            // read element validationMaterial
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/validationMaterial")) {
                m_validationMaterial.ReadCPACS(tixiHandle, xpath + "/validationMaterial");
            }
            else {
                LOG(ERROR) << "Required element validationMaterial is missing";
            }
            
            // read element validationBucklingFactors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/validationBucklingFactors")) {
                m_validationBucklingFactors.ReadCPACS(tixiHandle, xpath + "/validationBucklingFactors");
            }
            else {
                LOG(ERROR) << "Required element validationBucklingFactors is missing";
            }
            
        }
        
        void CPACSSteffsValidationParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element validation
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/validation");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/validation", m_validation);
            
            // write element validationModel
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/validationModel");
            m_validationModel.WriteCPACS(tixiHandle, xpath + "/validationModel");
            
            // write element validationMaterial
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/validationMaterial");
            m_validationMaterial.WriteCPACS(tixiHandle, xpath + "/validationMaterial");
            
            // write element validationBucklingFactors
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/validationBucklingFactors");
            m_validationBucklingFactors.WriteCPACS(tixiHandle, xpath + "/validationBucklingFactors");
            
        }
        
        const bool& CPACSSteffsValidationParameters::GetValidation() const
        {
            return m_validation;
        }
        
        void CPACSSteffsValidationParameters::SetValidation(const bool& value)
        {
            m_validation = value;
        }
        
        const CPACSSteffsValidationModel& CPACSSteffsValidationParameters::GetValidationModel() const
        {
            return m_validationModel;
        }
        
        CPACSSteffsValidationModel& CPACSSteffsValidationParameters::GetValidationModel()
        {
            return m_validationModel;
        }
        
        const CPACSSteffsValidationMaterial& CPACSSteffsValidationParameters::GetValidationMaterial() const
        {
            return m_validationMaterial;
        }
        
        CPACSSteffsValidationMaterial& CPACSSteffsValidationParameters::GetValidationMaterial()
        {
            return m_validationMaterial;
        }
        
        const CPACSSteffsValidationBucklingFactors& CPACSSteffsValidationParameters::GetValidationBucklingFactors() const
        {
            return m_validationBucklingFactors;
        }
        
        CPACSSteffsValidationBucklingFactors& CPACSSteffsValidationParameters::GetValidationBucklingFactors()
        {
            return m_validationBucklingFactors;
        }
        
    }
}
