// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSFuselageCoefficients.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFuselagesCoefficients.h"

namespace tigl
{
    namespace generated
    {
        CPACSFuselagesCoefficients::CPACSFuselagesCoefficients(){}
        CPACSFuselagesCoefficients::~CPACSFuselagesCoefficients() {}
        
        void CPACSFuselagesCoefficients::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element fuselage
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselage")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/fuselage", m_fuselage);
            }
            
            // read element calibration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/calibration")) {
                m_calibration = boost::in_place();
                try {
                    m_calibration->ReadCPACS(tixiHandle, xpath + "/calibration");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read calibration at xpath << " << xpath << ": " << e.what();
                    m_calibration = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read calibration at xpath << " << xpath << ": " << e.getError();
                    m_calibration = boost::none;
                }
            }
            
        }
        
        void CPACSFuselagesCoefficients::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element fuselage
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/fuselage", m_fuselage);
            
            // write element calibration
            if (m_calibration) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/calibration");
                m_calibration->WriteCPACS(tixiHandle, xpath + "/calibration");
            }
            
        }
        
        const std::vector<unique_ptr<CPACSFuselageCoefficients>>& CPACSFuselagesCoefficients::GetFuselage() const
        {
            return m_fuselage;
        }
        
        std::vector<unique_ptr<CPACSFuselageCoefficients>>& CPACSFuselagesCoefficients::GetFuselage()
        {
            return m_fuselage;
        }
        
        bool CPACSFuselagesCoefficients::HasCalibration() const
        {
            return static_cast<bool>(m_calibration);
        }
        
        const CPACSCoefficients& CPACSFuselagesCoefficients::GetCalibration() const
        {
            return *m_calibration;
        }
        
        CPACSCoefficients& CPACSFuselagesCoefficients::GetCalibration()
        {
            return *m_calibration;
        }
        
    }
}
