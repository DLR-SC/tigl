// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include <vector>
#include "CTiglError.h"
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSFrame;
class CCPACSDuctStructure;
class CCPACSFuselageStructure;

namespace generated
{
    class CPACSHullStructure;

    // This class is used in:
    // CPACSDuctStructure
    // CPACSFuselageStructure
    // CPACSHullStructure

    /// @brief framesAssemblyType
    /// 
    /// FramesAssembly type, containing frames assembly
    /// 
    class CPACSFramesAssembly
    {
    public:
        TIGL_EXPORT CPACSFramesAssembly(CCPACSDuctStructure* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSFramesAssembly(CCPACSFuselageStructure* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSFramesAssembly(CPACSHullStructure* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSFramesAssembly();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CCPACSDuctStructure>::value || std::is_same<P, CCPACSFuselageStructure>::value || std::is_same<P, CPACSHullStructure>::value, "template argument for P is not a parent class of CPACSFramesAssembly");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CCPACSDuctStructure>::value || std::is_same<P, CCPACSFuselageStructure>::value || std::is_same<P, CPACSHullStructure>::value, "template argument for P is not a parent class of CPACSFramesAssembly");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CCPACSFrame>>& GetFrames() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CCPACSFrame>>& GetFrames();

        TIGL_EXPORT virtual CCPACSFrame& AddFrame();
        TIGL_EXPORT virtual void RemoveFrame(CCPACSFrame& ref);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::vector<std::unique_ptr<CCPACSFrame>> m_frames;

    private:
        CPACSFramesAssembly(const CPACSFramesAssembly&) = delete;
        CPACSFramesAssembly& operator=(const CPACSFramesAssembly&) = delete;

        CPACSFramesAssembly(CPACSFramesAssembly&&) = delete;
        CPACSFramesAssembly& operator=(CPACSFramesAssembly&&) = delete;
    };
} // namespace generated

// CPACSFramesAssembly is customized, use type CCPACSFramesAssembly directly

// Aliases in tigl namespace
using CCPACSHullStructure = generated::CPACSHullStructure;
} // namespace tigl
