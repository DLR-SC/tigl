// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSStructuralMounts;

    // This class is used in:
    // CPACSStructuralMounts

    /// @brief structuralMountType
    /// 
    /// 
    /// 
    class CPACSStructuralMount : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSStructuralMount(CPACSStructuralMounts* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSStructuralMount();

        TIGL_EXPORT CPACSStructuralMounts* GetParent();

        TIGL_EXPORT const CPACSStructuralMounts* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const int& GetBlockedDOF() const;
        TIGL_EXPORT virtual void SetBlockedDOF(const int& value);

        TIGL_EXPORT virtual const bool& GetTakeOnlyEndPoints() const;
        TIGL_EXPORT virtual void SetTakeOnlyEndPoints(const bool& value);

        TIGL_EXPORT virtual const std::string& GetFromStructureUID() const;
        TIGL_EXPORT virtual void SetFromStructureUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<int>& GetFromStructureCounter() const;
        TIGL_EXPORT virtual void SetFromStructureCounter(const boost::optional<int>& value);

        TIGL_EXPORT virtual const std::string& GetToStructureUID() const;
        TIGL_EXPORT virtual void SetToStructureUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<int>& GetToStructureCounter() const;
        TIGL_EXPORT virtual void SetToStructureCounter(const boost::optional<int>& value);

    protected:
        CPACSStructuralMounts* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string          m_uID;

        int                  m_blockedDOF;

        /// If this value is set to true then only the end points of the intersection shall be included as nodes in the model.
        bool                 m_takeOnlyEndPoints;

        /// The UID for the first connection UID may include for wings: skin, sparUID, ribDefinitionUID, ribNumber, stringerUID, stingerNumber, and for fuselages: skinSegmentUID, frameUID, stringerUID, crossBeamUID, crossBeamStrutUID, longFloorBeamUID.
        std::string          m_fromStructureUID;

        /// Optional counter to specify numbered items, e.g. ribs in a ribSet.
        boost::optional<int> m_fromStructureCounter;

        /// The UID for the second connection UID may include for wings: skin, sparUID, ribDefinitionUID, ribNumber, stringerUID, stingerNumber, and for fuselages: skinSegmentUID, frameUID, stringerUID, crossBeamUID, crossBeamStrutUID, longFloorBeamUID.
        std::string          m_toStructureUID;

        /// Optional counter to specify numbered items, e.g. ribs in a ribSet.
        boost::optional<int> m_toStructureCounter;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSStructuralMount(const CPACSStructuralMount&) = delete;
        CPACSStructuralMount& operator=(const CPACSStructuralMount&) = delete;

        CPACSStructuralMount(CPACSStructuralMount&&) = delete;
        CPACSStructuralMount& operator=(CPACSStructuralMount&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSStructuralMount = generated::CPACSStructuralMount;
using CCPACSStructuralMounts = generated::CPACSStructuralMounts;
} // namespace tigl
