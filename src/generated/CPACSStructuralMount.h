// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSWingStructuralMounts
        
        // generated from /xsd:schema/xsd:complexType[812]
        class CPACSStructuralMount
        {
        public:
            TIGL_EXPORT CPACSStructuralMount();
            TIGL_EXPORT virtual ~CPACSStructuralMount();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const int& GetBlockedDOF() const;
            TIGL_EXPORT void SetBlockedDOF(const int& value);
            
            TIGL_EXPORT const bool& GetTakeOnlyEndPoints() const;
            TIGL_EXPORT void SetTakeOnlyEndPoints(const bool& value);
            
            TIGL_EXPORT const std::string& GetFromStructureUID() const;
            TIGL_EXPORT void SetFromStructureUID(const std::string& value);
            
            TIGL_EXPORT bool HasFromStructureCounter() const;
            TIGL_EXPORT const int& GetFromStructureCounter() const;
            TIGL_EXPORT void SetFromStructureCounter(const int& value);
            
            TIGL_EXPORT const std::string& GetToStructureUID() const;
            TIGL_EXPORT void SetToStructureUID(const std::string& value);
            
            TIGL_EXPORT bool HasToStructureCounter() const;
            TIGL_EXPORT const int& GetToStructureCounter() const;
            TIGL_EXPORT void SetToStructureCounter(const int& value);
            
        protected:
            std::string          m_uID;
            int                  m_blockedDOF;
            bool                 m_takeOnlyEndPoints;
            std::string          m_fromStructureUID;
            boost::optional<int> m_fromStructureCounter;
            std::string          m_toStructureUID;
            boost::optional<int> m_toStructureCounter;
            
        private:
            #ifdef HAVE_CPP11
            CPACSStructuralMount(const CPACSStructuralMount&) = delete;
            CPACSStructuralMount& operator=(const CPACSStructuralMount&) = delete;
            
            CPACSStructuralMount(CPACSStructuralMount&&) = delete;
            CPACSStructuralMount& operator=(CPACSStructuralMount&&) = delete;
            #else
            CPACSStructuralMount(const CPACSStructuralMount&);
            CPACSStructuralMount& operator=(const CPACSStructuralMount&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSStructuralMount = generated::CPACSStructuralMount;
    #else
    typedef generated::CPACSStructuralMount CCPACSStructuralMount;
    #endif
}
