// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSSpoilers.h"
#include "CPACSSpoiler.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSpoiler::CPACSSpoiler(CCPACSSpoilers* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_outerShape(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr)
        , m_path(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSpoiler::~CPACSSpoiler()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_parentUID.empty()) m_uidMgr->TryUnregisterReference(m_parentUID, *this);
        }
    }

    const CCPACSSpoilers* CPACSSpoiler::GetParent() const
    {
        return m_parent;
    }

    CCPACSSpoilers* CPACSSpoiler::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSpoiler::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSpoiler::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSpoiler::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSpoiler::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSSpoiler::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element parentUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
            m_parentUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            if (m_parentUID.empty()) {
                LOG(WARNING) << "Required element parentUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_parentUID.empty()) m_uidMgr->RegisterReference(m_parentUID, *this);
        }
        else {
            LOG(ERROR) << "Required element parentUID is missing at xpath " << xpath;
        }

        // read element outerShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/outerShape")) {
            m_outerShape.ReadCPACS(tixiHandle, xpath + "/outerShape");
        }
        else {
            LOG(ERROR) << "Required element outerShape is missing at xpath " << xpath;
        }

        // read element wingCutOut
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/wingCutOut")) {
            m_wingCutOut = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
            try {
                m_wingCutOut->ReadCPACS(tixiHandle, xpath + "/wingCutOut");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read wingCutOut at xpath " << xpath << ": " << e.what();
                m_wingCutOut = boost::none;
            }
        }

        // read element structure
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structure")) {
            m_structure = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
            try {
                m_structure->ReadCPACS(tixiHandle, xpath + "/structure");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read structure at xpath " << xpath << ": " << e.what();
                m_structure = boost::none;
            }
        }

        // read element path
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/path")) {
            m_path.ReadCPACS(tixiHandle, xpath + "/path");
        }
        else {
            LOG(ERROR) << "Required element path is missing at xpath " << xpath;
        }

        // read element tracks
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/tracks")) {
            m_tracks = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
            try {
                m_tracks->ReadCPACS(tixiHandle, xpath + "/tracks");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read tracks at xpath " << xpath << ": " << e.what();
                m_tracks = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSSpoiler::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element parentUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/parentUID", m_parentUID);

        // write element outerShape
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerShape");
        m_outerShape.WriteCPACS(tixiHandle, xpath + "/outerShape");

        // write element wingCutOut
        if (m_wingCutOut) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingCutOut");
            m_wingCutOut->WriteCPACS(tixiHandle, xpath + "/wingCutOut");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/wingCutOut")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/wingCutOut");
            }
        }

        // write element structure
        if (m_structure) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structure");
            m_structure->WriteCPACS(tixiHandle, xpath + "/structure");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structure")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structure");
            }
        }

        // write element path
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/path");
        m_path.WriteCPACS(tixiHandle, xpath + "/path");

        // write element tracks
        if (m_tracks) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tracks");
            m_tracks->WriteCPACS(tixiHandle, xpath + "/tracks");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/tracks")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/tracks");
            }
        }

    }

    const std::string& CPACSSpoiler::GetUID() const
    {
        return m_uID;
    }

    void CPACSSpoiler::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSSpoiler::GetName() const
    {
        return m_name;
    }

    void CPACSSpoiler::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSSpoiler::GetDescription() const
    {
        return m_description;
    }

    void CPACSSpoiler::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const std::string& CPACSSpoiler::GetParentUID() const
    {
        return m_parentUID;
    }

    void CPACSSpoiler::SetParentUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_parentUID.empty()) m_uidMgr->TryUnregisterReference(m_parentUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_parentUID = value;
    }

    const CPACSControlSurfaceOuterShapeSpoiler& CPACSSpoiler::GetOuterShape() const
    {
        return m_outerShape;
    }

    CPACSControlSurfaceOuterShapeSpoiler& CPACSSpoiler::GetOuterShape()
    {
        return m_outerShape;
    }

    const boost::optional<CCPACSControlSurfaceWingCutOut>& CPACSSpoiler::GetWingCutOut() const
    {
        return m_wingCutOut;
    }

    boost::optional<CCPACSControlSurfaceWingCutOut>& CPACSSpoiler::GetWingCutOut()
    {
        return m_wingCutOut;
    }

    const boost::optional<CCPACSWingCSStructure>& CPACSSpoiler::GetStructure() const
    {
        return m_structure;
    }

    boost::optional<CCPACSWingCSStructure>& CPACSSpoiler::GetStructure()
    {
        return m_structure;
    }

    const CPACSControlSurfacePath& CPACSSpoiler::GetPath() const
    {
        return m_path;
    }

    CPACSControlSurfacePath& CPACSSpoiler::GetPath()
    {
        return m_path;
    }

    const boost::optional<CPACSControlSurfaceTracks>& CPACSSpoiler::GetTracks() const
    {
        return m_tracks;
    }

    boost::optional<CPACSControlSurfaceTracks>& CPACSSpoiler::GetTracks()
    {
        return m_tracks;
    }

    CCPACSControlSurfaceWingCutOut& CPACSSpoiler::GetWingCutOut(CreateIfNotExistsTag)
    {
        if (!m_wingCutOut)
            m_wingCutOut = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
        return *m_wingCutOut;
    }

    void CPACSSpoiler::RemoveWingCutOut()
    {
        m_wingCutOut = boost::none;
    }

    CCPACSWingCSStructure& CPACSSpoiler::GetStructure(CreateIfNotExistsTag)
    {
        if (!m_structure)
            m_structure = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
        return *m_structure;
    }

    void CPACSSpoiler::RemoveStructure()
    {
        m_structure = boost::none;
    }

    CPACSControlSurfaceTracks& CPACSSpoiler::GetTracks(CreateIfNotExistsTag)
    {
        if (!m_tracks)
            m_tracks = boost::in_place(reinterpret_cast<CCPACSSpoiler*>(this), m_uidMgr);
        return *m_tracks;
    }

    void CPACSSpoiler::RemoveTracks()
    {
        m_tracks = boost::none;
    }

    const CTiglUIDObject* CPACSSpoiler::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSSpoiler::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_parentUID == oldUid) {
            m_parentUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
