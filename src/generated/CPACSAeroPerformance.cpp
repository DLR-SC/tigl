// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAeroPerformance.h"

namespace tigl
{
    namespace generated
    {
        CPACSAeroPerformance::CPACSAeroPerformance(){}
        CPACSAeroPerformance::~CPACSAeroPerformance() {}
        
        void CPACSAeroPerformance::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element globalAeroPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/globalAeroPerformance")) {
                m_globalAeroPerformance = boost::in_place();
                try {
                    m_globalAeroPerformance->ReadCPACS(tixiHandle, xpath + "/globalAeroPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read globalAeroPerformance at xpath << " << xpath << ": " << e.what();
                    m_globalAeroPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read globalAeroPerformance at xpath << " << xpath << ": " << e.getError();
                    m_globalAeroPerformance = boost::none;
                }
            }
            
            // read element fuselagesAeroPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselagesAeroPerformance")) {
                m_fuselagesAeroPerformance = boost::in_place();
                try {
                    m_fuselagesAeroPerformance->ReadCPACS(tixiHandle, xpath + "/fuselagesAeroPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuselagesAeroPerformance at xpath << " << xpath << ": " << e.what();
                    m_fuselagesAeroPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuselagesAeroPerformance at xpath << " << xpath << ": " << e.getError();
                    m_fuselagesAeroPerformance = boost::none;
                }
            }
            
            // read element wingsAeroPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingsAeroPerformance")) {
                m_wingsAeroPerformance = boost::in_place();
                try {
                    m_wingsAeroPerformance->ReadCPACS(tixiHandle, xpath + "/wingsAeroPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingsAeroPerformance at xpath << " << xpath << ": " << e.what();
                    m_wingsAeroPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingsAeroPerformance at xpath << " << xpath << ": " << e.getError();
                    m_wingsAeroPerformance = boost::none;
                }
            }
            
            // read element controlSurfacesAeroPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfacesAeroPerformance")) {
                m_controlSurfacesAeroPerformance = boost::in_place();
                try {
                    m_controlSurfacesAeroPerformance->ReadCPACS(tixiHandle, xpath + "/controlSurfacesAeroPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfacesAeroPerformance at xpath << " << xpath << ": " << e.what();
                    m_controlSurfacesAeroPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfacesAeroPerformance at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfacesAeroPerformance = boost::none;
                }
            }
            
            // read element airfoilsAeroPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/airfoilsAeroPerformance")) {
                m_airfoilsAeroPerformance = boost::in_place();
                try {
                    m_airfoilsAeroPerformance->ReadCPACS(tixiHandle, xpath + "/airfoilsAeroPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read airfoilsAeroPerformance at xpath << " << xpath << ": " << e.what();
                    m_airfoilsAeroPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read airfoilsAeroPerformance at xpath << " << xpath << ": " << e.getError();
                    m_airfoilsAeroPerformance = boost::none;
                }
            }
            
        }
        
        void CPACSAeroPerformance::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element globalAeroPerformance
            if (m_globalAeroPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/globalAeroPerformance");
                m_globalAeroPerformance->WriteCPACS(tixiHandle, xpath + "/globalAeroPerformance");
            }
            
            // write element fuselagesAeroPerformance
            if (m_fuselagesAeroPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselagesAeroPerformance");
                m_fuselagesAeroPerformance->WriteCPACS(tixiHandle, xpath + "/fuselagesAeroPerformance");
            }
            
            // write element wingsAeroPerformance
            if (m_wingsAeroPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingsAeroPerformance");
                m_wingsAeroPerformance->WriteCPACS(tixiHandle, xpath + "/wingsAeroPerformance");
            }
            
            // write element controlSurfacesAeroPerformance
            if (m_controlSurfacesAeroPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfacesAeroPerformance");
                m_controlSurfacesAeroPerformance->WriteCPACS(tixiHandle, xpath + "/controlSurfacesAeroPerformance");
            }
            
            // write element airfoilsAeroPerformance
            if (m_airfoilsAeroPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airfoilsAeroPerformance");
                m_airfoilsAeroPerformance->WriteCPACS(tixiHandle, xpath + "/airfoilsAeroPerformance");
            }
            
        }
        
        bool CPACSAeroPerformance::HasGlobalAeroPerformance() const
        {
            return static_cast<bool>(m_globalAeroPerformance);
        }
        
        const CPACSGlobalAeroPerformance& CPACSAeroPerformance::GetGlobalAeroPerformance() const
        {
            return *m_globalAeroPerformance;
        }
        
        CPACSGlobalAeroPerformance& CPACSAeroPerformance::GetGlobalAeroPerformance()
        {
            return *m_globalAeroPerformance;
        }
        
        bool CPACSAeroPerformance::HasFuselagesAeroPerformance() const
        {
            return static_cast<bool>(m_fuselagesAeroPerformance);
        }
        
        const CPACSFuselagesAeroPerformance& CPACSAeroPerformance::GetFuselagesAeroPerformance() const
        {
            return *m_fuselagesAeroPerformance;
        }
        
        CPACSFuselagesAeroPerformance& CPACSAeroPerformance::GetFuselagesAeroPerformance()
        {
            return *m_fuselagesAeroPerformance;
        }
        
        bool CPACSAeroPerformance::HasWingsAeroPerformance() const
        {
            return static_cast<bool>(m_wingsAeroPerformance);
        }
        
        const CPACSWingsAeroPerformance& CPACSAeroPerformance::GetWingsAeroPerformance() const
        {
            return *m_wingsAeroPerformance;
        }
        
        CPACSWingsAeroPerformance& CPACSAeroPerformance::GetWingsAeroPerformance()
        {
            return *m_wingsAeroPerformance;
        }
        
        bool CPACSAeroPerformance::HasControlSurfacesAeroPerformance() const
        {
            return static_cast<bool>(m_controlSurfacesAeroPerformance);
        }
        
        const CPACSControlSurfacePerformanceMaps& CPACSAeroPerformance::GetControlSurfacesAeroPerformance() const
        {
            return *m_controlSurfacesAeroPerformance;
        }
        
        CPACSControlSurfacePerformanceMaps& CPACSAeroPerformance::GetControlSurfacesAeroPerformance()
        {
            return *m_controlSurfacesAeroPerformance;
        }
        
        bool CPACSAeroPerformance::HasAirfoilsAeroPerformance() const
        {
            return static_cast<bool>(m_airfoilsAeroPerformance);
        }
        
        const CPACSAirfoilsAeroPerformance& CPACSAeroPerformance::GetAirfoilsAeroPerformance() const
        {
            return *m_airfoilsAeroPerformance;
        }
        
        CPACSAirfoilsAeroPerformance& CPACSAeroPerformance::GetAirfoilsAeroPerformance()
        {
            return *m_airfoilsAeroPerformance;
        }
        
    }
}
