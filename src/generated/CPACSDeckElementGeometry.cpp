// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDeckElementBase.h"
#include "CPACSDeckElementGeometry.h"
#include "CPACSGalleyElement.h"
#include "CPACSSeatElement.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDeckElementGeometry::CPACSDeckElementGeometry(CPACSDeckElementBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSDeckElementBase);
    }

    CPACSDeckElementGeometry::CPACSDeckElementGeometry(CPACSGalleyElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGalleyElement);
    }

    CPACSDeckElementGeometry::CPACSDeckElementGeometry(CPACSSeatElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSeatElement);
    }

    CPACSDeckElementGeometry::~CPACSDeckElementGeometry()
    {
    }

    const CTiglUIDObject* CPACSDeckElementGeometry::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSDeckElementBase>()) {
                return GetParent<CPACSDeckElementBase>();
            }
            if (IsParent<CPACSGalleyElement>()) {
                return GetParent<CPACSGalleyElement>();
            }
            if (IsParent<CPACSSeatElement>()) {
                return GetParent<CPACSSeatElement>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSDeckElementGeometry::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSDeckElementBase>()) {
                return GetParent<CPACSDeckElementBase>();
            }
            if (IsParent<CPACSGalleyElement>()) {
                return GetParent<CPACSGalleyElement>();
            }
            if (IsParent<CPACSSeatElement>()) {
                return GetParent<CPACSSeatElement>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSDeckElementGeometry::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDeckElementGeometry::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSDeckElementGeometry::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element genericGeometryComponent
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericGeometryComponent")) {
            m_genericGeometryComponent_choice1 = boost::in_place(this, m_uidMgr);
            try {
                m_genericGeometryComponent_choice1->ReadCPACS(tixiHandle, xpath + "/genericGeometryComponent");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read genericGeometryComponent at xpath " << xpath << ": " << e.what();
                m_genericGeometryComponent_choice1 = boost::none;
            }
        }

        // read element boundingBox
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/boundingBox")) {
            m_boundingBox_choice2 = boost::in_place(this, m_uidMgr);
            try {
                m_boundingBox_choice2->ReadCPACS(tixiHandle, xpath + "/boundingBox");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read boundingBox at xpath " << xpath << ": " << e.what();
                m_boundingBox_choice2 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSDeckElementGeometry::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element genericGeometryComponent
        if (m_genericGeometryComponent_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericGeometryComponent");
            m_genericGeometryComponent_choice1->WriteCPACS(tixiHandle, xpath + "/genericGeometryComponent");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericGeometryComponent")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/genericGeometryComponent");
            }
        }

        // write element boundingBox
        if (m_boundingBox_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/boundingBox");
            m_boundingBox_choice2->WriteCPACS(tixiHandle, xpath + "/boundingBox");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/boundingBox")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/boundingBox");
            }
        }

    }

    bool CPACSDeckElementGeometry::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_genericGeometryComponent_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_boundingBox_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_boundingBox_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_genericGeometryComponent_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<CPACSGenericGeometryComponent>& CPACSDeckElementGeometry::GetGenericGeometryComponent_choice1() const
    {
        return m_genericGeometryComponent_choice1;
    }

    boost::optional<CPACSGenericGeometryComponent>& CPACSDeckElementGeometry::GetGenericGeometryComponent_choice1()
    {
        return m_genericGeometryComponent_choice1;
    }

    const boost::optional<CPACSBoundingBox>& CPACSDeckElementGeometry::GetBoundingBox_choice2() const
    {
        return m_boundingBox_choice2;
    }

    boost::optional<CPACSBoundingBox>& CPACSDeckElementGeometry::GetBoundingBox_choice2()
    {
        return m_boundingBox_choice2;
    }

    CPACSGenericGeometryComponent& CPACSDeckElementGeometry::GetGenericGeometryComponent_choice1(CreateIfNotExistsTag)
    {
        if (!m_genericGeometryComponent_choice1)
            m_genericGeometryComponent_choice1 = boost::in_place(this, m_uidMgr);
        return *m_genericGeometryComponent_choice1;
    }

    void CPACSDeckElementGeometry::RemoveGenericGeometryComponent_choice1()
    {
        m_genericGeometryComponent_choice1 = boost::none;
    }

    CPACSBoundingBox& CPACSDeckElementGeometry::GetBoundingBox_choice2(CreateIfNotExistsTag)
    {
        if (!m_boundingBox_choice2)
            m_boundingBox_choice2 = boost::in_place(this, m_uidMgr);
        return *m_boundingBox_choice2;
    }

    void CPACSDeckElementGeometry::RemoveBoundingBox_choice2()
    {
        m_boundingBox_choice2 = boost::none;
    }

} // namespace generated
} // namespace tigl
