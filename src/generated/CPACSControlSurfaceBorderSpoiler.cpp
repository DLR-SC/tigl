// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSControlSurfaceBorderSpoiler.h"
#include "CPACSControlSurfaceOuterShapeSpoiler.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceBorderSpoiler::CPACSControlSurfaceBorderSpoiler(CPACSControlSurfaceOuterShapeSpoiler* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_etaLE(this, m_uidMgr)
        , m_xsiLE(this, m_uidMgr)
        , m_xsiTE(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceBorderSpoiler::~CPACSControlSurfaceBorderSpoiler()
    {
    }

    const CPACSControlSurfaceOuterShapeSpoiler* CPACSControlSurfaceBorderSpoiler::GetParent() const
    {
        return m_parent;
    }

    CPACSControlSurfaceOuterShapeSpoiler* CPACSControlSurfaceBorderSpoiler::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSControlSurfaceBorderSpoiler::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSControlSurfaceBorderSpoiler::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSControlSurfaceBorderSpoiler::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfaceBorderSpoiler::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSControlSurfaceBorderSpoiler::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element etaLE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaLE")) {
            m_etaLE.ReadCPACS(tixiHandle, xpath + "/etaLE");
        }
        else {
            LOG(ERROR) << "Required element etaLE is missing at xpath " << xpath;
        }

        // read element etaTE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
            m_etaTE = boost::in_place(this, m_uidMgr);
            try {
                m_etaTE->ReadCPACS(tixiHandle, xpath + "/etaTE");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read etaTE at xpath " << xpath << ": " << e.what();
                m_etaTE = boost::none;
            }
        }

        // read element xsiLE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiLE")) {
            m_xsiLE.ReadCPACS(tixiHandle, xpath + "/xsiLE");
        }
        else {
            LOG(ERROR) << "Required element xsiLE is missing at xpath " << xpath;
        }

        // read element xsiTE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsiTE")) {
            m_xsiTE.ReadCPACS(tixiHandle, xpath + "/xsiTE");
        }
        else {
            LOG(ERROR) << "Required element xsiTE is missing at xpath " << xpath;
        }

        // read element relHeightLE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relHeightLE")) {
            m_relHeightLE_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/relHeightLE");
        }

        // read element leadingEdgeShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeShape")) {
            m_leadingEdgeShape_choice2 = boost::in_place(this);
            try {
                m_leadingEdgeShape_choice2->ReadCPACS(tixiHandle, xpath + "/leadingEdgeShape");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read leadingEdgeShape at xpath " << xpath << ": " << e.what();
                m_leadingEdgeShape_choice2 = boost::none;
            }
        }

        // read element airfoil
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoil")) {
            m_airfoil_choice3 = boost::in_place(this, m_uidMgr);
            try {
                m_airfoil_choice3->ReadCPACS(tixiHandle, xpath + "/airfoil");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read airfoil at xpath " << xpath << ": " << e.what();
                m_airfoil_choice3 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSControlSurfaceBorderSpoiler::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "etaLE", "etaTE", "xsiLE", "xsiTE", "relHeightLE", "leadingEdgeShape", "airfoil" };

        // write element etaLE
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/etaLE", childElemOrder);
        m_etaLE.WriteCPACS(tixiHandle, xpath + "/etaLE");

        // write element etaTE
        if (m_etaTE) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/etaTE", childElemOrder);
            m_etaTE->WriteCPACS(tixiHandle, xpath + "/etaTE");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/etaTE");
            }
        }

        // write element xsiLE
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/xsiLE", childElemOrder);
        m_xsiLE.WriteCPACS(tixiHandle, xpath + "/xsiLE");

        // write element xsiTE
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/xsiTE", childElemOrder);
        m_xsiTE.WriteCPACS(tixiHandle, xpath + "/xsiTE");

        // write element relHeightLE
        if (m_relHeightLE_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/relHeightLE", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/relHeightLE", *m_relHeightLE_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/relHeightLE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/relHeightLE");
            }
        }

        // write element leadingEdgeShape
        if (m_leadingEdgeShape_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/leadingEdgeShape", childElemOrder);
            m_leadingEdgeShape_choice2->WriteCPACS(tixiHandle, xpath + "/leadingEdgeShape");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeShape")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/leadingEdgeShape");
            }
        }

        // write element airfoil
        if (m_airfoil_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/airfoil", childElemOrder);
            m_airfoil_choice3->WriteCPACS(tixiHandle, xpath + "/airfoil");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoil")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/airfoil");
            }
        }

    }

    bool CPACSControlSurfaceBorderSpoiler::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    true // m_relHeightLE_choice1 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_leadingEdgeShape_choice2.is_initialized()
                        ||
                        m_airfoil_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    true // m_leadingEdgeShape_choice2 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_relHeightLE_choice1.is_initialized()
                        ||
                        m_airfoil_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    true // m_airfoil_choice3 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_relHeightLE_choice1.is_initialized()
                        ||
                        m_leadingEdgeShape_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const CCPACSEtaIsoLine& CPACSControlSurfaceBorderSpoiler::GetEtaLE() const
    {
        return m_etaLE;
    }

    CCPACSEtaIsoLine& CPACSControlSurfaceBorderSpoiler::GetEtaLE()
    {
        return m_etaLE;
    }

    const boost::optional<CCPACSEtaIsoLine>& CPACSControlSurfaceBorderSpoiler::GetEtaTE() const
    {
        return m_etaTE;
    }

    boost::optional<CCPACSEtaIsoLine>& CPACSControlSurfaceBorderSpoiler::GetEtaTE()
    {
        return m_etaTE;
    }

    const CCPACSXsiIsoLine& CPACSControlSurfaceBorderSpoiler::GetXsiLE() const
    {
        return m_xsiLE;
    }

    CCPACSXsiIsoLine& CPACSControlSurfaceBorderSpoiler::GetXsiLE()
    {
        return m_xsiLE;
    }

    const CCPACSXsiIsoLine& CPACSControlSurfaceBorderSpoiler::GetXsiTE() const
    {
        return m_xsiTE;
    }

    CCPACSXsiIsoLine& CPACSControlSurfaceBorderSpoiler::GetXsiTE()
    {
        return m_xsiTE;
    }

    const boost::optional<double>& CPACSControlSurfaceBorderSpoiler::GetRelHeightLE_choice1() const
    {
        return m_relHeightLE_choice1;
    }

    void CPACSControlSurfaceBorderSpoiler::SetRelHeightLE_choice1(const boost::optional<double>& value)
    {
        m_relHeightLE_choice1 = value;
    }

    const boost::optional<CPACSLeadingEdgeShape>& CPACSControlSurfaceBorderSpoiler::GetLeadingEdgeShape_choice2() const
    {
        return m_leadingEdgeShape_choice2;
    }

    boost::optional<CPACSLeadingEdgeShape>& CPACSControlSurfaceBorderSpoiler::GetLeadingEdgeShape_choice2()
    {
        return m_leadingEdgeShape_choice2;
    }

    const boost::optional<CPACSContourReference>& CPACSControlSurfaceBorderSpoiler::GetAirfoil_choice3() const
    {
        return m_airfoil_choice3;
    }

    boost::optional<CPACSContourReference>& CPACSControlSurfaceBorderSpoiler::GetAirfoil_choice3()
    {
        return m_airfoil_choice3;
    }

    CCPACSEtaIsoLine& CPACSControlSurfaceBorderSpoiler::GetEtaTE(CreateIfNotExistsTag)
    {
        if (!m_etaTE)
            m_etaTE = boost::in_place(this, m_uidMgr);
        return *m_etaTE;
    }

    void CPACSControlSurfaceBorderSpoiler::RemoveEtaTE()
    {
        m_etaTE = boost::none;
    }

    CPACSLeadingEdgeShape& CPACSControlSurfaceBorderSpoiler::GetLeadingEdgeShape_choice2(CreateIfNotExistsTag)
    {
        if (!m_leadingEdgeShape_choice2)
            m_leadingEdgeShape_choice2 = boost::in_place(this);
        return *m_leadingEdgeShape_choice2;
    }

    void CPACSControlSurfaceBorderSpoiler::RemoveLeadingEdgeShape_choice2()
    {
        m_leadingEdgeShape_choice2 = boost::none;
    }

    CPACSContourReference& CPACSControlSurfaceBorderSpoiler::GetAirfoil_choice3(CreateIfNotExistsTag)
    {
        if (!m_airfoil_choice3)
            m_airfoil_choice3 = boost::in_place(this, m_uidMgr);
        return *m_airfoil_choice3;
    }

    void CPACSControlSurfaceBorderSpoiler::RemoveAirfoil_choice3()
    {
        m_airfoil_choice3 = boost::none;
    }

} // namespace generated
} // namespace tigl
