// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfaceStep.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfaceStep::CPACSControlSurfaceStep(){}
        CPACSControlSurfaceStep::~CPACSControlSurfaceStep() {}
        
        void CPACSControlSurfaceStep::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element relDeflection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relDeflection")) {
                m_relDeflection = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relDeflection");
            }
            else {
                LOG(ERROR) << "Required element relDeflection is missing";
            }
            
            // read element innerHingeTranslation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerHingeTranslation")) {
                m_innerHingeTranslation = boost::in_place();
                try {
                    m_innerHingeTranslation->ReadCPACS(tixiHandle, xpath + "/innerHingeTranslation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read innerHingeTranslation at xpath << " << xpath << ": " << e.what();
                    m_innerHingeTranslation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read innerHingeTranslation at xpath << " << xpath << ": " << e.getError();
                    m_innerHingeTranslation = boost::none;
                }
            }
            
            // read element outerHingeTranslation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerHingeTranslation")) {
                m_outerHingeTranslation = boost::in_place();
                try {
                    m_outerHingeTranslation->ReadCPACS(tixiHandle, xpath + "/outerHingeTranslation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read outerHingeTranslation at xpath << " << xpath << ": " << e.what();
                    m_outerHingeTranslation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read outerHingeTranslation at xpath << " << xpath << ": " << e.getError();
                    m_outerHingeTranslation = boost::none;
                }
            }
            
            // read element hingeLineRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hingeLineRotation")) {
                m_hingeLineRotation = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/hingeLineRotation");
            }
            
        }
        
        void CPACSControlSurfaceStep::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element relDeflection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDeflection");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relDeflection", m_relDeflection);
            
            // write element innerHingeTranslation
            if (m_innerHingeTranslation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerHingeTranslation");
                m_innerHingeTranslation->WriteCPACS(tixiHandle, xpath + "/innerHingeTranslation");
            }
            
            // write element outerHingeTranslation
            if (m_outerHingeTranslation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerHingeTranslation");
                m_outerHingeTranslation->WriteCPACS(tixiHandle, xpath + "/outerHingeTranslation");
            }
            
            // write element hingeLineRotation
            if (m_hingeLineRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hingeLineRotation");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hingeLineRotation", *m_hingeLineRotation);
            }
            
        }
        
        const double& CPACSControlSurfaceStep::GetRelDeflection() const
        {
            return m_relDeflection;
        }
        
        void CPACSControlSurfaceStep::SetRelDeflection(const double& value)
        {
            m_relDeflection = value;
        }
        
        bool CPACSControlSurfaceStep::HasInnerHingeTranslation() const
        {
            return static_cast<bool>(m_innerHingeTranslation);
        }
        
        const CCPACSPoint& CPACSControlSurfaceStep::GetInnerHingeTranslation() const
        {
            return *m_innerHingeTranslation;
        }
        
        CCPACSPoint& CPACSControlSurfaceStep::GetInnerHingeTranslation()
        {
            return *m_innerHingeTranslation;
        }
        
        bool CPACSControlSurfaceStep::HasOuterHingeTranslation() const
        {
            return static_cast<bool>(m_outerHingeTranslation);
        }
        
        const CPACSPointXZ& CPACSControlSurfaceStep::GetOuterHingeTranslation() const
        {
            return *m_outerHingeTranslation;
        }
        
        CPACSPointXZ& CPACSControlSurfaceStep::GetOuterHingeTranslation()
        {
            return *m_outerHingeTranslation;
        }
        
        bool CPACSControlSurfaceStep::HasHingeLineRotation() const
        {
            return static_cast<bool>(m_hingeLineRotation);
        }
        
        const double& CPACSControlSurfaceStep::GetHingeLineRotation() const
        {
            return *m_hingeLineRotation;
        }
        
        void CPACSControlSurfaceStep::SetHingeLineRotation(const double& value)
        {
            m_hingeLineRotation = value;
        }
        
    }
}
