// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSControlSurfaceSteps.h"
#include "CPACSControlSurfaceStep.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceStep::CPACSControlSurfaceStep(CCPACSControlSurfaceSteps* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_relDeflection(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceStep::~CPACSControlSurfaceStep()
    {
    }

    CCPACSControlSurfaceSteps* CPACSControlSurfaceStep::GetParent() const
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSControlSurfaceStep::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfaceStep::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSControlSurfaceStep::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element relDeflection
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relDeflection")) {
            m_relDeflection = tixi::TixiGetElement<double>(tixiHandle, xpath + "/relDeflection");
        }
        else {
            LOG(ERROR) << "Required element relDeflection is missing at xpath " << xpath;
        }

        // read element innerHingeTranslation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerHingeTranslation")) {
            m_innerHingeTranslation = boost::in_place(m_uidMgr);
            try {
                m_innerHingeTranslation->ReadCPACS(tixiHandle, xpath + "/innerHingeTranslation");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read innerHingeTranslation at xpath " << xpath << ": " << e.what();
                m_innerHingeTranslation = boost::none;
            }
        }

        // read element outerHingeTranslation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/outerHingeTranslation")) {
            m_outerHingeTranslation = boost::in_place(m_uidMgr);
            try {
                m_outerHingeTranslation->ReadCPACS(tixiHandle, xpath + "/outerHingeTranslation");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read outerHingeTranslation at xpath " << xpath << ": " << e.what();
                m_outerHingeTranslation = boost::none;
            }
        }

        // read element hingeLineRotation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/hingeLineRotation")) {
            m_hingeLineRotation = tixi::TixiGetElement<double>(tixiHandle, xpath + "/hingeLineRotation");
        }

    }

    void CPACSControlSurfaceStep::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element relDeflection
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDeflection");
        tixi::TixiSaveElement(tixiHandle, xpath + "/relDeflection", m_relDeflection);

        // write element innerHingeTranslation
        if (m_innerHingeTranslation) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerHingeTranslation");
            m_innerHingeTranslation->WriteCPACS(tixiHandle, xpath + "/innerHingeTranslation");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerHingeTranslation")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/innerHingeTranslation");
            }
        }

        // write element outerHingeTranslation
        if (m_outerHingeTranslation) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerHingeTranslation");
            m_outerHingeTranslation->WriteCPACS(tixiHandle, xpath + "/outerHingeTranslation");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/outerHingeTranslation")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/outerHingeTranslation");
            }
        }

        // write element hingeLineRotation
        if (m_hingeLineRotation) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hingeLineRotation");
            tixi::TixiSaveElement(tixiHandle, xpath + "/hingeLineRotation", *m_hingeLineRotation);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/hingeLineRotation")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/hingeLineRotation");
            }
        }

    }

    const double& CPACSControlSurfaceStep::GetRelDeflection() const
    {
        return m_relDeflection;
    }

    void CPACSControlSurfaceStep::SetRelDeflection(const double& value)
    {
        m_relDeflection = value;
    }

    const boost::optional<CCPACSPoint>& CPACSControlSurfaceStep::GetInnerHingeTranslation() const
    {
        return m_innerHingeTranslation;
    }

    boost::optional<CCPACSPoint>& CPACSControlSurfaceStep::GetInnerHingeTranslation()
    {
        return m_innerHingeTranslation;
    }

    const boost::optional<CPACSPointXZ>& CPACSControlSurfaceStep::GetOuterHingeTranslation() const
    {
        return m_outerHingeTranslation;
    }

    boost::optional<CPACSPointXZ>& CPACSControlSurfaceStep::GetOuterHingeTranslation()
    {
        return m_outerHingeTranslation;
    }

    const boost::optional<double>& CPACSControlSurfaceStep::GetHingeLineRotation() const
    {
        return m_hingeLineRotation;
    }

    void CPACSControlSurfaceStep::SetHingeLineRotation(const boost::optional<double>& value)
    {
        m_hingeLineRotation = value;
    }

    CCPACSPoint& CPACSControlSurfaceStep::GetInnerHingeTranslation(CreateIfNotExistsTag)
    {
        if (!m_innerHingeTranslation)
            m_innerHingeTranslation = boost::in_place(m_uidMgr);
        return *m_innerHingeTranslation;
    }

    void CPACSControlSurfaceStep::RemoveInnerHingeTranslation()
    {
        m_innerHingeTranslation = boost::none;
    }

    CPACSPointXZ& CPACSControlSurfaceStep::GetOuterHingeTranslation(CreateIfNotExistsTag)
    {
        if (!m_outerHingeTranslation)
            m_outerHingeTranslation = boost::in_place(m_uidMgr);
        return *m_outerHingeTranslation;
    }

    void CPACSControlSurfaceStep::RemoveOuterHingeTranslation()
    {
        m_outerHingeTranslation = boost::none;
    }

} // namespace generated
} // namespace tigl
