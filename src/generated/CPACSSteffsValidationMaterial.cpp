// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSteffsValidationMaterial.h"

namespace tigl
{
    namespace generated
    {
        CPACSSteffsValidationMaterial::CPACSSteffsValidationMaterial(){}
        CPACSSteffsValidationMaterial::~CPACSSteffsValidationMaterial() {}
        
        void CPACSSteffsValidationMaterial::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element rho
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rho")) {
                m_rho = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rho");
            }
            else {
                LOG(ERROR) << "Required element rho is missing";
            }
            
            // read element youngsModulus
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/youngsModulus")) {
                m_youngsModulus = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/youngsModulus");
            }
            else {
                LOG(ERROR) << "Required element youngsModulus is missing";
            }
            
            // read element poissonRatio
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/poissonRatio")) {
                m_poissonRatio = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/poissonRatio");
            }
            else {
                LOG(ERROR) << "Required element poissonRatio is missing";
            }
            
            // read element sigMaxTension
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sigMaxTension")) {
                m_sigMaxTension = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/sigMaxTension");
            }
            else {
                LOG(ERROR) << "Required element sigMaxTension is missing";
            }
            
            // read element fatigueFactor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fatigueFactor")) {
                m_fatigueFactor = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/fatigueFactor");
            }
            else {
                LOG(ERROR) << "Required element fatigueFactor is missing";
            }
            
        }
        
        void CPACSSteffsValidationMaterial::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element rho
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rho");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/rho", m_rho);
            
            // write element youngsModulus
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/youngsModulus");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/youngsModulus", m_youngsModulus);
            
            // write element poissonRatio
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/poissonRatio");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/poissonRatio", m_poissonRatio);
            
            // write element sigMaxTension
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sigMaxTension");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sigMaxTension", m_sigMaxTension);
            
            // write element fatigueFactor
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fatigueFactor");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fatigueFactor", m_fatigueFactor);
            
        }
        
        const std::string& CPACSSteffsValidationMaterial::GetName() const
        {
            return m_name;
        }
        
        void CPACSSteffsValidationMaterial::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        const double& CPACSSteffsValidationMaterial::GetRho() const
        {
            return m_rho;
        }
        
        void CPACSSteffsValidationMaterial::SetRho(const double& value)
        {
            m_rho = value;
        }
        
        const double& CPACSSteffsValidationMaterial::GetYoungsModulus() const
        {
            return m_youngsModulus;
        }
        
        void CPACSSteffsValidationMaterial::SetYoungsModulus(const double& value)
        {
            m_youngsModulus = value;
        }
        
        const double& CPACSSteffsValidationMaterial::GetPoissonRatio() const
        {
            return m_poissonRatio;
        }
        
        void CPACSSteffsValidationMaterial::SetPoissonRatio(const double& value)
        {
            m_poissonRatio = value;
        }
        
        const double& CPACSSteffsValidationMaterial::GetSigMaxTension() const
        {
            return m_sigMaxTension;
        }
        
        void CPACSSteffsValidationMaterial::SetSigMaxTension(const double& value)
        {
            m_sigMaxTension = value;
        }
        
        const double& CPACSSteffsValidationMaterial::GetFatigueFactor() const
        {
            return m_fatigueFactor;
        }
        
        void CPACSSteffsValidationMaterial::SetFatigueFactor(const double& value)
        {
            m_fatigueFactor = value;
        }
        
    }
}
