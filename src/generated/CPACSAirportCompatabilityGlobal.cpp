// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAirportCompatabilityGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSAirportCompatabilityGlobal::CPACSAirportCompatabilityGlobal(){}
        CPACSAirportCompatabilityGlobal::~CPACSAirportCompatabilityGlobal() {}
        
        void CPACSAirportCompatabilityGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element wingSpan
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingSpan")) {
                m_wingSpan = boost::in_place();
                try {
                    m_wingSpan->ReadCPACS(tixiHandle, xpath + "/wingSpan");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingSpan at xpath << " << xpath << ": " << e.what();
                    m_wingSpan = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingSpan at xpath << " << xpath << ": " << e.getError();
                    m_wingSpan = boost::none;
                }
            }
            
            // read element wheelTrackWidth
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wheelTrackWidth")) {
                m_wheelTrackWidth = boost::in_place();
                try {
                    m_wheelTrackWidth->ReadCPACS(tixiHandle, xpath + "/wheelTrackWidth");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wheelTrackWidth at xpath << " << xpath << ": " << e.what();
                    m_wheelTrackWidth = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wheelTrackWidth at xpath << " << xpath << ": " << e.getError();
                    m_wheelTrackWidth = boost::none;
                }
            }
            
            // read element runwayLoading
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/runwayLoading")) {
                m_runwayLoading = boost::in_place();
                try {
                    m_runwayLoading->ReadCPACS(tixiHandle, xpath + "/runwayLoading");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read runwayLoading at xpath << " << xpath << ": " << e.what();
                    m_runwayLoading = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read runwayLoading at xpath << " << xpath << ": " << e.getError();
                    m_runwayLoading = boost::none;
                }
            }
            
            // read element takeOffFieldLength
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/takeOffFieldLength")) {
                m_takeOffFieldLength = boost::in_place();
                try {
                    m_takeOffFieldLength->ReadCPACS(tixiHandle, xpath + "/takeOffFieldLength");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read takeOffFieldLength at xpath << " << xpath << ": " << e.what();
                    m_takeOffFieldLength = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read takeOffFieldLength at xpath << " << xpath << ": " << e.getError();
                    m_takeOffFieldLength = boost::none;
                }
            }
            
            // read element landingFieldLength
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingFieldLength")) {
                m_landingFieldLength = boost::in_place();
                try {
                    m_landingFieldLength->ReadCPACS(tixiHandle, xpath + "/landingFieldLength");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingFieldLength at xpath << " << xpath << ": " << e.what();
                    m_landingFieldLength = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingFieldLength at xpath << " << xpath << ": " << e.getError();
                    m_landingFieldLength = boost::none;
                }
            }
            
        }
        
        void CPACSAirportCompatabilityGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element wingSpan
            if (m_wingSpan) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingSpan");
                m_wingSpan->WriteCPACS(tixiHandle, xpath + "/wingSpan");
            }
            
            // write element wheelTrackWidth
            if (m_wheelTrackWidth) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wheelTrackWidth");
                m_wheelTrackWidth->WriteCPACS(tixiHandle, xpath + "/wheelTrackWidth");
            }
            
            // write element runwayLoading
            if (m_runwayLoading) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/runwayLoading");
                m_runwayLoading->WriteCPACS(tixiHandle, xpath + "/runwayLoading");
            }
            
            // write element takeOffFieldLength
            if (m_takeOffFieldLength) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/takeOffFieldLength");
                m_takeOffFieldLength->WriteCPACS(tixiHandle, xpath + "/takeOffFieldLength");
            }
            
            // write element landingFieldLength
            if (m_landingFieldLength) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingFieldLength");
                m_landingFieldLength->WriteCPACS(tixiHandle, xpath + "/landingFieldLength");
            }
            
        }
        
        bool CPACSAirportCompatabilityGlobal::HasWingSpan() const
        {
            return static_cast<bool>(m_wingSpan);
        }
        
        const CPACSRequirement& CPACSAirportCompatabilityGlobal::GetWingSpan() const
        {
            return *m_wingSpan;
        }
        
        CPACSRequirement& CPACSAirportCompatabilityGlobal::GetWingSpan()
        {
            return *m_wingSpan;
        }
        
        bool CPACSAirportCompatabilityGlobal::HasWheelTrackWidth() const
        {
            return static_cast<bool>(m_wheelTrackWidth);
        }
        
        const CPACSRequirement& CPACSAirportCompatabilityGlobal::GetWheelTrackWidth() const
        {
            return *m_wheelTrackWidth;
        }
        
        CPACSRequirement& CPACSAirportCompatabilityGlobal::GetWheelTrackWidth()
        {
            return *m_wheelTrackWidth;
        }
        
        bool CPACSAirportCompatabilityGlobal::HasRunwayLoading() const
        {
            return static_cast<bool>(m_runwayLoading);
        }
        
        const CPACSRequirement& CPACSAirportCompatabilityGlobal::GetRunwayLoading() const
        {
            return *m_runwayLoading;
        }
        
        CPACSRequirement& CPACSAirportCompatabilityGlobal::GetRunwayLoading()
        {
            return *m_runwayLoading;
        }
        
        bool CPACSAirportCompatabilityGlobal::HasTakeOffFieldLength() const
        {
            return static_cast<bool>(m_takeOffFieldLength);
        }
        
        const CPACSRequirement& CPACSAirportCompatabilityGlobal::GetTakeOffFieldLength() const
        {
            return *m_takeOffFieldLength;
        }
        
        CPACSRequirement& CPACSAirportCompatabilityGlobal::GetTakeOffFieldLength()
        {
            return *m_takeOffFieldLength;
        }
        
        bool CPACSAirportCompatabilityGlobal::HasLandingFieldLength() const
        {
            return static_cast<bool>(m_landingFieldLength);
        }
        
        const CPACSRequirement& CPACSAirportCompatabilityGlobal::GetLandingFieldLength() const
        {
            return *m_landingFieldLength;
        }
        
        CPACSRequirement& CPACSAirportCompatabilityGlobal::GetLandingFieldLength()
        {
            return *m_landingFieldLength;
        }
        
    }
}
