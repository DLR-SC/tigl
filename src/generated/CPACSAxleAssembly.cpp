// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSAxleAssemblies.h"
#include "CPACSAxleAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSAxleAssembly::CPACSAxleAssembly(CPACSAxleAssemblies* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_axle(this, m_uidMgr)
        , m_posOnBogie(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSAxleAssembly::~CPACSAxleAssembly()
    {
    }

    const CPACSAxleAssemblies* CPACSAxleAssembly::GetParent() const
    {
        return m_parent;
    }

    CPACSAxleAssemblies* CPACSAxleAssembly::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSAxleAssembly::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSAxleAssembly::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSAxleAssembly::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSAxleAssembly::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSAxleAssembly::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element axle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/axle")) {
            m_axle.ReadCPACS(tixiHandle, xpath + "/axle");
        }
        else {
            LOG(ERROR) << "Required element axle is missing at xpath " << xpath;
        }

        // read element posOnBogie
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/posOnBogie")) {
            m_posOnBogie = tixi::TixiGetElement<double>(tixiHandle, xpath + "/posOnBogie");
        }
        else {
            LOG(ERROR) << "Required element posOnBogie is missing at xpath " << xpath;
        }

    }

    void CPACSAxleAssembly::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "axle", "posOnBogie" };

        // write element axle
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/axle", childElemOrder);
        m_axle.WriteCPACS(tixiHandle, xpath + "/axle");

        // write element posOnBogie
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/posOnBogie", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/posOnBogie", m_posOnBogie);

    }

    const CPACSAxle& CPACSAxleAssembly::GetAxle() const
    {
        return m_axle;
    }

    CPACSAxle& CPACSAxleAssembly::GetAxle()
    {
        return m_axle;
    }

    const double& CPACSAxleAssembly::GetPosOnBogie() const
    {
        return m_posOnBogie;
    }

    void CPACSAxleAssembly::SetPosOnBogie(const double& value)
    {
        m_posOnBogie = value;
    }

} // namespace generated
} // namespace tigl
