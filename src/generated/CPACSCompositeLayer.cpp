// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSCompositeLayer.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSCompositeLayer::CPACSCompositeLayer() :
            m_thickness(0), 
            m_phi(0) {}
        
        CPACSCompositeLayer::~CPACSCompositeLayer() {}
        
        void CPACSCompositeLayer::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element name
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
                if (m_name->empty()) {
                    LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
                }
            }
            
            // read element description
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
                if (m_description->empty()) {
                    LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
                }
            }
            
            // read element thickness
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                m_thickness = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thickness");
            }
            else {
                LOG(ERROR) << "Required element thickness is missing at xpath " << xpath;
            }
            
            // read element phi
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/phi")) {
                m_phi = tixi::TixiGetElement<double>(tixiHandle, xpath + "/phi");
            }
            else {
                LOG(ERROR) << "Required element phi is missing at xpath " << xpath;
            }
            
            // read element materialUID
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                m_materialUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
                if (m_materialUID.empty()) {
                    LOG(WARNING) << "Required element materialUID is empty at xpath " << xpath;
                }
            }
            else {
                LOG(ERROR) << "Required element materialUID is missing at xpath " << xpath;
            }
            
        }
        
        void CPACSCompositeLayer::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element name
            if (m_name) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
                }
            }
            
            // write element description
            if (m_description) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
                }
            }
            
            // write element thickness
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thickness");
            tixi::TixiSaveElement(tixiHandle, xpath + "/thickness", m_thickness);
            
            // write element phi
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phi");
            tixi::TixiSaveElement(tixiHandle, xpath + "/phi", m_phi);
            
            // write element materialUID
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materialUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", m_materialUID);
            
        }
        
        const boost::optional<std::string>& CPACSCompositeLayer::GetName() const
        {
            return m_name;
        }
        
        void CPACSCompositeLayer::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        void CPACSCompositeLayer::SetName(const boost::optional<std::string>& value)
        {
            m_name = value;
        }
        
        const boost::optional<std::string>& CPACSCompositeLayer::GetDescription() const
        {
            return m_description;
        }
        
        void CPACSCompositeLayer::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        void CPACSCompositeLayer::SetDescription(const boost::optional<std::string>& value)
        {
            m_description = value;
        }
        
        const double& CPACSCompositeLayer::GetThickness() const
        {
            return m_thickness;
        }
        
        void CPACSCompositeLayer::SetThickness(const double& value)
        {
            m_thickness = value;
        }
        
        const double& CPACSCompositeLayer::GetPhi() const
        {
            return m_phi;
        }
        
        void CPACSCompositeLayer::SetPhi(const double& value)
        {
            m_phi = value;
        }
        
        const std::string& CPACSCompositeLayer::GetMaterialUID() const
        {
            return m_materialUID;
        }
        
        void CPACSCompositeLayer::SetMaterialUID(const std::string& value)
        {
            m_materialUID = value;
        }
        
    }
}
