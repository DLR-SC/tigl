// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingSparPositions.h"
#include "CPACSSparPosition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSparPosition::CPACSSparPosition(CCPACSWingSparPositions* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSparPosition::~CPACSSparPosition()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CCPACSWingSparPositions* CPACSSparPosition::GetParent() const
    {
        return m_parent;
    }

    CCPACSWingSparPositions* CPACSSparPosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSparPosition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSparPosition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSparPosition::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSparPosition::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSSparPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element sparPositionRib
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparPositionRib")) {
            m_sparPositionRib_choice1 = boost::in_place(reinterpret_cast<CCPACSWingSparPosition*>(this), m_uidMgr);
            try {
                m_sparPositionRib_choice1->ReadCPACS(tixiHandle, xpath + "/sparPositionRib");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read sparPositionRib at xpath " << xpath << ": " << e.what();
                m_sparPositionRib_choice1 = boost::none;
            }
        }

        // read element sparPositionEtaXsi
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparPositionEtaXsi")) {
            m_sparPositionEtaXsi_choice2 = boost::in_place(reinterpret_cast<CCPACSWingSparPosition*>(this), m_uidMgr);
            try {
                m_sparPositionEtaXsi_choice2->ReadCPACS(tixiHandle, xpath + "/sparPositionEtaXsi");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read sparPositionEtaXsi at xpath " << xpath << ": " << e.what();
                m_sparPositionEtaXsi_choice2 = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSSparPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element sparPositionRib
        if (m_sparPositionRib_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sparPositionRib");
            m_sparPositionRib_choice1->WriteCPACS(tixiHandle, xpath + "/sparPositionRib");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparPositionRib")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sparPositionRib");
            }
        }

        // write element sparPositionEtaXsi
        if (m_sparPositionEtaXsi_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sparPositionEtaXsi");
            m_sparPositionEtaXsi_choice2->WriteCPACS(tixiHandle, xpath + "/sparPositionEtaXsi");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparPositionEtaXsi")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sparPositionEtaXsi");
            }
        }

    }

    bool CPACSSparPosition::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_sparPositionRib_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparPositionEtaXsi_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_sparPositionEtaXsi_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparPositionRib_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSSparPosition::GetUID() const
    {
        return m_uID;
    }

    void CPACSSparPosition::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<CPACSWingRibPoint>& CPACSSparPosition::GetSparPositionRib_choice1() const
    {
        return m_sparPositionRib_choice1;
    }

    boost::optional<CPACSWingRibPoint>& CPACSSparPosition::GetSparPositionRib_choice1()
    {
        return m_sparPositionRib_choice1;
    }

    const boost::optional<CCPACSEtaXsiPoint>& CPACSSparPosition::GetSparPositionEtaXsi_choice2() const
    {
        return m_sparPositionEtaXsi_choice2;
    }

    boost::optional<CCPACSEtaXsiPoint>& CPACSSparPosition::GetSparPositionEtaXsi_choice2()
    {
        return m_sparPositionEtaXsi_choice2;
    }

    CPACSWingRibPoint& CPACSSparPosition::GetSparPositionRib_choice1(CreateIfNotExistsTag)
    {
        if (!m_sparPositionRib_choice1)
            m_sparPositionRib_choice1 = boost::in_place(reinterpret_cast<CCPACSWingSparPosition*>(this), m_uidMgr);
        return *m_sparPositionRib_choice1;
    }

    void CPACSSparPosition::RemoveSparPositionRib_choice1()
    {
        m_sparPositionRib_choice1 = boost::none;
    }

    CCPACSEtaXsiPoint& CPACSSparPosition::GetSparPositionEtaXsi_choice2(CreateIfNotExistsTag)
    {
        if (!m_sparPositionEtaXsi_choice2)
            m_sparPositionEtaXsi_choice2 = boost::in_place(reinterpret_cast<CCPACSWingSparPosition*>(this), m_uidMgr);
        return *m_sparPositionEtaXsi_choice2;
    }

    void CPACSSparPosition::RemoveSparPositionEtaXsi_choice2()
    {
        m_sparPositionEtaXsi_choice2 = boost::none;
    }

} // namespace generated
} // namespace tigl
