// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMaterialDefinitionForProfileBased.h"

namespace tigl
{
    namespace generated
    {
        CPACSMaterialDefinitionForProfileBased::CPACSMaterialDefinitionForProfileBased(){}
        CPACSMaterialDefinitionForProfileBased::~CPACSMaterialDefinitionForProfileBased() {}
        
        void CPACSMaterialDefinitionForProfileBased::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element sheetUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetUID")) {
                m_sheetUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetUID");
            }
            else {
                LOG(ERROR) << "Required element sheetUID is missing";
            }
            
            // read element compositeUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
                m_compositeUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/compositeUID");
            }
            
            // read element orthotropyDirection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
                m_orthotropyDirection_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/orthotropyDirection");
            }
            
            // read element thicknessScaling
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
                m_thicknessScaling_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/thicknessScaling");
            }
            
            // read element materialUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                m_materialUID_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
            }
            
            // read element thickness
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                m_thickness_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/thickness");
            }
            
        }
        
        void CPACSMaterialDefinitionForProfileBased::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element sheetUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetUID", m_sheetUID);
            
            // write element compositeUID
            if (m_compositeUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/compositeUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/compositeUID", *m_compositeUID_choice1);
            }
            
            // write element orthotropyDirection
            if (m_orthotropyDirection_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orthotropyDirection");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/orthotropyDirection", *m_orthotropyDirection_choice1);
            }
            
            // write element thicknessScaling
            if (m_thicknessScaling_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thicknessScaling");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/thicknessScaling", *m_thicknessScaling_choice1);
            }
            
            // write element materialUID
            if (m_materialUID_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materialUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/materialUID", *m_materialUID_choice2);
            }
            
            // write element thickness
            if (m_thickness_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thickness");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/thickness", *m_thickness_choice2);
            }
            
        }
        
        const std::string& CPACSMaterialDefinitionForProfileBased::GetSheetUID() const
        {
            return m_sheetUID;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetSheetUID(const std::string& value)
        {
            m_sheetUID = value;
        }
        
        bool CPACSMaterialDefinitionForProfileBased::HasCompositeUID_choice1() const
        {
            return static_cast<bool>(m_compositeUID_choice1);
        }
        
        const std::string& CPACSMaterialDefinitionForProfileBased::GetCompositeUID_choice1() const
        {
            return *m_compositeUID_choice1;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetCompositeUID_choice1(const std::string& value)
        {
            m_compositeUID_choice1 = value;
        }
        
        bool CPACSMaterialDefinitionForProfileBased::HasOrthotropyDirection_choice1() const
        {
            return static_cast<bool>(m_orthotropyDirection_choice1);
        }
        
        const double& CPACSMaterialDefinitionForProfileBased::GetOrthotropyDirection_choice1() const
        {
            return *m_orthotropyDirection_choice1;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetOrthotropyDirection_choice1(const double& value)
        {
            m_orthotropyDirection_choice1 = value;
        }
        
        bool CPACSMaterialDefinitionForProfileBased::HasThicknessScaling_choice1() const
        {
            return static_cast<bool>(m_thicknessScaling_choice1);
        }
        
        const double& CPACSMaterialDefinitionForProfileBased::GetThicknessScaling_choice1() const
        {
            return *m_thicknessScaling_choice1;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetThicknessScaling_choice1(const double& value)
        {
            m_thicknessScaling_choice1 = value;
        }
        
        bool CPACSMaterialDefinitionForProfileBased::HasMaterialUID_choice2() const
        {
            return static_cast<bool>(m_materialUID_choice2);
        }
        
        const std::string& CPACSMaterialDefinitionForProfileBased::GetMaterialUID_choice2() const
        {
            return *m_materialUID_choice2;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetMaterialUID_choice2(const std::string& value)
        {
            m_materialUID_choice2 = value;
        }
        
        bool CPACSMaterialDefinitionForProfileBased::HasThickness_choice2() const
        {
            return static_cast<bool>(m_thickness_choice2);
        }
        
        const double& CPACSMaterialDefinitionForProfileBased::GetThickness_choice2() const
        {
            return *m_thickness_choice2;
        }
        
        void CPACSMaterialDefinitionForProfileBased::SetThickness_choice2(const double& value)
        {
            m_thickness_choice2 = value;
        }
        
    }
}
