// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSProfileBasedStructuralElement.h"
#include "CPACSMaterialDefinitionForProfileBased.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSMaterialDefinitionForProfileBased::CPACSMaterialDefinitionForProfileBased(CCPACSProfileBasedStructuralElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSMaterialDefinitionForProfileBased::~CPACSMaterialDefinitionForProfileBased()
    {
        if (m_uidMgr) {
            if (m_sheetUID_choice1 && !m_sheetUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_sheetUID_choice1, *this);
            if (m_compositeUID_choice1 && !m_compositeUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_compositeUID_choice1, *this);
            if (m_materialUID_choice2 && !m_materialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_materialUID_choice2, *this);
        }
    }

    const CCPACSProfileBasedStructuralElement* CPACSMaterialDefinitionForProfileBased::GetParent() const
    {
        return m_parent;
    }

    CCPACSProfileBasedStructuralElement* CPACSMaterialDefinitionForProfileBased::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSMaterialDefinitionForProfileBased::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSMaterialDefinitionForProfileBased::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSMaterialDefinitionForProfileBased::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSMaterialDefinitionForProfileBased::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSMaterialDefinitionForProfileBased::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element sheetUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sheetUID")) {
            m_sheetUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetUID");
            if (m_sheetUID_choice1->empty()) {
                LOG(WARNING) << "Optional element sheetUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_sheetUID_choice1->empty()) m_uidMgr->RegisterReference(*m_sheetUID_choice1, *this);
        }

        // read element standardProfileSheetID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/standardProfileSheetID")) {
            m_standardProfileSheetID_choice2 = stringToCPACSMaterialDefinitionForProfileBased_standardProfileSheetID(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/standardProfileSheetID"));
        }

        // read element length
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/length")) {
            m_length_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/length");
        }

        // read element compositeUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
            m_compositeUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/compositeUID");
            if (m_compositeUID_choice1->empty()) {
                LOG(WARNING) << "Optional element compositeUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_compositeUID_choice1->empty()) m_uidMgr->RegisterReference(*m_compositeUID_choice1, *this);
        }

        // read element orthotropyDirection
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
            m_orthotropyDirection_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/orthotropyDirection");
        }

        // read element thicknessScaling
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
            m_thicknessScaling_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thicknessScaling");
        }

        // read element materialUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
            m_materialUID_choice2 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
            if (m_materialUID_choice2->empty()) {
                LOG(WARNING) << "Optional element materialUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_materialUID_choice2->empty()) m_uidMgr->RegisterReference(*m_materialUID_choice2, *this);
        }

        // read element thickness
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
            m_thickness_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thickness");
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSMaterialDefinitionForProfileBased::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "sheetUID", "standardProfileSheetID", "length", "compositeUID", "orthotropyDirection", "thicknessScaling", "materialUID", "thickness" };

        // write element sheetUID
        if (m_sheetUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/sheetUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/sheetUID", *m_sheetUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sheetUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sheetUID");
            }
        }

        // write element standardProfileSheetID
        if (m_standardProfileSheetID_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/standardProfileSheetID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/standardProfileSheetID", CPACSMaterialDefinitionForProfileBased_standardProfileSheetIDToString(*m_standardProfileSheetID_choice2));
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/standardProfileSheetID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/standardProfileSheetID");
            }
        }

        // write element length
        if (m_length_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/length", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/length", *m_length_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/length")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/length");
            }
        }

        // write element compositeUID
        if (m_compositeUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/compositeUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/compositeUID", *m_compositeUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/compositeUID");
            }
        }

        // write element orthotropyDirection
        if (m_orthotropyDirection_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/orthotropyDirection", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/orthotropyDirection", *m_orthotropyDirection_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/orthotropyDirection");
            }
        }

        // write element thicknessScaling
        if (m_thicknessScaling_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/thicknessScaling", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/thicknessScaling", *m_thicknessScaling_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/thicknessScaling");
            }
        }

        // write element materialUID
        if (m_materialUID_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/materialUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", *m_materialUID_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/materialUID");
            }
        }

        // write element thickness
        if (m_thickness_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/thickness", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/thickness", *m_thickness_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/thickness");
            }
        }

    }

    bool CPACSMaterialDefinitionForProfileBased::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_sheetUID_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_standardProfileSheetID_choice2.is_initialized()
                        ||
                        m_length_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_standardProfileSheetID_choice2.is_initialized()
                    &&
                    m_length_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sheetUID_choice1.is_initialized()
                    )
                )
                == 1
            )
            &&
            (
                (
                    // mandatory elements of this choice must be there
                    m_compositeUID_choice1.is_initialized()
                    &&
                    true // m_orthotropyDirection_choice1 is optional in choice
                    &&
                    true // m_thicknessScaling_choice1 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_materialUID_choice2.is_initialized()
                        ||
                        m_thickness_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_materialUID_choice2.is_initialized()
                    &&
                    m_thickness_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_compositeUID_choice1.is_initialized()
                        ||
                        m_orthotropyDirection_choice1.is_initialized()
                        ||
                        m_thicknessScaling_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<std::string>& CPACSMaterialDefinitionForProfileBased::GetSheetUID_choice1() const
    {
        return m_sheetUID_choice1;
    }

    void CPACSMaterialDefinitionForProfileBased::SetSheetUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_sheetUID_choice1 && !m_sheetUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_sheetUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_sheetUID_choice1 = value;
    }

    const boost::optional<CPACSMaterialDefinitionForProfileBased_standardProfileSheetID>& CPACSMaterialDefinitionForProfileBased::GetStandardProfileSheetID_choice2() const
    {
        return m_standardProfileSheetID_choice2;
    }

    void CPACSMaterialDefinitionForProfileBased::SetStandardProfileSheetID_choice2(const boost::optional<CPACSMaterialDefinitionForProfileBased_standardProfileSheetID>& value)
    {
        m_standardProfileSheetID_choice2 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBased::GetLength_choice2() const
    {
        return m_length_choice2;
    }

    void CPACSMaterialDefinitionForProfileBased::SetLength_choice2(const boost::optional<double>& value)
    {
        m_length_choice2 = value;
    }

    const boost::optional<std::string>& CPACSMaterialDefinitionForProfileBased::GetCompositeUID_choice1() const
    {
        return m_compositeUID_choice1;
    }

    void CPACSMaterialDefinitionForProfileBased::SetCompositeUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_compositeUID_choice1 && !m_compositeUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_compositeUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_compositeUID_choice1 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBased::GetOrthotropyDirection_choice1() const
    {
        return m_orthotropyDirection_choice1;
    }

    void CPACSMaterialDefinitionForProfileBased::SetOrthotropyDirection_choice1(const boost::optional<double>& value)
    {
        m_orthotropyDirection_choice1 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBased::GetThicknessScaling_choice1() const
    {
        return m_thicknessScaling_choice1;
    }

    void CPACSMaterialDefinitionForProfileBased::SetThicknessScaling_choice1(const boost::optional<double>& value)
    {
        m_thicknessScaling_choice1 = value;
    }

    const boost::optional<std::string>& CPACSMaterialDefinitionForProfileBased::GetMaterialUID_choice2() const
    {
        return m_materialUID_choice2;
    }

    void CPACSMaterialDefinitionForProfileBased::SetMaterialUID_choice2(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_materialUID_choice2 && !m_materialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_materialUID_choice2, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_materialUID_choice2 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinitionForProfileBased::GetThickness_choice2() const
    {
        return m_thickness_choice2;
    }

    void CPACSMaterialDefinitionForProfileBased::SetThickness_choice2(const boost::optional<double>& value)
    {
        m_thickness_choice2 = value;
    }

    const CTiglUIDObject* CPACSMaterialDefinitionForProfileBased::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSMaterialDefinitionForProfileBased::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_sheetUID_choice1 && *m_sheetUID_choice1 == oldUid) {
            m_sheetUID_choice1 = newUid;
        }
        if (m_compositeUID_choice1 && *m_compositeUID_choice1 == oldUid) {
            m_compositeUID_choice1 = newUid;
        }
        if (m_materialUID_choice2 && *m_materialUID_choice2 == oldUid) {
            m_materialUID_choice2 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
