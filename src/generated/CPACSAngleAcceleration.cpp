// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAngleAcceleration.h"

namespace tigl
{
    namespace generated
    {
        CPACSAngleAcceleration::CPACSAngleAcceleration(){}
        CPACSAngleAcceleration::~CPACSAngleAcceleration() {}
        
        void CPACSAngleAcceleration::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element pDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pDot")) {
                m_pDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/pDot");
            }
            
            // read element qDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/qDot")) {
                m_qDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/qDot");
            }
            
            // read element rDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rDot")) {
                m_rDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rDot");
            }
            
            // read element phiDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/phiDotDot")) {
                m_phiDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/phiDotDot");
            }
            
            // read element thetaDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thetaDotDot")) {
                m_thetaDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/thetaDotDot");
            }
            
            // read element psiDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/psiDotDot")) {
                m_psiDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/psiDotDot");
            }
            
        }
        
        void CPACSAngleAcceleration::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element pDot
            if (m_pDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/pDot", *m_pDot_choice1);
            }
            
            // write element qDot
            if (m_qDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/qDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/qDot", *m_qDot_choice1);
            }
            
            // write element rDot
            if (m_rDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rDot", *m_rDot_choice1);
            }
            
            // write element phiDotDot
            if (m_phiDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phiDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/phiDotDot", *m_phiDotDot_choice2);
            }
            
            // write element thetaDotDot
            if (m_thetaDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thetaDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/thetaDotDot", *m_thetaDotDot_choice2);
            }
            
            // write element psiDotDot
            if (m_psiDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/psiDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/psiDotDot", *m_psiDotDot_choice2);
            }
            
        }
        
        bool CPACSAngleAcceleration::HasPDot_choice1() const
        {
            return static_cast<bool>(m_pDot_choice1);
        }
        
        const double& CPACSAngleAcceleration::GetPDot_choice1() const
        {
            return *m_pDot_choice1;
        }
        
        void CPACSAngleAcceleration::SetPDot_choice1(const double& value)
        {
            m_pDot_choice1 = value;
        }
        
        bool CPACSAngleAcceleration::HasQDot_choice1() const
        {
            return static_cast<bool>(m_qDot_choice1);
        }
        
        const double& CPACSAngleAcceleration::GetQDot_choice1() const
        {
            return *m_qDot_choice1;
        }
        
        void CPACSAngleAcceleration::SetQDot_choice1(const double& value)
        {
            m_qDot_choice1 = value;
        }
        
        bool CPACSAngleAcceleration::HasRDot_choice1() const
        {
            return static_cast<bool>(m_rDot_choice1);
        }
        
        const double& CPACSAngleAcceleration::GetRDot_choice1() const
        {
            return *m_rDot_choice1;
        }
        
        void CPACSAngleAcceleration::SetRDot_choice1(const double& value)
        {
            m_rDot_choice1 = value;
        }
        
        bool CPACSAngleAcceleration::HasPhiDotDot_choice2() const
        {
            return static_cast<bool>(m_phiDotDot_choice2);
        }
        
        const double& CPACSAngleAcceleration::GetPhiDotDot_choice2() const
        {
            return *m_phiDotDot_choice2;
        }
        
        void CPACSAngleAcceleration::SetPhiDotDot_choice2(const double& value)
        {
            m_phiDotDot_choice2 = value;
        }
        
        bool CPACSAngleAcceleration::HasThetaDotDot_choice2() const
        {
            return static_cast<bool>(m_thetaDotDot_choice2);
        }
        
        const double& CPACSAngleAcceleration::GetThetaDotDot_choice2() const
        {
            return *m_thetaDotDot_choice2;
        }
        
        void CPACSAngleAcceleration::SetThetaDotDot_choice2(const double& value)
        {
            m_thetaDotDot_choice2 = value;
        }
        
        bool CPACSAngleAcceleration::HasPsiDotDot_choice2() const
        {
            return static_cast<bool>(m_psiDotDot_choice2);
        }
        
        const double& CPACSAngleAcceleration::GetPsiDotDot_choice2() const
        {
            return *m_psiDotDot_choice2;
        }
        
        void CPACSAngleAcceleration::SetPsiDotDot_choice2(const double& value)
        {
            m_psiDotDot_choice2 = value;
        }
        
    }
}
