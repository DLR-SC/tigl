// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSDeckElementMass;
    class CPACSElementMass;

    // This class is used in:
    // CPACSDeckElementMass
    // CPACSElementMass

    /// @brief Mass intertia
    /// 
    /// massInertiaType
    /// 
    class CPACSMassInertia
    {
    public:
        TIGL_EXPORT CPACSMassInertia(CPACSDeckElementMass* parent);
        TIGL_EXPORT CPACSMassInertia(CPACSElementMass* parent);

        TIGL_EXPORT virtual ~CPACSMassInertia();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSDeckElementMass>::value || std::is_same<P, CPACSElementMass>::value, "template argument for P is not a parent class of CPACSMassInertia");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSDeckElementMass>::value || std::is_same<P, CPACSElementMass>::value, "template argument for P is not a parent class of CPACSMassInertia");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetJxx() const;
        TIGL_EXPORT virtual void SetJxx(const double& value);

        TIGL_EXPORT virtual const double& GetJyy() const;
        TIGL_EXPORT virtual void SetJyy(const double& value);

        TIGL_EXPORT virtual const double& GetJzz() const;
        TIGL_EXPORT virtual void SetJzz(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetJxy() const;
        TIGL_EXPORT virtual void SetJxy(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetJxz() const;
        TIGL_EXPORT virtual void SetJxz(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetJyz() const;
        TIGL_EXPORT virtual void SetJyz(const boost::optional<double>& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        double                  m_Jxx;
        double                  m_Jyy;
        double                  m_Jzz;
        boost::optional<double> m_Jxy;
        boost::optional<double> m_Jxz;
        boost::optional<double> m_Jyz;

    private:
        CPACSMassInertia(const CPACSMassInertia&) = delete;
        CPACSMassInertia& operator=(const CPACSMassInertia&) = delete;

        CPACSMassInertia(CPACSMassInertia&&) = delete;
        CPACSMassInertia& operator=(CPACSMassInertia&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSMassInertia = generated::CPACSMassInertia;
using CCPACSDeckElementMass = generated::CPACSDeckElementMass;
using CCPACSElementMass = generated::CPACSElementMass;
} // namespace tigl
