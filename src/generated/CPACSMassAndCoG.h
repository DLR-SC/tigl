// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSPoint.h>
#include "CPACSMassInfluenceRegion.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSStaticMass
        
        // generated from /xsd:schema/xsd:complexType[633]
        class CPACSMassAndCoG
        {
        public:
            TIGL_EXPORT CPACSMassAndCoG();
            TIGL_EXPORT virtual ~CPACSMassAndCoG();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const double& GetMass() const;
            TIGL_EXPORT void SetMass(const double& value);
            
            TIGL_EXPORT const CCPACSPoint& GetCoG() const;
            TIGL_EXPORT CCPACSPoint& GetCoG();
            
            TIGL_EXPORT bool HasMassInfluenceRegion() const;
            TIGL_EXPORT const CPACSMassInfluenceRegion& GetMassInfluenceRegion() const;
            TIGL_EXPORT CPACSMassInfluenceRegion& GetMassInfluenceRegion();
            
        protected:
            boost::optional<std::string>              m_uID;
            double                                    m_mass;
            CCPACSPoint                               m_coG;
            boost::optional<CPACSMassInfluenceRegion> m_massInfluenceRegion;
            
        private:
            #ifdef HAVE_CPP11
            CPACSMassAndCoG(const CPACSMassAndCoG&) = delete;
            CPACSMassAndCoG& operator=(const CPACSMassAndCoG&) = delete;
            
            CPACSMassAndCoG(CPACSMassAndCoG&&) = delete;
            CPACSMassAndCoG& operator=(CPACSMassAndCoG&&) = delete;
            #else
            CPACSMassAndCoG(const CPACSMassAndCoG&);
            CPACSMassAndCoG& operator=(const CPACSMassAndCoG&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSMassAndCoG = generated::CPACSMassAndCoG;
    #else
    typedef generated::CPACSMassAndCoG CCPACSMassAndCoG;
    #endif
}
