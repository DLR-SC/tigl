// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSNacelleCowl.h"
#include "CPACSRotationCurve.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRotationCurve::CPACSRotationCurve(CCPACSNacelleCowl* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_startZeta(0)
        , m_endZeta(0)
        , m_startZetaBlending(0)
        , m_endZetaBlending(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSRotationCurve::~CPACSRotationCurve()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_referenceSectionUID.empty()) m_uidMgr->TryUnregisterReference(m_referenceSectionUID, *this);
            if (!m_curveProfileUID.empty()) m_uidMgr->TryUnregisterReference(m_curveProfileUID, *this);
        }
    }

    const CCPACSNacelleCowl* CPACSRotationCurve::GetParent() const
    {
        return m_parent;
    }

    CCPACSNacelleCowl* CPACSRotationCurve::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSRotationCurve::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSRotationCurve::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSRotationCurve::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSRotationCurve::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSRotationCurve::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element referenceSectionUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/referenceSectionUID")) {
            m_referenceSectionUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/referenceSectionUID");
            if (m_referenceSectionUID.empty()) {
                LOG(WARNING) << "Required element referenceSectionUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_referenceSectionUID.empty()) m_uidMgr->RegisterReference(m_referenceSectionUID, *this);
        }
        else {
            LOG(ERROR) << "Required element referenceSectionUID is missing at xpath " << xpath;
        }

        // read element startZeta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/startZeta")) {
            m_startZeta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/startZeta");
        }
        else {
            LOG(ERROR) << "Required element startZeta is missing at xpath " << xpath;
        }

        // read element endZeta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/endZeta")) {
            m_endZeta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/endZeta");
        }
        else {
            LOG(ERROR) << "Required element endZeta is missing at xpath " << xpath;
        }

        // read element startZetaBlending
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/startZetaBlending")) {
            m_startZetaBlending = tixi::TixiGetElement<double>(tixiHandle, xpath + "/startZetaBlending");
        }
        else {
            LOG(ERROR) << "Required element startZetaBlending is missing at xpath " << xpath;
        }

        // read element endZetaBlending
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/endZetaBlending")) {
            m_endZetaBlending = tixi::TixiGetElement<double>(tixiHandle, xpath + "/endZetaBlending");
        }
        else {
            LOG(ERROR) << "Required element endZetaBlending is missing at xpath " << xpath;
        }

        // read element curveProfileUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/curveProfileUID")) {
            m_curveProfileUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/curveProfileUID");
            if (m_curveProfileUID.empty()) {
                LOG(WARNING) << "Required element curveProfileUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_curveProfileUID.empty()) m_uidMgr->RegisterReference(m_curveProfileUID, *this);
        }
        else {
            LOG(ERROR) << "Required element curveProfileUID is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSRotationCurve::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element referenceSectionUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceSectionUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/referenceSectionUID", m_referenceSectionUID);

        // write element startZeta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startZeta");
        tixi::TixiSaveElement(tixiHandle, xpath + "/startZeta", m_startZeta);

        // write element endZeta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endZeta");
        tixi::TixiSaveElement(tixiHandle, xpath + "/endZeta", m_endZeta);

        // write element startZetaBlending
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startZetaBlending");
        tixi::TixiSaveElement(tixiHandle, xpath + "/startZetaBlending", m_startZetaBlending);

        // write element endZetaBlending
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endZetaBlending");
        tixi::TixiSaveElement(tixiHandle, xpath + "/endZetaBlending", m_endZetaBlending);

        // write element curveProfileUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/curveProfileUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/curveProfileUID", m_curveProfileUID);

    }

    const std::string& CPACSRotationCurve::GetUID() const
    {
        return m_uID;
    }

    void CPACSRotationCurve::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSRotationCurve::GetReferenceSectionUID() const
    {
        return m_referenceSectionUID;
    }

    void CPACSRotationCurve::SetReferenceSectionUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_referenceSectionUID.empty()) m_uidMgr->TryUnregisterReference(m_referenceSectionUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_referenceSectionUID = value;
    }

    const double& CPACSRotationCurve::GetStartZeta() const
    {
        return m_startZeta;
    }

    void CPACSRotationCurve::SetStartZeta(const double& value)
    {
        m_startZeta = value;
    }

    const double& CPACSRotationCurve::GetEndZeta() const
    {
        return m_endZeta;
    }

    void CPACSRotationCurve::SetEndZeta(const double& value)
    {
        m_endZeta = value;
    }

    const double& CPACSRotationCurve::GetStartZetaBlending() const
    {
        return m_startZetaBlending;
    }

    void CPACSRotationCurve::SetStartZetaBlending(const double& value)
    {
        m_startZetaBlending = value;
    }

    const double& CPACSRotationCurve::GetEndZetaBlending() const
    {
        return m_endZetaBlending;
    }

    void CPACSRotationCurve::SetEndZetaBlending(const double& value)
    {
        m_endZetaBlending = value;
    }

    const std::string& CPACSRotationCurve::GetCurveProfileUID() const
    {
        return m_curveProfileUID;
    }

    void CPACSRotationCurve::SetCurveProfileUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_curveProfileUID.empty()) m_uidMgr->TryUnregisterReference(m_curveProfileUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_curveProfileUID = value;
    }

    const CTiglUIDObject* CPACSRotationCurve::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSRotationCurve::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_referenceSectionUID == oldUid) {
            m_referenceSectionUID = newUid;
        }
        if (m_curveProfileUID == oldUid) {
            m_curveProfileUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
