// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseTranslationVelocity.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseTranslationVelocity::CPACSLoadCaseTranslationVelocity(){}
        CPACSLoadCaseTranslationVelocity::~CPACSLoadCaseTranslationVelocity() {}
        
        void CPACSLoadCaseTranslationVelocity::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element u
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/u")) {
                m_u_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/u");
            }
            
            // read element v
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/v")) {
                m_v_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/v");
            }
            
            // read element w
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/w")) {
                m_w_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/w");
            }
            
            // read element xDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xDot")) {
                m_xDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xDot");
            }
            
            // read element yDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yDot")) {
                m_yDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/yDot");
            }
            
            // read element zDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/zDot")) {
                m_zDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/zDot");
            }
            
        }
        
        void CPACSLoadCaseTranslationVelocity::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element u
            if (m_u_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/u");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/u", *m_u_choice1);
            }
            
            // write element v
            if (m_v_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/v");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/v", *m_v_choice1);
            }
            
            // write element w
            if (m_w_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/w");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/w", *m_w_choice1);
            }
            
            // write element xDot
            if (m_xDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/xDot", *m_xDot_choice2);
            }
            
            // write element yDot
            if (m_yDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/yDot", *m_yDot_choice2);
            }
            
            // write element zDot
            if (m_zDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/zDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/zDot", *m_zDot_choice2);
            }
            
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasU_choice1() const
        {
            return static_cast<bool>(m_u_choice1);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetU_choice1() const
        {
            return *m_u_choice1;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetU_choice1(const double& value)
        {
            m_u_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasV_choice1() const
        {
            return static_cast<bool>(m_v_choice1);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetV_choice1() const
        {
            return *m_v_choice1;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetV_choice1(const double& value)
        {
            m_v_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasW_choice1() const
        {
            return static_cast<bool>(m_w_choice1);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetW_choice1() const
        {
            return *m_w_choice1;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetW_choice1(const double& value)
        {
            m_w_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasXDot_choice2() const
        {
            return static_cast<bool>(m_xDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetXDot_choice2() const
        {
            return *m_xDot_choice2;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetXDot_choice2(const double& value)
        {
            m_xDot_choice2 = value;
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasYDot_choice2() const
        {
            return static_cast<bool>(m_yDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetYDot_choice2() const
        {
            return *m_yDot_choice2;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetYDot_choice2(const double& value)
        {
            m_yDot_choice2 = value;
        }
        
        bool CPACSLoadCaseTranslationVelocity::HasZDot_choice2() const
        {
            return static_cast<bool>(m_zDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationVelocity::GetZDot_choice2() const
        {
            return *m_zDot_choice2;
        }
        
        void CPACSLoadCaseTranslationVelocity::SetZDot_choice2(const double& value)
        {
            m_zDot_choice2 = value;
        }
        
    }
}
