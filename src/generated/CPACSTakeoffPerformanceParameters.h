// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFlightPerformanceTakeoff
        
        // generated from /xsd:schema/xsd:complexType[822]
        class CPACSTakeoffPerformanceParameters
        {
        public:
            TIGL_EXPORT CPACSTakeoffPerformanceParameters();
            TIGL_EXPORT virtual ~CPACSTakeoffPerformanceParameters();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetTodVLiftoff() const;
            TIGL_EXPORT void SetTodVLiftoff(const double& value);
            
            TIGL_EXPORT const double& GetTodV2() const;
            TIGL_EXPORT void SetTodV2(const double& value);
            
            TIGL_EXPORT const double& GetVElevOptimal() const;
            TIGL_EXPORT void SetVElevOptimal(const double& value);
            
            TIGL_EXPORT const double& GetVRotationOptimal() const;
            TIGL_EXPORT void SetVRotationOptimal(const double& value);
            
            TIGL_EXPORT const double& GetVLiftoff() const;
            TIGL_EXPORT void SetVLiftoff(const double& value);
            
            TIGL_EXPORT const double& GetV2() const;
            TIGL_EXPORT void SetV2(const double& value);
            
            TIGL_EXPORT const double& GetV1() const;
            TIGL_EXPORT void SetV1(const double& value);
            
            TIGL_EXPORT const double& GetVMCG() const;
            TIGL_EXPORT void SetVMCG(const double& value);
            
            TIGL_EXPORT const double& GetGammaCheck() const;
            TIGL_EXPORT void SetGammaCheck(const double& value);
            
        protected:
            double m_todVLiftoff;
            double m_todV2;
            double m_vElevOptimal;
            double m_vRotationOptimal;
            double m_vLiftoff;
            double m_v2;
            double m_v1;
            double m_vMCG;
            double m_gammaCheck;
            
        private:
            #ifdef HAVE_CPP11
            CPACSTakeoffPerformanceParameters(const CPACSTakeoffPerformanceParameters&) = delete;
            CPACSTakeoffPerformanceParameters& operator=(const CPACSTakeoffPerformanceParameters&) = delete;
            
            CPACSTakeoffPerformanceParameters(CPACSTakeoffPerformanceParameters&&) = delete;
            CPACSTakeoffPerformanceParameters& operator=(CPACSTakeoffPerformanceParameters&&) = delete;
            #else
            CPACSTakeoffPerformanceParameters(const CPACSTakeoffPerformanceParameters&);
            CPACSTakeoffPerformanceParameters& operator=(const CPACSTakeoffPerformanceParameters&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSTakeoffPerformanceParameters = generated::CPACSTakeoffPerformanceParameters;
    #else
    typedef generated::CPACSTakeoffPerformanceParameters CCPACSTakeoffPerformanceParameters;
    #endif
}
