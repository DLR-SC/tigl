// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSWingRibsPositioning_ribCrossingBehaviour.h"
#include <CCPACSWingRibRotation.h>

namespace tigl
{
    class CCPACSWingRibsDefinition;
    
    namespace generated
    {
        // This class is used in:
        // CPACSWingRibsDefinition
        
        // generated from /xsd:schema/xsd:complexType[916]
        class CPACSWingRibsPositioning
        {
        public:
            TIGL_EXPORT CPACSWingRibsPositioning(CCPACSWingRibsDefinition* parent);
            
            TIGL_EXPORT virtual ~CPACSWingRibsPositioning();
            
            TIGL_EXPORT CCPACSWingRibsDefinition* GetParent() const;
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetRibReference() const;
            TIGL_EXPORT void SetRibReference(const std::string& value);
            
            TIGL_EXPORT const std::string& GetRibStart() const;
            TIGL_EXPORT void SetRibStart(const std::string& value);
            
            TIGL_EXPORT const std::string& GetRibEnd() const;
            TIGL_EXPORT void SetRibEnd(const std::string& value);
            
            TIGL_EXPORT const CPACSWingRibsPositioning_ribCrossingBehaviour& GetRibCrossingBehaviour() const;
            TIGL_EXPORT CPACSWingRibsPositioning_ribCrossingBehaviour& GetRibCrossingBehaviour();
            
            TIGL_EXPORT const CCPACSWingRibRotation& GetRibRotation() const;
            TIGL_EXPORT CCPACSWingRibRotation& GetRibRotation();
            
            TIGL_EXPORT bool HasEtaStart_choice1() const;
            TIGL_EXPORT const double& GetEtaStart_choice1() const;
            TIGL_EXPORT void SetEtaStart_choice1(const double& value);
            
            TIGL_EXPORT bool HasElementStartUID_choice2() const;
            TIGL_EXPORT const std::string& GetElementStartUID_choice2() const;
            TIGL_EXPORT void SetElementStartUID_choice2(const std::string& value);
            
            TIGL_EXPORT bool HasEtaEnd_choice1() const;
            TIGL_EXPORT const double& GetEtaEnd_choice1() const;
            TIGL_EXPORT void SetEtaEnd_choice1(const double& value);
            
            TIGL_EXPORT bool HasElementEndUID_choice2() const;
            TIGL_EXPORT const std::string& GetElementEndUID_choice2() const;
            TIGL_EXPORT void SetElementEndUID_choice2(const std::string& value);
            
            TIGL_EXPORT bool HasSpacing_choice1() const;
            TIGL_EXPORT const double& GetSpacing_choice1() const;
            TIGL_EXPORT void SetSpacing_choice1(const double& value);
            
            TIGL_EXPORT bool HasNumberOfRibs_choice2() const;
            TIGL_EXPORT const int& GetNumberOfRibs_choice2() const;
            TIGL_EXPORT void SetNumberOfRibs_choice2(const int& value);
            
        protected:
            CCPACSWingRibsDefinition* m_parent;
            
            std::string                                   m_ribReference;
            std::string                                   m_ribStart;
            std::string                                   m_ribEnd;
            CPACSWingRibsPositioning_ribCrossingBehaviour m_ribCrossingBehaviour;
            CCPACSWingRibRotation                         m_ribRotation;
            boost::optional<double>                       m_etaStart_choice1;
            boost::optional<std::string>                  m_elementStartUID_choice2;
            boost::optional<double>                       m_etaEnd_choice1;
            boost::optional<std::string>                  m_elementEndUID_choice2;
            boost::optional<double>                       m_spacing_choice1;
            boost::optional<int>                          m_numberOfRibs_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWingRibsPositioning(const CPACSWingRibsPositioning&) = delete;
            CPACSWingRibsPositioning& operator=(const CPACSWingRibsPositioning&) = delete;
            
            CPACSWingRibsPositioning(CPACSWingRibsPositioning&&) = delete;
            CPACSWingRibsPositioning& operator=(CPACSWingRibsPositioning&&) = delete;
            #else
            CPACSWingRibsPositioning(const CPACSWingRibsPositioning&);
            CPACSWingRibsPositioning& operator=(const CPACSWingRibsPositioning&);
            #endif
        };
    }
    
    // This type is customized, use type CCPACSWingRibsPositioning
}
