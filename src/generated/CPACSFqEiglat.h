// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFqCharParameters
        // CPACSFqRatings
        
        // generated from /xsd:schema/xsd:complexType[342]
        class CPACSFqEiglat
        {
        public:
            TIGL_EXPORT CPACSFqEiglat();
            TIGL_EXPORT virtual ~CPACSFqEiglat();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasDutchRollFrequency() const;
            TIGL_EXPORT const double& GetDutchRollFrequency() const;
            TIGL_EXPORT void SetDutchRollFrequency(const double& value);
            
            TIGL_EXPORT bool HasDutchRollDamping() const;
            TIGL_EXPORT const double& GetDutchRollDamping() const;
            TIGL_EXPORT void SetDutchRollDamping(const double& value);
            
            TIGL_EXPORT bool HasRollTimeConstant() const;
            TIGL_EXPORT const double& GetRollTimeConstant() const;
            TIGL_EXPORT void SetRollTimeConstant(const double& value);
            
            TIGL_EXPORT bool HasSpiralDoublingTime() const;
            TIGL_EXPORT const double& GetSpiralDoublingTime() const;
            TIGL_EXPORT void SetSpiralDoublingTime(const double& value);
            
            TIGL_EXPORT bool HasRatioPhiBeta() const;
            TIGL_EXPORT const double& GetRatioPhiBeta() const;
            TIGL_EXPORT void SetRatioPhiBeta(const double& value);
            
            TIGL_EXPORT bool HasRollFrequency() const;
            TIGL_EXPORT const double& GetRollFrequency() const;
            TIGL_EXPORT void SetRollFrequency(const double& value);
            
            TIGL_EXPORT bool HasRollSpiralDamping() const;
            TIGL_EXPORT const double& GetRollSpiralDamping() const;
            TIGL_EXPORT void SetRollSpiralDamping(const double& value);
            
            TIGL_EXPORT bool HasRollSpiralProduct() const;
            TIGL_EXPORT const double& GetRollSpiralProduct() const;
            TIGL_EXPORT void SetRollSpiralProduct(const double& value);
            
            TIGL_EXPORT bool HasDurchroll() const;
            TIGL_EXPORT const double& GetDurchroll() const;
            TIGL_EXPORT void SetDurchroll(const double& value);
            
            TIGL_EXPORT bool HasRoll() const;
            TIGL_EXPORT const double& GetRoll() const;
            TIGL_EXPORT void SetRoll(const double& value);
            
        protected:
            boost::optional<double> m_dutchRollFrequency;
            boost::optional<double> m_dutchRollDamping;
            boost::optional<double> m_rollTimeConstant;
            boost::optional<double> m_spiralDoublingTime;
            boost::optional<double> m_ratioPhiBeta;
            boost::optional<double> m_rollFrequency;
            boost::optional<double> m_rollSpiralDamping;
            boost::optional<double> m_rollSpiralProduct;
            boost::optional<double> m_durchroll;
            boost::optional<double> m_roll;
            
        private:
            #ifdef HAVE_CPP11
            CPACSFqEiglat(const CPACSFqEiglat&) = delete;
            CPACSFqEiglat& operator=(const CPACSFqEiglat&) = delete;
            
            CPACSFqEiglat(CPACSFqEiglat&&) = delete;
            CPACSFqEiglat& operator=(CPACSFqEiglat&&) = delete;
            #else
            CPACSFqEiglat(const CPACSFqEiglat&);
            CPACSFqEiglat& operator=(const CPACSFqEiglat&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSFqEiglat = generated::CPACSFqEiglat;
    #else
    typedef generated::CPACSFqEiglat CCPACSFqEiglat;
    #endif
}
