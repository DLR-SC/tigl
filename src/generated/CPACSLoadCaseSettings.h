// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSControlSurfaceDeflections.h"
#include "CPACSControlInputs.h"
#include "CPACSLoadCaseLandingGears.h"
#include "CPACSLoadCaseEngines.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFlightLoadCase
        // CPACSGroundLoadCase
        
        // generated from /xsd:schema/xsd:complexType[494]
        class CPACSLoadCaseSettings
        {
        public:
            TIGL_EXPORT CPACSLoadCaseSettings();
            TIGL_EXPORT virtual ~CPACSLoadCaseSettings();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasControlSurfaces() const;
            TIGL_EXPORT const CPACSControlSurfaceDeflections& GetControlSurfaces() const;
            TIGL_EXPORT CPACSControlSurfaceDeflections& GetControlSurfaces();
            
            TIGL_EXPORT bool HasControlInputs() const;
            TIGL_EXPORT const CPACSControlInputs& GetControlInputs() const;
            TIGL_EXPORT CPACSControlInputs& GetControlInputs();
            
            TIGL_EXPORT bool HasLandingGears() const;
            TIGL_EXPORT const CPACSLoadCaseLandingGears& GetLandingGears() const;
            TIGL_EXPORT CPACSLoadCaseLandingGears& GetLandingGears();
            
            TIGL_EXPORT bool HasEngines() const;
            TIGL_EXPORT const CPACSLoadCaseEngines& GetEngines() const;
            TIGL_EXPORT CPACSLoadCaseEngines& GetEngines();
            
            TIGL_EXPORT bool HasCabinPressure() const;
            TIGL_EXPORT const double& GetCabinPressure() const;
            TIGL_EXPORT void SetCabinPressure(const double& value);
            
        protected:
            boost::optional<CPACSControlSurfaceDeflections> m_controlSurfaces;
            boost::optional<CPACSControlInputs>             m_controlInputs;
            boost::optional<CPACSLoadCaseLandingGears>      m_landingGears;
            boost::optional<CPACSLoadCaseEngines>           m_engines;
            boost::optional<double>                         m_cabinPressure;
            
        private:
            #ifdef HAVE_CPP11
            CPACSLoadCaseSettings(const CPACSLoadCaseSettings&) = delete;
            CPACSLoadCaseSettings& operator=(const CPACSLoadCaseSettings&) = delete;
            
            CPACSLoadCaseSettings(CPACSLoadCaseSettings&&) = delete;
            CPACSLoadCaseSettings& operator=(CPACSLoadCaseSettings&&) = delete;
            #else
            CPACSLoadCaseSettings(const CPACSLoadCaseSettings&);
            CPACSLoadCaseSettings& operator=(const CPACSLoadCaseSettings&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSLoadCaseSettings = generated::CPACSLoadCaseSettings;
    #else
    typedef generated::CPACSLoadCaseSettings CCPACSLoadCaseSettings;
    #endif
}
