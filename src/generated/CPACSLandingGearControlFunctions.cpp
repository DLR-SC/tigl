// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearControl.h"
#include "CPACSLandingGearControlFunctions.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearControlFunctions::CPACSLandingGearControlFunctions(CPACSLandingGearControl* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearControlFunctions::~CPACSLandingGearControlFunctions()
    {
    }

    const CPACSLandingGearControl* CPACSLandingGearControlFunctions::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearControl* CPACSLandingGearControlFunctions::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearControlFunctions::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSLandingGearControlFunctions::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSLandingGearControlFunctions::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearControlFunctions::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearControlFunctions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element extensionPath
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/extensionPath")) {
            m_extensionPath = boost::in_place(this, m_uidMgr);
            try {
                m_extensionPath->ReadCPACS(tixiHandle, xpath + "/extensionPath");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read extensionPath at xpath " << xpath << ": " << e.what();
                m_extensionPath = boost::none;
            }
        }

        // read element steeringPath
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/steeringPath")) {
            m_steeringPath = boost::in_place(this, m_uidMgr);
            try {
                m_steeringPath->ReadCPACS(tixiHandle, xpath + "/steeringPath");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read steeringPath at xpath " << xpath << ": " << e.what();
                m_steeringPath = boost::none;
            }
        }

        // read element brakingState
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/brakingState")) {
            m_brakingState = boost::in_place(this, m_uidMgr);
            try {
                m_brakingState->ReadCPACS(tixiHandle, xpath + "/brakingState");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read brakingState at xpath " << xpath << ": " << e.what();
                m_brakingState = boost::none;
            }
        }

    }

    void CPACSLandingGearControlFunctions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element extensionPath
        if (m_extensionPath) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/extensionPath");
            m_extensionPath->WriteCPACS(tixiHandle, xpath + "/extensionPath");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/extensionPath")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/extensionPath");
            }
        }

        // write element steeringPath
        if (m_steeringPath) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/steeringPath");
            m_steeringPath->WriteCPACS(tixiHandle, xpath + "/steeringPath");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/steeringPath")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/steeringPath");
            }
        }

        // write element brakingState
        if (m_brakingState) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/brakingState");
            m_brakingState->WriteCPACS(tixiHandle, xpath + "/brakingState");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/brakingState")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/brakingState");
            }
        }

    }

    const boost::optional<CPACSLandingGearExtensionFunction>& CPACSLandingGearControlFunctions::GetExtensionPath() const
    {
        return m_extensionPath;
    }

    boost::optional<CPACSLandingGearExtensionFunction>& CPACSLandingGearControlFunctions::GetExtensionPath()
    {
        return m_extensionPath;
    }

    const boost::optional<CPACSLandingGearSteeringFunction>& CPACSLandingGearControlFunctions::GetSteeringPath() const
    {
        return m_steeringPath;
    }

    boost::optional<CPACSLandingGearSteeringFunction>& CPACSLandingGearControlFunctions::GetSteeringPath()
    {
        return m_steeringPath;
    }

    const boost::optional<CPACSLandingGearBrakingState>& CPACSLandingGearControlFunctions::GetBrakingState() const
    {
        return m_brakingState;
    }

    boost::optional<CPACSLandingGearBrakingState>& CPACSLandingGearControlFunctions::GetBrakingState()
    {
        return m_brakingState;
    }

    CPACSLandingGearExtensionFunction& CPACSLandingGearControlFunctions::GetExtensionPath(CreateIfNotExistsTag)
    {
        if (!m_extensionPath)
            m_extensionPath = boost::in_place(this, m_uidMgr);
        return *m_extensionPath;
    }

    void CPACSLandingGearControlFunctions::RemoveExtensionPath()
    {
        m_extensionPath = boost::none;
    }

    CPACSLandingGearSteeringFunction& CPACSLandingGearControlFunctions::GetSteeringPath(CreateIfNotExistsTag)
    {
        if (!m_steeringPath)
            m_steeringPath = boost::in_place(this, m_uidMgr);
        return *m_steeringPath;
    }

    void CPACSLandingGearControlFunctions::RemoveSteeringPath()
    {
        m_steeringPath = boost::none;
    }

    CPACSLandingGearBrakingState& CPACSLandingGearControlFunctions::GetBrakingState(CreateIfNotExistsTag)
    {
        if (!m_brakingState)
            m_brakingState = boost::in_place(this, m_uidMgr);
        return *m_brakingState;
    }

    void CPACSLandingGearControlFunctions::RemoveBrakingState()
    {
        m_brakingState = boost::none;
    }

} // namespace generated
} // namespace tigl
