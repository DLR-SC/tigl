// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSHull.h"
#include "CPACSHulls.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSHull::CPACSHull(CPACSHulls* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_transformation(reinterpret_cast<CCPACSHull*>(this), m_uidMgr)
        , m_sections(reinterpret_cast<CCPACSHull*>(this), m_uidMgr)
        , m_segments(reinterpret_cast<CCPACSHull*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSHull::~CPACSHull()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSHulls* CPACSHull::GetParent() const
    {
        return m_parent;
    }

    CPACSHulls* CPACSHull::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSHull::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSHull::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSHull::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSHull::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSHull::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element transformation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
            m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
        }
        else {
            LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
        }

        // read element sections
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sections")) {
            m_sections.ReadCPACS(tixiHandle, xpath + "/sections");
        }
        else {
            LOG(ERROR) << "Required element sections is missing at xpath " << xpath;
        }

        // read element segments
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/segments")) {
            m_segments.ReadCPACS(tixiHandle, xpath + "/segments");
        }
        else {
            LOG(ERROR) << "Required element segments is missing at xpath " << xpath;
        }

        // read element structure
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structure")) {
            m_structure = boost::in_place(reinterpret_cast<CCPACSHull*>(this), m_uidMgr);
            try {
                m_structure->ReadCPACS(tixiHandle, xpath + "/structure");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read structure at xpath " << xpath << ": " << e.what();
                m_structure = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSHull::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element transformation
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
        m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");

        // write element sections
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
        m_sections.WriteCPACS(tixiHandle, xpath + "/sections");

        // write element segments
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segments");
        m_segments.WriteCPACS(tixiHandle, xpath + "/segments");

        // write element structure
        if (m_structure) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structure");
            m_structure->WriteCPACS(tixiHandle, xpath + "/structure");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structure")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structure");
            }
        }

    }

    const std::string& CPACSHull::GetUID() const
    {
        return m_uID;
    }

    void CPACSHull::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSHull::GetName() const
    {
        return m_name;
    }

    void CPACSHull::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSHull::GetDescription() const
    {
        return m_description;
    }

    void CPACSHull::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const CCPACSTransformation& CPACSHull::GetTransformation() const
    {
        return m_transformation;
    }

    CCPACSTransformation& CPACSHull::GetTransformation()
    {
        return m_transformation;
    }

    const CCPACSFuselageSections& CPACSHull::GetSections() const
    {
        return m_sections;
    }

    CCPACSFuselageSections& CPACSHull::GetSections()
    {
        return m_sections;
    }

    const CCPACSFuselageSegments& CPACSHull::GetSegments() const
    {
        return m_segments;
    }

    CCPACSFuselageSegments& CPACSHull::GetSegments()
    {
        return m_segments;
    }

    const boost::optional<CPACSHullStructure>& CPACSHull::GetStructure() const
    {
        return m_structure;
    }

    boost::optional<CPACSHullStructure>& CPACSHull::GetStructure()
    {
        return m_structure;
    }

    CPACSHullStructure& CPACSHull::GetStructure(CreateIfNotExistsTag)
    {
        if (!m_structure)
            m_structure = boost::in_place(reinterpret_cast<CCPACSHull*>(this), m_uidMgr);
        return *m_structure;
    }

    void CPACSHull::RemoveStructure()
    {
        m_structure = boost::none;
    }

} // namespace generated
} // namespace tigl
