// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfacePath.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfacePath::CPACSControlSurfacePath(){}
        CPACSControlSurfacePath::~CPACSControlSurfacePath() {}
        
        void CPACSControlSurfacePath::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element innerHingePoint
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerHingePoint")) {
                m_innerHingePoint.ReadCPACS(tixiHandle, xpath + "/innerHingePoint");
            }
            else {
                LOG(ERROR) << "Required element innerHingePoint is missing";
            }
            
            // read element outerHingePoint
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerHingePoint")) {
                m_outerHingePoint.ReadCPACS(tixiHandle, xpath + "/outerHingePoint");
            }
            else {
                LOG(ERROR) << "Required element outerHingePoint is missing";
            }
            
            // read element steps
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/steps")) {
                m_steps.ReadCPACS(tixiHandle, xpath + "/steps");
            }
            else {
                LOG(ERROR) << "Required element steps is missing";
            }
            
        }
        
        void CPACSControlSurfacePath::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element innerHingePoint
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerHingePoint");
            m_innerHingePoint.WriteCPACS(tixiHandle, xpath + "/innerHingePoint");
            
            // write element outerHingePoint
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerHingePoint");
            m_outerHingePoint.WriteCPACS(tixiHandle, xpath + "/outerHingePoint");
            
            // write element steps
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/steps");
            m_steps.WriteCPACS(tixiHandle, xpath + "/steps");
            
        }
        
        const CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetInnerHingePoint() const
        {
            return m_innerHingePoint;
        }
        
        CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetInnerHingePoint()
        {
            return m_innerHingePoint;
        }
        
        const CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetOuterHingePoint() const
        {
            return m_outerHingePoint;
        }
        
        CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetOuterHingePoint()
        {
            return m_outerHingePoint;
        }
        
        const CPACSControlSurfaceSteps& CPACSControlSurfacePath::GetSteps() const
        {
            return m_steps;
        }
        
        CPACSControlSurfaceSteps& CPACSControlSurfacePath::GetSteps()
        {
            return m_steps;
        }
        
    }
}
