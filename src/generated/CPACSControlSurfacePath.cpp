// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSLeadingEdgeDevice.h"
#include "CCPACSSpoiler.h"
#include "CCPACSTrailingEdgeDevice.h"
#include "CPACSControlSurfacePath.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfacePath::CPACSControlSurfacePath(CCPACSLeadingEdgeDevice* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_innerHingePoint(this, m_uidMgr)
        , m_outerHingePoint(this, m_uidMgr)
        , m_steps(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSLeadingEdgeDevice);
    }

    CPACSControlSurfacePath::CPACSControlSurfacePath(CCPACSSpoiler* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_innerHingePoint(this, m_uidMgr)
        , m_outerHingePoint(this, m_uidMgr)
        , m_steps(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSSpoiler);
    }

    CPACSControlSurfacePath::CPACSControlSurfacePath(CCPACSTrailingEdgeDevice* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_innerHingePoint(this, m_uidMgr)
        , m_outerHingePoint(this, m_uidMgr)
        , m_steps(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSTrailingEdgeDevice);
    }

    CPACSControlSurfacePath::~CPACSControlSurfacePath()
    {
    }

    const CTiglUIDObject* CPACSControlSurfacePath::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CCPACSLeadingEdgeDevice>()) {
                return GetParent<CCPACSLeadingEdgeDevice>();
            }
            if (IsParent<CCPACSSpoiler>()) {
                return GetParent<CCPACSSpoiler>();
            }
            if (IsParent<CCPACSTrailingEdgeDevice>()) {
                return GetParent<CCPACSTrailingEdgeDevice>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSControlSurfacePath::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CCPACSLeadingEdgeDevice>()) {
                return GetParent<CCPACSLeadingEdgeDevice>();
            }
            if (IsParent<CCPACSSpoiler>()) {
                return GetParent<CCPACSSpoiler>();
            }
            if (IsParent<CCPACSTrailingEdgeDevice>()) {
                return GetParent<CCPACSTrailingEdgeDevice>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSControlSurfacePath::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfacePath::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSControlSurfacePath::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element innerHingePoint
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerHingePoint")) {
            m_innerHingePoint.ReadCPACS(tixiHandle, xpath + "/innerHingePoint");
        }
        else {
            LOG(ERROR) << "Required element innerHingePoint is missing at xpath " << xpath;
        }

        // read element outerHingePoint
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/outerHingePoint")) {
            m_outerHingePoint.ReadCPACS(tixiHandle, xpath + "/outerHingePoint");
        }
        else {
            LOG(ERROR) << "Required element outerHingePoint is missing at xpath " << xpath;
        }

        // read element steps
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/steps")) {
            m_steps.ReadCPACS(tixiHandle, xpath + "/steps");
        }
        else {
            LOG(ERROR) << "Required element steps is missing at xpath " << xpath;
        }

    }

    void CPACSControlSurfacePath::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element innerHingePoint
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerHingePoint");
        m_innerHingePoint.WriteCPACS(tixiHandle, xpath + "/innerHingePoint");

        // write element outerHingePoint
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerHingePoint");
        m_outerHingePoint.WriteCPACS(tixiHandle, xpath + "/outerHingePoint");

        // write element steps
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/steps");
        m_steps.WriteCPACS(tixiHandle, xpath + "/steps");

    }

    const CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetInnerHingePoint() const
    {
        return m_innerHingePoint;
    }

    CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetInnerHingePoint()
    {
        return m_innerHingePoint;
    }

    const CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetOuterHingePoint() const
    {
        return m_outerHingePoint;
    }

    CPACSControlSurfaceHingePoint& CPACSControlSurfacePath::GetOuterHingePoint()
    {
        return m_outerHingePoint;
    }

    const CPACSControlSurfaceSteps& CPACSControlSurfacePath::GetSteps() const
    {
        return m_steps;
    }

    CPACSControlSurfaceSteps& CPACSControlSurfacePath::GetSteps()
    {
        return m_steps;
    }

} // namespace generated
} // namespace tigl
