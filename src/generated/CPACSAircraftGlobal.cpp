// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAircraftGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSAircraftGlobal::CPACSAircraftGlobal(){}
        CPACSAircraftGlobal::~CPACSAircraftGlobal() {}
        
        void CPACSAircraftGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element designRange
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/designRange")) {
                m_designRange = boost::in_place();
                try {
                    m_designRange->ReadCPACS(tixiHandle, xpath + "/designRange");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read designRange at xpath << " << xpath << ": " << e.what();
                    m_designRange = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read designRange at xpath << " << xpath << ": " << e.getError();
                    m_designRange = boost::none;
                }
            }
            
            // read element payload
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/payload")) {
                m_payload = boost::in_place();
                try {
                    m_payload->ReadCPACS(tixiHandle, xpath + "/payload");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read payload at xpath << " << xpath << ": " << e.what();
                    m_payload = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read payload at xpath << " << xpath << ": " << e.getError();
                    m_payload = boost::none;
                }
            }
            
            // read element airportCompatability
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/airportCompatability")) {
                m_airportCompatability = boost::in_place();
                try {
                    m_airportCompatability->ReadCPACS(tixiHandle, xpath + "/airportCompatability");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read airportCompatability at xpath << " << xpath << ": " << e.what();
                    m_airportCompatability = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read airportCompatability at xpath << " << xpath << ": " << e.getError();
                    m_airportCompatability = boost::none;
                }
            }
            
            // read element performanceTargets
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/performanceTargets")) {
                m_performanceTargets = boost::in_place();
                try {
                    m_performanceTargets->ReadCPACS(tixiHandle, xpath + "/performanceTargets");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read performanceTargets at xpath << " << xpath << ": " << e.what();
                    m_performanceTargets = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read performanceTargets at xpath << " << xpath << ": " << e.getError();
                    m_performanceTargets = boost::none;
                }
            }
            
        }
        
        void CPACSAircraftGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element designRange
            if (m_designRange) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/designRange");
                m_designRange->WriteCPACS(tixiHandle, xpath + "/designRange");
            }
            
            // write element payload
            if (m_payload) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/payload");
                m_payload->WriteCPACS(tixiHandle, xpath + "/payload");
            }
            
            // write element airportCompatability
            if (m_airportCompatability) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airportCompatability");
                m_airportCompatability->WriteCPACS(tixiHandle, xpath + "/airportCompatability");
            }
            
            // write element performanceTargets
            if (m_performanceTargets) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/performanceTargets");
                m_performanceTargets->WriteCPACS(tixiHandle, xpath + "/performanceTargets");
            }
            
        }
        
        bool CPACSAircraftGlobal::HasDesignRange() const
        {
            return static_cast<bool>(m_designRange);
        }
        
        const CPACSRequirement& CPACSAircraftGlobal::GetDesignRange() const
        {
            return *m_designRange;
        }
        
        CPACSRequirement& CPACSAircraftGlobal::GetDesignRange()
        {
            return *m_designRange;
        }
        
        bool CPACSAircraftGlobal::HasPayload() const
        {
            return static_cast<bool>(m_payload);
        }
        
        const CPACSPayloadGlobal& CPACSAircraftGlobal::GetPayload() const
        {
            return *m_payload;
        }
        
        CPACSPayloadGlobal& CPACSAircraftGlobal::GetPayload()
        {
            return *m_payload;
        }
        
        bool CPACSAircraftGlobal::HasAirportCompatability() const
        {
            return static_cast<bool>(m_airportCompatability);
        }
        
        const CPACSAirportCompatabilityGlobal& CPACSAircraftGlobal::GetAirportCompatability() const
        {
            return *m_airportCompatability;
        }
        
        CPACSAirportCompatabilityGlobal& CPACSAircraftGlobal::GetAirportCompatability()
        {
            return *m_airportCompatability;
        }
        
        bool CPACSAircraftGlobal::HasPerformanceTargets() const
        {
            return static_cast<bool>(m_performanceTargets);
        }
        
        const CPACSPerformanceTargetsGlobal& CPACSAircraftGlobal::GetPerformanceTargets() const
        {
            return *m_performanceTargets;
        }
        
        CPACSPerformanceTargetsGlobal& CPACSAircraftGlobal::GetPerformanceTargets()
        {
            return *m_performanceTargets;
        }
        
    }
}
