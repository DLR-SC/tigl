// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGroundLoadCase.h"

namespace tigl
{
    namespace generated
    {
        CPACSGroundLoadCase::CPACSGroundLoadCase(){}
        CPACSGroundLoadCase::~CPACSGroundLoadCase() {}
        
        void CPACSGroundLoadCase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element aeroDataSetUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aeroDataSetUID")) {
                m_aeroDataSetUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/aeroDataSetUID");
            }
            
            // read element loadCondition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/loadCondition")) {
                m_loadCondition = boost::in_place();
                try {
                    m_loadCondition->ReadCPACS(tixiHandle, xpath + "/loadCondition");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read loadCondition at xpath << " << xpath << ": " << e.what();
                    m_loadCondition = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read loadCondition at xpath << " << xpath << ": " << e.getError();
                    m_loadCondition = boost::none;
                }
            }
            
            // read element state
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/state")) {
                m_state.ReadCPACS(tixiHandle, xpath + "/state");
            }
            else {
                LOG(ERROR) << "Required element state is missing";
            }
            
            // read element aircraftSettings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aircraftSettings")) {
                m_aircraftSettings = boost::in_place();
                try {
                    m_aircraftSettings->ReadCPACS(tixiHandle, xpath + "/aircraftSettings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aircraftSettings at xpath << " << xpath << ": " << e.what();
                    m_aircraftSettings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aircraftSettings at xpath << " << xpath << ": " << e.getError();
                    m_aircraftSettings = boost::none;
                }
            }
            
            // read element mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                m_mass = boost::in_place();
                try {
                    m_mass->ReadCPACS(tixiHandle, xpath + "/mass");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mass at xpath << " << xpath << ": " << e.what();
                    m_mass = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mass at xpath << " << xpath << ": " << e.getError();
                    m_mass = boost::none;
                }
            }
            
            // read element externalAmifFile
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/externalAmifFile")) {
                m_externalAmifFile = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/externalAmifFile");
            }
            
            // read element nodalLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nodalLoads")) {
                m_nodalLoads_choice1 = boost::in_place();
                try {
                    m_nodalLoads_choice1->ReadCPACS(tixiHandle, xpath + "/nodalLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read nodalLoads at xpath << " << xpath << ": " << e.what();
                    m_nodalLoads_choice1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read nodalLoads at xpath << " << xpath << ": " << e.getError();
                    m_nodalLoads_choice1 = boost::none;
                }
            }
            
            // read element cutLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutLoads")) {
                m_cutLoads_choice2 = boost::in_place();
                try {
                    m_cutLoads_choice2->ReadCPACS(tixiHandle, xpath + "/cutLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cutLoads at xpath << " << xpath << ": " << e.what();
                    m_cutLoads_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cutLoads at xpath << " << xpath << ": " << e.getError();
                    m_cutLoads_choice2 = boost::none;
                }
            }
            
        }
        
        void CPACSGroundLoadCase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element aeroDataSetUID
            if (m_aeroDataSetUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aeroDataSetUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/aeroDataSetUID", *m_aeroDataSetUID);
            }
            
            // write element loadCondition
            if (m_loadCondition) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/loadCondition");
                m_loadCondition->WriteCPACS(tixiHandle, xpath + "/loadCondition");
            }
            
            // write element state
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/state");
            m_state.WriteCPACS(tixiHandle, xpath + "/state");
            
            // write element aircraftSettings
            if (m_aircraftSettings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aircraftSettings");
                m_aircraftSettings->WriteCPACS(tixiHandle, xpath + "/aircraftSettings");
            }
            
            // write element mass
            if (m_mass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
                m_mass->WriteCPACS(tixiHandle, xpath + "/mass");
            }
            
            // write element externalAmifFile
            if (m_externalAmifFile) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/externalAmifFile");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/externalAmifFile", *m_externalAmifFile);
            }
            
            // write element nodalLoads
            if (m_nodalLoads_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nodalLoads");
                m_nodalLoads_choice1->WriteCPACS(tixiHandle, xpath + "/nodalLoads");
            }
            
            // write element cutLoads
            if (m_cutLoads_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutLoads");
                m_cutLoads_choice2->WriteCPACS(tixiHandle, xpath + "/cutLoads");
            }
            
        }
        
        const std::string& CPACSGroundLoadCase::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSGroundLoadCase::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSGroundLoadCase::GetName() const
        {
            return m_name;
        }
        
        void CPACSGroundLoadCase::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSGroundLoadCase::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSGroundLoadCase::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSGroundLoadCase::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSGroundLoadCase::HasAeroDataSetUID() const
        {
            return static_cast<bool>(m_aeroDataSetUID);
        }
        
        const std::string& CPACSGroundLoadCase::GetAeroDataSetUID() const
        {
            return *m_aeroDataSetUID;
        }
        
        void CPACSGroundLoadCase::SetAeroDataSetUID(const std::string& value)
        {
            m_aeroDataSetUID = value;
        }
        
        bool CPACSGroundLoadCase::HasLoadCondition() const
        {
            return static_cast<bool>(m_loadCondition);
        }
        
        const CPACSLoadCondition& CPACSGroundLoadCase::GetLoadCondition() const
        {
            return *m_loadCondition;
        }
        
        CPACSLoadCondition& CPACSGroundLoadCase::GetLoadCondition()
        {
            return *m_loadCondition;
        }
        
        const CPACSLoadCaseState& CPACSGroundLoadCase::GetState() const
        {
            return m_state;
        }
        
        CPACSLoadCaseState& CPACSGroundLoadCase::GetState()
        {
            return m_state;
        }
        
        bool CPACSGroundLoadCase::HasAircraftSettings() const
        {
            return static_cast<bool>(m_aircraftSettings);
        }
        
        const CPACSLoadCaseSettings& CPACSGroundLoadCase::GetAircraftSettings() const
        {
            return *m_aircraftSettings;
        }
        
        CPACSLoadCaseSettings& CPACSGroundLoadCase::GetAircraftSettings()
        {
            return *m_aircraftSettings;
        }
        
        bool CPACSGroundLoadCase::HasMass() const
        {
            return static_cast<bool>(m_mass);
        }
        
        const CPACSLoadCaseMass& CPACSGroundLoadCase::GetMass() const
        {
            return *m_mass;
        }
        
        CPACSLoadCaseMass& CPACSGroundLoadCase::GetMass()
        {
            return *m_mass;
        }
        
        bool CPACSGroundLoadCase::HasExternalAmifFile() const
        {
            return static_cast<bool>(m_externalAmifFile);
        }
        
        const std::string& CPACSGroundLoadCase::GetExternalAmifFile() const
        {
            return *m_externalAmifFile;
        }
        
        void CPACSGroundLoadCase::SetExternalAmifFile(const std::string& value)
        {
            m_externalAmifFile = value;
        }
        
        bool CPACSGroundLoadCase::HasNodalLoads_choice1() const
        {
            return static_cast<bool>(m_nodalLoads_choice1);
        }
        
        const CPACSNodalLoads& CPACSGroundLoadCase::GetNodalLoads_choice1() const
        {
            return *m_nodalLoads_choice1;
        }
        
        CPACSNodalLoads& CPACSGroundLoadCase::GetNodalLoads_choice1()
        {
            return *m_nodalLoads_choice1;
        }
        
        bool CPACSGroundLoadCase::HasCutLoads_choice2() const
        {
            return static_cast<bool>(m_cutLoads_choice2);
        }
        
        const CPACSCutLoads& CPACSGroundLoadCase::GetCutLoads_choice2() const
        {
            return *m_cutLoads_choice2;
        }
        
        CPACSCutLoads& CPACSGroundLoadCase::GetCutLoads_choice2()
        {
            return *m_cutLoads_choice2;
        }
        
    }
}
