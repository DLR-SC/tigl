// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSMaterialDefinition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSMaterialDefinition::CPACSMaterialDefinition() {}
        
        CPACSMaterialDefinition::~CPACSMaterialDefinition() {}
        
        void CPACSMaterialDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element compositeUID
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
                m_compositeUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/compositeUID");
                if (m_compositeUID_choice1->empty()) {
                    LOG(WARNING) << "Optional element compositeUID is present but empty at xpath " << xpath;
                }
            }
            
            // read element orthotropyDirection
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
                m_orthotropyDirection_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/orthotropyDirection");
            }
            
            // read element thicknessScaling
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
                m_thicknessScaling_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thicknessScaling");
            }
            
            // read element materialUID
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                m_materialUID_choice2 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
                if (m_materialUID_choice2->empty()) {
                    LOG(WARNING) << "Optional element materialUID is present but empty at xpath " << xpath;
                }
            }
            
            // read element thickness
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                m_thickness_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thickness");
            }
            
            if (!ValidateChoices()) {
                LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
            }
        }
        
        void CPACSMaterialDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element compositeUID
            if (m_compositeUID_choice1) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/compositeUID");
                tixi::TixiSaveElement(tixiHandle, xpath + "/compositeUID", *m_compositeUID_choice1);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/compositeUID");
                }
            }
            
            // write element orthotropyDirection
            if (m_orthotropyDirection_choice1) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orthotropyDirection");
                tixi::TixiSaveElement(tixiHandle, xpath + "/orthotropyDirection", *m_orthotropyDirection_choice1);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/orthotropyDirection");
                }
            }
            
            // write element thicknessScaling
            if (m_thicknessScaling_choice1) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thicknessScaling");
                tixi::TixiSaveElement(tixiHandle, xpath + "/thicknessScaling", *m_thicknessScaling_choice1);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/thicknessScaling");
                }
            }
            
            // write element materialUID
            if (m_materialUID_choice2) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materialUID");
                tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", *m_materialUID_choice2);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/materialUID");
                }
            }
            
            // write element thickness
            if (m_thickness_choice2) {
                tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thickness");
                tixi::TixiSaveElement(tixiHandle, xpath + "/thickness", *m_thickness_choice2);
            } else {
                if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                    tixi::TixiRemoveElement(tixiHandle, xpath + "/thickness");
                }
            }
            
        }
        
        bool CPACSMaterialDefinition::ValidateChoices() const
        {
            return
            (
                (
                    (
                        // mandatory elements of this choice must be there
                        m_compositeUID_choice1.is_initialized()
                        &&
                        true // m_orthotropyDirection_choice1 is optional in choice
                        &&
                        true // m_thicknessScaling_choice1 is optional in choice
                        &&
                        // elements of other choices must not be there
                        !(
                            m_materialUID_choice2.is_initialized()
                            ||
                            m_thickness_choice2.is_initialized()
                        )
                    )
                    +
                    (
                        // mandatory elements of this choice must be there
                        m_materialUID_choice2.is_initialized()
                        &&
                        true // m_thickness_choice2 is optional in choice
                        &&
                        // elements of other choices must not be there
                        !(
                            m_compositeUID_choice1.is_initialized()
                            ||
                            m_orthotropyDirection_choice1.is_initialized()
                            ||
                            m_thicknessScaling_choice1.is_initialized()
                        )
                    )
                    == 1
                )
            )
            ;
        }
        
        const boost::optional<std::string>& CPACSMaterialDefinition::GetCompositeUID_choice1() const
        {
            return m_compositeUID_choice1;
        }
        
        void CPACSMaterialDefinition::SetCompositeUID_choice1(const std::string& value)
        {
            m_compositeUID_choice1 = value;
        }
        
        void CPACSMaterialDefinition::SetCompositeUID_choice1(const boost::optional<std::string>& value)
        {
            m_compositeUID_choice1 = value;
        }
        
        const boost::optional<double>& CPACSMaterialDefinition::GetOrthotropyDirection_choice1() const
        {
            return m_orthotropyDirection_choice1;
        }
        
        void CPACSMaterialDefinition::SetOrthotropyDirection_choice1(const double& value)
        {
            m_orthotropyDirection_choice1 = value;
        }
        
        void CPACSMaterialDefinition::SetOrthotropyDirection_choice1(const boost::optional<double>& value)
        {
            m_orthotropyDirection_choice1 = value;
        }
        
        const boost::optional<double>& CPACSMaterialDefinition::GetThicknessScaling_choice1() const
        {
            return m_thicknessScaling_choice1;
        }
        
        void CPACSMaterialDefinition::SetThicknessScaling_choice1(const double& value)
        {
            m_thicknessScaling_choice1 = value;
        }
        
        void CPACSMaterialDefinition::SetThicknessScaling_choice1(const boost::optional<double>& value)
        {
            m_thicknessScaling_choice1 = value;
        }
        
        const boost::optional<std::string>& CPACSMaterialDefinition::GetMaterialUID_choice2() const
        {
            return m_materialUID_choice2;
        }
        
        void CPACSMaterialDefinition::SetMaterialUID_choice2(const std::string& value)
        {
            m_materialUID_choice2 = value;
        }
        
        void CPACSMaterialDefinition::SetMaterialUID_choice2(const boost::optional<std::string>& value)
        {
            m_materialUID_choice2 = value;
        }
        
        const boost::optional<double>& CPACSMaterialDefinition::GetThickness_choice2() const
        {
            return m_thickness_choice2;
        }
        
        void CPACSMaterialDefinition::SetThickness_choice2(const double& value)
        {
            m_thickness_choice2 = value;
        }
        
        void CPACSMaterialDefinition::SetThickness_choice2(const boost::optional<double>& value)
        {
            m_thickness_choice2 = value;
        }
        
    }
}
