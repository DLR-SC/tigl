// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingRibCrossSection.h"
#include "CPACSCap.h"
#include "CPACSLateralCap.h"
#include "CPACSMaterialDefinition.h"
#include "CPACSSheetBasedStructuralElement.h"
#include "CPACSTrackActuator.h"
#include "CPACSTrackCar.h"
#include "CPACSTrackFairing.h"
#include "CPACSTrackStructure.h"
#include "CPACSTrackStrut1.h"
#include "CPACSTrackStrut2.h"
#include "CPACSWeb.h"
#include "CPACSWingRibCell.h"
#include "CPACSWingSkin.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSCap* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSCap);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSLateralCap* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSLateralCap);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSSheetBasedStructuralElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSheetBasedStructuralElement);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackActuator* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackActuator);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackCar* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackCar);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackFairing* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackFairing);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackStructure* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackStructure);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackStrut1* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackStrut1);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSTrackStrut2* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTrackStrut2);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSWeb* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSWeb);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSWingRibCell* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSWingRibCell);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CCPACSWingRibCrossSection* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSWingRibCrossSection);
    }

    CPACSMaterialDefinition::CPACSMaterialDefinition(CPACSWingSkin* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSWingSkin);
    }

    CPACSMaterialDefinition::~CPACSMaterialDefinition()
    {
        if (m_uidMgr) {
            if (m_compositeUID_choice1 && !m_compositeUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_compositeUID_choice1, *this);
            if (m_materialUID_choice2 && !m_materialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_materialUID_choice2, *this);
        }
    }

    const CTiglUIDObject* CPACSMaterialDefinition::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSCap>()) {
                return GetParent<CPACSCap>()->GetNextUIDParent();
            }
            if (IsParent<CPACSLateralCap>()) {
                return GetParent<CPACSLateralCap>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSheetBasedStructuralElement>()) {
                return GetParent<CPACSSheetBasedStructuralElement>();
            }
            if (IsParent<CPACSTrackActuator>()) {
                return GetParent<CPACSTrackActuator>();
            }
            if (IsParent<CPACSTrackCar>()) {
                return GetParent<CPACSTrackCar>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackFairing>()) {
                return GetParent<CPACSTrackFairing>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStructure>()) {
                return GetParent<CPACSTrackStructure>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStrut1>()) {
                return GetParent<CPACSTrackStrut1>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStrut2>()) {
                return GetParent<CPACSTrackStrut2>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWeb>()) {
                return GetParent<CPACSWeb>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingRibCell>()) {
                return GetParent<CPACSWingRibCell>();
            }
            if (IsParent<CCPACSWingRibCrossSection>()) {
                return GetParent<CCPACSWingRibCrossSection>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingSkin>()) {
                return GetParent<CPACSWingSkin>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSMaterialDefinition::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSCap>()) {
                return GetParent<CPACSCap>()->GetNextUIDParent();
            }
            if (IsParent<CPACSLateralCap>()) {
                return GetParent<CPACSLateralCap>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSheetBasedStructuralElement>()) {
                return GetParent<CPACSSheetBasedStructuralElement>();
            }
            if (IsParent<CPACSTrackActuator>()) {
                return GetParent<CPACSTrackActuator>();
            }
            if (IsParent<CPACSTrackCar>()) {
                return GetParent<CPACSTrackCar>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackFairing>()) {
                return GetParent<CPACSTrackFairing>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStructure>()) {
                return GetParent<CPACSTrackStructure>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStrut1>()) {
                return GetParent<CPACSTrackStrut1>()->GetNextUIDParent();
            }
            if (IsParent<CPACSTrackStrut2>()) {
                return GetParent<CPACSTrackStrut2>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWeb>()) {
                return GetParent<CPACSWeb>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingRibCell>()) {
                return GetParent<CPACSWingRibCell>();
            }
            if (IsParent<CCPACSWingRibCrossSection>()) {
                return GetParent<CCPACSWingRibCrossSection>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingSkin>()) {
                return GetParent<CPACSWingSkin>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSMaterialDefinition::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSMaterialDefinition::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSMaterialDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element compositeUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
            m_compositeUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/compositeUID");
            if (m_compositeUID_choice1->empty()) {
                LOG(WARNING) << "Optional element compositeUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_compositeUID_choice1->empty()) m_uidMgr->RegisterReference(*m_compositeUID_choice1, *this);
        }

        // read element orthotropyDirection
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
            m_orthotropyDirection_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/orthotropyDirection");
        }

        // read element thicknessScaling
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
            m_thicknessScaling_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thicknessScaling");
        }

        // read element materialUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
            m_materialUID_choice2 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
            if (m_materialUID_choice2->empty()) {
                LOG(WARNING) << "Optional element materialUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_materialUID_choice2->empty()) m_uidMgr->RegisterReference(*m_materialUID_choice2, *this);
        }

        // read element thickness
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
            m_thickness_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/thickness");
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSMaterialDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element compositeUID
        if (m_compositeUID_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/compositeUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/compositeUID", *m_compositeUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/compositeUID");
            }
        }

        // write element orthotropyDirection
        if (m_orthotropyDirection_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orthotropyDirection");
            tixi::TixiSaveElement(tixiHandle, xpath + "/orthotropyDirection", *m_orthotropyDirection_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/orthotropyDirection")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/orthotropyDirection");
            }
        }

        // write element thicknessScaling
        if (m_thicknessScaling_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thicknessScaling");
            tixi::TixiSaveElement(tixiHandle, xpath + "/thicknessScaling", *m_thicknessScaling_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thicknessScaling")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/thicknessScaling");
            }
        }

        // write element materialUID
        if (m_materialUID_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materialUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", *m_materialUID_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/materialUID");
            }
        }

        // write element thickness
        if (m_thickness_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thickness");
            tixi::TixiSaveElement(tixiHandle, xpath + "/thickness", *m_thickness_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thickness")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/thickness");
            }
        }

    }

    bool CPACSMaterialDefinition::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_compositeUID_choice1.is_initialized()
                    &&
                    true // m_orthotropyDirection_choice1 is optional in choice
                    &&
                    true // m_thicknessScaling_choice1 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_materialUID_choice2.is_initialized()
                        ||
                        m_thickness_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_materialUID_choice2.is_initialized()
                    &&
                    true // m_thickness_choice2 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_compositeUID_choice1.is_initialized()
                        ||
                        m_orthotropyDirection_choice1.is_initialized()
                        ||
                        m_thicknessScaling_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<std::string>& CPACSMaterialDefinition::GetCompositeUID_choice1() const
    {
        return m_compositeUID_choice1;
    }

    void CPACSMaterialDefinition::SetCompositeUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_compositeUID_choice1 && !m_compositeUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_compositeUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_compositeUID_choice1 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinition::GetOrthotropyDirection_choice1() const
    {
        return m_orthotropyDirection_choice1;
    }

    void CPACSMaterialDefinition::SetOrthotropyDirection_choice1(const boost::optional<double>& value)
    {
        m_orthotropyDirection_choice1 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinition::GetThicknessScaling_choice1() const
    {
        return m_thicknessScaling_choice1;
    }

    void CPACSMaterialDefinition::SetThicknessScaling_choice1(const boost::optional<double>& value)
    {
        m_thicknessScaling_choice1 = value;
    }

    const boost::optional<std::string>& CPACSMaterialDefinition::GetMaterialUID_choice2() const
    {
        return m_materialUID_choice2;
    }

    void CPACSMaterialDefinition::SetMaterialUID_choice2(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_materialUID_choice2 && !m_materialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_materialUID_choice2, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_materialUID_choice2 = value;
    }

    const boost::optional<double>& CPACSMaterialDefinition::GetThickness_choice2() const
    {
        return m_thickness_choice2;
    }

    void CPACSMaterialDefinition::SetThickness_choice2(const boost::optional<double>& value)
    {
        m_thickness_choice2 = value;
    }

    const CTiglUIDObject* CPACSMaterialDefinition::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSMaterialDefinition::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_compositeUID_choice1 && *m_compositeUID_choice1 == oldUid) {
            m_compositeUID_choice1 = newUid;
        }
        if (m_materialUID_choice2 && *m_materialUID_choice2 == oldUid) {
            m_materialUID_choice2 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
