// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSLoadReferenceAxisPoints.h"
#include "CPACSDynamicAircraftModelPoints.h"
#include "CPACSCutLoadIntegrationPoints.h"
#include "CPACSConnectivities.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFuselage
        // CPACSWing
        
        // generated from /xsd:schema/xsd:complexType[290]
        class CPACSDynamicAircraftModel
        {
        public:
            TIGL_EXPORT CPACSDynamicAircraftModel();
            TIGL_EXPORT virtual ~CPACSDynamicAircraftModel();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasLoadReferenceAxisPoints() const;
            TIGL_EXPORT const CPACSLoadReferenceAxisPoints& GetLoadReferenceAxisPoints() const;
            TIGL_EXPORT CPACSLoadReferenceAxisPoints& GetLoadReferenceAxisPoints();
            
            TIGL_EXPORT bool HasDynamicAircraftModelPoints() const;
            TIGL_EXPORT const CPACSDynamicAircraftModelPoints& GetDynamicAircraftModelPoints() const;
            TIGL_EXPORT CPACSDynamicAircraftModelPoints& GetDynamicAircraftModelPoints();
            
            TIGL_EXPORT bool HasCutLoadIntegrationPoints() const;
            TIGL_EXPORT const CPACSCutLoadIntegrationPoints& GetCutLoadIntegrationPoints() const;
            TIGL_EXPORT CPACSCutLoadIntegrationPoints& GetCutLoadIntegrationPoints();
            
            TIGL_EXPORT bool HasConnectivities() const;
            TIGL_EXPORT const CPACSConnectivities& GetConnectivities() const;
            TIGL_EXPORT CPACSConnectivities& GetConnectivities();
            
        protected:
            boost::optional<CPACSLoadReferenceAxisPoints>    m_loadReferenceAxisPoints;
            boost::optional<CPACSDynamicAircraftModelPoints> m_dynamicAircraftModelPoints;
            boost::optional<CPACSCutLoadIntegrationPoints>   m_cutLoadIntegrationPoints;
            boost::optional<CPACSConnectivities>             m_connectivities;
            
        private:
            #ifdef HAVE_CPP11
            CPACSDynamicAircraftModel(const CPACSDynamicAircraftModel&) = delete;
            CPACSDynamicAircraftModel& operator=(const CPACSDynamicAircraftModel&) = delete;
            
            CPACSDynamicAircraftModel(CPACSDynamicAircraftModel&&) = delete;
            CPACSDynamicAircraftModel& operator=(CPACSDynamicAircraftModel&&) = delete;
            #else
            CPACSDynamicAircraftModel(const CPACSDynamicAircraftModel&);
            CPACSDynamicAircraftModel& operator=(const CPACSDynamicAircraftModel&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSDynamicAircraftModel = generated::CPACSDynamicAircraftModel;
    #else
    typedef generated::CPACSDynamicAircraftModel CCPACSDynamicAircraftModel;
    #endif
}
