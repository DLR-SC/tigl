// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSProfiles.h"
#include "CPACSVehicles.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSProfiles::CPACSProfiles(CPACSVehicles* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSProfiles::~CPACSProfiles()
    {
    }

    const CPACSVehicles* CPACSProfiles::GetParent() const
    {
        return m_parent;
    }

    CPACSVehicles* CPACSProfiles::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSProfiles::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSProfiles::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSProfiles::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSProfiles::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSProfiles::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element fuselageProfiles
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fuselageProfiles")) {
            m_fuselageProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_fuselageProfiles->ReadCPACS(tixiHandle, xpath + "/fuselageProfiles");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read fuselageProfiles at xpath " << xpath << ": " << e.what();
                m_fuselageProfiles = boost::none;
            }
        }

        // read element wingAirfoils
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/wingAirfoils")) {
            m_wingAirfoils = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_wingAirfoils->ReadCPACS(tixiHandle, xpath + "/wingAirfoils");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read wingAirfoils at xpath " << xpath << ": " << e.what();
                m_wingAirfoils = boost::none;
            }
        }

        // read element guideCurves
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/guideCurves")) {
            m_guideCurves = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_guideCurves->ReadCPACS(tixiHandle, xpath + "/guideCurves");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read guideCurves at xpath " << xpath << ": " << e.what();
                m_guideCurves = boost::none;
            }
        }

        // read element rotorAirfoils
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotorAirfoils")) {
            m_rotorAirfoils = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_rotorAirfoils->ReadCPACS(tixiHandle, xpath + "/rotorAirfoils");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read rotorAirfoils at xpath " << xpath << ": " << e.what();
                m_rotorAirfoils = boost::none;
            }
        }

        // read element structuralProfiles
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralProfiles")) {
            m_structuralProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_structuralProfiles->ReadCPACS(tixiHandle, xpath + "/structuralProfiles");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read structuralProfiles at xpath " << xpath << ": " << e.what();
                m_structuralProfiles = boost::none;
            }
        }

        // read element nacelleProfiles
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/nacelleProfiles")) {
            m_nacelleProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_nacelleProfiles->ReadCPACS(tixiHandle, xpath + "/nacelleProfiles");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read nacelleProfiles at xpath " << xpath << ": " << e.what();
                m_nacelleProfiles = boost::none;
            }
        }

        // read element curveProfiles
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/curveProfiles")) {
            m_curveProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
            try {
                m_curveProfiles->ReadCPACS(tixiHandle, xpath + "/curveProfiles");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read curveProfiles at xpath " << xpath << ": " << e.what();
                m_curveProfiles = boost::none;
            }
        }

    }

    void CPACSProfiles::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element fuselageProfiles
        if (m_fuselageProfiles) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselageProfiles");
            m_fuselageProfiles->WriteCPACS(tixiHandle, xpath + "/fuselageProfiles");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/fuselageProfiles")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/fuselageProfiles");
            }
        }

        // write element wingAirfoils
        if (m_wingAirfoils) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingAirfoils");
            m_wingAirfoils->WriteCPACS(tixiHandle, xpath + "/wingAirfoils");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/wingAirfoils")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/wingAirfoils");
            }
        }

        // write element guideCurves
        if (m_guideCurves) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/guideCurves");
            m_guideCurves->WriteCPACS(tixiHandle, xpath + "/guideCurves");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/guideCurves")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/guideCurves");
            }
        }

        // write element rotorAirfoils
        if (m_rotorAirfoils) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotorAirfoils");
            m_rotorAirfoils->WriteCPACS(tixiHandle, xpath + "/rotorAirfoils");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotorAirfoils")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rotorAirfoils");
            }
        }

        // write element structuralProfiles
        if (m_structuralProfiles) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralProfiles");
            m_structuralProfiles->WriteCPACS(tixiHandle, xpath + "/structuralProfiles");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralProfiles")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralProfiles");
            }
        }

        // write element nacelleProfiles
        if (m_nacelleProfiles) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nacelleProfiles");
            m_nacelleProfiles->WriteCPACS(tixiHandle, xpath + "/nacelleProfiles");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/nacelleProfiles")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/nacelleProfiles");
            }
        }

        // write element curveProfiles
        if (m_curveProfiles) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/curveProfiles");
            m_curveProfiles->WriteCPACS(tixiHandle, xpath + "/curveProfiles");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/curveProfiles")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/curveProfiles");
            }
        }

    }

    const boost::optional<CCPACSFuselageProfiles>& CPACSProfiles::GetFuselageProfiles() const
    {
        return m_fuselageProfiles;
    }

    boost::optional<CCPACSFuselageProfiles>& CPACSProfiles::GetFuselageProfiles()
    {
        return m_fuselageProfiles;
    }

    const boost::optional<CCPACSWingProfiles>& CPACSProfiles::GetWingAirfoils() const
    {
        return m_wingAirfoils;
    }

    boost::optional<CCPACSWingProfiles>& CPACSProfiles::GetWingAirfoils()
    {
        return m_wingAirfoils;
    }

    const boost::optional<CCPACSGuideCurveProfiles>& CPACSProfiles::GetGuideCurves() const
    {
        return m_guideCurves;
    }

    boost::optional<CCPACSGuideCurveProfiles>& CPACSProfiles::GetGuideCurves()
    {
        return m_guideCurves;
    }

    const boost::optional<CCPACSRotorProfiles>& CPACSProfiles::GetRotorAirfoils() const
    {
        return m_rotorAirfoils;
    }

    boost::optional<CCPACSRotorProfiles>& CPACSProfiles::GetRotorAirfoils()
    {
        return m_rotorAirfoils;
    }

    const boost::optional<CCPACSStructuralProfiles>& CPACSProfiles::GetStructuralProfiles() const
    {
        return m_structuralProfiles;
    }

    boost::optional<CCPACSStructuralProfiles>& CPACSProfiles::GetStructuralProfiles()
    {
        return m_structuralProfiles;
    }

    const boost::optional<CPACSNacelleProfiles>& CPACSProfiles::GetNacelleProfiles() const
    {
        return m_nacelleProfiles;
    }

    boost::optional<CPACSNacelleProfiles>& CPACSProfiles::GetNacelleProfiles()
    {
        return m_nacelleProfiles;
    }

    const boost::optional<CPACSCurveProfiles>& CPACSProfiles::GetCurveProfiles() const
    {
        return m_curveProfiles;
    }

    boost::optional<CPACSCurveProfiles>& CPACSProfiles::GetCurveProfiles()
    {
        return m_curveProfiles;
    }

    CCPACSFuselageProfiles& CPACSProfiles::GetFuselageProfiles(CreateIfNotExistsTag)
    {
        if (!m_fuselageProfiles)
            m_fuselageProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_fuselageProfiles;
    }

    void CPACSProfiles::RemoveFuselageProfiles()
    {
        m_fuselageProfiles = boost::none;
    }

    CCPACSWingProfiles& CPACSProfiles::GetWingAirfoils(CreateIfNotExistsTag)
    {
        if (!m_wingAirfoils)
            m_wingAirfoils = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_wingAirfoils;
    }

    void CPACSProfiles::RemoveWingAirfoils()
    {
        m_wingAirfoils = boost::none;
    }

    CCPACSGuideCurveProfiles& CPACSProfiles::GetGuideCurves(CreateIfNotExistsTag)
    {
        if (!m_guideCurves)
            m_guideCurves = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_guideCurves;
    }

    void CPACSProfiles::RemoveGuideCurves()
    {
        m_guideCurves = boost::none;
    }

    CCPACSRotorProfiles& CPACSProfiles::GetRotorAirfoils(CreateIfNotExistsTag)
    {
        if (!m_rotorAirfoils)
            m_rotorAirfoils = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_rotorAirfoils;
    }

    void CPACSProfiles::RemoveRotorAirfoils()
    {
        m_rotorAirfoils = boost::none;
    }

    CCPACSStructuralProfiles& CPACSProfiles::GetStructuralProfiles(CreateIfNotExistsTag)
    {
        if (!m_structuralProfiles)
            m_structuralProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_structuralProfiles;
    }

    void CPACSProfiles::RemoveStructuralProfiles()
    {
        m_structuralProfiles = boost::none;
    }

    CPACSNacelleProfiles& CPACSProfiles::GetNacelleProfiles(CreateIfNotExistsTag)
    {
        if (!m_nacelleProfiles)
            m_nacelleProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_nacelleProfiles;
    }

    void CPACSProfiles::RemoveNacelleProfiles()
    {
        m_nacelleProfiles = boost::none;
    }

    CPACSCurveProfiles& CPACSProfiles::GetCurveProfiles(CreateIfNotExistsTag)
    {
        if (!m_curveProfiles)
            m_curveProfiles = boost::in_place(reinterpret_cast<CCPACSProfiles*>(this), m_uidMgr);
        return *m_curveProfiles;
    }

    void CPACSProfiles::RemoveCurveProfiles()
    {
        m_curveProfiles = boost::none;
    }

} // namespace generated
} // namespace tigl
