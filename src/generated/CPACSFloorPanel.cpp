// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFloorPanel.h"

namespace tigl
{
    namespace generated
    {
        CPACSFloorPanel::CPACSFloorPanel(){}
        CPACSFloorPanel::~CPACSFloorPanel() {}
        
        void CPACSFloorPanel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element startX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startX")) {
                m_startX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/startX");
            }
            else {
                LOG(ERROR) << "Required element startX is missing";
            }
            
            // read element endX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endX")) {
                m_endX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/endX");
            }
            else {
                LOG(ERROR) << "Required element endX is missing";
            }
            
            // read element longFloorBeam1UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/longFloorBeam1UID")) {
                m_longFloorBeam1UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/longFloorBeam1UID");
            }
            else {
                LOG(ERROR) << "Required element longFloorBeam1UID is missing";
            }
            
            // read element longFloorBeam2UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/longFloorBeam2UID")) {
                m_longFloorBeam2UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/longFloorBeam2UID");
            }
            else {
                LOG(ERROR) << "Required element longFloorBeam2UID is missing";
            }
            
            // read element sheetElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
                m_sheetElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            }
            else {
                LOG(ERROR) << "Required element sheetElementUID is missing";
            }
            
            // read element alignment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
                m_alignment = boost::in_place();
                try {
                    m_alignment->ReadCPACS(tixiHandle, xpath + "/alignment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.what();
                    m_alignment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.getError();
                    m_alignment = boost::none;
                }
            }
            
        }
        
        void CPACSFloorPanel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element startX
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startX");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startX", m_startX);
            
            // write element endX
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endX");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endX", m_endX);
            
            // write element longFloorBeam1UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/longFloorBeam1UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/longFloorBeam1UID", m_longFloorBeam1UID);
            
            // write element longFloorBeam2UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/longFloorBeam2UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/longFloorBeam2UID", m_longFloorBeam2UID);
            
            // write element sheetElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);
            
            // write element alignment
            if (m_alignment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alignment");
                m_alignment->WriteCPACS(tixiHandle, xpath + "/alignment");
            }
            
        }
        
        bool CPACSFloorPanel::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSFloorPanel::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSFloorPanel::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const double& CPACSFloorPanel::GetStartX() const
        {
            return m_startX;
        }
        
        void CPACSFloorPanel::SetStartX(const double& value)
        {
            m_startX = value;
        }
        
        const double& CPACSFloorPanel::GetEndX() const
        {
            return m_endX;
        }
        
        void CPACSFloorPanel::SetEndX(const double& value)
        {
            m_endX = value;
        }
        
        const std::string& CPACSFloorPanel::GetLongFloorBeam1UID() const
        {
            return m_longFloorBeam1UID;
        }
        
        void CPACSFloorPanel::SetLongFloorBeam1UID(const std::string& value)
        {
            m_longFloorBeam1UID = value;
        }
        
        const std::string& CPACSFloorPanel::GetLongFloorBeam2UID() const
        {
            return m_longFloorBeam2UID;
        }
        
        void CPACSFloorPanel::SetLongFloorBeam2UID(const std::string& value)
        {
            m_longFloorBeam2UID = value;
        }
        
        const std::string& CPACSFloorPanel::GetSheetElementUID() const
        {
            return m_sheetElementUID;
        }
        
        void CPACSFloorPanel::SetSheetElementUID(const std::string& value)
        {
            m_sheetElementUID = value;
        }
        
        bool CPACSFloorPanel::HasAlignment() const
        {
            return static_cast<bool>(m_alignment);
        }
        
        const CPACSAlignmentFloorPanel& CPACSFloorPanel::GetAlignment() const
        {
            return *m_alignment;
        }
        
        CPACSAlignmentFloorPanel& CPACSFloorPanel::GetAlignment()
        {
            return *m_alignment;
        }
        
    }
}
