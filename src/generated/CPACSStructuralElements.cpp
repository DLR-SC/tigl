// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSStructuralElements.h"

namespace tigl
{
    namespace generated
    {
        CPACSStructuralElements::CPACSStructuralElements(){}
        CPACSStructuralElements::~CPACSStructuralElements() {}
        
        void CPACSStructuralElements::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element sheetBasedStructuralElements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetBasedStructuralElements")) {
                m_sheetBasedStructuralElements = boost::in_place();
                try {
                    m_sheetBasedStructuralElements->ReadCPACS(tixiHandle, xpath + "/sheetBasedStructuralElements");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read sheetBasedStructuralElements at xpath << " << xpath << ": " << e.what();
                    m_sheetBasedStructuralElements = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read sheetBasedStructuralElements at xpath << " << xpath << ": " << e.getError();
                    m_sheetBasedStructuralElements = boost::none;
                }
            }
            
            // read element profileBasedStructuralElements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/profileBasedStructuralElements")) {
                m_profileBasedStructuralElements = boost::in_place();
                try {
                    m_profileBasedStructuralElements->ReadCPACS(tixiHandle, xpath + "/profileBasedStructuralElements");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read profileBasedStructuralElements at xpath << " << xpath << ": " << e.what();
                    m_profileBasedStructuralElements = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read profileBasedStructuralElements at xpath << " << xpath << ": " << e.getError();
                    m_profileBasedStructuralElements = boost::none;
                }
            }
            
            // read element pressureBulkheads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pressureBulkheads")) {
                m_pressureBulkheads = boost::in_place();
                try {
                    m_pressureBulkheads->ReadCPACS(tixiHandle, xpath + "/pressureBulkheads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read pressureBulkheads at xpath << " << xpath << ": " << e.what();
                    m_pressureBulkheads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read pressureBulkheads at xpath << " << xpath << ": " << e.getError();
                    m_pressureBulkheads = boost::none;
                }
            }
            
            // read element windows
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/windows")) {
                m_windows = boost::in_place();
                try {
                    m_windows->ReadCPACS(tixiHandle, xpath + "/windows");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read windows at xpath << " << xpath << ": " << e.what();
                    m_windows = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read windows at xpath << " << xpath << ": " << e.getError();
                    m_windows = boost::none;
                }
            }
            
            // read element doors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/doors")) {
                m_doors = boost::in_place();
                try {
                    m_doors->ReadCPACS(tixiHandle, xpath + "/doors");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read doors at xpath << " << xpath << ": " << e.what();
                    m_doors = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read doors at xpath << " << xpath << ": " << e.getError();
                    m_doors = boost::none;
                }
            }
            
            // read element doorSurroundStructures
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/doorSurroundStructures")) {
                m_doorSurroundStructures = boost::in_place();
                try {
                    m_doorSurroundStructures->ReadCPACS(tixiHandle, xpath + "/doorSurroundStructures");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read doorSurroundStructures at xpath << " << xpath << ": " << e.what();
                    m_doorSurroundStructures = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read doorSurroundStructures at xpath << " << xpath << ": " << e.getError();
                    m_doorSurroundStructures = boost::none;
                }
            }
            
            // read element seatModules
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/seatModules")) {
                m_seatModules = boost::in_place();
                try {
                    m_seatModules->ReadCPACS(tixiHandle, xpath + "/seatModules");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read seatModules at xpath << " << xpath << ": " << e.what();
                    m_seatModules = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read seatModules at xpath << " << xpath << ": " << e.getError();
                    m_seatModules = boost::none;
                }
            }
            
            // read element rivets
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rivets")) {
                m_rivets = boost::in_place();
                try {
                    m_rivets->ReadCPACS(tixiHandle, xpath + "/rivets");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rivets at xpath << " << xpath << ": " << e.what();
                    m_rivets = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rivets at xpath << " << xpath << ": " << e.getError();
                    m_rivets = boost::none;
                }
            }
            
        }
        
        void CPACSStructuralElements::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element sheetBasedStructuralElements
            if (m_sheetBasedStructuralElements) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetBasedStructuralElements");
                m_sheetBasedStructuralElements->WriteCPACS(tixiHandle, xpath + "/sheetBasedStructuralElements");
            }
            
            // write element profileBasedStructuralElements
            if (m_profileBasedStructuralElements) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/profileBasedStructuralElements");
                m_profileBasedStructuralElements->WriteCPACS(tixiHandle, xpath + "/profileBasedStructuralElements");
            }
            
            // write element pressureBulkheads
            if (m_pressureBulkheads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pressureBulkheads");
                m_pressureBulkheads->WriteCPACS(tixiHandle, xpath + "/pressureBulkheads");
            }
            
            // write element windows
            if (m_windows) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/windows");
                m_windows->WriteCPACS(tixiHandle, xpath + "/windows");
            }
            
            // write element doors
            if (m_doors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doors");
                m_doors->WriteCPACS(tixiHandle, xpath + "/doors");
            }
            
            // write element doorSurroundStructures
            if (m_doorSurroundStructures) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doorSurroundStructures");
                m_doorSurroundStructures->WriteCPACS(tixiHandle, xpath + "/doorSurroundStructures");
            }
            
            // write element seatModules
            if (m_seatModules) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/seatModules");
                m_seatModules->WriteCPACS(tixiHandle, xpath + "/seatModules");
            }
            
            // write element rivets
            if (m_rivets) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rivets");
                m_rivets->WriteCPACS(tixiHandle, xpath + "/rivets");
            }
            
        }
        
        bool CPACSStructuralElements::HasSheetBasedStructuralElements() const
        {
            return static_cast<bool>(m_sheetBasedStructuralElements);
        }
        
        const CPACSSheetBasedStructuralElements& CPACSStructuralElements::GetSheetBasedStructuralElements() const
        {
            return *m_sheetBasedStructuralElements;
        }
        
        CPACSSheetBasedStructuralElements& CPACSStructuralElements::GetSheetBasedStructuralElements()
        {
            return *m_sheetBasedStructuralElements;
        }
        
        bool CPACSStructuralElements::HasProfileBasedStructuralElements() const
        {
            return static_cast<bool>(m_profileBasedStructuralElements);
        }
        
        const CPACSProfileBasedStructuralElements& CPACSStructuralElements::GetProfileBasedStructuralElements() const
        {
            return *m_profileBasedStructuralElements;
        }
        
        CPACSProfileBasedStructuralElements& CPACSStructuralElements::GetProfileBasedStructuralElements()
        {
            return *m_profileBasedStructuralElements;
        }
        
        bool CPACSStructuralElements::HasPressureBulkheads() const
        {
            return static_cast<bool>(m_pressureBulkheads);
        }
        
        const CPACSPressureBulkheads& CPACSStructuralElements::GetPressureBulkheads() const
        {
            return *m_pressureBulkheads;
        }
        
        CPACSPressureBulkheads& CPACSStructuralElements::GetPressureBulkheads()
        {
            return *m_pressureBulkheads;
        }
        
        bool CPACSStructuralElements::HasWindows() const
        {
            return static_cast<bool>(m_windows);
        }
        
        const CPACSWindows& CPACSStructuralElements::GetWindows() const
        {
            return *m_windows;
        }
        
        CPACSWindows& CPACSStructuralElements::GetWindows()
        {
            return *m_windows;
        }
        
        bool CPACSStructuralElements::HasDoors() const
        {
            return static_cast<bool>(m_doors);
        }
        
        const CPACSDoors& CPACSStructuralElements::GetDoors() const
        {
            return *m_doors;
        }
        
        CPACSDoors& CPACSStructuralElements::GetDoors()
        {
            return *m_doors;
        }
        
        bool CPACSStructuralElements::HasDoorSurroundStructures() const
        {
            return static_cast<bool>(m_doorSurroundStructures);
        }
        
        const CPACSDoorSurroundStructuresAssembly& CPACSStructuralElements::GetDoorSurroundStructures() const
        {
            return *m_doorSurroundStructures;
        }
        
        CPACSDoorSurroundStructuresAssembly& CPACSStructuralElements::GetDoorSurroundStructures()
        {
            return *m_doorSurroundStructures;
        }
        
        bool CPACSStructuralElements::HasSeatModules() const
        {
            return static_cast<bool>(m_seatModules);
        }
        
        const CPACSSeatModules& CPACSStructuralElements::GetSeatModules() const
        {
            return *m_seatModules;
        }
        
        CPACSSeatModules& CPACSStructuralElements::GetSeatModules()
        {
            return *m_seatModules;
        }
        
        bool CPACSStructuralElements::HasRivets() const
        {
            return static_cast<bool>(m_rivets);
        }
        
        const CPACSRivets& CPACSStructuralElements::GetRivets() const
        {
            return *m_rivets;
        }
        
        CPACSRivets& CPACSStructuralElements::GetRivets()
        {
            return *m_rivets;
        }
        
    }
}
