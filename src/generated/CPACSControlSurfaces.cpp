// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfaces.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfaces::CPACSControlSurfaces(){}
        CPACSControlSurfaces::~CPACSControlSurfaces() {}
        
        void CPACSControlSurfaces::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element leadingEdgeDevices
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeDevices")) {
                m_leadingEdgeDevices = boost::in_place();
                try {
                    m_leadingEdgeDevices->ReadCPACS(tixiHandle, xpath + "/leadingEdgeDevices");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read leadingEdgeDevices at xpath << " << xpath << ": " << e.what();
                    m_leadingEdgeDevices = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read leadingEdgeDevices at xpath << " << xpath << ": " << e.getError();
                    m_leadingEdgeDevices = boost::none;
                }
            }
            
            // read element trailingEdgeDevices
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trailingEdgeDevices")) {
                m_trailingEdgeDevices = boost::in_place();
                try {
                    m_trailingEdgeDevices->ReadCPACS(tixiHandle, xpath + "/trailingEdgeDevices");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trailingEdgeDevices at xpath << " << xpath << ": " << e.what();
                    m_trailingEdgeDevices = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trailingEdgeDevices at xpath << " << xpath << ": " << e.getError();
                    m_trailingEdgeDevices = boost::none;
                }
            }
            
            // read element spoilers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spoilers")) {
                m_spoilers = boost::in_place();
                try {
                    m_spoilers->ReadCPACS(tixiHandle, xpath + "/spoilers");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read spoilers at xpath << " << xpath << ": " << e.what();
                    m_spoilers = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read spoilers at xpath << " << xpath << ": " << e.getError();
                    m_spoilers = boost::none;
                }
            }
            
        }
        
        void CPACSControlSurfaces::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element leadingEdgeDevices
            if (m_leadingEdgeDevices) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/leadingEdgeDevices");
                m_leadingEdgeDevices->WriteCPACS(tixiHandle, xpath + "/leadingEdgeDevices");
            }
            
            // write element trailingEdgeDevices
            if (m_trailingEdgeDevices) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trailingEdgeDevices");
                m_trailingEdgeDevices->WriteCPACS(tixiHandle, xpath + "/trailingEdgeDevices");
            }
            
            // write element spoilers
            if (m_spoilers) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spoilers");
                m_spoilers->WriteCPACS(tixiHandle, xpath + "/spoilers");
            }
            
        }
        
        bool CPACSControlSurfaces::HasLeadingEdgeDevices() const
        {
            return static_cast<bool>(m_leadingEdgeDevices);
        }
        
        const CPACSLeadingEdgeDevices& CPACSControlSurfaces::GetLeadingEdgeDevices() const
        {
            return *m_leadingEdgeDevices;
        }
        
        CPACSLeadingEdgeDevices& CPACSControlSurfaces::GetLeadingEdgeDevices()
        {
            return *m_leadingEdgeDevices;
        }
        
        bool CPACSControlSurfaces::HasTrailingEdgeDevices() const
        {
            return static_cast<bool>(m_trailingEdgeDevices);
        }
        
        const CPACSTrailingEdgeDevices& CPACSControlSurfaces::GetTrailingEdgeDevices() const
        {
            return *m_trailingEdgeDevices;
        }
        
        CPACSTrailingEdgeDevices& CPACSControlSurfaces::GetTrailingEdgeDevices()
        {
            return *m_trailingEdgeDevices;
        }
        
        bool CPACSControlSurfaces::HasSpoilers() const
        {
            return static_cast<bool>(m_spoilers);
        }
        
        const CPACSSpoilers& CPACSControlSurfaces::GetSpoilers() const
        {
            return *m_spoilers;
        }
        
        CPACSSpoilers& CPACSControlSurfaces::GetSpoilers()
        {
            return *m_spoilers;
        }
        
    }
}
