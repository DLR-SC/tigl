// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDriveSystem.h"

namespace tigl
{
    namespace generated
    {
        CPACSDriveSystem::CPACSDriveSystem(){}
        CPACSDriveSystem::~CPACSDriveSystem() {}
        
        void CPACSDriveSystem::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element transmissions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transmissions")) {
                m_transmissions = boost::in_place();
                try {
                    m_transmissions->ReadCPACS(tixiHandle, xpath + "/transmissions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read transmissions at xpath << " << xpath << ": " << e.what();
                    m_transmissions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read transmissions at xpath << " << xpath << ": " << e.getError();
                    m_transmissions = boost::none;
                }
            }
            
            // read element shafts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shafts")) {
                m_shafts = boost::in_place();
                try {
                    m_shafts->ReadCPACS(tixiHandle, xpath + "/shafts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read shafts at xpath << " << xpath << ": " << e.what();
                    m_shafts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read shafts at xpath << " << xpath << ": " << e.getError();
                    m_shafts = boost::none;
                }
            }
            
            // read element states
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/states")) {
                m_states = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/states");
            }
            
        }
        
        void CPACSDriveSystem::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element transmissions
            if (m_transmissions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transmissions");
                m_transmissions->WriteCPACS(tixiHandle, xpath + "/transmissions");
            }
            
            // write element shafts
            if (m_shafts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shafts");
                m_shafts->WriteCPACS(tixiHandle, xpath + "/shafts");
            }
            
            // write element states
            if (m_states) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/states");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/states", *m_states);
            }
            
        }
        
        bool CPACSDriveSystem::HasTransmissions() const
        {
            return static_cast<bool>(m_transmissions);
        }
        
        const CPACSTransmissions& CPACSDriveSystem::GetTransmissions() const
        {
            return *m_transmissions;
        }
        
        CPACSTransmissions& CPACSDriveSystem::GetTransmissions()
        {
            return *m_transmissions;
        }
        
        bool CPACSDriveSystem::HasShafts() const
        {
            return static_cast<bool>(m_shafts);
        }
        
        const CPACSShafts& CPACSDriveSystem::GetShafts() const
        {
            return *m_shafts;
        }
        
        CPACSShafts& CPACSDriveSystem::GetShafts()
        {
            return *m_shafts;
        }
        
        bool CPACSDriveSystem::HasStates() const
        {
            return static_cast<bool>(m_states);
        }
        
        const std::string& CPACSDriveSystem::GetStates() const
        {
            return *m_states;
        }
        
        void CPACSDriveSystem::SetStates(const std::string& value)
        {
            m_states = value;
        }
        
    }
}
