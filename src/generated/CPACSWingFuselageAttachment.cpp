// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingFuselageAttachment.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingFuselageAttachment::CPACSWingFuselageAttachment(){}
        CPACSWingFuselageAttachment::~CPACSWingFuselageAttachment() {}
        
        void CPACSWingFuselageAttachment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element rib1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rib1")) {
                m_rib1.ReadCPACS(tixiHandle, xpath + "/rib1");
            }
            else {
                LOG(ERROR) << "Required element rib1 is missing";
            }
            
            // read element rib2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rib2")) {
                m_rib2 = boost::in_place();
                try {
                    m_rib2->ReadCPACS(tixiHandle, xpath + "/rib2");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rib2 at xpath << " << xpath << ": " << e.what();
                    m_rib2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rib2 at xpath << " << xpath << ": " << e.getError();
                    m_rib2 = boost::none;
                }
            }
            
            // read element attachmentPins
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/attachmentPins")) {
                m_attachmentPins = boost::in_place();
                try {
                    m_attachmentPins->ReadCPACS(tixiHandle, xpath + "/attachmentPins");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read attachmentPins at xpath << " << xpath << ": " << e.what();
                    m_attachmentPins = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read attachmentPins at xpath << " << xpath << ": " << e.getError();
                    m_attachmentPins = boost::none;
                }
            }
            
            // read element actuators
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/actuators")) {
                m_actuators = boost::in_place();
                try {
                    m_actuators->ReadCPACS(tixiHandle, xpath + "/actuators");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read actuators at xpath << " << xpath << ": " << e.what();
                    m_actuators = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read actuators at xpath << " << xpath << ": " << e.getError();
                    m_actuators = boost::none;
                }
            }
            
        }
        
        void CPACSWingFuselageAttachment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element rib1
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rib1");
            m_rib1.WriteCPACS(tixiHandle, xpath + "/rib1");
            
            // write element rib2
            if (m_rib2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rib2");
                m_rib2->WriteCPACS(tixiHandle, xpath + "/rib2");
            }
            
            // write element attachmentPins
            if (m_attachmentPins) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/attachmentPins");
                m_attachmentPins->WriteCPACS(tixiHandle, xpath + "/attachmentPins");
            }
            
            // write element actuators
            if (m_actuators) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/actuators");
                m_actuators->WriteCPACS(tixiHandle, xpath + "/actuators");
            }
            
        }
        
        const CPACSRibIdentification& CPACSWingFuselageAttachment::GetRib1() const
        {
            return m_rib1;
        }
        
        CPACSRibIdentification& CPACSWingFuselageAttachment::GetRib1()
        {
            return m_rib1;
        }
        
        bool CPACSWingFuselageAttachment::HasRib2() const
        {
            return static_cast<bool>(m_rib2);
        }
        
        const CPACSRibIdentification& CPACSWingFuselageAttachment::GetRib2() const
        {
            return *m_rib2;
        }
        
        CPACSRibIdentification& CPACSWingFuselageAttachment::GetRib2()
        {
            return *m_rib2;
        }
        
        bool CPACSWingFuselageAttachment::HasAttachmentPins() const
        {
            return static_cast<bool>(m_attachmentPins);
        }
        
        const CPACSAttachmentPins& CPACSWingFuselageAttachment::GetAttachmentPins() const
        {
            return *m_attachmentPins;
        }
        
        CPACSAttachmentPins& CPACSWingFuselageAttachment::GetAttachmentPins()
        {
            return *m_attachmentPins;
        }
        
        bool CPACSWingFuselageAttachment::HasActuators() const
        {
            return static_cast<bool>(m_actuators);
        }
        
        const CPACSActuatorsFuselageWing& CPACSWingFuselageAttachment::GetActuators() const
        {
            return *m_actuators;
        }
        
        CPACSActuatorsFuselageWing& CPACSWingFuselageAttachment::GetActuators()
        {
            return *m_actuators;
        }
        
    }
}
