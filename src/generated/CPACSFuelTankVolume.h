// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;
class CCPACSVessel;

namespace generated
{
    class CPACSFuselageFuelTank;

    // This class is used in:
    // CPACSFuselageFuelTank
    // CPACSVessel

    /// @brief Definition of different volumes of the fuel tank.
    /// 
    /// 
    /// 
    class CPACSFuelTankVolume
    {
    public:
        TIGL_EXPORT CPACSFuelTankVolume(CPACSFuselageFuelTank* parent);
        TIGL_EXPORT CPACSFuelTankVolume(CCPACSVessel* parent);

        TIGL_EXPORT virtual ~CPACSFuelTankVolume();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSFuselageFuelTank>::value || std::is_same<P, CCPACSVessel>::value, "template argument for P is not a parent class of CPACSFuelTankVolume");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSFuselageFuelTank>::value || std::is_same<P, CCPACSVessel>::value, "template argument for P is not a parent class of CPACSFuelTankVolume");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const double& GetOptimalVolume() const;
        TIGL_EXPORT virtual void SetOptimalVolume(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUsableVolume_choice1() const;
        TIGL_EXPORT virtual void SetUsableVolume_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetRealVolume_choice1() const;
        TIGL_EXPORT virtual void SetRealVolume_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUseableVolumeFactor_choice2() const;
        TIGL_EXPORT virtual void SetUseableVolumeFactor_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetRealVolumeFactor_choice2() const;
        TIGL_EXPORT virtual void SetRealVolumeFactor_choice2(const boost::optional<double>& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        /// Theoretical volume if material thicknesses
        /// (ribs, spars, skins, stringers) and systems (fuel pumps,
        /// pipes...) are neglected.
        double                  m_optimalVolume;

        /// Usable fuel volume aircraft operations.
        boost::optional<double> m_usableVolume_choice1;

        /// Total real fuel tank volume.
        boost::optional<double> m_realVolume_choice1;

        /// Factor between the usalbe fuel volume and
        /// the real fuel volume.
        boost::optional<double> m_useableVolumeFactor_choice2;

        /// Factor between the real fuel volume and the
        /// theoretical optimum fuel volume.
        boost::optional<double> m_realVolumeFactor_choice2;

    private:
        CPACSFuelTankVolume(const CPACSFuelTankVolume&) = delete;
        CPACSFuelTankVolume& operator=(const CPACSFuelTankVolume&) = delete;

        CPACSFuelTankVolume(CPACSFuelTankVolume&&) = delete;
        CPACSFuelTankVolume& operator=(CPACSFuelTankVolume&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSFuelTankVolume = generated::CPACSFuelTankVolume;
using CCPACSFuselageFuelTank = generated::CPACSFuselageFuelTank;
} // namespace tigl
