// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSPointPerformanceDefinition.h"
#include "CPACSPointPerformanceRequirements.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPointPerformanceRequirements::CPACSPointPerformanceRequirements(CPACSPointPerformanceDefinition* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPointPerformanceRequirements::~CPACSPointPerformanceRequirements()
    {
    }

    const CPACSPointPerformanceDefinition* CPACSPointPerformanceRequirements::GetParent() const
    {
        return m_parent;
    }

    CPACSPointPerformanceDefinition* CPACSPointPerformanceRequirements::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPointPerformanceRequirements::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSPointPerformanceRequirements::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSPointPerformanceRequirements::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element sustainedLoadFactor
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sustainedLoadFactor")) {
            m_sustainedLoadFactor = tixi::TixiGetElement<double>(tixiHandle, xpath + "/sustainedLoadFactor");
        }

        // read element instantaneousLoadFactor
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/instantaneousLoadFactor")) {
            m_instantaneousLoadFactor = tixi::TixiGetElement<double>(tixiHandle, xpath + "/instantaneousLoadFactor");
        }

        // read element specificExcessPower
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/specificExcessPower")) {
            m_specificExcessPower = tixi::TixiGetElement<double>(tixiHandle, xpath + "/specificExcessPower");
        }

        // read element rollRate
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollRate")) {
            m_rollRate = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rollRate");
        }

        // read element rollAccelerationOnset
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollAccelerationOnset")) {
            m_rollAccelerationOnset = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rollAccelerationOnset");
        }

        // read element rollAccelerationStop
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollAccelerationStop")) {
            m_rollAccelerationStop = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rollAccelerationStop");
        }

    }

    void CPACSPointPerformanceRequirements::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element sustainedLoadFactor
        if (m_sustainedLoadFactor) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sustainedLoadFactor");
            tixi::TixiSaveElement(tixiHandle, xpath + "/sustainedLoadFactor", *m_sustainedLoadFactor);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sustainedLoadFactor")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sustainedLoadFactor");
            }
        }

        // write element instantaneousLoadFactor
        if (m_instantaneousLoadFactor) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/instantaneousLoadFactor");
            tixi::TixiSaveElement(tixiHandle, xpath + "/instantaneousLoadFactor", *m_instantaneousLoadFactor);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/instantaneousLoadFactor")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/instantaneousLoadFactor");
            }
        }

        // write element specificExcessPower
        if (m_specificExcessPower) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/specificExcessPower");
            tixi::TixiSaveElement(tixiHandle, xpath + "/specificExcessPower", *m_specificExcessPower);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/specificExcessPower")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/specificExcessPower");
            }
        }

        // write element rollRate
        if (m_rollRate) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollRate");
            tixi::TixiSaveElement(tixiHandle, xpath + "/rollRate", *m_rollRate);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollRate")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rollRate");
            }
        }

        // write element rollAccelerationOnset
        if (m_rollAccelerationOnset) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollAccelerationOnset");
            tixi::TixiSaveElement(tixiHandle, xpath + "/rollAccelerationOnset", *m_rollAccelerationOnset);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollAccelerationOnset")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rollAccelerationOnset");
            }
        }

        // write element rollAccelerationStop
        if (m_rollAccelerationStop) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollAccelerationStop");
            tixi::TixiSaveElement(tixiHandle, xpath + "/rollAccelerationStop", *m_rollAccelerationStop);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollAccelerationStop")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rollAccelerationStop");
            }
        }

    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetSustainedLoadFactor() const
    {
        return m_sustainedLoadFactor;
    }

    void CPACSPointPerformanceRequirements::SetSustainedLoadFactor(const boost::optional<double>& value)
    {
        m_sustainedLoadFactor = value;
    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetInstantaneousLoadFactor() const
    {
        return m_instantaneousLoadFactor;
    }

    void CPACSPointPerformanceRequirements::SetInstantaneousLoadFactor(const boost::optional<double>& value)
    {
        m_instantaneousLoadFactor = value;
    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetSpecificExcessPower() const
    {
        return m_specificExcessPower;
    }

    void CPACSPointPerformanceRequirements::SetSpecificExcessPower(const boost::optional<double>& value)
    {
        m_specificExcessPower = value;
    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetRollRate() const
    {
        return m_rollRate;
    }

    void CPACSPointPerformanceRequirements::SetRollRate(const boost::optional<double>& value)
    {
        m_rollRate = value;
    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetRollAccelerationOnset() const
    {
        return m_rollAccelerationOnset;
    }

    void CPACSPointPerformanceRequirements::SetRollAccelerationOnset(const boost::optional<double>& value)
    {
        m_rollAccelerationOnset = value;
    }

    const boost::optional<double>& CPACSPointPerformanceRequirements::GetRollAccelerationStop() const
    {
        return m_rollAccelerationStop;
    }

    void CPACSPointPerformanceRequirements::SetRollAccelerationStop(const boost::optional<double>& value)
    {
        m_rollAccelerationStop = value;
    }

} // namespace generated
} // namespace tigl
