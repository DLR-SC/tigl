// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSQuasiSteadyRotation.h"

namespace tigl
{
    namespace generated
    {
        CPACSQuasiSteadyRotation::CPACSQuasiSteadyRotation(){}
        CPACSQuasiSteadyRotation::~CPACSQuasiSteadyRotation() {}
        
        void CPACSQuasiSteadyRotation::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element pstar
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pstar")) {
                m_pstar = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/pstar");
            }
            
            // read element qstar
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/qstar")) {
                m_qstar = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/qstar");
            }
            
            // read element rstar
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rstar")) {
                m_rstar = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rstar");
            }
            
        }
        
        void CPACSQuasiSteadyRotation::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element pstar
            if (m_pstar) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pstar");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/pstar", *m_pstar);
            }
            
            // write element qstar
            if (m_qstar) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/qstar");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/qstar", *m_qstar);
            }
            
            // write element rstar
            if (m_rstar) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rstar");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rstar", *m_rstar);
            }
            
        }
        
        bool CPACSQuasiSteadyRotation::HasPstar() const
        {
            return static_cast<bool>(m_pstar);
        }
        
        const double& CPACSQuasiSteadyRotation::GetPstar() const
        {
            return *m_pstar;
        }
        
        void CPACSQuasiSteadyRotation::SetPstar(const double& value)
        {
            m_pstar = value;
        }
        
        bool CPACSQuasiSteadyRotation::HasQstar() const
        {
            return static_cast<bool>(m_qstar);
        }
        
        const double& CPACSQuasiSteadyRotation::GetQstar() const
        {
            return *m_qstar;
        }
        
        void CPACSQuasiSteadyRotation::SetQstar(const double& value)
        {
            m_qstar = value;
        }
        
        bool CPACSQuasiSteadyRotation::HasRstar() const
        {
            return static_cast<bool>(m_rstar);
        }
        
        const double& CPACSQuasiSteadyRotation::GetRstar() const
        {
            return *m_rstar;
        }
        
        void CPACSQuasiSteadyRotation::SetRstar(const double& value)
        {
            m_rstar = value;
        }
        
    }
}
