// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSPointXY.h"
#include "CPACSPointZ.h"
#include "CPACSPointXY.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSProfileBasedStructuralElement
        
        // generated from /xsd:schema/xsd:complexType[846]
        class CPACSTransformation2D
        {
        public:
            TIGL_EXPORT CPACSTransformation2D();
            TIGL_EXPORT virtual ~CPACSTransformation2D();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasScaling() const;
            TIGL_EXPORT const CPACSPointXY& GetScaling() const;
            TIGL_EXPORT CPACSPointXY& GetScaling();
            
            TIGL_EXPORT bool HasRotation() const;
            TIGL_EXPORT const CPACSPointZ& GetRotation() const;
            TIGL_EXPORT CPACSPointZ& GetRotation();
            
            TIGL_EXPORT bool HasTranslation() const;
            TIGL_EXPORT const CPACSPointXY& GetTranslation() const;
            TIGL_EXPORT CPACSPointXY& GetTranslation();
            
        protected:
            boost::optional<std::string>  m_uID;
            boost::optional<CPACSPointXY> m_scaling;
            boost::optional<CPACSPointZ>  m_rotation;
            boost::optional<CPACSPointXY> m_translation;
            
        private:
            #ifdef HAVE_CPP11
            CPACSTransformation2D(const CPACSTransformation2D&) = delete;
            CPACSTransformation2D& operator=(const CPACSTransformation2D&) = delete;
            
            CPACSTransformation2D(CPACSTransformation2D&&) = delete;
            CPACSTransformation2D& operator=(CPACSTransformation2D&&) = delete;
            #else
            CPACSTransformation2D(const CPACSTransformation2D&);
            CPACSTransformation2D& operator=(const CPACSTransformation2D&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSTransformation2D = generated::CPACSTransformation2D;
    #else
    typedef generated::CPACSTransformation2D CCPACSTransformation2D;
    #endif
}
