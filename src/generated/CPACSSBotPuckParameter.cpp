// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSBotPuckParameter.h"

namespace tigl
{
    namespace generated
    {
        CPACSSBotPuckParameter::CPACSSBotPuckParameter(){}
        CPACSSBotPuckParameter::~CPACSSBotPuckParameter() {}
        
        void CPACSSBotPuckParameter::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element P_12A
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/P_12A")) {
                m_P_12A = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/P_12A");
            }
            else {
                LOG(ERROR) << "Required element P_12A is missing";
            }
            
            // read element P_12B
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/P_12B")) {
                m_P_12B = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/P_12B");
            }
            else {
                LOG(ERROR) << "Required element P_12B is missing";
            }
            
        }
        
        void CPACSSBotPuckParameter::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element P_12A
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/P_12A");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/P_12A", m_P_12A);
            
            // write element P_12B
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/P_12B");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/P_12B", m_P_12B);
            
        }
        
        const double& CPACSSBotPuckParameter::GetP_12A() const
        {
            return m_P_12A;
        }
        
        void CPACSSBotPuckParameter::SetP_12A(const double& value)
        {
            m_P_12A = value;
        }
        
        const double& CPACSSBotPuckParameter::GetP_12B() const
        {
            return m_P_12B;
        }
        
        void CPACSSBotPuckParameter::SetP_12B(const double& value)
        {
            m_P_12B = value;
        }
        
    }
}
