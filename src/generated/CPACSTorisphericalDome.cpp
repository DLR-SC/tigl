// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDomeType.h"
#include "CPACSTorisphericalDome.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTorisphericalDome::CPACSTorisphericalDome(CPACSDomeType* parent)
        : m_dishRadius(0)
        , m_knuckleRadius(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTorisphericalDome::~CPACSTorisphericalDome()
    {
    }

    const CPACSDomeType* CPACSTorisphericalDome::GetParent() const
    {
        return m_parent;
    }

    CPACSDomeType* CPACSTorisphericalDome::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTorisphericalDome::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTorisphericalDome::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTorisphericalDome::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element dishRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/dishRadius")) {
            m_dishRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/dishRadius");
        }
        else {
            LOG(ERROR) << "Required element dishRadius is missing at xpath " << xpath;
        }

        // read element knuckleRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/knuckleRadius")) {
            m_knuckleRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/knuckleRadius");
        }
        else {
            LOG(ERROR) << "Required element knuckleRadius is missing at xpath " << xpath;
        }

    }

    void CPACSTorisphericalDome::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element dishRadius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dishRadius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/dishRadius", m_dishRadius);

        // write element knuckleRadius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/knuckleRadius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/knuckleRadius", m_knuckleRadius);

    }

    const double& CPACSTorisphericalDome::GetDishRadius() const
    {
        return m_dishRadius;
    }

    void CPACSTorisphericalDome::SetDishRadius(const double& value)
    {
        m_dishRadius = value;
    }

    const double& CPACSTorisphericalDome::GetKnuckleRadius() const
    {
        return m_knuckleRadius;
    }

    void CPACSTorisphericalDome::SetKnuckleRadius(const double& value)
    {
        m_knuckleRadius = value;
    }

} // namespace generated
} // namespace tigl
