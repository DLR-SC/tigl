// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSRotorBladeAttachments.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSRotorBladeAttachment.h"

namespace tigl
{
    namespace generated
    {
        CPACSRotorBladeAttachment::CPACSRotorBladeAttachment(CCPACSRotorBladeAttachments* parent)
        {
            //assert(parent != nullptr);
            m_parent = parent;
        }
        
        CPACSRotorBladeAttachment::~CPACSRotorBladeAttachment() {}
        
        CCPACSRotorBladeAttachments* CPACSRotorBladeAttachment::GetParent() const
        {
            return m_parent;
        }
        
        void CPACSRotorBladeAttachment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element hinges
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hinges")) {
                m_hinges = boost::in_place(reinterpret_cast<CCPACSRotorBladeAttachment*>(this));
                try {
                    m_hinges->ReadCPACS(tixiHandle, xpath + "/hinges");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read hinges at xpath << " << xpath << ": " << e.what();
                    m_hinges = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read hinges at xpath << " << xpath << ": " << e.getError();
                    m_hinges = boost::none;
                }
            }
            
            // read element rotorBladeUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotorBladeUID")) {
                m_rotorBladeUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/rotorBladeUID");
            }
            else {
                LOG(ERROR) << "Required element rotorBladeUID is missing";
            }
            
            // read element azimuthAngles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/azimuthAngles")) {
                m_azimuthAngles_choice1 = boost::in_place();
                try {
                    m_azimuthAngles_choice1->ReadCPACS(tixiHandle, xpath + "/azimuthAngles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read azimuthAngles at xpath << " << xpath << ": " << e.what();
                    m_azimuthAngles_choice1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read azimuthAngles at xpath << " << xpath << ": " << e.getError();
                    m_azimuthAngles_choice1 = boost::none;
                }
            }
            
            // read element numberOfBlades
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfBlades")) {
                m_numberOfBlades_choice2 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfBlades");
            }
            
        }
        
        void CPACSRotorBladeAttachment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element hinges
            if (m_hinges) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hinges");
                m_hinges->WriteCPACS(tixiHandle, xpath + "/hinges");
            }
            
            // write element rotorBladeUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotorBladeUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/rotorBladeUID", m_rotorBladeUID);
            
            // write element azimuthAngles
            if (m_azimuthAngles_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/azimuthAngles");
                m_azimuthAngles_choice1->WriteCPACS(tixiHandle, xpath + "/azimuthAngles");
            }
            
            // write element numberOfBlades
            if (m_numberOfBlades_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfBlades");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfBlades", *m_numberOfBlades_choice2);
            }
            
        }
        
        bool CPACSRotorBladeAttachment::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSRotorBladeAttachment::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSRotorBladeAttachment::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSRotorBladeAttachment::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSRotorBladeAttachment::GetName() const
        {
            return *m_name;
        }
        
        void CPACSRotorBladeAttachment::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSRotorBladeAttachment::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSRotorBladeAttachment::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSRotorBladeAttachment::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSRotorBladeAttachment::HasHinges() const
        {
            return static_cast<bool>(m_hinges);
        }
        
        const CCPACSRotorHinges& CPACSRotorBladeAttachment::GetHinges() const
        {
            return *m_hinges;
        }
        
        CCPACSRotorHinges& CPACSRotorBladeAttachment::GetHinges()
        {
            return *m_hinges;
        }
        
        const std::string& CPACSRotorBladeAttachment::GetRotorBladeUID() const
        {
            return m_rotorBladeUID;
        }
        
        void CPACSRotorBladeAttachment::SetRotorBladeUID(const std::string& value)
        {
            m_rotorBladeUID = value;
        }
        
        bool CPACSRotorBladeAttachment::HasAzimuthAngles_choice1() const
        {
            return static_cast<bool>(m_azimuthAngles_choice1);
        }
        
        const CCPACSStringVector& CPACSRotorBladeAttachment::GetAzimuthAngles_choice1() const
        {
            return *m_azimuthAngles_choice1;
        }
        
        CCPACSStringVector& CPACSRotorBladeAttachment::GetAzimuthAngles_choice1()
        {
            return *m_azimuthAngles_choice1;
        }
        
        bool CPACSRotorBladeAttachment::HasNumberOfBlades_choice2() const
        {
            return static_cast<bool>(m_numberOfBlades_choice2);
        }
        
        const int& CPACSRotorBladeAttachment::GetNumberOfBlades_choice2() const
        {
            return *m_numberOfBlades_choice2;
        }
        
        void CPACSRotorBladeAttachment::SetNumberOfBlades_choice2(const int& value)
        {
            m_numberOfBlades_choice2 = value;
        }
        
    }
}
