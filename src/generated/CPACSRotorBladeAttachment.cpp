// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSRotorBladeAttachments.h"
#include "CPACSRotorBladeAttachment.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRotorBladeAttachment::CPACSRotorBladeAttachment(CCPACSRotorBladeAttachments* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSRotorBladeAttachment::~CPACSRotorBladeAttachment()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_rotorBladeUID.empty()) m_uidMgr->TryUnregisterReference(m_rotorBladeUID, *this);
        }
    }

    const CCPACSRotorBladeAttachments* CPACSRotorBladeAttachment::GetParent() const
    {
        return m_parent;
    }

    CCPACSRotorBladeAttachments* CPACSRotorBladeAttachment::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSRotorBladeAttachment::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSRotorBladeAttachment::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSRotorBladeAttachment::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSRotorBladeAttachment::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSRotorBladeAttachment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element azimuthAngles
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/azimuthAngles")) {
            m_azimuthAngles_choice1 = boost::in_place(reinterpret_cast<CCPACSRotorBladeAttachment*>(this));
            try {
                m_azimuthAngles_choice1->ReadCPACS(tixiHandle, xpath + "/azimuthAngles");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read azimuthAngles at xpath " << xpath << ": " << e.what();
                m_azimuthAngles_choice1 = boost::none;
            }
        }

        // read element numberOfBlades
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/numberOfBlades")) {
            m_numberOfBlades_choice2 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/numberOfBlades");
        }

        // read element hinges
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/hinges")) {
            m_hinges = boost::in_place(reinterpret_cast<CCPACSRotorBladeAttachment*>(this), m_uidMgr);
            try {
                m_hinges->ReadCPACS(tixiHandle, xpath + "/hinges");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read hinges at xpath " << xpath << ": " << e.what();
                m_hinges = boost::none;
            }
        }

        // read element rotorBladeUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotorBladeUID")) {
            m_rotorBladeUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/rotorBladeUID");
            if (m_rotorBladeUID.empty()) {
                LOG(WARNING) << "Required element rotorBladeUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_rotorBladeUID.empty()) m_uidMgr->RegisterReference(m_rotorBladeUID, *this);
        }
        else {
            LOG(ERROR) << "Required element rotorBladeUID is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSRotorBladeAttachment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "azimuthAngles", "numberOfBlades", "hinges", "rotorBladeUID" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        if (m_name) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element azimuthAngles
        if (m_azimuthAngles_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/azimuthAngles", childElemOrder);
            m_azimuthAngles_choice1->WriteCPACS(tixiHandle, xpath + "/azimuthAngles");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/azimuthAngles")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/azimuthAngles");
            }
        }

        // write element numberOfBlades
        if (m_numberOfBlades_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/numberOfBlades", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/numberOfBlades", *m_numberOfBlades_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/numberOfBlades")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/numberOfBlades");
            }
        }

        // write element hinges
        if (m_hinges) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/hinges", childElemOrder);
            m_hinges->WriteCPACS(tixiHandle, xpath + "/hinges");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/hinges")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/hinges");
            }
        }

        // write element rotorBladeUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/rotorBladeUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/rotorBladeUID", m_rotorBladeUID);

    }

    bool CPACSRotorBladeAttachment::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_azimuthAngles_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_numberOfBlades_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_numberOfBlades_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_azimuthAngles_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSRotorBladeAttachment::GetUID() const
    {
        return m_uID;
    }

    void CPACSRotorBladeAttachment::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSRotorBladeAttachment::GetName() const
    {
        return m_name;
    }

    void CPACSRotorBladeAttachment::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSRotorBladeAttachment::GetDescription() const
    {
        return m_description;
    }

    void CPACSRotorBladeAttachment::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<CCPACSStringVector>& CPACSRotorBladeAttachment::GetAzimuthAngles_choice1() const
    {
        return m_azimuthAngles_choice1;
    }

    boost::optional<CCPACSStringVector>& CPACSRotorBladeAttachment::GetAzimuthAngles_choice1()
    {
        return m_azimuthAngles_choice1;
    }

    const boost::optional<int>& CPACSRotorBladeAttachment::GetNumberOfBlades_choice2() const
    {
        return m_numberOfBlades_choice2;
    }

    void CPACSRotorBladeAttachment::SetNumberOfBlades_choice2(const boost::optional<int>& value)
    {
        m_numberOfBlades_choice2 = value;
    }

    const boost::optional<CCPACSRotorHinges>& CPACSRotorBladeAttachment::GetHinges() const
    {
        return m_hinges;
    }

    boost::optional<CCPACSRotorHinges>& CPACSRotorBladeAttachment::GetHinges()
    {
        return m_hinges;
    }

    const std::string& CPACSRotorBladeAttachment::GetRotorBladeUID() const
    {
        return m_rotorBladeUID;
    }

    void CPACSRotorBladeAttachment::SetRotorBladeUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_rotorBladeUID.empty()) m_uidMgr->TryUnregisterReference(m_rotorBladeUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_rotorBladeUID = value;
    }

    CCPACSStringVector& CPACSRotorBladeAttachment::GetAzimuthAngles_choice1(CreateIfNotExistsTag)
    {
        if (!m_azimuthAngles_choice1)
            m_azimuthAngles_choice1 = boost::in_place(reinterpret_cast<CCPACSRotorBladeAttachment*>(this));
        return *m_azimuthAngles_choice1;
    }

    void CPACSRotorBladeAttachment::RemoveAzimuthAngles_choice1()
    {
        m_azimuthAngles_choice1 = boost::none;
    }

    CCPACSRotorHinges& CPACSRotorBladeAttachment::GetHinges(CreateIfNotExistsTag)
    {
        if (!m_hinges)
            m_hinges = boost::in_place(reinterpret_cast<CCPACSRotorBladeAttachment*>(this), m_uidMgr);
        return *m_hinges;
    }

    void CPACSRotorBladeAttachment::RemoveHinges()
    {
        m_hinges = boost::none;
    }

    const CTiglUIDObject* CPACSRotorBladeAttachment::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSRotorBladeAttachment::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_rotorBladeUID == oldUid) {
            m_rotorBladeUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
