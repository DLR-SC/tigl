// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadBreakdown.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadBreakdown::CPACSLoadBreakdown(){}
        CPACSLoadBreakdown::~CPACSLoadBreakdown() {}
        
        void CPACSLoadBreakdown::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element inertialLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/inertialLoads")) {
                m_inertialLoads = boost::in_place();
                try {
                    m_inertialLoads->ReadCPACS(tixiHandle, xpath + "/inertialLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read inertialLoads at xpath << " << xpath << ": " << e.what();
                    m_inertialLoads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read inertialLoads at xpath << " << xpath << ": " << e.getError();
                    m_inertialLoads = boost::none;
                }
            }
            
            // read element aeroLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aeroLoads")) {
                m_aeroLoads = boost::in_place();
                try {
                    m_aeroLoads->ReadCPACS(tixiHandle, xpath + "/aeroLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aeroLoads at xpath << " << xpath << ": " << e.what();
                    m_aeroLoads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aeroLoads at xpath << " << xpath << ": " << e.getError();
                    m_aeroLoads = boost::none;
                }
            }
            
            // read element propulsionLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/propulsionLoads")) {
                m_propulsionLoads = boost::in_place();
                try {
                    m_propulsionLoads->ReadCPACS(tixiHandle, xpath + "/propulsionLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read propulsionLoads at xpath << " << xpath << ": " << e.what();
                    m_propulsionLoads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read propulsionLoads at xpath << " << xpath << ": " << e.getError();
                    m_propulsionLoads = boost::none;
                }
            }
            
            // read element landingGearLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearLoads")) {
                m_landingGearLoads = boost::in_place();
                try {
                    m_landingGearLoads->ReadCPACS(tixiHandle, xpath + "/landingGearLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGearLoads at xpath << " << xpath << ": " << e.what();
                    m_landingGearLoads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGearLoads at xpath << " << xpath << ": " << e.getError();
                    m_landingGearLoads = boost::none;
                }
            }
            
            // read element calibrationLoads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/calibrationLoads")) {
                m_calibrationLoads = boost::in_place();
                try {
                    m_calibrationLoads->ReadCPACS(tixiHandle, xpath + "/calibrationLoads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read calibrationLoads at xpath << " << xpath << ": " << e.what();
                    m_calibrationLoads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read calibrationLoads at xpath << " << xpath << ": " << e.getError();
                    m_calibrationLoads = boost::none;
                }
            }
            
        }
        
        void CPACSLoadBreakdown::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element inertialLoads
            if (m_inertialLoads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/inertialLoads");
                m_inertialLoads->WriteCPACS(tixiHandle, xpath + "/inertialLoads");
            }
            
            // write element aeroLoads
            if (m_aeroLoads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aeroLoads");
                m_aeroLoads->WriteCPACS(tixiHandle, xpath + "/aeroLoads");
            }
            
            // write element propulsionLoads
            if (m_propulsionLoads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/propulsionLoads");
                m_propulsionLoads->WriteCPACS(tixiHandle, xpath + "/propulsionLoads");
            }
            
            // write element landingGearLoads
            if (m_landingGearLoads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearLoads");
                m_landingGearLoads->WriteCPACS(tixiHandle, xpath + "/landingGearLoads");
            }
            
            // write element calibrationLoads
            if (m_calibrationLoads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/calibrationLoads");
                m_calibrationLoads->WriteCPACS(tixiHandle, xpath + "/calibrationLoads");
            }
            
        }
        
        bool CPACSLoadBreakdown::HasInertialLoads() const
        {
            return static_cast<bool>(m_inertialLoads);
        }
        
        const CPACSSubLoad& CPACSLoadBreakdown::GetInertialLoads() const
        {
            return *m_inertialLoads;
        }
        
        CPACSSubLoad& CPACSLoadBreakdown::GetInertialLoads()
        {
            return *m_inertialLoads;
        }
        
        bool CPACSLoadBreakdown::HasAeroLoads() const
        {
            return static_cast<bool>(m_aeroLoads);
        }
        
        const CPACSSubLoad& CPACSLoadBreakdown::GetAeroLoads() const
        {
            return *m_aeroLoads;
        }
        
        CPACSSubLoad& CPACSLoadBreakdown::GetAeroLoads()
        {
            return *m_aeroLoads;
        }
        
        bool CPACSLoadBreakdown::HasPropulsionLoads() const
        {
            return static_cast<bool>(m_propulsionLoads);
        }
        
        const CPACSSubLoad& CPACSLoadBreakdown::GetPropulsionLoads() const
        {
            return *m_propulsionLoads;
        }
        
        CPACSSubLoad& CPACSLoadBreakdown::GetPropulsionLoads()
        {
            return *m_propulsionLoads;
        }
        
        bool CPACSLoadBreakdown::HasLandingGearLoads() const
        {
            return static_cast<bool>(m_landingGearLoads);
        }
        
        const CPACSSubLoad& CPACSLoadBreakdown::GetLandingGearLoads() const
        {
            return *m_landingGearLoads;
        }
        
        CPACSSubLoad& CPACSLoadBreakdown::GetLandingGearLoads()
        {
            return *m_landingGearLoads;
        }
        
        bool CPACSLoadBreakdown::HasCalibrationLoads() const
        {
            return static_cast<bool>(m_calibrationLoads);
        }
        
        const CPACSSubLoad& CPACSLoadBreakdown::GetCalibrationLoads() const
        {
            return *m_calibrationLoads;
        }
        
        CPACSSubLoad& CPACSLoadBreakdown::GetCalibrationLoads()
        {
            return *m_calibrationLoads;
        }
        
    }
}
