// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSTrackJointPositions.h"
#include "CPACSTrackSecondaryStructure.h"
#include "CPACSTrackStruts.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSControlSurfaceTrackType;

    // This class is used in:
    // CPACSControlSurfaceTrackType

    /// @brief wingSparsType
    /// 
    /// Spars type, a spar is defined by sparSegments that
    /// stretch between multiple sparPositions
    /// 
    class CPACSTrackStructure
    {
    public:
        TIGL_EXPORT CPACSTrackStructure(CPACSControlSurfaceTrackType* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSTrackStructure();

        TIGL_EXPORT CPACSControlSurfaceTrackType* GetParent();

        TIGL_EXPORT const CPACSControlSurfaceTrackType* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CPACSTrackStruts& GetStruts() const;
        TIGL_EXPORT virtual CPACSTrackStruts& GetStruts();

        TIGL_EXPORT virtual const CPACSTrackJointPositions& GetJointPositions() const;
        TIGL_EXPORT virtual CPACSTrackJointPositions& GetJointPositions();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetControlSurfaceAttachment() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetControlSurfaceAttachment();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetCarriage() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetCarriage();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetSidePanels() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetSidePanels();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetUpperPanel() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetUpperPanel();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetLowerPanel() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetLowerPanel();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetRollerTrack() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetRollerTrack();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetRibs() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetRibs();

        TIGL_EXPORT virtual const boost::optional<CPACSTrackSecondaryStructure>& GetFairing() const;
        TIGL_EXPORT virtual boost::optional<CPACSTrackSecondaryStructure>& GetFairing();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetControlSurfaceAttachment(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveControlSurfaceAttachment();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetCarriage(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCarriage();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetSidePanels(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSidePanels();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetUpperPanel(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveUpperPanel();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetLowerPanel(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveLowerPanel();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetRollerTrack(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRollerTrack();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetRibs(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRibs();

        TIGL_EXPORT virtual CPACSTrackSecondaryStructure& GetFairing(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveFairing();

    protected:
        CPACSControlSurfaceTrackType* m_parent;

        CTiglUIDManager* m_uidMgr;

        CPACSTrackStruts                              m_struts;
        CPACSTrackJointPositions                      m_jointPositions;
        boost::optional<CPACSTrackSecondaryStructure> m_controlSurfaceAttachment;
        boost::optional<CPACSTrackSecondaryStructure> m_carriage;
        boost::optional<CPACSTrackSecondaryStructure> m_sidePanels;
        boost::optional<CPACSTrackSecondaryStructure> m_upperPanel;
        boost::optional<CPACSTrackSecondaryStructure> m_lowerPanel;
        boost::optional<CPACSTrackSecondaryStructure> m_rollerTrack;
        boost::optional<CPACSTrackSecondaryStructure> m_ribs;
        boost::optional<CPACSTrackSecondaryStructure> m_fairing;

    private:
        CPACSTrackStructure(const CPACSTrackStructure&) = delete;
        CPACSTrackStructure& operator=(const CPACSTrackStructure&) = delete;

        CPACSTrackStructure(CPACSTrackStructure&&) = delete;
        CPACSTrackStructure& operator=(CPACSTrackStructure&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTrackStructure = generated::CPACSTrackStructure;
using CCPACSControlSurfaceTrackType = generated::CPACSControlSurfaceTrackType;
} // namespace tigl
