// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMFixedTrailingEdge.h"

namespace tigl
{
    namespace generated
    {
        CPACSMFixedTrailingEdge::CPACSMFixedTrailingEdge(){}
        CPACSMFixedTrailingEdge::~CPACSMFixedTrailingEdge() {}
        
        void CPACSMFixedTrailingEdge::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mPanelsAndFalsework
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPanelsAndFalsework")) {
                m_mPanelsAndFalsework = boost::in_place();
                try {
                    m_mPanelsAndFalsework->ReadCPACS(tixiHandle, xpath + "/mPanelsAndFalsework");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mPanelsAndFalsework at xpath << " << xpath << ": " << e.what();
                    m_mPanelsAndFalsework = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mPanelsAndFalsework at xpath << " << xpath << ": " << e.getError();
                    m_mPanelsAndFalsework = boost::none;
                }
            }
            
            // read element mControlSurfaceSupports
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mControlSurfaceSupports")) {
                m_mControlSurfaceSupports = boost::in_place();
                try {
                    m_mControlSurfaceSupports->ReadCPACS(tixiHandle, xpath + "/mControlSurfaceSupports");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mControlSurfaceSupports at xpath << " << xpath << ": " << e.what();
                    m_mControlSurfaceSupports = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mControlSurfaceSupports at xpath << " << xpath << ": " << e.getError();
                    m_mControlSurfaceSupports = boost::none;
                }
            }
            
        }
        
        void CPACSMFixedTrailingEdge::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mPanelsAndFalsework
            if (m_mPanelsAndFalsework) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mPanelsAndFalsework");
                m_mPanelsAndFalsework->WriteCPACS(tixiHandle, xpath + "/mPanelsAndFalsework");
            }
            
            // write element mControlSurfaceSupports
            if (m_mControlSurfaceSupports) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mControlSurfaceSupports");
                m_mControlSurfaceSupports->WriteCPACS(tixiHandle, xpath + "/mControlSurfaceSupports");
            }
            
        }
        
        const CPACSGenericMass& CPACSMFixedTrailingEdge::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMFixedTrailingEdge::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMFixedTrailingEdge::HasMPanelsAndFalsework() const
        {
            return static_cast<bool>(m_mPanelsAndFalsework);
        }
        
        const CPACSSingleGenericMass& CPACSMFixedTrailingEdge::GetMPanelsAndFalsework() const
        {
            return *m_mPanelsAndFalsework;
        }
        
        CPACSSingleGenericMass& CPACSMFixedTrailingEdge::GetMPanelsAndFalsework()
        {
            return *m_mPanelsAndFalsework;
        }
        
        bool CPACSMFixedTrailingEdge::HasMControlSurfaceSupports() const
        {
            return static_cast<bool>(m_mControlSurfaceSupports);
        }
        
        const CPACSMControlSurfaceSupports& CPACSMFixedTrailingEdge::GetMControlSurfaceSupports() const
        {
            return *m_mControlSurfaceSupports;
        }
        
        CPACSMControlSurfaceSupports& CPACSMFixedTrailingEdge::GetMControlSurfaceSupports()
        {
            return *m_mControlSurfaceSupports;
        }
        
    }
}
