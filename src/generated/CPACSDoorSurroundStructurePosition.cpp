// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDoorSurroundStructurePosition.h"
#include "CPACSDoorSurroundStructuresAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDoorSurroundStructurePosition::CPACSDoorSurroundStructurePosition(CPACSDoorSurroundStructuresAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_framesGapFront(0)
        , m_framesGapRear(0)
        , m_stringersGapPrimary(0)
        , m_stringersGapSecondary(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSDoorSurroundStructurePosition::~CPACSDoorSurroundStructurePosition()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSDoorSurroundStructuresAssembly* CPACSDoorSurroundStructurePosition::GetParent() const
    {
        return m_parent;
    }

    CPACSDoorSurroundStructuresAssembly* CPACSDoorSurroundStructurePosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSDoorSurroundStructurePosition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSDoorSurroundStructurePosition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSDoorSurroundStructurePosition::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDoorSurroundStructurePosition::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSDoorSurroundStructurePosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element framesGapFront
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/framesGapFront")) {
            m_framesGapFront = tixi::TixiGetElement<int>(tixiHandle, xpath + "/framesGapFront");
        }
        else {
            LOG(ERROR) << "Required element framesGapFront is missing at xpath " << xpath;
        }

        // read element framesGapRear
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/framesGapRear")) {
            m_framesGapRear = tixi::TixiGetElement<int>(tixiHandle, xpath + "/framesGapRear");
        }
        else {
            LOG(ERROR) << "Required element framesGapRear is missing at xpath " << xpath;
        }

        // read element stringersGapPrimary
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringersGapPrimary")) {
            m_stringersGapPrimary = tixi::TixiGetElement<int>(tixiHandle, xpath + "/stringersGapPrimary");
        }
        else {
            LOG(ERROR) << "Required element stringersGapPrimary is missing at xpath " << xpath;
        }

        // read element stringersGapSecondary
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringersGapSecondary")) {
            m_stringersGapSecondary = tixi::TixiGetElement<int>(tixiHandle, xpath + "/stringersGapSecondary");
        }
        else {
            LOG(ERROR) << "Required element stringersGapSecondary is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSDoorSurroundStructurePosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        if (m_name) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element framesGapFront
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/framesGapFront");
        tixi::TixiSaveElement(tixiHandle, xpath + "/framesGapFront", m_framesGapFront);

        // write element framesGapRear
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/framesGapRear");
        tixi::TixiSaveElement(tixiHandle, xpath + "/framesGapRear", m_framesGapRear);

        // write element stringersGapPrimary
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringersGapPrimary");
        tixi::TixiSaveElement(tixiHandle, xpath + "/stringersGapPrimary", m_stringersGapPrimary);

        // write element stringersGapSecondary
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringersGapSecondary");
        tixi::TixiSaveElement(tixiHandle, xpath + "/stringersGapSecondary", m_stringersGapSecondary);

    }

    const std::string& CPACSDoorSurroundStructurePosition::GetUID() const
    {
        return m_uID;
    }

    void CPACSDoorSurroundStructurePosition::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSDoorSurroundStructurePosition::GetName() const
    {
        return m_name;
    }

    void CPACSDoorSurroundStructurePosition::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSDoorSurroundStructurePosition::GetDescription() const
    {
        return m_description;
    }

    void CPACSDoorSurroundStructurePosition::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const int& CPACSDoorSurroundStructurePosition::GetFramesGapFront() const
    {
        return m_framesGapFront;
    }

    void CPACSDoorSurroundStructurePosition::SetFramesGapFront(const int& value)
    {
        m_framesGapFront = value;
    }

    const int& CPACSDoorSurroundStructurePosition::GetFramesGapRear() const
    {
        return m_framesGapRear;
    }

    void CPACSDoorSurroundStructurePosition::SetFramesGapRear(const int& value)
    {
        m_framesGapRear = value;
    }

    const int& CPACSDoorSurroundStructurePosition::GetStringersGapPrimary() const
    {
        return m_stringersGapPrimary;
    }

    void CPACSDoorSurroundStructurePosition::SetStringersGapPrimary(const int& value)
    {
        m_stringersGapPrimary = value;
    }

    const int& CPACSDoorSurroundStructurePosition::GetStringersGapSecondary() const
    {
        return m_stringersGapSecondary;
    }

    void CPACSDoorSurroundStructurePosition::SetStringersGapSecondary(const int& value)
    {
        m_stringersGapSecondary = value;
    }

} // namespace generated
} // namespace tigl
