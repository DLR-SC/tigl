// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGeneralStructuralMemberPosition.h"

namespace tigl
{
    namespace generated
    {
        CPACSGeneralStructuralMemberPosition::CPACSGeneralStructuralMemberPosition(){}
        CPACSGeneralStructuralMemberPosition::~CPACSGeneralStructuralMemberPosition() {}
        
        void CPACSGeneralStructuralMemberPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element structuralElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementUID")) {
                m_structuralElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementUID");
            }
            
            // read element positionX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionX")) {
                m_positionX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionX");
            }
            
            // read element positionXUidStart
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXUidStart")) {
                m_positionXUidStart = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionXUidStart");
            }
            
            // read element positionXUidEnd
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXUidEnd")) {
                m_positionXUidEnd = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionXUidEnd");
            }
            
            // read element positionXUidMin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXUidMin")) {
                m_positionXUidMin = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionXUidMin");
            }
            
            // read element positionXUidMid
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXUidMid")) {
                m_positionXUidMid = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionXUidMid");
            }
            
            // read element positionXUidMax
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXUidMax")) {
                m_positionXUidMax = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionXUidMax");
            }
            
            // read element positionXAngle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXAngle")) {
                m_positionXAngle = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionXAngle");
            }
            
            // read element positionXFact
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXFact")) {
                m_positionXFact = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionXFact");
            }
            
            // read element positionXoffset
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionXoffset")) {
                m_positionXoffset = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionXoffset");
            }
            
            // read element alignment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
                m_alignment = boost::in_place();
                try {
                    m_alignment->ReadCPACS(tixiHandle, xpath + "/alignment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.what();
                    m_alignment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.getError();
                    m_alignment = boost::none;
                }
            }
            
            // read element continuity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/continuity")) {
                m_continuity = boost::in_place();
                try {
                    m_continuity->ReadCPACS(tixiHandle, xpath + "/continuity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read continuity at xpath << " << xpath << ": " << e.what();
                    m_continuity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read continuity at xpath << " << xpath << ": " << e.getError();
                    m_continuity = boost::none;
                }
            }
            
            // read element interpolation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/interpolation")) {
                m_interpolation = boost::in_place();
                try {
                    m_interpolation->ReadCPACS(tixiHandle, xpath + "/interpolation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read interpolation at xpath << " << xpath << ": " << e.what();
                    m_interpolation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read interpolation at xpath << " << xpath << ": " << e.getError();
                    m_interpolation = boost::none;
                }
            }
            
        }
        
        void CPACSGeneralStructuralMemberPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element structuralElementUID
            if (m_structuralElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementUID", *m_structuralElementUID);
            }
            
            // write element positionX
            if (m_positionX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionX", *m_positionX);
            }
            
            // write element positionXUidStart
            if (m_positionXUidStart) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXUidStart");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXUidStart", *m_positionXUidStart);
            }
            
            // write element positionXUidEnd
            if (m_positionXUidEnd) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXUidEnd");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXUidEnd", *m_positionXUidEnd);
            }
            
            // write element positionXUidMin
            if (m_positionXUidMin) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXUidMin");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXUidMin", *m_positionXUidMin);
            }
            
            // write element positionXUidMid
            if (m_positionXUidMid) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXUidMid");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXUidMid", *m_positionXUidMid);
            }
            
            // write element positionXUidMax
            if (m_positionXUidMax) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXUidMax");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXUidMax", *m_positionXUidMax);
            }
            
            // write element positionXAngle
            if (m_positionXAngle) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXAngle");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXAngle", *m_positionXAngle);
            }
            
            // write element positionXFact
            if (m_positionXFact) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXFact");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXFact", *m_positionXFact);
            }
            
            // write element positionXoffset
            if (m_positionXoffset) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionXoffset");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionXoffset", *m_positionXoffset);
            }
            
            // write element alignment
            if (m_alignment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alignment");
                m_alignment->WriteCPACS(tixiHandle, xpath + "/alignment");
            }
            
            // write element continuity
            if (m_continuity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuity");
                m_continuity->WriteCPACS(tixiHandle, xpath + "/continuity");
            }
            
            // write element interpolation
            if (m_interpolation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/interpolation");
                m_interpolation->WriteCPACS(tixiHandle, xpath + "/interpolation");
            }
            
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasStructuralElementUID() const
        {
            return static_cast<bool>(m_structuralElementUID);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetStructuralElementUID() const
        {
            return *m_structuralElementUID;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetStructuralElementUID(const std::string& value)
        {
            m_structuralElementUID = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionX() const
        {
            return static_cast<bool>(m_positionX);
        }
        
        const double& CPACSGeneralStructuralMemberPosition::GetPositionX() const
        {
            return *m_positionX;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionX(const double& value)
        {
            m_positionX = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXUidStart() const
        {
            return static_cast<bool>(m_positionXUidStart);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetPositionXUidStart() const
        {
            return *m_positionXUidStart;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXUidStart(const std::string& value)
        {
            m_positionXUidStart = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXUidEnd() const
        {
            return static_cast<bool>(m_positionXUidEnd);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetPositionXUidEnd() const
        {
            return *m_positionXUidEnd;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXUidEnd(const std::string& value)
        {
            m_positionXUidEnd = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXUidMin() const
        {
            return static_cast<bool>(m_positionXUidMin);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetPositionXUidMin() const
        {
            return *m_positionXUidMin;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXUidMin(const std::string& value)
        {
            m_positionXUidMin = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXUidMid() const
        {
            return static_cast<bool>(m_positionXUidMid);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetPositionXUidMid() const
        {
            return *m_positionXUidMid;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXUidMid(const std::string& value)
        {
            m_positionXUidMid = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXUidMax() const
        {
            return static_cast<bool>(m_positionXUidMax);
        }
        
        const std::string& CPACSGeneralStructuralMemberPosition::GetPositionXUidMax() const
        {
            return *m_positionXUidMax;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXUidMax(const std::string& value)
        {
            m_positionXUidMax = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXAngle() const
        {
            return static_cast<bool>(m_positionXAngle);
        }
        
        const double& CPACSGeneralStructuralMemberPosition::GetPositionXAngle() const
        {
            return *m_positionXAngle;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXAngle(const double& value)
        {
            m_positionXAngle = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXFact() const
        {
            return static_cast<bool>(m_positionXFact);
        }
        
        const double& CPACSGeneralStructuralMemberPosition::GetPositionXFact() const
        {
            return *m_positionXFact;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXFact(const double& value)
        {
            m_positionXFact = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasPositionXoffset() const
        {
            return static_cast<bool>(m_positionXoffset);
        }
        
        const double& CPACSGeneralStructuralMemberPosition::GetPositionXoffset() const
        {
            return *m_positionXoffset;
        }
        
        void CPACSGeneralStructuralMemberPosition::SetPositionXoffset(const double& value)
        {
            m_positionXoffset = value;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasAlignment() const
        {
            return static_cast<bool>(m_alignment);
        }
        
        const CPACSAlignmentStringFrame& CPACSGeneralStructuralMemberPosition::GetAlignment() const
        {
            return *m_alignment;
        }
        
        CPACSAlignmentStringFrame& CPACSGeneralStructuralMemberPosition::GetAlignment()
        {
            return *m_alignment;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasContinuity() const
        {
            return static_cast<bool>(m_continuity);
        }
        
        const CPACSGeneralStructuralMemberPosition_continuity& CPACSGeneralStructuralMemberPosition::GetContinuity() const
        {
            return *m_continuity;
        }
        
        CPACSGeneralStructuralMemberPosition_continuity& CPACSGeneralStructuralMemberPosition::GetContinuity()
        {
            return *m_continuity;
        }
        
        bool CPACSGeneralStructuralMemberPosition::HasInterpolation() const
        {
            return static_cast<bool>(m_interpolation);
        }
        
        const CPACSGeneralStructuralMemberPosition_interpolation& CPACSGeneralStructuralMemberPosition::GetInterpolation() const
        {
            return *m_interpolation;
        }
        
        CPACSGeneralStructuralMemberPosition_interpolation& CPACSGeneralStructuralMemberPosition::GetInterpolation()
        {
            return *m_interpolation;
        }
        
    }
}
