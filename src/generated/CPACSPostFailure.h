// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <vector>
#include "UniquePtr.h"
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        class CPACSPlasticityCurvePoint;
        
        // This class is used in:
        // CPACSMaterial
        
        // generated from /xsd:schema/xsd:complexType[699]
        class CPACSPostFailure
        {
        public:
            TIGL_EXPORT CPACSPostFailure();
            TIGL_EXPORT virtual ~CPACSPostFailure();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT bool HasMaterialLaw() const;
            TIGL_EXPORT const std::string& GetMaterialLaw() const;
            TIGL_EXPORT void SetMaterialLaw(const std::string& value);
            
            TIGL_EXPORT bool HasPlasticEliminationStrain_choice1() const;
            TIGL_EXPORT const double& GetPlasticEliminationStrain_choice1() const;
            TIGL_EXPORT void SetPlasticEliminationStrain_choice1(const double& value);
            
            TIGL_EXPORT const std::vector<unique_ptr<CPACSPlasticityCurvePoint> >& GetPlasticityCurvePoint_choice1() const;
            TIGL_EXPORT std::vector<unique_ptr<CPACSPlasticityCurvePoint> >& GetPlasticityCurvePoint_choice1();
            
            TIGL_EXPORT bool HasInitialEquivalentShearStrain_choice2() const;
            TIGL_EXPORT const double& GetInitialEquivalentShearStrain_choice2() const;
            TIGL_EXPORT void SetInitialEquivalentShearStrain_choice2(const double& value);
            
            TIGL_EXPORT bool HasIntermediateEquivalentShearStrain_choice2() const;
            TIGL_EXPORT const double& GetIntermediateEquivalentShearStrain_choice2() const;
            TIGL_EXPORT void SetIntermediateEquivalentShearStrain_choice2(const double& value);
            
            TIGL_EXPORT bool HasUltimateEquivalentShearStrain_choice2() const;
            TIGL_EXPORT const double& GetUltimateEquivalentShearStrain_choice2() const;
            TIGL_EXPORT void SetUltimateEquivalentShearStrain_choice2(const double& value);
            
            TIGL_EXPORT bool HasIntermediateDamage_choice2() const;
            TIGL_EXPORT const double& GetIntermediateDamage_choice2() const;
            TIGL_EXPORT void SetIntermediateDamage_choice2(const double& value);
            
            TIGL_EXPORT bool HasUltimateDamage_choice2() const;
            TIGL_EXPORT const double& GetUltimateDamage_choice2() const;
            TIGL_EXPORT void SetUltimateDamage_choice2(const double& value);
            
        protected:
            boost::optional<std::string>                        m_name;
            boost::optional<std::string>                        m_description;
            boost::optional<std::string>                        m_materialLaw;
            boost::optional<double>                             m_plasticEliminationStrain_choice1;
            std::vector<unique_ptr<CPACSPlasticityCurvePoint> > m_plasticityCurvePoint_choice1;
            boost::optional<double>                             m_initialEquivalentShearStrain_choice2;
            boost::optional<double>                             m_intermediateEquivalentShearStrain_choice2;
            boost::optional<double>                             m_ultimateEquivalentShearStrain_choice2;
            boost::optional<double>                             m_intermediateDamage_choice2;
            boost::optional<double>                             m_ultimateDamage_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSPostFailure(const CPACSPostFailure&) = delete;
            CPACSPostFailure& operator=(const CPACSPostFailure&) = delete;
            
            CPACSPostFailure(CPACSPostFailure&&) = delete;
            CPACSPostFailure& operator=(CPACSPostFailure&&) = delete;
            #else
            CPACSPostFailure(const CPACSPostFailure&);
            CPACSPostFailure& operator=(const CPACSPostFailure&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef HAVE_CPP11
    using CCPACSPostFailure = generated::CPACSPostFailure;
    #else
    typedef generated::CPACSPostFailure CCPACSPostFailure;
    #endif
    
    using generated::CPACSPlasticityCurvePoint;
}
