// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSAxle;
    class CPACSBogie;
    class CPACSPiston;
    class CPACSStrutAssembly;

    // This class is used in:
    // CPACSAxle
    // CPACSBogie
    // CPACSPiston
    // CPACSStrutAssembly

    /// @brief Strut properties
    /// 
    /// Geometric description and material properties
    /// of a strut
    /// 
    class CPACSStrutProperties : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSStrutProperties(CPACSAxle* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStrutProperties(CPACSBogie* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStrutProperties(CPACSPiston* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStrutProperties(CPACSStrutAssembly* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSStrutProperties();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSAxle>::value || std::is_same<P, CPACSBogie>::value || std::is_same<P, CPACSPiston>::value || std::is_same<P, CPACSStrutAssembly>::value, "template argument for P is not a parent class of CPACSStrutProperties");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSAxle>::value || std::is_same<P, CPACSBogie>::value || std::is_same<P, CPACSPiston>::value || std::is_same<P, CPACSStrutAssembly>::value, "template argument for P is not a parent class of CPACSStrutProperties");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<double>& GetRadius_choice1() const;
        TIGL_EXPORT virtual void SetRadius_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetMaterialUID_choice1() const;
        TIGL_EXPORT virtual void SetMaterialUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetInnerRadius_choice1() const;
        TIGL_EXPORT virtual void SetInnerRadius_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralElementUID_choice2() const;
        TIGL_EXPORT virtual void SetStructuralElementUID_choice2(const boost::optional<std::string>& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// (Outer) radius of the strut
        boost::optional<double>      m_radius_choice1;

        /// Material of the strut
        boost::optional<std::string> m_materialUID_choice1;

        /// Inner radius of the strut
        boost::optional<double>      m_innerRadius_choice1;

        /// Reference to structural element for a more
        /// detailed cross section definition
        boost::optional<std::string> m_structuralElementUID_choice2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSStrutProperties(const CPACSStrutProperties&) = delete;
        CPACSStrutProperties& operator=(const CPACSStrutProperties&) = delete;

        CPACSStrutProperties(CPACSStrutProperties&&) = delete;
        CPACSStrutProperties& operator=(CPACSStrutProperties&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSStrutProperties = generated::CPACSStrutProperties;
using CCPACSAxle = generated::CPACSAxle;
using CCPACSBogie = generated::CPACSBogie;
using CCPACSPiston = generated::CPACSPiston;
using CCPACSStrutAssembly = generated::CPACSStrutAssembly;
} // namespace tigl
