// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCell;

namespace generated
{
    // This class is used in:
    // CPACSWingCell

    // generated from /xsd:schema/xsd:complexType[117]
    /// @brief Chordwise positioning of wing cells.
    /// 
    /// CellPositioningChordwise defines the chordwise
    /// direction of a wing cell either in two xsi (xsi1 at innerBorder
    /// and xsi2 at outerBorder) coordinates or via a sparUID.
    /// 
    class CPACSCellPositioningChordwise : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSCellPositioningChordwise(CCPACSWingCell* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSCellPositioningChordwise();

        TIGL_EXPORT CCPACSWingCell* GetParent();

        TIGL_EXPORT const CCPACSWingCell* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetSparUID_choice1() const;
        TIGL_EXPORT virtual void SetSparUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetXsi1_choice2() const;
        TIGL_EXPORT virtual void SetXsi1_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetXsi2_choice2() const;
        TIGL_EXPORT virtual void SetXsi2_choice2(const boost::optional<double>& value);

    protected:
        CCPACSWingCell* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Reference to a spar as chordwise border.
        boost::optional<std::string> m_sparUID_choice1;

        /// Relative chordwise position of the inner
        /// end.
        boost::optional<double>      m_xsi1_choice2;

        /// Relative chordwise position of the outer
        /// end.
        boost::optional<double>      m_xsi2_choice2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSCellPositioningChordwise(const CPACSCellPositioningChordwise&) = delete;
        CPACSCellPositioningChordwise& operator=(const CPACSCellPositioningChordwise&) = delete;

        CPACSCellPositioningChordwise(CPACSCellPositioningChordwise&&) = delete;
        CPACSCellPositioningChordwise& operator=(CPACSCellPositioningChordwise&&) = delete;
    };
} // namespace generated

// CPACSCellPositioningChordwise is customized, use type CCPACSWingCellPositionChordwise directly
} // namespace tigl
