// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCFDTool.h"
#include "CPACSToolspecific.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCFDTool::CPACSCFDTool(CPACSToolspecific* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_tool(this)
        , m_farField(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCFDTool::~CPACSCFDTool()
    {
        if (m_uidMgr) {
            if (!m_aircraftModelUID.empty()) m_uidMgr->TryUnregisterReference(m_aircraftModelUID, *this);
        }
    }

    const CPACSToolspecific* CPACSCFDTool::GetParent() const
    {
        return m_parent;
    }

    CPACSToolspecific* CPACSCFDTool::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCFDTool::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCFDTool::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSCFDTool::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCFDTool::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSCFDTool::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element tool
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/tool")) {
            m_tool.ReadCPACS(tixiHandle, xpath + "/tool");
        }
        else {
            LOG(ERROR) << "Required element tool is missing at xpath " << xpath;
        }

        // read element aircraftModelUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/aircraftModelUID")) {
            m_aircraftModelUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/aircraftModelUID");
            if (m_aircraftModelUID.empty()) {
                LOG(WARNING) << "Required element aircraftModelUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_aircraftModelUID.empty()) m_uidMgr->RegisterReference(m_aircraftModelUID, *this);
        }
        else {
            LOG(ERROR) << "Required element aircraftModelUID is missing at xpath " << xpath;
        }

        // read element farField
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/farField")) {
            m_farField.ReadCPACS(tixiHandle, xpath + "/farField");
        }
        else {
            LOG(ERROR) << "Required element farField is missing at xpath " << xpath;
        }

    }

    void CPACSCFDTool::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "tool", "aircraftModelUID", "farField" };

        // write element tool
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/tool", childElemOrder);
        m_tool.WriteCPACS(tixiHandle, xpath + "/tool");

        // write element aircraftModelUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/aircraftModelUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/aircraftModelUID", m_aircraftModelUID);

        // write element farField
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/farField", childElemOrder);
        m_farField.WriteCPACS(tixiHandle, xpath + "/farField");

    }

    const CPACSTool& CPACSCFDTool::GetTool() const
    {
        return m_tool;
    }

    CPACSTool& CPACSCFDTool::GetTool()
    {
        return m_tool;
    }

    const std::string& CPACSCFDTool::GetAircraftModelUID() const
    {
        return m_aircraftModelUID;
    }

    void CPACSCFDTool::SetAircraftModelUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_aircraftModelUID.empty()) m_uidMgr->TryUnregisterReference(m_aircraftModelUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_aircraftModelUID = value;
    }

    const CCPACSFarField& CPACSCFDTool::GetFarField() const
    {
        return m_farField;
    }

    CCPACSFarField& CPACSCFDTool::GetFarField()
    {
        return m_farField;
    }

    const CTiglUIDObject* CPACSCFDTool::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSCFDTool::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_aircraftModelUID == oldUid) {
            m_aircraftModelUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
