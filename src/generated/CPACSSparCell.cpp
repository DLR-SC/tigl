// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSparCell.h"

namespace tigl
{
    namespace generated
    {
        CPACSSparCell::CPACSSparCell(){}
        CPACSSparCell::~CPACSSparCell() {}
        
        void CPACSSparCell::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element fromEta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromEta")) {
                m_fromEta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/fromEta");
            }
            else {
                LOG(ERROR) << "Required element fromEta is missing";
            }
            
            // read element toEta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toEta")) {
                m_toEta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/toEta");
            }
            else {
                LOG(ERROR) << "Required element toEta is missing";
            }
            
            // read element upperCap
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/upperCap")) {
                m_upperCap.ReadCPACS(tixiHandle, xpath + "/upperCap");
            }
            else {
                LOG(ERROR) << "Required element upperCap is missing";
            }
            
            // read element lowerCap
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lowerCap")) {
                m_lowerCap.ReadCPACS(tixiHandle, xpath + "/lowerCap");
            }
            else {
                LOG(ERROR) << "Required element lowerCap is missing";
            }
            
            // read element web1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/web1")) {
                m_web1.ReadCPACS(tixiHandle, xpath + "/web1");
            }
            else {
                LOG(ERROR) << "Required element web1 is missing";
            }
            
            // read element web2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/web2")) {
                m_web2 = boost::in_place();
                try {
                    m_web2->ReadCPACS(tixiHandle, xpath + "/web2");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read web2 at xpath << " << xpath << ": " << e.what();
                    m_web2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read web2 at xpath << " << xpath << ": " << e.getError();
                    m_web2 = boost::none;
                }
            }
            
            // read element rotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotation")) {
                m_rotation = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rotation");
            }
            else {
                LOG(ERROR) << "Required element rotation is missing";
            }
            
        }
        
        void CPACSSparCell::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element fromEta
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromEta");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromEta", m_fromEta);
            
            // write element toEta
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toEta");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toEta", m_toEta);
            
            // write element upperCap
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperCap");
            m_upperCap.WriteCPACS(tixiHandle, xpath + "/upperCap");
            
            // write element lowerCap
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerCap");
            m_lowerCap.WriteCPACS(tixiHandle, xpath + "/lowerCap");
            
            // write element web1
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/web1");
            m_web1.WriteCPACS(tixiHandle, xpath + "/web1");
            
            // write element web2
            if (m_web2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/web2");
                m_web2->WriteCPACS(tixiHandle, xpath + "/web2");
            }
            
            // write element rotation
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotation");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/rotation", m_rotation);
            
        }
        
        const std::string& CPACSSparCell::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSSparCell::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const double& CPACSSparCell::GetFromEta() const
        {
            return m_fromEta;
        }
        
        void CPACSSparCell::SetFromEta(const double& value)
        {
            m_fromEta = value;
        }
        
        const double& CPACSSparCell::GetToEta() const
        {
            return m_toEta;
        }
        
        void CPACSSparCell::SetToEta(const double& value)
        {
            m_toEta = value;
        }
        
        const CPACSCap& CPACSSparCell::GetUpperCap() const
        {
            return m_upperCap;
        }
        
        CPACSCap& CPACSSparCell::GetUpperCap()
        {
            return m_upperCap;
        }
        
        const CPACSCap& CPACSSparCell::GetLowerCap() const
        {
            return m_lowerCap;
        }
        
        CPACSCap& CPACSSparCell::GetLowerCap()
        {
            return m_lowerCap;
        }
        
        const CPACSWeb& CPACSSparCell::GetWeb1() const
        {
            return m_web1;
        }
        
        CPACSWeb& CPACSSparCell::GetWeb1()
        {
            return m_web1;
        }
        
        bool CPACSSparCell::HasWeb2() const
        {
            return static_cast<bool>(m_web2);
        }
        
        const CPACSWeb& CPACSSparCell::GetWeb2() const
        {
            return *m_web2;
        }
        
        CPACSWeb& CPACSSparCell::GetWeb2()
        {
            return *m_web2;
        }
        
        const double& CPACSSparCell::GetRotation() const
        {
            return m_rotation;
        }
        
        void CPACSSparCell::SetRotation(const double& value)
        {
            m_rotation = value;
        }
        
    }
}
