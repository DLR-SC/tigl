// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPositionings.h>
#include <CCPACSTransformation.h>
#include <CCPACSWingComponentSegments.h>
#include <CCPACSWingSections.h>
#include <CCPACSWingSegments.h>
#include <string>
#include <TiglSymmetryAxis.h>
#include <tixi.h>
#include <typeinfo>
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSRotorBlades;
class CCPACSWings;

namespace generated
{
    // This class is used in:
    // CPACSRotorBlades
    // CPACSWings

    /// @brief Wing type, containing all a lifting surface (wing, HTP,
    /// VTP, canard...) of an aircraft model.
    /// 
    /// Wing type, containing all a lifting surface (wing,
    /// HTP, VTP, canard...) of an aircraft model.
    /// Position of the wing: The position of the wing is
    /// defined using the transformation parameters. Using those
    /// parameters, the wing coordinate system is translated, rotated
    /// and scaled.
    /// Definition of the wings outer shape: The outer shape
    /// of the wing is defined by airfoils that are placed within the 3D
    /// space. Two airfoils are combined to one wing segment within the
    /// segments. For the definition of the positions of the airfoils,
    /// differnt sections are defined. Within each section one or more
    /// elements are defined. The airfoil shape is defined within the
    /// elements. If the wings outer shape should e.g. have a step it is
    /// possible to define two different airfoils in one section by
    /// using two elements. In most cases each section will only include
    /// one element. Positionings are vectors that are used for an
    /// additional translation of the sections by using 'user friendly
    /// paramaters' as e.g. sweep and dihedral. Please note, the first
    /// positioning may be non-zero. Often it will be zero just to
    /// locate the wing at the position stated by the translation, but
    /// this is not necessary. Finally the wing segments are defined by
    /// combining two consecutive elements. A more detailed description
    /// is given within the different parameters.
    /// Definition of control surfaces, wing structures, wing
    /// fuel tank and wing fuselage attachment: those parts are defined
    /// within componentSegments. Please refer to the documentation
    /// there.
    /// @see geomBlock
    /// 
    class CPACSWing : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSWing(CCPACSRotorBlades* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSWing(CCPACSWings* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWing();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CCPACSRotorBlades>::value || std::is_same<P, CCPACSWings>::value, "template argument for P is not a parent class of CPACSWing");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CCPACSRotorBlades>::value || std::is_same<P, CCPACSWings>::value, "template argument for P is not a parent class of CPACSWing");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<TiglSymmetryAxis>& GetSymmetry() const;
        TIGL_EXPORT virtual void SetSymmetry(const boost::optional<TiglSymmetryAxis>& value);

        TIGL_EXPORT virtual const std::string& GetName() const;
        TIGL_EXPORT virtual void SetName(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetParentUID() const;
        TIGL_EXPORT virtual void SetParentUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const CCPACSTransformation& GetTransformation() const;
        TIGL_EXPORT virtual CCPACSTransformation& GetTransformation();

        TIGL_EXPORT virtual const CCPACSWingSections& GetSections() const;
        TIGL_EXPORT virtual CCPACSWingSections& GetSections();

        TIGL_EXPORT virtual const boost::optional<CCPACSPositionings>& GetPositionings() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPositionings>& GetPositionings();

        TIGL_EXPORT virtual const CCPACSWingSegments& GetSegments() const;
        TIGL_EXPORT virtual CCPACSWingSegments& GetSegments();

        TIGL_EXPORT virtual const boost::optional<CCPACSWingComponentSegments>& GetComponentSegments() const;
        TIGL_EXPORT virtual boost::optional<CCPACSWingComponentSegments>& GetComponentSegments();

        TIGL_EXPORT virtual CCPACSPositionings& GetPositionings(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemovePositionings();

        TIGL_EXPORT virtual CCPACSWingComponentSegments& GetComponentSegments(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveComponentSegments();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                                  m_uID;

        boost::optional<TiglSymmetryAxis>            m_symmetry;

        /// Name of the wing.
        std::string                                  m_name;

        /// Description of the wing.
        boost::optional<std::string>                 m_description;

        /// UID of part to which the wing is mounted (if
        /// any). The parent of the wing can e.g. be the fuselage. In each
        /// aircraft model, there is exactly one part without a parent part
        /// (The root of the connection hierarchy).
        boost::optional<std::string>                 m_parentUID;

        CCPACSTransformation                         m_transformation;

        CCPACSWingSections                           m_sections;

        boost::optional<CCPACSPositionings>          m_positionings;

        CCPACSWingSegments                           m_segments;

        boost::optional<CCPACSWingComponentSegments> m_componentSegments;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSWing(const CPACSWing&) = delete;
        CPACSWing& operator=(const CPACSWing&) = delete;

        CPACSWing(CPACSWing&&) = delete;
        CPACSWing& operator=(CPACSWing&&) = delete;
    };
} // namespace generated

// CPACSWing is customized, use type CCPACSWing directly
} // namespace tigl
