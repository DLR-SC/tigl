// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSElementGeometry.h"
#include "CPACSElementGeometryAddtionalPart.h"
#include "CPACSMultiSegmentShape.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSMultiSegmentShape::CPACSMultiSegmentShape(CPACSElementGeometry* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_sections(this, m_uidMgr)
        , m_segments(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometry);
    }

    CPACSMultiSegmentShape::CPACSMultiSegmentShape(CPACSElementGeometryAddtionalPart* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_sections(this, m_uidMgr)
        , m_segments(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometryAddtionalPart);
    }

    CPACSMultiSegmentShape::~CPACSMultiSegmentShape()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CTiglUIDObject* CPACSMultiSegmentShape::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSMultiSegmentShape::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSMultiSegmentShape::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSMultiSegmentShape::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSMultiSegmentShape::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read attribute symmetry
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
            m_symmetry = stringToTiglSymmetryAxis(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "symmetry"));
        }

        // read element sections
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sections")) {
            m_sections.ReadCPACS(tixiHandle, xpath + "/sections");
        }
        else {
            LOG(ERROR) << "Required element sections is missing at xpath " << xpath;
        }

        // read element segments
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/segments")) {
            m_segments.ReadCPACS(tixiHandle, xpath + "/segments");
        }
        else {
            LOG(ERROR) << "Required element segments is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSMultiSegmentShape::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write attribute symmetry
        if (m_symmetry) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "symmetry", TiglSymmetryAxisToString(*m_symmetry));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "symmetry");
            }
        }

        // write element sections
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
        m_sections.WriteCPACS(tixiHandle, xpath + "/sections");

        // write element segments
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segments");
        m_segments.WriteCPACS(tixiHandle, xpath + "/segments");

    }

    const std::string& CPACSMultiSegmentShape::GetUID() const
    {
        return m_uID;
    }

    void CPACSMultiSegmentShape::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<TiglSymmetryAxis>& CPACSMultiSegmentShape::GetSymmetry() const
    {
        return m_symmetry;
    }

    void CPACSMultiSegmentShape::SetSymmetry(const boost::optional<TiglSymmetryAxis>& value)
    {
        m_symmetry = value;
    }

    const CCPACSFuselageSections& CPACSMultiSegmentShape::GetSections() const
    {
        return m_sections;
    }

    CCPACSFuselageSections& CPACSMultiSegmentShape::GetSections()
    {
        return m_sections;
    }

    const CCPACSFuselageSegments& CPACSMultiSegmentShape::GetSegments() const
    {
        return m_segments;
    }

    CCPACSFuselageSegments& CPACSMultiSegmentShape::GetSegments()
    {
        return m_segments;
    }

} // namespace generated
} // namespace tigl
