// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSBotOptimizationControl.h"

namespace tigl
{
    namespace generated
    {
        CPACSSBotOptimizationControl::CPACSSBotOptimizationControl(){}
        CPACSSBotOptimizationControl::~CPACSSBotOptimizationControl() {}
        
        void CPACSSBotOptimizationControl::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element convergenceLimit
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/convergenceLimit")) {
                m_convergenceLimit = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/convergenceLimit");
            }
            
            // read element maxIterations
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maxIterations")) {
                m_maxIterations = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/maxIterations");
            }
            
            // read element thicknessDifferenceReducingFactor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thicknessDifferenceReducingFactor")) {
                m_thicknessDifferenceReducingFactor = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/thicknessDifferenceReducingFactor");
            }
            
            // read element maximumAngleIncrement
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maximumAngleIncrement")) {
                m_maximumAngleIncrement = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/maximumAngleIncrement");
            }
            
        }
        
        void CPACSSBotOptimizationControl::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element convergenceLimit
            if (m_convergenceLimit) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/convergenceLimit");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/convergenceLimit", *m_convergenceLimit);
            }
            
            // write element maxIterations
            if (m_maxIterations) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maxIterations");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/maxIterations", *m_maxIterations);
            }
            
            // write element thicknessDifferenceReducingFactor
            if (m_thicknessDifferenceReducingFactor) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thicknessDifferenceReducingFactor");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/thicknessDifferenceReducingFactor", *m_thicknessDifferenceReducingFactor);
            }
            
            // write element maximumAngleIncrement
            if (m_maximumAngleIncrement) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maximumAngleIncrement");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/maximumAngleIncrement", *m_maximumAngleIncrement);
            }
            
        }
        
        bool CPACSSBotOptimizationControl::HasConvergenceLimit() const
        {
            return static_cast<bool>(m_convergenceLimit);
        }
        
        const double& CPACSSBotOptimizationControl::GetConvergenceLimit() const
        {
            return *m_convergenceLimit;
        }
        
        void CPACSSBotOptimizationControl::SetConvergenceLimit(const double& value)
        {
            m_convergenceLimit = value;
        }
        
        bool CPACSSBotOptimizationControl::HasMaxIterations() const
        {
            return static_cast<bool>(m_maxIterations);
        }
        
        const int& CPACSSBotOptimizationControl::GetMaxIterations() const
        {
            return *m_maxIterations;
        }
        
        void CPACSSBotOptimizationControl::SetMaxIterations(const int& value)
        {
            m_maxIterations = value;
        }
        
        bool CPACSSBotOptimizationControl::HasThicknessDifferenceReducingFactor() const
        {
            return static_cast<bool>(m_thicknessDifferenceReducingFactor);
        }
        
        const double& CPACSSBotOptimizationControl::GetThicknessDifferenceReducingFactor() const
        {
            return *m_thicknessDifferenceReducingFactor;
        }
        
        void CPACSSBotOptimizationControl::SetThicknessDifferenceReducingFactor(const double& value)
        {
            m_thicknessDifferenceReducingFactor = value;
        }
        
        bool CPACSSBotOptimizationControl::HasMaximumAngleIncrement() const
        {
            return static_cast<bool>(m_maximumAngleIncrement);
        }
        
        const double& CPACSSBotOptimizationControl::GetMaximumAngleIncrement() const
        {
            return *m_maximumAngleIncrement;
        }
        
        void CPACSSBotOptimizationControl::SetMaximumAngleIncrement(const double& value)
        {
            m_maximumAngleIncrement = value;
        }
        
    }
}
