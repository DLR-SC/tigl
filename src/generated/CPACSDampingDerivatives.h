// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"
#include "CPACSStringArrayBase.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSDampingDerivativesRates
        
        // generated from /xsd:schema/xsd:complexType[249]
        class CPACSDampingDerivatives
        {
        public:
            TIGL_EXPORT CPACSDampingDerivatives();
            TIGL_EXPORT virtual ~CPACSDampingDerivatives();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasDcfxdpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfxdpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfxdpstar();
            
            TIGL_EXPORT bool HasDcfxdqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfxdqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfxdqstar();
            
            TIGL_EXPORT bool HasDcfxdrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfxdrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfxdrstar();
            
            TIGL_EXPORT bool HasDcfydpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfydpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfydpstar();
            
            TIGL_EXPORT bool HasDcfydqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfydqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfydqstar();
            
            TIGL_EXPORT bool HasDcfydrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfydrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfydrstar();
            
            TIGL_EXPORT bool HasDcfzdpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfzdpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfzdpstar();
            
            TIGL_EXPORT bool HasDcfzdqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfzdqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfzdqstar();
            
            TIGL_EXPORT bool HasDcfzdrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcfzdrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcfzdrstar();
            
            TIGL_EXPORT bool HasDcmxdpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmxdpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmxdpstar();
            
            TIGL_EXPORT bool HasDcmxdqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmxdqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmxdqstar();
            
            TIGL_EXPORT bool HasDcmxdrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmxdrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmxdrstar();
            
            TIGL_EXPORT bool HasDcmydpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmydpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmydpstar();
            
            TIGL_EXPORT bool HasDcmydqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmydqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmydqstar();
            
            TIGL_EXPORT bool HasDcmydrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmydrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmydrstar();
            
            TIGL_EXPORT bool HasDcmzdpstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmzdpstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmzdpstar();
            
            TIGL_EXPORT bool HasDcmzdqstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmzdqstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmzdqstar();
            
            TIGL_EXPORT bool HasDcmzdrstar() const;
            TIGL_EXPORT const CPACSStringArrayBase& GetDcmzdrstar() const;
            TIGL_EXPORT CPACSStringArrayBase& GetDcmzdrstar();
            
        protected:
            boost::optional<std::string>          m_uID;
            boost::optional<CPACSStringArrayBase> m_dcfxdpstar;
            boost::optional<CPACSStringArrayBase> m_dcfxdqstar;
            boost::optional<CPACSStringArrayBase> m_dcfxdrstar;
            boost::optional<CPACSStringArrayBase> m_dcfydpstar;
            boost::optional<CPACSStringArrayBase> m_dcfydqstar;
            boost::optional<CPACSStringArrayBase> m_dcfydrstar;
            boost::optional<CPACSStringArrayBase> m_dcfzdpstar;
            boost::optional<CPACSStringArrayBase> m_dcfzdqstar;
            boost::optional<CPACSStringArrayBase> m_dcfzdrstar;
            boost::optional<CPACSStringArrayBase> m_dcmxdpstar;
            boost::optional<CPACSStringArrayBase> m_dcmxdqstar;
            boost::optional<CPACSStringArrayBase> m_dcmxdrstar;
            boost::optional<CPACSStringArrayBase> m_dcmydpstar;
            boost::optional<CPACSStringArrayBase> m_dcmydqstar;
            boost::optional<CPACSStringArrayBase> m_dcmydrstar;
            boost::optional<CPACSStringArrayBase> m_dcmzdpstar;
            boost::optional<CPACSStringArrayBase> m_dcmzdqstar;
            boost::optional<CPACSStringArrayBase> m_dcmzdrstar;
            
        private:
            #ifdef HAVE_CPP11
            CPACSDampingDerivatives(const CPACSDampingDerivatives&) = delete;
            CPACSDampingDerivatives& operator=(const CPACSDampingDerivatives&) = delete;
            
            CPACSDampingDerivatives(CPACSDampingDerivatives&&) = delete;
            CPACSDampingDerivatives& operator=(CPACSDampingDerivatives&&) = delete;
            #else
            CPACSDampingDerivatives(const CPACSDampingDerivatives&);
            CPACSDampingDerivatives& operator=(const CPACSDampingDerivatives&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSDampingDerivatives = generated::CPACSDampingDerivatives;
    #else
    typedef generated::CPACSDampingDerivatives CCPACSDampingDerivatives;
    #endif
}
