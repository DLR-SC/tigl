// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSteffsValidationModel.h"

namespace tigl
{
    namespace generated
    {
        CPACSSteffsValidationModel::CPACSSteffsValidationModel(){}
        CPACSSteffsValidationModel::~CPACSSteffsValidationModel() {}
        
        void CPACSSteffsValidationModel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element numberStringers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberStringers")) {
                m_numberStringers = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberStringers");
            }
            else {
                LOG(ERROR) << "Required element numberStringers is missing";
            }
            
            // read element numberFrames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberFrames")) {
                m_numberFrames = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberFrames");
            }
            else {
                LOG(ERROR) << "Required element numberFrames is missing";
            }
            
            // read element width
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/width")) {
                m_width = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/width");
            }
            else {
                LOG(ERROR) << "Required element width is missing";
            }
            
            // read element height
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/height")) {
                m_height = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/height");
            }
            else {
                LOG(ERROR) << "Required element height is missing";
            }
            
            // read element length
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/length")) {
                m_length = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/length");
            }
            else {
                LOG(ERROR) << "Required element length is missing";
            }
            
        }
        
        void CPACSSteffsValidationModel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element numberStringers
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberStringers");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberStringers", m_numberStringers);
            
            // write element numberFrames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberFrames");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberFrames", m_numberFrames);
            
            // write element width
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/width");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/width", m_width);
            
            // write element height
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/height");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/height", m_height);
            
            // write element length
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/length");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/length", m_length);
            
        }
        
        const int& CPACSSteffsValidationModel::GetNumberStringers() const
        {
            return m_numberStringers;
        }
        
        void CPACSSteffsValidationModel::SetNumberStringers(const int& value)
        {
            m_numberStringers = value;
        }
        
        const int& CPACSSteffsValidationModel::GetNumberFrames() const
        {
            return m_numberFrames;
        }
        
        void CPACSSteffsValidationModel::SetNumberFrames(const int& value)
        {
            m_numberFrames = value;
        }
        
        const double& CPACSSteffsValidationModel::GetWidth() const
        {
            return m_width;
        }
        
        void CPACSSteffsValidationModel::SetWidth(const double& value)
        {
            m_width = value;
        }
        
        const double& CPACSSteffsValidationModel::GetHeight() const
        {
            return m_height;
        }
        
        void CPACSSteffsValidationModel::SetHeight(const double& value)
        {
            m_height = value;
        }
        
        const double& CPACSSteffsValidationModel::GetLength() const
        {
            return m_length;
        }
        
        void CPACSSteffsValidationModel::SetLength(const double& value)
        {
            m_length = value;
        }
        
    }
}
