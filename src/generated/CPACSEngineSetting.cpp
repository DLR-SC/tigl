// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSEngineSetting.h"

namespace tigl
{
    namespace generated
    {
        CPACSEngineSetting::CPACSEngineSetting(){}
        CPACSEngineSetting::~CPACSEngineSetting() {}
        
        void CPACSEngineSetting::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element modelEngineUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/modelEngineUID")) {
                m_modelEngineUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/modelEngineUID");
            }
            else {
                LOG(ERROR) << "Required element modelEngineUID is missing";
            }
            
            // read element thrustLevel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/thrustLevel")) {
                m_thrustLevel = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/thrustLevel");
            }
            else {
                LOG(ERROR) << "Required element thrustLevel is missing";
            }
            
            // read element inoperative
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/inoperative")) {
                m_inoperative = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/inoperative");
            }
            else {
                LOG(ERROR) << "Required element inoperative is missing";
            }
            
        }
        
        void CPACSEngineSetting::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element modelEngineUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/modelEngineUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/modelEngineUID", m_modelEngineUID);
            
            // write element thrustLevel
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thrustLevel");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/thrustLevel", m_thrustLevel);
            
            // write element inoperative
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/inoperative");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/inoperative", m_inoperative);
            
        }
        
        const std::string& CPACSEngineSetting::GetModelEngineUID() const
        {
            return m_modelEngineUID;
        }
        
        void CPACSEngineSetting::SetModelEngineUID(const std::string& value)
        {
            m_modelEngineUID = value;
        }
        
        const int& CPACSEngineSetting::GetThrustLevel() const
        {
            return m_thrustLevel;
        }
        
        void CPACSEngineSetting::SetThrustLevel(const int& value)
        {
            m_thrustLevel = value;
        }
        
        const bool& CPACSEngineSetting::GetInoperative() const
        {
            return m_inoperative;
        }
        
        void CPACSEngineSetting::SetInoperative(const bool& value)
        {
            m_inoperative = value;
        }
        
    }
}
