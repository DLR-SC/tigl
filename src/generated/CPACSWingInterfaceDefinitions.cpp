// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingInterfaceDefinitions.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingInterfaceDefinitions::CPACSWingInterfaceDefinitions(){}
        CPACSWingInterfaceDefinitions::~CPACSWingInterfaceDefinitions() {}
        
        void CPACSWingInterfaceDefinitions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element cutoutReinfStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutoutReinfStructElemUID")) {
                m_cutoutReinfStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/cutoutReinfStructElemUID");
            }
            
            // read element wingInterfaceMainFrames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingInterfaceMainFrames")) {
                m_wingInterfaceMainFrames.ReadCPACS(tixiHandle, xpath + "/wingInterfaceMainFrames");
            }
            else {
                LOG(ERROR) << "Required element wingInterfaceMainFrames is missing";
            }
            
            // read element startStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startStringerUID")) {
                m_startStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startStringerUID");
            }
            
            // read element endStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endStringerUID")) {
                m_endStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endStringerUID");
            }
            
            // read element wingInterfaceSupportStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingInterfaceSupportStruts")) {
                m_wingInterfaceSupportStruts = boost::in_place();
                try {
                    m_wingInterfaceSupportStruts->ReadCPACS(tixiHandle, xpath + "/wingInterfaceSupportStruts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingInterfaceSupportStruts at xpath << " << xpath << ": " << e.what();
                    m_wingInterfaceSupportStruts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingInterfaceSupportStruts at xpath << " << xpath << ": " << e.getError();
                    m_wingInterfaceSupportStruts = boost::none;
                }
            }
            
        }
        
        void CPACSWingInterfaceDefinitions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element cutoutReinfStructElemUID
            if (m_cutoutReinfStructElemUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutoutReinfStructElemUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cutoutReinfStructElemUID", *m_cutoutReinfStructElemUID);
            }
            
            // write element wingInterfaceMainFrames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingInterfaceMainFrames");
            m_wingInterfaceMainFrames.WriteCPACS(tixiHandle, xpath + "/wingInterfaceMainFrames");
            
            // write element startStringerUID
            if (m_startStringerUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/startStringerUID", *m_startStringerUID);
            }
            
            // write element endStringerUID
            if (m_endStringerUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/endStringerUID", *m_endStringerUID);
            }
            
            // write element wingInterfaceSupportStruts
            if (m_wingInterfaceSupportStruts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingInterfaceSupportStruts");
                m_wingInterfaceSupportStruts->WriteCPACS(tixiHandle, xpath + "/wingInterfaceSupportStruts");
            }
            
        }
        
        bool CPACSWingInterfaceDefinitions::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSWingInterfaceDefinitions::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSWingInterfaceDefinitions::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSWingInterfaceDefinitions::HasCutoutReinfStructElemUID() const
        {
            return static_cast<bool>(m_cutoutReinfStructElemUID);
        }
        
        const std::string& CPACSWingInterfaceDefinitions::GetCutoutReinfStructElemUID() const
        {
            return *m_cutoutReinfStructElemUID;
        }
        
        void CPACSWingInterfaceDefinitions::SetCutoutReinfStructElemUID(const std::string& value)
        {
            m_cutoutReinfStructElemUID = value;
        }
        
        const CPACSWingInterfaceMainFrames& CPACSWingInterfaceDefinitions::GetWingInterfaceMainFrames() const
        {
            return m_wingInterfaceMainFrames;
        }
        
        CPACSWingInterfaceMainFrames& CPACSWingInterfaceDefinitions::GetWingInterfaceMainFrames()
        {
            return m_wingInterfaceMainFrames;
        }
        
        bool CPACSWingInterfaceDefinitions::HasStartStringerUID() const
        {
            return static_cast<bool>(m_startStringerUID);
        }
        
        const std::string& CPACSWingInterfaceDefinitions::GetStartStringerUID() const
        {
            return *m_startStringerUID;
        }
        
        void CPACSWingInterfaceDefinitions::SetStartStringerUID(const std::string& value)
        {
            m_startStringerUID = value;
        }
        
        bool CPACSWingInterfaceDefinitions::HasEndStringerUID() const
        {
            return static_cast<bool>(m_endStringerUID);
        }
        
        const std::string& CPACSWingInterfaceDefinitions::GetEndStringerUID() const
        {
            return *m_endStringerUID;
        }
        
        void CPACSWingInterfaceDefinitions::SetEndStringerUID(const std::string& value)
        {
            m_endStringerUID = value;
        }
        
        bool CPACSWingInterfaceDefinitions::HasWingInterfaceSupportStruts() const
        {
            return static_cast<bool>(m_wingInterfaceSupportStruts);
        }
        
        const CPACSWingInterfaceSupportStrutsAssembly& CPACSWingInterfaceDefinitions::GetWingInterfaceSupportStruts() const
        {
            return *m_wingInterfaceSupportStruts;
        }
        
        CPACSWingInterfaceSupportStrutsAssembly& CPACSWingInterfaceDefinitions::GetWingInterfaceSupportStruts()
        {
            return *m_wingInterfaceSupportStruts;
        }
        
    }
}
