// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSPointXYZ.h"
#include "CPACSPointXYZ.h"
#include "CPACSFuselageCutOut_cutoutType.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFuselageCutOuts
        
        // generated from /xsd:schema/xsd:complexType[359]
        class CPACSFuselageCutOut
        {
        public:
            TIGL_EXPORT CPACSFuselageCutOut();
            TIGL_EXPORT virtual ~CPACSFuselageCutOut();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const double& GetPositionX() const;
            TIGL_EXPORT void SetPositionX(const double& value);
            
            TIGL_EXPORT const double& GetReferenceY() const;
            TIGL_EXPORT void SetReferenceY(const double& value);
            
            TIGL_EXPORT const double& GetReferenceZ() const;
            TIGL_EXPORT void SetReferenceZ(const double& value);
            
            TIGL_EXPORT const double& GetReferenceAngle() const;
            TIGL_EXPORT void SetReferenceAngle(const double& value);
            
            TIGL_EXPORT const CPACSPointXYZ& GetOrientationVector() const;
            TIGL_EXPORT CPACSPointXYZ& GetOrientationVector();
            
            TIGL_EXPORT bool HasAlignmentVector() const;
            TIGL_EXPORT const CPACSPointXYZ& GetAlignmentVector() const;
            TIGL_EXPORT CPACSPointXYZ& GetAlignmentVector();
            
            TIGL_EXPORT const double& GetDeltaY() const;
            TIGL_EXPORT void SetDeltaY(const double& value);
            
            TIGL_EXPORT const double& GetDeltaZ() const;
            TIGL_EXPORT void SetDeltaZ(const double& value);
            
            TIGL_EXPORT bool HasDeltaY1() const;
            TIGL_EXPORT const double& GetDeltaY1() const;
            TIGL_EXPORT void SetDeltaY1(const double& value);
            
            TIGL_EXPORT bool HasDeltaZ1() const;
            TIGL_EXPORT const double& GetDeltaZ1() const;
            TIGL_EXPORT void SetDeltaZ1(const double& value);
            
            TIGL_EXPORT const double& GetFilletRadius() const;
            TIGL_EXPORT void SetFilletRadius(const double& value);
            
            TIGL_EXPORT const CPACSFuselageCutOut_cutoutType& GetCutoutType() const;
            TIGL_EXPORT CPACSFuselageCutOut_cutoutType& GetCutoutType();
            
        protected:
            std::string                    m_uID;
            boost::optional<std::string>   m_name;
            boost::optional<std::string>   m_description;
            double                         m_positionX;
            double                         m_referenceY;
            double                         m_referenceZ;
            double                         m_referenceAngle;
            CPACSPointXYZ                  m_orientationVector;
            boost::optional<CPACSPointXYZ> m_alignmentVector;
            double                         m_deltaY;
            double                         m_deltaZ;
            boost::optional<double>        m_deltaY1;
            boost::optional<double>        m_deltaZ1;
            double                         m_filletRadius;
            CPACSFuselageCutOut_cutoutType m_cutoutType;
            
        private:
            #ifdef HAVE_CPP11
            CPACSFuselageCutOut(const CPACSFuselageCutOut&) = delete;
            CPACSFuselageCutOut& operator=(const CPACSFuselageCutOut&) = delete;
            
            CPACSFuselageCutOut(CPACSFuselageCutOut&&) = delete;
            CPACSFuselageCutOut& operator=(CPACSFuselageCutOut&&) = delete;
            #else
            CPACSFuselageCutOut(const CPACSFuselageCutOut&);
            CPACSFuselageCutOut& operator=(const CPACSFuselageCutOut&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSFuselageCutOut = generated::CPACSFuselageCutOut;
    #else
    typedef generated::CPACSFuselageCutOut CCPACSFuselageCutOut;
    #endif
}
