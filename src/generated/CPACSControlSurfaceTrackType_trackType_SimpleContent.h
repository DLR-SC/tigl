// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSControlSurfaceTrackType_trackType
        
        // generated from /xsd:schema/xsd:complexType[190]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:element[2]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSControlSurfaceTrackType_trackType_SimpleContent
        #else
        enum CPACSControlSurfaceTrackType_trackType_SimpleContent
        #endif
        {
            trackType1,
            trackType2,
            trackType3,
            trackType4,
            trackType5,
            trackType6,
            trackType7
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSControlSurfaceTrackType_trackType_SimpleContentToString(const CPACSControlSurfaceTrackType_trackType_SimpleContent& value)
        {
            switch(value) {
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType1: return "trackType1";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType2: return "trackType2";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType3: return "trackType3";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType4: return "trackType4";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType5: return "trackType5";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType6: return "trackType6";
            case CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType7: return "trackType7";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSControlSurfaceTrackType_trackType_SimpleContent");
            }
        }
        inline CPACSControlSurfaceTrackType_trackType_SimpleContent stringToCPACSControlSurfaceTrackType_trackType_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "tracktype1") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType1; }
            if (toLower(value) == "tracktype2") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType2; }
            if (toLower(value) == "tracktype3") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType3; }
            if (toLower(value) == "tracktype4") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType4; }
            if (toLower(value) == "tracktype5") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType5; }
            if (toLower(value) == "tracktype6") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType6; }
            if (toLower(value) == "tracktype7") { return CPACSControlSurfaceTrackType_trackType_SimpleContent::trackType7; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSControlSurfaceTrackType_trackType_SimpleContent");
        }
        #else
        inline std::string CPACSControlSurfaceTrackType_trackType_SimpleContentToString(const CPACSControlSurfaceTrackType_trackType_SimpleContent& value)
        {
            switch(value) {
            case trackType1: return "trackType1";
            case trackType2: return "trackType2";
            case trackType3: return "trackType3";
            case trackType4: return "trackType4";
            case trackType5: return "trackType5";
            case trackType6: return "trackType6";
            case trackType7: return "trackType7";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSControlSurfaceTrackType_trackType_SimpleContent");
            }
        }
        inline CPACSControlSurfaceTrackType_trackType_SimpleContent stringToCPACSControlSurfaceTrackType_trackType_SimpleContent(const std::string& value)
        {
            struct ToLower { std::string operator()(std::string str) { for (char& c : str) { c = std::tolower(c); } return str; } } toLower;
            if (toLower(value) == "tracktype1") { return trackType1; }
            if (toLower(value) == "tracktype2") { return trackType2; }
            if (toLower(value) == "tracktype3") { return trackType3; }
            if (toLower(value) == "tracktype4") { return trackType4; }
            if (toLower(value) == "tracktype5") { return trackType5; }
            if (toLower(value) == "tracktype6") { return trackType6; }
            if (toLower(value) == "tracktype7") { return trackType7; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSControlSurfaceTrackType_trackType_SimpleContent");
        }
        #endif
    }
}
