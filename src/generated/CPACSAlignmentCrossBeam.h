// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSCrossBeamAssemblyPosition
        // CPACSCrossBeamStrutAssemblyPosition
        
        // generated from /xsd:schema/xsd:complexType[66]
        class CPACSAlignmentCrossBeam
        {
        public:
            TIGL_EXPORT CPACSAlignmentCrossBeam();
            TIGL_EXPORT virtual ~CPACSAlignmentCrossBeam();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasOffset1LocX() const;
            TIGL_EXPORT const double& GetOffset1LocX() const;
            TIGL_EXPORT void SetOffset1LocX(const double& value);
            
            TIGL_EXPORT bool HasOffset2LocX() const;
            TIGL_EXPORT const double& GetOffset2LocX() const;
            TIGL_EXPORT void SetOffset2LocX(const double& value);
            
            TIGL_EXPORT bool HasRotationLocX() const;
            TIGL_EXPORT const double& GetRotationLocX() const;
            TIGL_EXPORT void SetRotationLocX(const double& value);
            
            TIGL_EXPORT bool HasTranslationLocY() const;
            TIGL_EXPORT const double& GetTranslationLocY() const;
            TIGL_EXPORT void SetTranslationLocY(const double& value);
            
            TIGL_EXPORT bool HasTranslationLocZ() const;
            TIGL_EXPORT const double& GetTranslationLocZ() const;
            TIGL_EXPORT void SetTranslationLocZ(const double& value);
            
        protected:
            boost::optional<std::string> m_uID;
            boost::optional<double>      m_offset1LocX;
            boost::optional<double>      m_offset2LocX;
            boost::optional<double>      m_rotationLocX;
            boost::optional<double>      m_translationLocY;
            boost::optional<double>      m_translationLocZ;
            
        private:
            #ifdef HAVE_CPP11
            CPACSAlignmentCrossBeam(const CPACSAlignmentCrossBeam&) = delete;
            CPACSAlignmentCrossBeam& operator=(const CPACSAlignmentCrossBeam&) = delete;
            
            CPACSAlignmentCrossBeam(CPACSAlignmentCrossBeam&&) = delete;
            CPACSAlignmentCrossBeam& operator=(CPACSAlignmentCrossBeam&&) = delete;
            #else
            CPACSAlignmentCrossBeam(const CPACSAlignmentCrossBeam&);
            CPACSAlignmentCrossBeam& operator=(const CPACSAlignmentCrossBeam&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSAlignmentCrossBeam = generated::CPACSAlignmentCrossBeam;
    #else
    typedef generated::CPACSAlignmentCrossBeam CCPACSAlignmentCrossBeam;
    #endif
}
