// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingWingAttachmentSpars.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingWingAttachmentSpars::CPACSWingWingAttachmentSpars(){}
        CPACSWingWingAttachmentSpars::~CPACSWingWingAttachmentSpars() {}
        
        void CPACSWingWingAttachmentSpars::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element fromSparUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromSparUID")) {
                m_fromSparUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fromSparUID");
            }
            else {
                LOG(ERROR) << "Required element fromSparUID is missing";
            }
            
            // read element toSparUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toSparUID")) {
                m_toSparUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toSparUID");
            }
            else {
                LOG(ERROR) << "Required element toSparUID is missing";
            }
            
        }
        
        void CPACSWingWingAttachmentSpars::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element fromSparUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromSparUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromSparUID", m_fromSparUID);
            
            // write element toSparUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toSparUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toSparUID", m_toSparUID);
            
        }
        
        const std::string& CPACSWingWingAttachmentSpars::GetFromSparUID() const
        {
            return m_fromSparUID;
        }
        
        void CPACSWingWingAttachmentSpars::SetFromSparUID(const std::string& value)
        {
            m_fromSparUID = value;
        }
        
        const std::string& CPACSWingWingAttachmentSpars::GetToSparUID() const
        {
            return m_toSparUID;
        }
        
        void CPACSWingWingAttachmentSpars::SetToSparUID(const std::string& value)
        {
            m_toSparUID = value;
        }
        
    }
}
