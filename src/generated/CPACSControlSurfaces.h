// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German
// Aerospace Center (DLR/SC). Do not edit, all changes are lost when files are
// re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <CCPACSLeadingEdgeDevices.h>
#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
// #include <CCPACSSpoilers.h>
#include "CreateIfNotExists.h"
#include "tigl_internal.h"
#include <CCPACSTrailingEdgeDevices.h>
#include <string>
#include <tixi.h>

namespace tigl {
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingComponentSegment;

namespace generated {
// This class is used in:
// CPACSComponentSegment

/// @brief controlSurfacesType
///
/// Definition of the outer shape, structure and deflection
/// of all control surfaces (flaps, slats, soiler, ailerons...) of
/// the wing.
///
class CPACSControlSurfaces {
public:
  TIGL_EXPORT CPACSControlSurfaces(CCPACSWingComponentSegment *parent,
                                   CTiglUIDManager *uidMgr);

  TIGL_EXPORT virtual ~CPACSControlSurfaces();

  TIGL_EXPORT CCPACSWingComponentSegment *GetParent();

  TIGL_EXPORT const CCPACSWingComponentSegment *GetParent() const;

  TIGL_EXPORT virtual CTiglUIDObject *GetNextUIDParent();
  TIGL_EXPORT virtual const CTiglUIDObject *GetNextUIDParent() const;

  TIGL_EXPORT CTiglUIDManager &GetUIDManager();
  TIGL_EXPORT const CTiglUIDManager &GetUIDManager() const;

  TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle &tixiHandle,
                                     const std::string &xpath);
  TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle &tixiHandle,
                                      const std::string &xpath) const;

  TIGL_EXPORT virtual const boost::optional<CCPACSLeadingEdgeDevices> &
  GetLeadingEdgeDevices() const;
  TIGL_EXPORT virtual boost::optional<CCPACSLeadingEdgeDevices> &
  GetLeadingEdgeDevices();

  TIGL_EXPORT virtual const boost::optional<CCPACSTrailingEdgeDevices> &
  GetTrailingEdgeDevices() const;
  TIGL_EXPORT virtual boost::optional<CCPACSTrailingEdgeDevices> &
  GetTrailingEdgeDevices();

  //   TIGL_EXPORT virtual const boost::optional<CCPACSSpoilers> &
  //   GetSpoilers() const;
  //   TIGL_EXPORT virtual boost::optional<CCPACSSpoilers> &GetSpoilers();

  TIGL_EXPORT virtual CCPACSLeadingEdgeDevices &
      GetLeadingEdgeDevices(CreateIfNotExistsTag);
  TIGL_EXPORT virtual void RemoveLeadingEdgeDevices();

  TIGL_EXPORT virtual CCPACSTrailingEdgeDevices &
      GetTrailingEdgeDevices(CreateIfNotExistsTag);
  TIGL_EXPORT virtual void RemoveTrailingEdgeDevices();

  //   TIGL_EXPORT virtual CCPACSSpoilers &GetSpoilers(CreateIfNotExistsTag);
  //   TIGL_EXPORT virtual void RemoveSpoilers();

protected:
  CCPACSWingComponentSegment *m_parent;

  CTiglUIDManager *m_uidMgr;

  boost::optional<CCPACSLeadingEdgeDevices> m_leadingEdgeDevices;
  boost::optional<CCPACSTrailingEdgeDevices> m_trailingEdgeDevices;
  //   boost::optional<CCPACSSpoilers> m_spoilers;

private:
  CPACSControlSurfaces(const CPACSControlSurfaces &) = delete;
  CPACSControlSurfaces &operator=(const CPACSControlSurfaces &) = delete;

  CPACSControlSurfaces(CPACSControlSurfaces &&) = delete;
  CPACSControlSurfaces &operator=(CPACSControlSurfaces &&) = delete;
};
} // namespace generated

// CPACSControlSurfaces is customized, use type CCPACSControlSurfaces directly
} // namespace tigl
