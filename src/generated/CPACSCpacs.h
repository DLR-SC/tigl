// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include "tigl_internal.h"
#include "CPACSHeader.h"
#include "CPACSVehicles.h"
#include "CPACSToolspecific.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // generated from /xsd:schema/xsd:element[1]/xsd:complexType
        class CPACSCpacs
        {
        public:
            TIGL_EXPORT CPACSCpacs();
            TIGL_EXPORT virtual ~CPACSCpacs();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT virtual const CPACSHeader& GetHeader() const;
            TIGL_EXPORT virtual CPACSHeader& GetHeader();
            
            TIGL_EXPORT virtual const boost::optional<CPACSVehicles>& GetVehicles() const;
            TIGL_EXPORT virtual boost::optional<CPACSVehicles>& GetVehicles();
            
            TIGL_EXPORT virtual const boost::optional<CPACSToolspecific>& GetToolspecific() const;
            TIGL_EXPORT virtual boost::optional<CPACSToolspecific>& GetToolspecific();
            
        protected:
            CPACSHeader                        m_header;
            boost::optional<CPACSVehicles>     m_vehicles;
            boost::optional<CPACSToolspecific> m_toolspecific;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCpacs(const CPACSCpacs&) = delete;
            CPACSCpacs& operator=(const CPACSCpacs&) = delete;
            
            CPACSCpacs(CPACSCpacs&&) = delete;
            CPACSCpacs& operator=(CPACSCpacs&&) = delete;
            #else
            CPACSCpacs(const CPACSCpacs&);
            CPACSCpacs& operator=(const CPACSCpacs&);
            #endif
        };
    }
    
    // Aliases in tigl namespace
    #ifdef HAVE_CPP11
    using CCPACSCpacs = generated::CPACSCpacs;
    #else
    typedef generated::CPACSCpacs CCPACSCpacs;
    #endif
}
