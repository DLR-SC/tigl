// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSElementGeometry;
    class CPACSElementGeometryAddtionalPart;

    // This class is used in:
    // CPACSElementGeometry
    // CPACSElementGeometryAddtionalPart

    /// @brief Frustum
    /// 
    /// The component coordinate system of the frustum is centered on the center of its geometrically defining variables,
    /// which is half the height and center of the lower and upper circular faces.
    /// The upper radius is optional.
    /// If not specified, it defaults to the lower radius, resulting in a cylinder.
    /// 
    class CPACSFrustum
    {
    public:
        TIGL_EXPORT CPACSFrustum(CPACSElementGeometry* parent);
        TIGL_EXPORT CPACSFrustum(CPACSElementGeometryAddtionalPart* parent);

        TIGL_EXPORT virtual ~CPACSFrustum();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSFrustum");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSFrustum");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetLowerRadius() const;
        TIGL_EXPORT virtual void SetLowerRadius(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperRadius() const;
        TIGL_EXPORT virtual void SetUpperRadius(const boost::optional<double>& value);

        TIGL_EXPORT virtual const double& GetHeight() const;
        TIGL_EXPORT virtual void SetHeight(const double& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        /// Lower radius [m]
        double                  m_lowerRadius;

        /// Upper radius [m] (if not defined: equals lowerRadius)
        boost::optional<double> m_upperRadius;

        /// Height [m]
        double                  m_height;

    private:
        CPACSFrustum(const CPACSFrustum&) = delete;
        CPACSFrustum& operator=(const CPACSFrustum&) = delete;

        CPACSFrustum(CPACSFrustum&&) = delete;
        CPACSFrustum& operator=(CPACSFrustum&&) = delete;
    };
} // namespace generated

// CPACSFrustum is customized, use type CCPACSFrustum directly

// Aliases in tigl namespace
using CCPACSElementGeometry = generated::CPACSElementGeometry;
using CCPACSElementGeometryAddtionalPart = generated::CPACSElementGeometryAddtionalPart;
} // namespace tigl
