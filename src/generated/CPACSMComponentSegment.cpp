// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMComponentSegment.h"

namespace tigl
{
    namespace generated
    {
        CPACSMComponentSegment::CPACSMComponentSegment(){}
        CPACSMComponentSegment::~CPACSMComponentSegment() {}
        
        void CPACSMComponentSegment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mPylonAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPylonAttachments")) {
                m_mPylonAttachments = boost::in_place();
                try {
                    m_mPylonAttachments->ReadCPACS(tixiHandle, xpath + "/mPylonAttachments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mPylonAttachments at xpath << " << xpath << ": " << e.what();
                    m_mPylonAttachments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mPylonAttachments at xpath << " << xpath << ": " << e.getError();
                    m_mPylonAttachments = boost::none;
                }
            }
            
            // read element mLandingGearSupports
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mLandingGearSupports")) {
                m_mLandingGearSupports = boost::in_place();
                try {
                    m_mLandingGearSupports->ReadCPACS(tixiHandle, xpath + "/mLandingGearSupports");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mLandingGearSupports at xpath << " << xpath << ": " << e.what();
                    m_mLandingGearSupports = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mLandingGearSupports at xpath << " << xpath << ": " << e.getError();
                    m_mLandingGearSupports = boost::none;
                }
            }
            
            // read element mMiscellaneous
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mMiscellaneous")) {
                m_mMiscellaneous = boost::in_place();
                try {
                    m_mMiscellaneous->ReadCPACS(tixiHandle, xpath + "/mMiscellaneous");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mMiscellaneous at xpath << " << xpath << ": " << e.what();
                    m_mMiscellaneous = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mMiscellaneous at xpath << " << xpath << ": " << e.getError();
                    m_mMiscellaneous = boost::none;
                }
            }
            
            // read element mWingBox
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mWingBox")) {
                m_mWingBox = boost::in_place();
                try {
                    m_mWingBox->ReadCPACS(tixiHandle, xpath + "/mWingBox");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mWingBox at xpath << " << xpath << ": " << e.what();
                    m_mWingBox = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mWingBox at xpath << " << xpath << ": " << e.getError();
                    m_mWingBox = boost::none;
                }
            }
            
            // read element mMoveables
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mMoveables")) {
                m_mMoveables = boost::in_place();
                try {
                    m_mMoveables->ReadCPACS(tixiHandle, xpath + "/mMoveables");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mMoveables at xpath << " << xpath << ": " << e.what();
                    m_mMoveables = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mMoveables at xpath << " << xpath << ": " << e.getError();
                    m_mMoveables = boost::none;
                }
            }
            
        }
        
        void CPACSMComponentSegment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mPylonAttachments
            if (m_mPylonAttachments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mPylonAttachments");
                m_mPylonAttachments->WriteCPACS(tixiHandle, xpath + "/mPylonAttachments");
            }
            
            // write element mLandingGearSupports
            if (m_mLandingGearSupports) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mLandingGearSupports");
                m_mLandingGearSupports->WriteCPACS(tixiHandle, xpath + "/mLandingGearSupports");
            }
            
            // write element mMiscellaneous
            if (m_mMiscellaneous) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mMiscellaneous");
                m_mMiscellaneous->WriteCPACS(tixiHandle, xpath + "/mMiscellaneous");
            }
            
            // write element mWingBox
            if (m_mWingBox) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mWingBox");
                m_mWingBox->WriteCPACS(tixiHandle, xpath + "/mWingBox");
            }
            
            // write element mMoveables
            if (m_mMoveables) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mMoveables");
                m_mMoveables->WriteCPACS(tixiHandle, xpath + "/mMoveables");
            }
            
        }
        
        const CPACSGenericMass& CPACSMComponentSegment::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMComponentSegment::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMComponentSegment::HasMPylonAttachments() const
        {
            return static_cast<bool>(m_mPylonAttachments);
        }
        
        const CPACSMPylonAttachments& CPACSMComponentSegment::GetMPylonAttachments() const
        {
            return *m_mPylonAttachments;
        }
        
        CPACSMPylonAttachments& CPACSMComponentSegment::GetMPylonAttachments()
        {
            return *m_mPylonAttachments;
        }
        
        bool CPACSMComponentSegment::HasMLandingGearSupports() const
        {
            return static_cast<bool>(m_mLandingGearSupports);
        }
        
        const CPACSMLandingGearSupports& CPACSMComponentSegment::GetMLandingGearSupports() const
        {
            return *m_mLandingGearSupports;
        }
        
        CPACSMLandingGearSupports& CPACSMComponentSegment::GetMLandingGearSupports()
        {
            return *m_mLandingGearSupports;
        }
        
        bool CPACSMComponentSegment::HasMMiscellaneous() const
        {
            return static_cast<bool>(m_mMiscellaneous);
        }
        
        const CPACSMMiscellaneous& CPACSMComponentSegment::GetMMiscellaneous() const
        {
            return *m_mMiscellaneous;
        }
        
        CPACSMMiscellaneous& CPACSMComponentSegment::GetMMiscellaneous()
        {
            return *m_mMiscellaneous;
        }
        
        bool CPACSMComponentSegment::HasMWingBox() const
        {
            return static_cast<bool>(m_mWingBox);
        }
        
        const CPACSMWingBox& CPACSMComponentSegment::GetMWingBox() const
        {
            return *m_mWingBox;
        }
        
        CPACSMWingBox& CPACSMComponentSegment::GetMWingBox()
        {
            return *m_mWingBox;
        }
        
        bool CPACSMComponentSegment::HasMMoveables() const
        {
            return static_cast<bool>(m_mMoveables);
        }
        
        const CPACSMMoveables& CPACSMComponentSegment::GetMMoveables() const
        {
            return *m_mMoveables;
        }
        
        CPACSMMoveables& CPACSMComponentSegment::GetMMoveables()
        {
            return *m_mMoveables;
        }
        
    }
}
