// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseTranslationAcceleration.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseTranslationAcceleration::CPACSLoadCaseTranslationAcceleration(){}
        CPACSLoadCaseTranslationAcceleration::~CPACSLoadCaseTranslationAcceleration() {}
        
        void CPACSLoadCaseTranslationAcceleration::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element uDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/uDot")) {
                m_uDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/uDot");
            }
            
            // read element vDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vDot")) {
                m_vDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vDot");
            }
            
            // read element wDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wDot")) {
                m_wDot_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/wDot");
            }
            
            // read element xDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xDotDot")) {
                m_xDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xDotDot");
            }
            
            // read element yDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yDotDot")) {
                m_yDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/yDotDot");
            }
            
            // read element zDotDot
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/zDotDot")) {
                m_zDotDot_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/zDotDot");
            }
            
        }
        
        void CPACSLoadCaseTranslationAcceleration::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element uDot
            if (m_uDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/uDot", *m_uDot_choice1);
            }
            
            // write element vDot
            if (m_vDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vDot", *m_vDot_choice1);
            }
            
            // write element wDot
            if (m_wDot_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/wDot", *m_wDot_choice1);
            }
            
            // write element xDotDot
            if (m_xDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/xDotDot", *m_xDotDot_choice2);
            }
            
            // write element yDotDot
            if (m_yDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/yDotDot", *m_yDotDot_choice2);
            }
            
            // write element zDotDot
            if (m_zDotDot_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/zDotDot");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/zDotDot", *m_zDotDot_choice2);
            }
            
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasUDot_choice1() const
        {
            return static_cast<bool>(m_uDot_choice1);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetUDot_choice1() const
        {
            return *m_uDot_choice1;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetUDot_choice1(const double& value)
        {
            m_uDot_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasVDot_choice1() const
        {
            return static_cast<bool>(m_vDot_choice1);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetVDot_choice1() const
        {
            return *m_vDot_choice1;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetVDot_choice1(const double& value)
        {
            m_vDot_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasWDot_choice1() const
        {
            return static_cast<bool>(m_wDot_choice1);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetWDot_choice1() const
        {
            return *m_wDot_choice1;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetWDot_choice1(const double& value)
        {
            m_wDot_choice1 = value;
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasXDotDot_choice2() const
        {
            return static_cast<bool>(m_xDotDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetXDotDot_choice2() const
        {
            return *m_xDotDot_choice2;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetXDotDot_choice2(const double& value)
        {
            m_xDotDot_choice2 = value;
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasYDotDot_choice2() const
        {
            return static_cast<bool>(m_yDotDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetYDotDot_choice2() const
        {
            return *m_yDotDot_choice2;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetYDotDot_choice2(const double& value)
        {
            m_yDotDot_choice2 = value;
        }
        
        bool CPACSLoadCaseTranslationAcceleration::HasZDotDot_choice2() const
        {
            return static_cast<bool>(m_zDotDot_choice2);
        }
        
        const double& CPACSLoadCaseTranslationAcceleration::GetZDotDot_choice2() const
        {
            return *m_zDotDot_choice2;
        }
        
        void CPACSLoadCaseTranslationAcceleration::SetZDotDot_choice2(const double& value)
        {
            m_zDotDot_choice2 = value;
        }
        
    }
}
