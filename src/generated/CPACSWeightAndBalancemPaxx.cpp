// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWeightAndBalancemPaxx.h"

namespace tigl
{
    namespace generated
    {
        CPACSWeightAndBalancemPaxx::CPACSWeightAndBalancemPaxx(){}
        CPACSWeightAndBalancemPaxx::~CPACSWeightAndBalancemPaxx() {}
        
        void CPACSWeightAndBalancemPaxx::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                m_mass.ReadCPACS(tixiHandle, xpath + "/mass");
            }
            else {
                LOG(ERROR) << "Required element mass is missing";
            }
            
            // read element coG
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/coG")) {
                m_coG.ReadCPACS(tixiHandle, xpath + "/coG");
            }
            else {
                LOG(ERROR) << "Required element coG is missing";
            }
            
            // read element massInertia
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
                m_massInertia.ReadCPACS(tixiHandle, xpath + "/massInertia");
            }
            else {
                LOG(ERROR) << "Required element massInertia is missing";
            }
            
            // read element mPax
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPax")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/mPax", m_mPax);
            }
            
        }
        
        void CPACSWeightAndBalancemPaxx::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element mass
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
            m_mass.WriteCPACS(tixiHandle, xpath + "/mass");
            
            // write element coG
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/coG");
            m_coG.WriteCPACS(tixiHandle, xpath + "/coG");
            
            // write element massInertia
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massInertia");
            m_massInertia.WriteCPACS(tixiHandle, xpath + "/massInertia");
            
            // write element mPax
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/mPax", m_mPax);
            
        }
        
        const CCPACSStringVector& CPACSWeightAndBalancemPaxx::GetMass() const
        {
            return m_mass;
        }
        
        CCPACSStringVector& CPACSWeightAndBalancemPaxx::GetMass()
        {
            return m_mass;
        }
        
        const CCPACSPointListXYZ& CPACSWeightAndBalancemPaxx::GetCoG() const
        {
            return m_coG;
        }
        
        CCPACSPointListXYZ& CPACSWeightAndBalancemPaxx::GetCoG()
        {
            return m_coG;
        }
        
        const CPACSMassInertiaVector& CPACSWeightAndBalancemPaxx::GetMassInertia() const
        {
            return m_massInertia;
        }
        
        CPACSMassInertiaVector& CPACSWeightAndBalancemPaxx::GetMassInertia()
        {
            return m_massInertia;
        }
        
        const std::vector<std::string>& CPACSWeightAndBalancemPaxx::GetMPax() const
        {
            return m_mPax;
        }
        
        void CPACSWeightAndBalancemPaxx::SetMPax(const std::vector<std::string>& value)
        {
            m_mPax = value;
        }
        
    }
}
