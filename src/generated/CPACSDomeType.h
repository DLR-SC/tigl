// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSEllipsoidDome.h"
#include "CPACSIsotensoidDome.h"
#include "CPACSTorisphericalDome.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;
class CCPACSVessel;

namespace generated
{
    // This class is used in:
    // CPACSVessel

    /// @brief Dome Type
    /// 
    /// 
    /// 
    class CPACSDomeType
    {
    public:
        TIGL_EXPORT CPACSDomeType(CCPACSVessel* parent);

        TIGL_EXPORT virtual ~CPACSDomeType();

        TIGL_EXPORT CCPACSVessel* GetParent();

        TIGL_EXPORT const CCPACSVessel* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<CPACSEllipsoidDome>& GetEllipsoid_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSEllipsoidDome>& GetEllipsoid_choice1();

        TIGL_EXPORT virtual const boost::optional<CPACSTorisphericalDome>& GetTorispherical_choice2() const;
        TIGL_EXPORT virtual boost::optional<CPACSTorisphericalDome>& GetTorispherical_choice2();

        TIGL_EXPORT virtual const boost::optional<CPACSIsotensoidDome>& GetIsotensoid_choice3() const;
        TIGL_EXPORT virtual boost::optional<CPACSIsotensoidDome>& GetIsotensoid_choice3();

        TIGL_EXPORT virtual CPACSEllipsoidDome& GetEllipsoid_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEllipsoid_choice1();

        TIGL_EXPORT virtual CPACSTorisphericalDome& GetTorispherical_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveTorispherical_choice2();

        TIGL_EXPORT virtual CPACSIsotensoidDome& GetIsotensoid_choice3(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveIsotensoid_choice3();

    protected:
        CCPACSVessel* m_parent;

        boost::optional<CPACSEllipsoidDome>     m_ellipsoid_choice1;
        boost::optional<CPACSTorisphericalDome> m_torispherical_choice2;
        boost::optional<CPACSIsotensoidDome>    m_isotensoid_choice3;

    private:
        CPACSDomeType(const CPACSDomeType&) = delete;
        CPACSDomeType& operator=(const CPACSDomeType&) = delete;

        CPACSDomeType(CPACSDomeType&&) = delete;
        CPACSDomeType& operator=(CPACSDomeType&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSDomeType = generated::CPACSDomeType;
} // namespace tigl
