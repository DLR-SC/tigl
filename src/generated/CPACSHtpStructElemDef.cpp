// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSHtpStructElemDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSHtpStructElemDef::CPACSHtpStructElemDef(){}
        CPACSHtpStructElemDef::~CPACSHtpStructElemDef() {}
        
        void CPACSHtpStructElemDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element htpCrossbeamsFrontStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpCrossbeamsFrontStructElemUID")) {
                m_htpCrossbeamsFrontStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpCrossbeamsFrontStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpCrossbeamsFrontStructElemUID is missing";
            }
            
            // read element htpCrossbeamsRearStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpCrossbeamsRearStructElemUID")) {
                m_htpCrossbeamsRearStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpCrossbeamsRearStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpCrossbeamsRearStructElemUID is missing";
            }
            
            // read element htpDiagonalBeamsStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpDiagonalBeamsStructElemUID")) {
                m_htpDiagonalBeamsStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpDiagonalBeamsStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpDiagonalBeamsStructElemUID is missing";
            }
            
            // read element htpSideBeamsStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpSideBeamsStructElemUID")) {
                m_htpSideBeamsStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpSideBeamsStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpSideBeamsStructElemUID is missing";
            }
            
            // read element htpCutoutReinfUpperStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpCutoutReinfUpperStructElemUID")) {
                m_htpCutoutReinfUpperStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpCutoutReinfUpperStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpCutoutReinfUpperStructElemUID is missing";
            }
            
            // read element htpCutoutReinfLowerStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpCutoutReinfLowerStructElemUID")) {
                m_htpCutoutReinfLowerStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpCutoutReinfLowerStructElemUID");
            }
            
        }
        
        void CPACSHtpStructElemDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element htpCrossbeamsFrontStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpCrossbeamsFrontStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpCrossbeamsFrontStructElemUID", m_htpCrossbeamsFrontStructElemUID);
            
            // write element htpCrossbeamsRearStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpCrossbeamsRearStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpCrossbeamsRearStructElemUID", m_htpCrossbeamsRearStructElemUID);
            
            // write element htpDiagonalBeamsStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpDiagonalBeamsStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpDiagonalBeamsStructElemUID", m_htpDiagonalBeamsStructElemUID);
            
            // write element htpSideBeamsStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpSideBeamsStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpSideBeamsStructElemUID", m_htpSideBeamsStructElemUID);
            
            // write element htpCutoutReinfUpperStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpCutoutReinfUpperStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpCutoutReinfUpperStructElemUID", m_htpCutoutReinfUpperStructElemUID);
            
            // write element htpCutoutReinfLowerStructElemUID
            if (m_htpCutoutReinfLowerStructElemUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpCutoutReinfLowerStructElemUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpCutoutReinfLowerStructElemUID", *m_htpCutoutReinfLowerStructElemUID);
            }
            
        }
        
        bool CPACSHtpStructElemDef::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSHtpStructElemDef::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSHtpStructElemDef::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpCrossbeamsFrontStructElemUID() const
        {
            return m_htpCrossbeamsFrontStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpCrossbeamsFrontStructElemUID(const std::string& value)
        {
            m_htpCrossbeamsFrontStructElemUID = value;
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpCrossbeamsRearStructElemUID() const
        {
            return m_htpCrossbeamsRearStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpCrossbeamsRearStructElemUID(const std::string& value)
        {
            m_htpCrossbeamsRearStructElemUID = value;
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpDiagonalBeamsStructElemUID() const
        {
            return m_htpDiagonalBeamsStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpDiagonalBeamsStructElemUID(const std::string& value)
        {
            m_htpDiagonalBeamsStructElemUID = value;
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpSideBeamsStructElemUID() const
        {
            return m_htpSideBeamsStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpSideBeamsStructElemUID(const std::string& value)
        {
            m_htpSideBeamsStructElemUID = value;
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpCutoutReinfUpperStructElemUID() const
        {
            return m_htpCutoutReinfUpperStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpCutoutReinfUpperStructElemUID(const std::string& value)
        {
            m_htpCutoutReinfUpperStructElemUID = value;
        }
        
        bool CPACSHtpStructElemDef::HasHtpCutoutReinfLowerStructElemUID() const
        {
            return static_cast<bool>(m_htpCutoutReinfLowerStructElemUID);
        }
        
        const std::string& CPACSHtpStructElemDef::GetHtpCutoutReinfLowerStructElemUID() const
        {
            return *m_htpCutoutReinfLowerStructElemUID;
        }
        
        void CPACSHtpStructElemDef::SetHtpCutoutReinfLowerStructElemUID(const std::string& value)
        {
            m_htpCutoutReinfLowerStructElemUID = value;
        }
        
    }
}
