// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSTrackJointCoordinates.h"
#include "CPACSTrackJointPosition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTrackJointCoordinates::CPACSTrackJointCoordinates(CPACSTrackJointPosition* parent)
        : m_x(0)
        , m_z(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTrackJointCoordinates::~CPACSTrackJointCoordinates()
    {
    }

    const CPACSTrackJointPosition* CPACSTrackJointCoordinates::GetParent() const
    {
        return m_parent;
    }

    CPACSTrackJointPosition* CPACSTrackJointCoordinates::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTrackJointCoordinates::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTrackJointCoordinates::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTrackJointCoordinates::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = stringToCPACSTrackJointCoordinates_name(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name"));
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element x
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/x")) {
            m_x = tixi::TixiGetElement<double>(tixiHandle, xpath + "/x");
        }
        else {
            LOG(ERROR) << "Required element x is missing at xpath " << xpath;
        }

        // read element dy
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/dy")) {
            m_dy = tixi::TixiGetElement<double>(tixiHandle, xpath + "/dy");
        }

        // read element z
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/z")) {
            m_z = tixi::TixiGetElement<double>(tixiHandle, xpath + "/z");
        }
        else {
            LOG(ERROR) << "Required element z is missing at xpath " << xpath;
        }

    }

    void CPACSTrackJointCoordinates::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element name
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", CPACSTrackJointCoordinates_nameToString(m_name));

        // write element x
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/x");
        tixi::TixiSaveElement(tixiHandle, xpath + "/x", m_x);

        // write element dy
        if (m_dy) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dy");
            tixi::TixiSaveElement(tixiHandle, xpath + "/dy", *m_dy);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/dy")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/dy");
            }
        }

        // write element z
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z");
        tixi::TixiSaveElement(tixiHandle, xpath + "/z", m_z);

    }

    const CPACSTrackJointCoordinates_name& CPACSTrackJointCoordinates::GetName() const
    {
        return m_name;
    }

    void CPACSTrackJointCoordinates::SetName(const CPACSTrackJointCoordinates_name& value)
    {
        m_name = value;
    }

    const double& CPACSTrackJointCoordinates::GetX() const
    {
        return m_x;
    }

    void CPACSTrackJointCoordinates::SetX(const double& value)
    {
        m_x = value;
    }

    const boost::optional<double>& CPACSTrackJointCoordinates::GetDy() const
    {
        return m_dy;
    }

    void CPACSTrackJointCoordinates::SetDy(const boost::optional<double>& value)
    {
        m_dy = value;
    }

    const double& CPACSTrackJointCoordinates::GetZ() const
    {
        return m_z;
    }

    void CPACSTrackJointCoordinates::SetZ(const double& value)
    {
        m_z = value;
    }

} // namespace generated
} // namespace tigl
