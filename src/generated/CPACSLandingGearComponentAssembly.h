// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSAxle.h"
#include "CPACSBogie.h"
#include "CPACSMainActuator.h"
#include "CPACSPintleStruts.h"
#include "CPACSPiston.h"
#include "CPACSSideStruts.h"
#include "CPACSStrut.h"
#include "CPACSStrutAssembly.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSLandingGearBase;

    // This class is used in:
    // CPACSLandingGearBase

    /// @brief Assembly of landing gear components
    /// 
    /// Describes an assembly of the various landing gear components
    /// @see landingGearsComponents
    /// 
    class CPACSLandingGearComponentAssembly
    {
    public:
        TIGL_EXPORT CPACSLandingGearComponentAssembly(CPACSLandingGearBase* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSLandingGearComponentAssembly();

        TIGL_EXPORT CPACSLandingGearBase* GetParent();

        TIGL_EXPORT const CPACSLandingGearBase* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const CPACSStrut& GetMainStrut() const;
        TIGL_EXPORT virtual CPACSStrut& GetMainStrut();

        TIGL_EXPORT virtual const CPACSPiston& GetPiston() const;
        TIGL_EXPORT virtual CPACSPiston& GetPiston();

        TIGL_EXPORT virtual const boost::optional<CPACSAxle>& GetAxle_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSAxle>& GetAxle_choice1();

        TIGL_EXPORT virtual const boost::optional<CPACSBogie>& GetBogie_choice2() const;
        TIGL_EXPORT virtual boost::optional<CPACSBogie>& GetBogie_choice2();

        TIGL_EXPORT virtual const boost::optional<CPACSStrutAssembly>& GetDragStrut() const;
        TIGL_EXPORT virtual boost::optional<CPACSStrutAssembly>& GetDragStrut();

        TIGL_EXPORT virtual const boost::optional<CPACSPintleStruts>& GetPintleStruts() const;
        TIGL_EXPORT virtual boost::optional<CPACSPintleStruts>& GetPintleStruts();

        TIGL_EXPORT virtual const boost::optional<CPACSSideStruts>& GetSideStruts() const;
        TIGL_EXPORT virtual boost::optional<CPACSSideStruts>& GetSideStruts();

        TIGL_EXPORT virtual const boost::optional<CPACSMainActuator>& GetMainActuator() const;
        TIGL_EXPORT virtual boost::optional<CPACSMainActuator>& GetMainActuator();

        TIGL_EXPORT virtual CPACSAxle& GetAxle_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAxle_choice1();

        TIGL_EXPORT virtual CPACSBogie& GetBogie_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveBogie_choice2();

        TIGL_EXPORT virtual CPACSStrutAssembly& GetDragStrut(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveDragStrut();

        TIGL_EXPORT virtual CPACSPintleStruts& GetPintleStruts(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemovePintleStruts();

        TIGL_EXPORT virtual CPACSSideStruts& GetSideStruts(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSideStruts();

        TIGL_EXPORT virtual CPACSMainActuator& GetMainActuator(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveMainActuator();

    protected:
        CPACSLandingGearBase* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Main strut
        CPACSStrut                          m_mainStrut;

        CPACSPiston                         m_piston;

        boost::optional<CPACSAxle>          m_axle_choice1;

        boost::optional<CPACSBogie>         m_bogie_choice2;

        /// Drag strut (Assumption: one end of the strut will connect to the main strut and the other end will be given as endPoint)
        boost::optional<CPACSStrutAssembly> m_dragStrut;

        boost::optional<CPACSPintleStruts>  m_pintleStruts;

        boost::optional<CPACSSideStruts>    m_sideStruts;

        boost::optional<CPACSMainActuator>  m_mainActuator;

    private:
        CPACSLandingGearComponentAssembly(const CPACSLandingGearComponentAssembly&) = delete;
        CPACSLandingGearComponentAssembly& operator=(const CPACSLandingGearComponentAssembly&) = delete;

        CPACSLandingGearComponentAssembly(CPACSLandingGearComponentAssembly&&) = delete;
        CPACSLandingGearComponentAssembly& operator=(CPACSLandingGearComponentAssembly&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSLandingGearComponentAssembly = generated::CPACSLandingGearComponentAssembly;
using CCPACSLandingGearBase = generated::CPACSLandingGearBase;
} // namespace tigl
