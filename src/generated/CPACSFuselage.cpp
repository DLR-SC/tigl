// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSFuselages.h"
#include "CPACSFuselage.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSFuselage::CPACSFuselage(CCPACSFuselages* parent, CTiglUIDManager* uidMgr) :
            m_uidMgr(uidMgr), 
            m_transformation(m_uidMgr), 
            m_sections(m_uidMgr), 
            m_positionings(m_uidMgr), 
            m_segments(reinterpret_cast<CCPACSFuselage*>(this), m_uidMgr)
        {
            //assert(parent != NULL);
            m_parent = parent;
        }
        
        CPACSFuselage::~CPACSFuselage()
        {
            if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        }
        
        CCPACSFuselages* CPACSFuselage::GetParent() const
        {
            return m_parent;
        }
        
        CTiglUIDManager& CPACSFuselage::GetUIDManager()
        {
            return *m_uidMgr;
        }
        
        const CTiglUIDManager& CPACSFuselage::GetUIDManager() const
        {
            return *m_uidMgr;
        }
        
        void CPACSFuselage::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
            }
            
            // read attribute symmetry
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                m_symmetry = stringToTiglSymmetryAxis(tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "symmetry"));
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing at xpath " << xpath;
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element parentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                m_parentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            }
            
            // read element transformation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
                m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
            }
            else {
                LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
            }
            
            // read element sections
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sections")) {
                m_sections.ReadCPACS(tixiHandle, xpath + "/sections");
            }
            else {
                LOG(ERROR) << "Required element sections is missing at xpath " << xpath;
            }
            
            // read element positionings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionings")) {
                m_positionings.ReadCPACS(tixiHandle, xpath + "/positionings");
            }
            else {
                LOG(ERROR) << "Required element positionings is missing at xpath " << xpath;
            }
            
            // read element segments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/segments")) {
                m_segments.ReadCPACS(tixiHandle, xpath + "/segments");
            }
            else {
                LOG(ERROR) << "Required element segments is missing at xpath " << xpath;
            }
            
            // read element cutOuts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutOuts")) {
                m_cutOuts = boost::in_place(m_uidMgr);
                try {
                    m_cutOuts->ReadCPACS(tixiHandle, xpath + "/cutOuts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cutOuts at xpath " << xpath << ": " << e.what();
                    m_cutOuts = boost::none;
                }
            }
            
            if (m_uidMgr) m_uidMgr->RegisterObject(m_uID, *this);
        }
        
        void CPACSFuselage::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write attribute symmetry
            if (m_symmetry) {
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "symmetry", TiglSymmetryAxisToString(*m_symmetry));
            } else {
                if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                    tixihelper::TixiRemoveAttribute(tixiHandle, xpath, "symmetry");
                }
            }
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            } else {
                if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                    tixihelper::TixiRemoveElement(tixiHandle, xpath + "/description");
                }
            }
            
            // write element parentUID
            if (m_parentUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/parentUID", *m_parentUID);
            } else {
                if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                    tixihelper::TixiRemoveElement(tixiHandle, xpath + "/parentUID");
                }
            }
            
            // write element transformation
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
            m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");
            
            // write element sections
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
            m_sections.WriteCPACS(tixiHandle, xpath + "/sections");
            
            // write element positionings
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionings");
            m_positionings.WriteCPACS(tixiHandle, xpath + "/positionings");
            
            // write element segments
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segments");
            m_segments.WriteCPACS(tixiHandle, xpath + "/segments");
            
            // write element cutOuts
            if (m_cutOuts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutOuts");
                m_cutOuts->WriteCPACS(tixiHandle, xpath + "/cutOuts");
            } else {
                if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutOuts")) {
                    tixihelper::TixiRemoveElement(tixiHandle, xpath + "/cutOuts");
                }
            }
            
        }
        
        const std::string& CPACSFuselage::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSFuselage::SetUID(const std::string& value)
        {
            if (m_uidMgr) {
                m_uidMgr->TryUnregisterObject(m_uID);
                m_uidMgr->RegisterObject(value, *this);
            }
            m_uID = value;
        }
        
        const boost::optional<TiglSymmetryAxis>& CPACSFuselage::GetSymmetry() const
        {
            return m_symmetry;
        }
        
        void CPACSFuselage::SetSymmetry(const TiglSymmetryAxis& value)
        {
            m_symmetry = value;
        }
        
        void CPACSFuselage::SetSymmetry(const boost::optional<TiglSymmetryAxis>& value)
        {
            m_symmetry = value;
        }
        
        const std::string& CPACSFuselage::GetName() const
        {
            return m_name;
        }
        
        void CPACSFuselage::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        const boost::optional<std::string>& CPACSFuselage::GetDescription() const
        {
            return m_description;
        }
        
        void CPACSFuselage::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        void CPACSFuselage::SetDescription(const boost::optional<std::string>& value)
        {
            m_description = value;
        }
        
        const boost::optional<std::string>& CPACSFuselage::GetParentUID() const
        {
            return m_parentUID;
        }
        
        void CPACSFuselage::SetParentUID(const std::string& value)
        {
            m_parentUID = value;
        }
        
        void CPACSFuselage::SetParentUID(const boost::optional<std::string>& value)
        {
            m_parentUID = value;
        }
        
        const CCPACSTransformation& CPACSFuselage::GetTransformation() const
        {
            return m_transformation;
        }
        
        CCPACSTransformation& CPACSFuselage::GetTransformation()
        {
            return m_transformation;
        }
        
        const CCPACSFuselageSections& CPACSFuselage::GetSections() const
        {
            return m_sections;
        }
        
        CCPACSFuselageSections& CPACSFuselage::GetSections()
        {
            return m_sections;
        }
        
        const CCPACSPositionings& CPACSFuselage::GetPositionings() const
        {
            return m_positionings;
        }
        
        CCPACSPositionings& CPACSFuselage::GetPositionings()
        {
            return m_positionings;
        }
        
        const CCPACSFuselageSegments& CPACSFuselage::GetSegments() const
        {
            return m_segments;
        }
        
        CCPACSFuselageSegments& CPACSFuselage::GetSegments()
        {
            return m_segments;
        }
        
        const boost::optional<CPACSFuselageCutOuts>& CPACSFuselage::GetCutOuts() const
        {
            return m_cutOuts;
        }
        
        boost::optional<CPACSFuselageCutOuts>& CPACSFuselage::GetCutOuts()
        {
            return m_cutOuts;
        }
        
    }
}
