// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCenterFuselageKeelbeam.h"

namespace tigl
{
    namespace generated
    {
        CPACSCenterFuselageKeelbeam::CPACSCenterFuselageKeelbeam(){}
        CPACSCenterFuselageKeelbeam::~CPACSCenterFuselageKeelbeam() {}
        
        void CPACSCenterFuselageKeelbeam::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element sheetElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
                m_sheetElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            }
            else {
                LOG(ERROR) << "Required element sheetElementUID is missing";
            }
            
            // read element keelWidthStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/keelWidthStringerUID")) {
                m_keelWidthStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/keelWidthStringerUID");
            }
            else {
                LOG(ERROR) << "Required element keelWidthStringerUID is missing";
            }
            
            // read element keelHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/keelHeightStringerUID")) {
                m_keelHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/keelHeightStringerUID");
            }
            else {
                LOG(ERROR) << "Required element keelHeightStringerUID is missing";
            }
            
            // read element hFwdConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdConLengthFrameUID")) {
                m_hFwdConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdConLengthFrameUID");
            }
            else {
                LOG(ERROR) << "Required element hFwdConLengthFrameUID is missing";
            }
            
            // read element hFwdConHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdConHeightStringerUID")) {
                m_hFwdConHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdConHeightStringerUID");
            }
            else {
                LOG(ERROR) << "Required element hFwdConHeightStringerUID is missing";
            }
            
            // read element hRearConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearConLengthFrameUID")) {
                m_hRearConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearConLengthFrameUID");
            }
            else {
                LOG(ERROR) << "Required element hRearConLengthFrameUID is missing";
            }
            
            // read element hRearConHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearConHeightStringerUID")) {
                m_hRearConHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearConHeightStringerUID");
            }
            else {
                LOG(ERROR) << "Required element hRearConHeightStringerUID is missing";
            }
            
            // read element vFwdConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vFwdConLengthFrameUID")) {
                m_vFwdConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vFwdConLengthFrameUID");
            }
            else {
                LOG(ERROR) << "Required element vFwdConLengthFrameUID is missing";
            }
            
            // read element vRearConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vRearConLengthFrameUID")) {
                m_vRearConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vRearConLengthFrameUID");
            }
            else {
                LOG(ERROR) << "Required element vRearConLengthFrameUID is missing";
            }
            
            // read element startCwbConFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startCwbConFrameUID")) {
                m_startCwbConFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startCwbConFrameUID");
            }
            else {
                LOG(ERROR) << "Required element startCwbConFrameUID is missing";
            }
            
            // read element endCwbConFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endCwbConFrameUID")) {
                m_endCwbConFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endCwbConFrameUID");
            }
            else {
                LOG(ERROR) << "Required element endCwbConFrameUID is missing";
            }
            
            // read element hFwdReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdReinfocementElementUID")) {
                m_hFwdReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdReinfocementElementUID");
            }
            else {
                LOG(ERROR) << "Required element hFwdReinfocementElementUID is missing";
            }
            
            // read element hRearReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearReinfocementElementUID")) {
                m_hRearReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearReinfocementElementUID");
            }
            else {
                LOG(ERROR) << "Required element hRearReinfocementElementUID is missing";
            }
            
            // read element vFwdReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vFwdReinfocementElementUID")) {
                m_vFwdReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vFwdReinfocementElementUID");
            }
            else {
                LOG(ERROR) << "Required element vFwdReinfocementElementUID is missing";
            }
            
            // read element vRearReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vRearReinfocementElementUID")) {
                m_vRearReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vRearReinfocementElementUID");
            }
            else {
                LOG(ERROR) << "Required element vRearReinfocementElementUID is missing";
            }
            
            // read element cwbConReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cwbConReinfocementElementUID")) {
                m_cwbConReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/cwbConReinfocementElementUID");
            }
            else {
                LOG(ERROR) << "Required element cwbConReinfocementElementUID is missing";
            }
            
        }
        
        void CPACSCenterFuselageKeelbeam::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element sheetElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);
            
            // write element keelWidthStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/keelWidthStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/keelWidthStringerUID", m_keelWidthStringerUID);
            
            // write element keelHeightStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/keelHeightStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/keelHeightStringerUID", m_keelHeightStringerUID);
            
            // write element hFwdConLengthFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdConLengthFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdConLengthFrameUID", m_hFwdConLengthFrameUID);
            
            // write element hFwdConHeightStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdConHeightStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdConHeightStringerUID", m_hFwdConHeightStringerUID);
            
            // write element hRearConLengthFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearConLengthFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearConLengthFrameUID", m_hRearConLengthFrameUID);
            
            // write element hRearConHeightStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearConHeightStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearConHeightStringerUID", m_hRearConHeightStringerUID);
            
            // write element vFwdConLengthFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vFwdConLengthFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vFwdConLengthFrameUID", m_vFwdConLengthFrameUID);
            
            // write element vRearConLengthFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vRearConLengthFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vRearConLengthFrameUID", m_vRearConLengthFrameUID);
            
            // write element startCwbConFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startCwbConFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startCwbConFrameUID", m_startCwbConFrameUID);
            
            // write element endCwbConFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endCwbConFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endCwbConFrameUID", m_endCwbConFrameUID);
            
            // write element hFwdReinfocementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdReinfocementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdReinfocementElementUID", m_hFwdReinfocementElementUID);
            
            // write element hRearReinfocementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearReinfocementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearReinfocementElementUID", m_hRearReinfocementElementUID);
            
            // write element vFwdReinfocementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vFwdReinfocementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vFwdReinfocementElementUID", m_vFwdReinfocementElementUID);
            
            // write element vRearReinfocementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vRearReinfocementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vRearReinfocementElementUID", m_vRearReinfocementElementUID);
            
            // write element cwbConReinfocementElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cwbConReinfocementElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/cwbConReinfocementElementUID", m_cwbConReinfocementElementUID);
            
        }
        
        bool CPACSCenterFuselageKeelbeam::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetSheetElementUID() const
        {
            return m_sheetElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetSheetElementUID(const std::string& value)
        {
            m_sheetElementUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetKeelWidthStringerUID() const
        {
            return m_keelWidthStringerUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetKeelWidthStringerUID(const std::string& value)
        {
            m_keelWidthStringerUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetKeelHeightStringerUID() const
        {
            return m_keelHeightStringerUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetKeelHeightStringerUID(const std::string& value)
        {
            m_keelHeightStringerUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHFwdConLengthFrameUID() const
        {
            return m_hFwdConLengthFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHFwdConLengthFrameUID(const std::string& value)
        {
            m_hFwdConLengthFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHFwdConHeightStringerUID() const
        {
            return m_hFwdConHeightStringerUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHFwdConHeightStringerUID(const std::string& value)
        {
            m_hFwdConHeightStringerUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHRearConLengthFrameUID() const
        {
            return m_hRearConLengthFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHRearConLengthFrameUID(const std::string& value)
        {
            m_hRearConLengthFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHRearConHeightStringerUID() const
        {
            return m_hRearConHeightStringerUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHRearConHeightStringerUID(const std::string& value)
        {
            m_hRearConHeightStringerUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetVFwdConLengthFrameUID() const
        {
            return m_vFwdConLengthFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetVFwdConLengthFrameUID(const std::string& value)
        {
            m_vFwdConLengthFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetVRearConLengthFrameUID() const
        {
            return m_vRearConLengthFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetVRearConLengthFrameUID(const std::string& value)
        {
            m_vRearConLengthFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetStartCwbConFrameUID() const
        {
            return m_startCwbConFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetStartCwbConFrameUID(const std::string& value)
        {
            m_startCwbConFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetEndCwbConFrameUID() const
        {
            return m_endCwbConFrameUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetEndCwbConFrameUID(const std::string& value)
        {
            m_endCwbConFrameUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHFwdReinfocementElementUID() const
        {
            return m_hFwdReinfocementElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHFwdReinfocementElementUID(const std::string& value)
        {
            m_hFwdReinfocementElementUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetHRearReinfocementElementUID() const
        {
            return m_hRearReinfocementElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetHRearReinfocementElementUID(const std::string& value)
        {
            m_hRearReinfocementElementUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetVFwdReinfocementElementUID() const
        {
            return m_vFwdReinfocementElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetVFwdReinfocementElementUID(const std::string& value)
        {
            m_vFwdReinfocementElementUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetVRearReinfocementElementUID() const
        {
            return m_vRearReinfocementElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetVRearReinfocementElementUID(const std::string& value)
        {
            m_vRearReinfocementElementUID = value;
        }
        
        const std::string& CPACSCenterFuselageKeelbeam::GetCwbConReinfocementElementUID() const
        {
            return m_cwbConReinfocementElementUID;
        }
        
        void CPACSCenterFuselageKeelbeam::SetCwbConReinfocementElementUID(const std::string& value)
        {
            m_cwbConReinfocementElementUID = value;
        }
        
    }
}
