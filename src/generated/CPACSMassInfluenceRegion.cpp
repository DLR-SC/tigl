// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSMassInfluenceRegion_structuralComponent.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMassInfluenceRegion.h"

namespace tigl
{
    namespace generated
    {
        CPACSMassInfluenceRegion::CPACSMassInfluenceRegion(){}
        CPACSMassInfluenceRegion::~CPACSMassInfluenceRegion() {}
        
        void CPACSMassInfluenceRegion::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element structuralComponent
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralComponent")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralComponent", m_structuralComponent);
            }
            
            // read element massInfluenceRadius
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massInfluenceRadius")) {
                m_massInfluenceRadius_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/massInfluenceRadius");
            }
            
            // read element delta_x1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_x1")) {
                m_delta_x1_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_x1");
            }
            
            // read element delta_x2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_x2")) {
                m_delta_x2_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_x2");
            }
            
            // read element delta_y1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_y1")) {
                m_delta_y1_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_y1");
            }
            
            // read element delta_y2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_y2")) {
                m_delta_y2_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_y2");
            }
            
            // read element delta_z1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_z1")) {
                m_delta_z1_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_z1");
            }
            
            // read element delta_z2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/delta_z2")) {
                m_delta_z2_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/delta_z2");
            }
            
        }
        
        void CPACSMassInfluenceRegion::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element structuralComponent
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralComponent", m_structuralComponent);
            
            // write element massInfluenceRadius
            if (m_massInfluenceRadius_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massInfluenceRadius");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/massInfluenceRadius", *m_massInfluenceRadius_choice1);
            }
            
            // write element delta_x1
            if (m_delta_x1_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_x1");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_x1", *m_delta_x1_choice2);
            }
            
            // write element delta_x2
            if (m_delta_x2_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_x2");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_x2", *m_delta_x2_choice2);
            }
            
            // write element delta_y1
            if (m_delta_y1_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_y1");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_y1", *m_delta_y1_choice2);
            }
            
            // write element delta_y2
            if (m_delta_y2_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_y2");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_y2", *m_delta_y2_choice2);
            }
            
            // write element delta_z1
            if (m_delta_z1_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_z1");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_z1", *m_delta_z1_choice2);
            }
            
            // write element delta_z2
            if (m_delta_z2_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/delta_z2");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/delta_z2", *m_delta_z2_choice2);
            }
            
        }
        
        const std::vector<unique_ptr<CPACSMassInfluenceRegion_structuralComponent>>& CPACSMassInfluenceRegion::GetStructuralComponent() const
        {
            return m_structuralComponent;
        }
        
        std::vector<unique_ptr<CPACSMassInfluenceRegion_structuralComponent>>& CPACSMassInfluenceRegion::GetStructuralComponent()
        {
            return m_structuralComponent;
        }
        
        bool CPACSMassInfluenceRegion::HasMassInfluenceRadius_choice1() const
        {
            return static_cast<bool>(m_massInfluenceRadius_choice1);
        }
        
        const double& CPACSMassInfluenceRegion::GetMassInfluenceRadius_choice1() const
        {
            return *m_massInfluenceRadius_choice1;
        }
        
        void CPACSMassInfluenceRegion::SetMassInfluenceRadius_choice1(const double& value)
        {
            m_massInfluenceRadius_choice1 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_x1_choice2() const
        {
            return static_cast<bool>(m_delta_x1_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_x1_choice2() const
        {
            return *m_delta_x1_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_x1_choice2(const double& value)
        {
            m_delta_x1_choice2 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_x2_choice2() const
        {
            return static_cast<bool>(m_delta_x2_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_x2_choice2() const
        {
            return *m_delta_x2_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_x2_choice2(const double& value)
        {
            m_delta_x2_choice2 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_y1_choice2() const
        {
            return static_cast<bool>(m_delta_y1_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_y1_choice2() const
        {
            return *m_delta_y1_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_y1_choice2(const double& value)
        {
            m_delta_y1_choice2 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_y2_choice2() const
        {
            return static_cast<bool>(m_delta_y2_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_y2_choice2() const
        {
            return *m_delta_y2_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_y2_choice2(const double& value)
        {
            m_delta_y2_choice2 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_z1_choice2() const
        {
            return static_cast<bool>(m_delta_z1_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_z1_choice2() const
        {
            return *m_delta_z1_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_z1_choice2(const double& value)
        {
            m_delta_z1_choice2 = value;
        }
        
        bool CPACSMassInfluenceRegion::HasDelta_z2_choice2() const
        {
            return static_cast<bool>(m_delta_z2_choice2);
        }
        
        const double& CPACSMassInfluenceRegion::GetDelta_z2_choice2() const
        {
            return *m_delta_z2_choice2;
        }
        
        void CPACSMassInfluenceRegion::SetDelta_z2_choice2(const double& value)
        {
            m_delta_z2_choice2 = value;
        }
        
    }
}
