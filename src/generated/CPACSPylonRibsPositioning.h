// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSPointY.h"
#include "CPACSPylonRibsPositioning_ribCrossingBehaviour.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSPylonRibsDefinition
        
        // generated from /xsd:schema/xsd:complexType[716]
        class CPACSPylonRibsPositioning
        {
        public:
            TIGL_EXPORT CPACSPylonRibsPositioning();
            TIGL_EXPORT virtual ~CPACSPylonRibsPositioning();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetRelDepthStart() const;
            TIGL_EXPORT void SetRelDepthStart(const double& value);
            
            TIGL_EXPORT const double& GetRelDepthEnd() const;
            TIGL_EXPORT void SetRelDepthEnd(const double& value);
            
            TIGL_EXPORT bool HasRibRotation() const;
            TIGL_EXPORT const CPACSPointY& GetRibRotation() const;
            TIGL_EXPORT CPACSPointY& GetRibRotation();
            
            TIGL_EXPORT const CPACSPylonRibsPositioning_ribCrossingBehaviour& GetRibCrossingBehaviour() const;
            TIGL_EXPORT CPACSPylonRibsPositioning_ribCrossingBehaviour& GetRibCrossingBehaviour();
            
            TIGL_EXPORT bool HasSpacing_choice1() const;
            TIGL_EXPORT const double& GetSpacing_choice1() const;
            TIGL_EXPORT void SetSpacing_choice1(const double& value);
            
            TIGL_EXPORT bool HasNumberOfRibs_choice2() const;
            TIGL_EXPORT const int& GetNumberOfRibs_choice2() const;
            TIGL_EXPORT void SetNumberOfRibs_choice2(const int& value);
            
        protected:
            double                                         m_relDepthStart;
            double                                         m_relDepthEnd;
            boost::optional<CPACSPointY>                   m_ribRotation;
            CPACSPylonRibsPositioning_ribCrossingBehaviour m_ribCrossingBehaviour;
            boost::optional<double>                        m_spacing_choice1;
            boost::optional<int>                           m_numberOfRibs_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSPylonRibsPositioning(const CPACSPylonRibsPositioning&) = delete;
            CPACSPylonRibsPositioning& operator=(const CPACSPylonRibsPositioning&) = delete;
            
            CPACSPylonRibsPositioning(CPACSPylonRibsPositioning&&) = delete;
            CPACSPylonRibsPositioning& operator=(CPACSPylonRibsPositioning&&) = delete;
            #else
            CPACSPylonRibsPositioning(const CPACSPylonRibsPositioning&);
            CPACSPylonRibsPositioning& operator=(const CPACSPylonRibsPositioning&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSPylonRibsPositioning = generated::CPACSPylonRibsPositioning;
    #else
    typedef generated::CPACSPylonRibsPositioning CCPACSPylonRibsPositioning;
    #endif
}
