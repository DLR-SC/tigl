// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSPointXYZ.h"
#include "CPACSPointXYZ.h"
#include "CPACSPointXYZ.h"
#include "CPACSPointXYZ.h"
#include "CPACSPointXYZ.h"
#include "CPACSCrashLoadcase_ImpactSurfaceDefinition.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSCrashLoadCases
        
        // generated from /xsd:schema/xsd:complexType[229]
        class CPACSCrashLoadcase
        {
        public:
            TIGL_EXPORT CPACSCrashLoadcase();
            TIGL_EXPORT virtual ~CPACSCrashLoadcase();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT bool HasCrashStartX() const;
            TIGL_EXPORT const double& GetCrashStartX() const;
            TIGL_EXPORT void SetCrashStartX(const double& value);
            
            TIGL_EXPORT bool HasCrashEndX() const;
            TIGL_EXPORT const double& GetCrashEndX() const;
            TIGL_EXPORT void SetCrashEndX(const double& value);
            
            TIGL_EXPORT const CPACSPointXYZ& GetCrashInitialVelocity() const;
            TIGL_EXPORT CPACSPointXYZ& GetCrashInitialVelocity();
            
            TIGL_EXPORT bool HasCrashInitialRotation() const;
            TIGL_EXPORT const CPACSPointXYZ& GetCrashInitialRotation() const;
            TIGL_EXPORT CPACSPointXYZ& GetCrashInitialRotation();
            
            TIGL_EXPORT bool HasCrashInitialRotationalVelocity() const;
            TIGL_EXPORT const CPACSPointXYZ& GetCrashInitialRotationalVelocity() const;
            TIGL_EXPORT CPACSPointXYZ& GetCrashInitialRotationalVelocity();
            
            TIGL_EXPORT bool HasReferencePointForRotation() const;
            TIGL_EXPORT const CPACSPointXYZ& GetReferencePointForRotation() const;
            TIGL_EXPORT CPACSPointXYZ& GetReferencePointForRotation();
            
            TIGL_EXPORT bool HasCrashAccelerationField() const;
            TIGL_EXPORT const CPACSPointXYZ& GetCrashAccelerationField() const;
            TIGL_EXPORT CPACSPointXYZ& GetCrashAccelerationField();
            
            TIGL_EXPORT bool HasImpactSurfaceDefinition() const;
            TIGL_EXPORT const CPACSCrashLoadcase_ImpactSurfaceDefinition& GetImpactSurfaceDefinition() const;
            TIGL_EXPORT CPACSCrashLoadcase_ImpactSurfaceDefinition& GetImpactSurfaceDefinition();
            
        protected:
            boost::optional<std::string>                                m_uID;
            boost::optional<std::string>                                m_name;
            boost::optional<std::string>                                m_description;
            boost::optional<double>                                     m_crashStartX;
            boost::optional<double>                                     m_crashEndX;
            CPACSPointXYZ                                               m_crashInitialVelocity;
            boost::optional<CPACSPointXYZ>                              m_crashInitialRotation;
            boost::optional<CPACSPointXYZ>                              m_crashInitialRotationalVelocity;
            boost::optional<CPACSPointXYZ>                              m_referencePointForRotation;
            boost::optional<CPACSPointXYZ>                              m_crashAccelerationField;
            boost::optional<CPACSCrashLoadcase_ImpactSurfaceDefinition> m_ImpactSurfaceDefinition;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCrashLoadcase(const CPACSCrashLoadcase&) = delete;
            CPACSCrashLoadcase& operator=(const CPACSCrashLoadcase&) = delete;
            
            CPACSCrashLoadcase(CPACSCrashLoadcase&&) = delete;
            CPACSCrashLoadcase& operator=(CPACSCrashLoadcase&&) = delete;
            #else
            CPACSCrashLoadcase(const CPACSCrashLoadcase&);
            CPACSCrashLoadcase& operator=(const CPACSCrashLoadcase&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSCrashLoadcase = generated::CPACSCrashLoadcase;
    #else
    typedef generated::CPACSCrashLoadcase CCPACSCrashLoadcase;
    #endif
}
