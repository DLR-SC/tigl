// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSPointPerformanceDefinition;

    // This class is used in:
    // CPACSPointPerformanceDefinition

    /// @brief Requirements
    /// 
    /// Requirement settings for the point performance definition
    /// 
    class CPACSPointPerformanceRequirements
    {
    public:
        TIGL_EXPORT CPACSPointPerformanceRequirements(CPACSPointPerformanceDefinition* parent);

        TIGL_EXPORT virtual ~CPACSPointPerformanceRequirements();

        TIGL_EXPORT CPACSPointPerformanceDefinition* GetParent();

        TIGL_EXPORT const CPACSPointPerformanceDefinition* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<double>& GetSustainedLoadFactor() const;
        TIGL_EXPORT virtual void SetSustainedLoadFactor(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetInstantaneousLoadFactor() const;
        TIGL_EXPORT virtual void SetInstantaneousLoadFactor(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetSpecificExcessPower() const;
        TIGL_EXPORT virtual void SetSpecificExcessPower(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetRollRate() const;
        TIGL_EXPORT virtual void SetRollRate(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetRollAccelerationOnset() const;
        TIGL_EXPORT virtual void SetRollAccelerationOnset(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetRollAccelerationStop() const;
        TIGL_EXPORT virtual void SetRollAccelerationStop(const boost::optional<double>& value);

    protected:
        CPACSPointPerformanceDefinition* m_parent;

        /// Sustained load factor to be achieved
        boost::optional<double> m_sustainedLoadFactor;

        /// Instantaneous load factor to be achieved
        boost::optional<double> m_instantaneousLoadFactor;

        /// Specific excess power to be achieved [m/s]
        boost::optional<double> m_specificExcessPower;

        /// Roll rate to be achieved [deg/s]
        boost::optional<double> m_rollRate;

        /// Roll acceleration to be achieved upon control onset [deg/s^2]
        boost::optional<double> m_rollAccelerationOnset;

        /// Roll acceleration to be achieved upon control stop [deg/s^2]
        boost::optional<double> m_rollAccelerationStop;

    private:
        CPACSPointPerformanceRequirements(const CPACSPointPerformanceRequirements&) = delete;
        CPACSPointPerformanceRequirements& operator=(const CPACSPointPerformanceRequirements&) = delete;

        CPACSPointPerformanceRequirements(CPACSPointPerformanceRequirements&&) = delete;
        CPACSPointPerformanceRequirements& operator=(CPACSPointPerformanceRequirements&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSPointPerformanceRequirements = generated::CPACSPointPerformanceRequirements;
using CCPACSPointPerformanceDefinition = generated::CPACSPointPerformanceDefinition;
} // namespace tigl
