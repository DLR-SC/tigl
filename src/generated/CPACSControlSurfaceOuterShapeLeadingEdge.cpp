// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSLeadingEdgeDevice.h"
#include "CPACSControlSurfaceOuterShapeLeadingEdge.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceOuterShapeLeadingEdge::CPACSControlSurfaceOuterShapeLeadingEdge(CCPACSLeadingEdgeDevice* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_innerBorder(this, m_uidMgr)
        , m_outerBorder(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceOuterShapeLeadingEdge::~CPACSControlSurfaceOuterShapeLeadingEdge()
    {
    }

    const CCPACSLeadingEdgeDevice* CPACSControlSurfaceOuterShapeLeadingEdge::GetParent() const
    {
        return m_parent;
    }

    CCPACSLeadingEdgeDevice* CPACSControlSurfaceOuterShapeLeadingEdge::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSControlSurfaceOuterShapeLeadingEdge::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSControlSurfaceOuterShapeLeadingEdge::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSControlSurfaceOuterShapeLeadingEdge::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfaceOuterShapeLeadingEdge::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSControlSurfaceOuterShapeLeadingEdge::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element innerBorder
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/innerBorder")) {
            m_innerBorder.ReadCPACS(tixiHandle, xpath + "/innerBorder");
        }
        else {
            LOG(ERROR) << "Required element innerBorder is missing at xpath " << xpath;
        }

        // read element outerBorder
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/outerBorder")) {
            m_outerBorder.ReadCPACS(tixiHandle, xpath + "/outerBorder");
        }
        else {
            LOG(ERROR) << "Required element outerBorder is missing at xpath " << xpath;
        }

        // read element intermediateAirfoils
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/intermediateAirfoils")) {
            m_intermediateAirfoils = boost::in_place(this, m_uidMgr);
            try {
                m_intermediateAirfoils->ReadCPACS(tixiHandle, xpath + "/intermediateAirfoils");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read intermediateAirfoils at xpath " << xpath << ": " << e.what();
                m_intermediateAirfoils = boost::none;
            }
        }

    }

    void CPACSControlSurfaceOuterShapeLeadingEdge::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element innerBorder
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerBorder");
        m_innerBorder.WriteCPACS(tixiHandle, xpath + "/innerBorder");

        // write element outerBorder
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerBorder");
        m_outerBorder.WriteCPACS(tixiHandle, xpath + "/outerBorder");

        // write element intermediateAirfoils
        if (m_intermediateAirfoils) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/intermediateAirfoils");
            m_intermediateAirfoils->WriteCPACS(tixiHandle, xpath + "/intermediateAirfoils");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/intermediateAirfoils")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/intermediateAirfoils");
            }
        }

    }

    const CPACSControlSurfaceBorderLeadingEdge& CPACSControlSurfaceOuterShapeLeadingEdge::GetInnerBorder() const
    {
        return m_innerBorder;
    }

    CPACSControlSurfaceBorderLeadingEdge& CPACSControlSurfaceOuterShapeLeadingEdge::GetInnerBorder()
    {
        return m_innerBorder;
    }

    const CPACSControlSurfaceBorderLeadingEdge& CPACSControlSurfaceOuterShapeLeadingEdge::GetOuterBorder() const
    {
        return m_outerBorder;
    }

    CPACSControlSurfaceBorderLeadingEdge& CPACSControlSurfaceOuterShapeLeadingEdge::GetOuterBorder()
    {
        return m_outerBorder;
    }

    const boost::optional<CPACSControlSurfaceContours>& CPACSControlSurfaceOuterShapeLeadingEdge::GetIntermediateAirfoils() const
    {
        return m_intermediateAirfoils;
    }

    boost::optional<CPACSControlSurfaceContours>& CPACSControlSurfaceOuterShapeLeadingEdge::GetIntermediateAirfoils()
    {
        return m_intermediateAirfoils;
    }

    CPACSControlSurfaceContours& CPACSControlSurfaceOuterShapeLeadingEdge::GetIntermediateAirfoils(CreateIfNotExistsTag)
    {
        if (!m_intermediateAirfoils)
            m_intermediateAirfoils = boost::in_place(this, m_uidMgr);
        return *m_intermediateAirfoils;
    }

    void CPACSControlSurfaceOuterShapeLeadingEdge::RemoveIntermediateAirfoils()
    {
        m_intermediateAirfoils = boost::none;
    }

} // namespace generated
} // namespace tigl
