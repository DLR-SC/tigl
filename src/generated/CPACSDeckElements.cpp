// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDeckElements.h"
#include "CPACSVehicles.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDeckElements::CPACSDeckElements(CPACSVehicles* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSDeckElements::~CPACSDeckElements()
    {
    }

    const CPACSVehicles* CPACSDeckElements::GetParent() const
    {
        return m_parent;
    }

    CPACSVehicles* CPACSDeckElements::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSDeckElements::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSDeckElements::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSDeckElements::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDeckElements::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSDeckElements::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element ceilingPanelElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ceilingPanelElements")) {
            m_ceilingPanelElements = boost::in_place(this, m_uidMgr);
            try {
                m_ceilingPanelElements->ReadCPACS(tixiHandle, xpath + "/ceilingPanelElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read ceilingPanelElements at xpath " << xpath << ": " << e.what();
                m_ceilingPanelElements = boost::none;
            }
        }

        // read element classDividerElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/classDividerElements")) {
            m_classDividerElements = boost::in_place(this, m_uidMgr);
            try {
                m_classDividerElements->ReadCPACS(tixiHandle, xpath + "/classDividerElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read classDividerElements at xpath " << xpath << ": " << e.what();
                m_classDividerElements = boost::none;
            }
        }

        // read element galleyElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/galleyElements")) {
            m_galleyElements = boost::in_place(this, m_uidMgr);
            try {
                m_galleyElements->ReadCPACS(tixiHandle, xpath + "/galleyElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read galleyElements at xpath " << xpath << ": " << e.what();
                m_galleyElements = boost::none;
            }
        }

        // read element genericFloorElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericFloorElements")) {
            m_genericFloorElements = boost::in_place(this, m_uidMgr);
            try {
                m_genericFloorElements->ReadCPACS(tixiHandle, xpath + "/genericFloorElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read genericFloorElements at xpath " << xpath << ": " << e.what();
                m_genericFloorElements = boost::none;
            }
        }

        // read element lavatoryElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/lavatoryElements")) {
            m_lavatoryElements = boost::in_place(this, m_uidMgr);
            try {
                m_lavatoryElements->ReadCPACS(tixiHandle, xpath + "/lavatoryElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read lavatoryElements at xpath " << xpath << ": " << e.what();
                m_lavatoryElements = boost::none;
            }
        }

        // read element luggageCompartmentElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/luggageCompartmentElements")) {
            m_luggageCompartmentElements = boost::in_place(this, m_uidMgr);
            try {
                m_luggageCompartmentElements->ReadCPACS(tixiHandle, xpath + "/luggageCompartmentElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read luggageCompartmentElements at xpath " << xpath << ": " << e.what();
                m_luggageCompartmentElements = boost::none;
            }
        }

        // read element seatElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/seatElements")) {
            m_seatElements = boost::in_place(this, m_uidMgr);
            try {
                m_seatElements->ReadCPACS(tixiHandle, xpath + "/seatElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read seatElements at xpath " << xpath << ": " << e.what();
                m_seatElements = boost::none;
            }
        }

        // read element sidewallPanelElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sidewallPanelElements")) {
            m_sidewallPanelElements = boost::in_place(this, m_uidMgr);
            try {
                m_sidewallPanelElements->ReadCPACS(tixiHandle, xpath + "/sidewallPanelElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read sidewallPanelElements at xpath " << xpath << ": " << e.what();
                m_sidewallPanelElements = boost::none;
            }
        }

        // read element cargoContainerElements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cargoContainerElements")) {
            m_cargoContainerElements = boost::in_place(this, m_uidMgr);
            try {
                m_cargoContainerElements->ReadCPACS(tixiHandle, xpath + "/cargoContainerElements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read cargoContainerElements at xpath " << xpath << ": " << e.what();
                m_cargoContainerElements = boost::none;
            }
        }

    }

    void CPACSDeckElements::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element ceilingPanelElements
        if (m_ceilingPanelElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ceilingPanelElements");
            m_ceilingPanelElements->WriteCPACS(tixiHandle, xpath + "/ceilingPanelElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ceilingPanelElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ceilingPanelElements");
            }
        }

        // write element classDividerElements
        if (m_classDividerElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/classDividerElements");
            m_classDividerElements->WriteCPACS(tixiHandle, xpath + "/classDividerElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/classDividerElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/classDividerElements");
            }
        }

        // write element galleyElements
        if (m_galleyElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/galleyElements");
            m_galleyElements->WriteCPACS(tixiHandle, xpath + "/galleyElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/galleyElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/galleyElements");
            }
        }

        // write element genericFloorElements
        if (m_genericFloorElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericFloorElements");
            m_genericFloorElements->WriteCPACS(tixiHandle, xpath + "/genericFloorElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericFloorElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/genericFloorElements");
            }
        }

        // write element lavatoryElements
        if (m_lavatoryElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lavatoryElements");
            m_lavatoryElements->WriteCPACS(tixiHandle, xpath + "/lavatoryElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/lavatoryElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/lavatoryElements");
            }
        }

        // write element luggageCompartmentElements
        if (m_luggageCompartmentElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/luggageCompartmentElements");
            m_luggageCompartmentElements->WriteCPACS(tixiHandle, xpath + "/luggageCompartmentElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/luggageCompartmentElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/luggageCompartmentElements");
            }
        }

        // write element seatElements
        if (m_seatElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/seatElements");
            m_seatElements->WriteCPACS(tixiHandle, xpath + "/seatElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/seatElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/seatElements");
            }
        }

        // write element sidewallPanelElements
        if (m_sidewallPanelElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sidewallPanelElements");
            m_sidewallPanelElements->WriteCPACS(tixiHandle, xpath + "/sidewallPanelElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sidewallPanelElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sidewallPanelElements");
            }
        }

        // write element cargoContainerElements
        if (m_cargoContainerElements) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoContainerElements");
            m_cargoContainerElements->WriteCPACS(tixiHandle, xpath + "/cargoContainerElements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/cargoContainerElements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/cargoContainerElements");
            }
        }

    }

    const boost::optional<CPACSCeilingPanelElements>& CPACSDeckElements::GetCeilingPanelElements() const
    {
        return m_ceilingPanelElements;
    }

    boost::optional<CPACSCeilingPanelElements>& CPACSDeckElements::GetCeilingPanelElements()
    {
        return m_ceilingPanelElements;
    }

    const boost::optional<CPACSClassDividerElements>& CPACSDeckElements::GetClassDividerElements() const
    {
        return m_classDividerElements;
    }

    boost::optional<CPACSClassDividerElements>& CPACSDeckElements::GetClassDividerElements()
    {
        return m_classDividerElements;
    }

    const boost::optional<CPACSGalleyElements>& CPACSDeckElements::GetGalleyElements() const
    {
        return m_galleyElements;
    }

    boost::optional<CPACSGalleyElements>& CPACSDeckElements::GetGalleyElements()
    {
        return m_galleyElements;
    }

    const boost::optional<CPACSGenericFloorElements>& CPACSDeckElements::GetGenericFloorElements() const
    {
        return m_genericFloorElements;
    }

    boost::optional<CPACSGenericFloorElements>& CPACSDeckElements::GetGenericFloorElements()
    {
        return m_genericFloorElements;
    }

    const boost::optional<CPACSLavatoryElements>& CPACSDeckElements::GetLavatoryElements() const
    {
        return m_lavatoryElements;
    }

    boost::optional<CPACSLavatoryElements>& CPACSDeckElements::GetLavatoryElements()
    {
        return m_lavatoryElements;
    }

    const boost::optional<CPACSLuggageCompartmentElements>& CPACSDeckElements::GetLuggageCompartmentElements() const
    {
        return m_luggageCompartmentElements;
    }

    boost::optional<CPACSLuggageCompartmentElements>& CPACSDeckElements::GetLuggageCompartmentElements()
    {
        return m_luggageCompartmentElements;
    }

    const boost::optional<CPACSSeatElements>& CPACSDeckElements::GetSeatElements() const
    {
        return m_seatElements;
    }

    boost::optional<CPACSSeatElements>& CPACSDeckElements::GetSeatElements()
    {
        return m_seatElements;
    }

    const boost::optional<CPACSSidewallPanelElements>& CPACSDeckElements::GetSidewallPanelElements() const
    {
        return m_sidewallPanelElements;
    }

    boost::optional<CPACSSidewallPanelElements>& CPACSDeckElements::GetSidewallPanelElements()
    {
        return m_sidewallPanelElements;
    }

    const boost::optional<CPACSCargoContainerElements>& CPACSDeckElements::GetCargoContainerElements() const
    {
        return m_cargoContainerElements;
    }

    boost::optional<CPACSCargoContainerElements>& CPACSDeckElements::GetCargoContainerElements()
    {
        return m_cargoContainerElements;
    }

    CPACSCeilingPanelElements& CPACSDeckElements::GetCeilingPanelElements(CreateIfNotExistsTag)
    {
        if (!m_ceilingPanelElements)
            m_ceilingPanelElements = boost::in_place(this, m_uidMgr);
        return *m_ceilingPanelElements;
    }

    void CPACSDeckElements::RemoveCeilingPanelElements()
    {
        m_ceilingPanelElements = boost::none;
    }

    CPACSClassDividerElements& CPACSDeckElements::GetClassDividerElements(CreateIfNotExistsTag)
    {
        if (!m_classDividerElements)
            m_classDividerElements = boost::in_place(this, m_uidMgr);
        return *m_classDividerElements;
    }

    void CPACSDeckElements::RemoveClassDividerElements()
    {
        m_classDividerElements = boost::none;
    }

    CPACSGalleyElements& CPACSDeckElements::GetGalleyElements(CreateIfNotExistsTag)
    {
        if (!m_galleyElements)
            m_galleyElements = boost::in_place(this, m_uidMgr);
        return *m_galleyElements;
    }

    void CPACSDeckElements::RemoveGalleyElements()
    {
        m_galleyElements = boost::none;
    }

    CPACSGenericFloorElements& CPACSDeckElements::GetGenericFloorElements(CreateIfNotExistsTag)
    {
        if (!m_genericFloorElements)
            m_genericFloorElements = boost::in_place(this, m_uidMgr);
        return *m_genericFloorElements;
    }

    void CPACSDeckElements::RemoveGenericFloorElements()
    {
        m_genericFloorElements = boost::none;
    }

    CPACSLavatoryElements& CPACSDeckElements::GetLavatoryElements(CreateIfNotExistsTag)
    {
        if (!m_lavatoryElements)
            m_lavatoryElements = boost::in_place(this, m_uidMgr);
        return *m_lavatoryElements;
    }

    void CPACSDeckElements::RemoveLavatoryElements()
    {
        m_lavatoryElements = boost::none;
    }

    CPACSLuggageCompartmentElements& CPACSDeckElements::GetLuggageCompartmentElements(CreateIfNotExistsTag)
    {
        if (!m_luggageCompartmentElements)
            m_luggageCompartmentElements = boost::in_place(this, m_uidMgr);
        return *m_luggageCompartmentElements;
    }

    void CPACSDeckElements::RemoveLuggageCompartmentElements()
    {
        m_luggageCompartmentElements = boost::none;
    }

    CPACSSeatElements& CPACSDeckElements::GetSeatElements(CreateIfNotExistsTag)
    {
        if (!m_seatElements)
            m_seatElements = boost::in_place(this, m_uidMgr);
        return *m_seatElements;
    }

    void CPACSDeckElements::RemoveSeatElements()
    {
        m_seatElements = boost::none;
    }

    CPACSSidewallPanelElements& CPACSDeckElements::GetSidewallPanelElements(CreateIfNotExistsTag)
    {
        if (!m_sidewallPanelElements)
            m_sidewallPanelElements = boost::in_place(this, m_uidMgr);
        return *m_sidewallPanelElements;
    }

    void CPACSDeckElements::RemoveSidewallPanelElements()
    {
        m_sidewallPanelElements = boost::none;
    }

    CPACSCargoContainerElements& CPACSDeckElements::GetCargoContainerElements(CreateIfNotExistsTag)
    {
        if (!m_cargoContainerElements)
            m_cargoContainerElements = boost::in_place(this, m_uidMgr);
        return *m_cargoContainerElements;
    }

    void CPACSDeckElements::RemoveCargoContainerElements()
    {
        m_cargoContainerElements = boost::none;
    }

} // namespace generated
} // namespace tigl
