// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSMaterial.h"
#include "CPACSMaterials.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSMaterials::CPACSMaterials(){}
        CPACSMaterials::~CPACSMaterials() {}
        
        void CPACSMaterials::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element material
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/material")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/material", m_materials);
            }
            
            // read element composites
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/composites")) {
                m_composites = boost::in_place();
                try {
                    m_composites->ReadCPACS(tixiHandle, xpath + "/composites");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read composites at xpath << " << xpath << ": " << e.what();
                    m_composites = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read composites at xpath << " << xpath << ": " << e.getError();
                    m_composites = boost::none;
                }
            }
            
        }
        
        void CPACSMaterials::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element material
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/material", m_materials);
            
            // write element composites
            if (m_composites) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/composites");
                m_composites->WriteCPACS(tixiHandle, xpath + "/composites");
            }
            
        }
        
        const std::vector<unique_ptr<CPACSMaterial> >& CPACSMaterials::GetMaterials() const
        {
            return m_materials;
        }
        
        std::vector<unique_ptr<CPACSMaterial> >& CPACSMaterials::GetMaterials()
        {
            return m_materials;
        }
        
        const boost::optional<CPACSComposites>& CPACSMaterials::GetComposites() const
        {
            return m_composites;
        }
        
        boost::optional<CPACSComposites>& CPACSMaterials::GetComposites()
        {
            return m_composites;
        }
        
    }
}
