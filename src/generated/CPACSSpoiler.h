// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSControlSurfaceOuterShapeSpoiler.h"
#include "CPACSControlSurfaceWingCutOut.h"
#include <CCPACSWingCSStructure.h>
#include "CPACSControlSurfacePath.h"
#include "CPACSControlSurfaceTracks.h"
#include "CPACSControlSurfaceActuators.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSSpoilers
        
        // generated from /xsd:schema/xsd:complexType[791]
        class CPACSSpoiler
        {
        public:
            TIGL_EXPORT CPACSSpoiler();
            TIGL_EXPORT virtual ~CPACSSpoiler();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const std::string& GetParentUID() const;
            TIGL_EXPORT void SetParentUID(const std::string& value);
            
            TIGL_EXPORT const CPACSControlSurfaceOuterShapeSpoiler& GetOuterShape() const;
            TIGL_EXPORT CPACSControlSurfaceOuterShapeSpoiler& GetOuterShape();
            
            TIGL_EXPORT bool HasWingCutOut() const;
            TIGL_EXPORT const CPACSControlSurfaceWingCutOut& GetWingCutOut() const;
            TIGL_EXPORT CPACSControlSurfaceWingCutOut& GetWingCutOut();
            
            TIGL_EXPORT bool HasStructure() const;
            TIGL_EXPORT const CCPACSWingCSStructure& GetStructure() const;
            TIGL_EXPORT CCPACSWingCSStructure& GetStructure();
            
            TIGL_EXPORT const CPACSControlSurfacePath& GetPath() const;
            TIGL_EXPORT CPACSControlSurfacePath& GetPath();
            
            TIGL_EXPORT bool HasTracks() const;
            TIGL_EXPORT const CPACSControlSurfaceTracks& GetTracks() const;
            TIGL_EXPORT CPACSControlSurfaceTracks& GetTracks();
            
            TIGL_EXPORT bool HasActuators() const;
            TIGL_EXPORT const CPACSControlSurfaceActuators& GetActuators() const;
            TIGL_EXPORT CPACSControlSurfaceActuators& GetActuators();
            
        protected:
            std::string                                    m_uID;
            std::string                                    m_name;
            boost::optional<std::string>                   m_description;
            std::string                                    m_parentUID;
            CPACSControlSurfaceOuterShapeSpoiler           m_outerShape;
            boost::optional<CPACSControlSurfaceWingCutOut> m_wingCutOut;
            boost::optional<CCPACSWingCSStructure>         m_structure;
            CPACSControlSurfacePath                        m_path;
            boost::optional<CPACSControlSurfaceTracks>     m_tracks;
            boost::optional<CPACSControlSurfaceActuators>  m_actuators;
            
        private:
            #ifdef HAVE_CPP11
            CPACSSpoiler(const CPACSSpoiler&) = delete;
            CPACSSpoiler& operator=(const CPACSSpoiler&) = delete;
            
            CPACSSpoiler(CPACSSpoiler&&) = delete;
            CPACSSpoiler& operator=(CPACSSpoiler&&) = delete;
            #else
            CPACSSpoiler(const CPACSSpoiler&);
            CPACSSpoiler& operator=(const CPACSSpoiler&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSSpoiler = generated::CPACSSpoiler;
    #else
    typedef generated::CPACSSpoiler CCPACSSpoiler;
    #endif
}
