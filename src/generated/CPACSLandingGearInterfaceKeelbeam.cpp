// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGearInterfaceKeelbeam.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGearInterfaceKeelbeam::CPACSLandingGearInterfaceKeelbeam(){}
        CPACSLandingGearInterfaceKeelbeam::~CPACSLandingGearInterfaceKeelbeam() {}
        
        void CPACSLandingGearInterfaceKeelbeam::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element sheetElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
                m_sheetElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            }
            else {
                LOG(ERROR) << "Required element sheetElementUID is missing";
            }
            
            // read element keelWidthStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/keelWidthStringerUID")) {
                m_keelWidthStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/keelWidthStringerUID");
            }
            else {
                LOG(ERROR) << "Required element keelWidthStringerUID is missing";
            }
            
            // read element keelHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/keelHeightStringerUID")) {
                m_keelHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/keelHeightStringerUID");
            }
            else {
                LOG(ERROR) << "Required element keelHeightStringerUID is missing";
            }
            
            // read element hFwdConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdConLengthFrameUID")) {
                m_hFwdConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdConLengthFrameUID");
            }
            
            // read element hFwdConHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdConHeightStringerUID")) {
                m_hFwdConHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdConHeightStringerUID");
            }
            
            // read element hRearConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearConLengthFrameUID")) {
                m_hRearConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearConLengthFrameUID");
            }
            
            // read element hRearConHeightStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearConHeightStringerUID")) {
                m_hRearConHeightStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearConHeightStringerUID");
            }
            
            // read element vFwdConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vFwdConLengthFrameUID")) {
                m_vFwdConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vFwdConLengthFrameUID");
            }
            
            // read element vRearConLengthFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vRearConLengthFrameUID")) {
                m_vRearConLengthFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vRearConLengthFrameUID");
            }
            
            // read element hFwdReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hFwdReinfocementElementUID")) {
                m_hFwdReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hFwdReinfocementElementUID");
            }
            
            // read element hRearReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hRearReinfocementElementUID")) {
                m_hRearReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/hRearReinfocementElementUID");
            }
            
            // read element vFwdReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vFwdReinfocementElementUID")) {
                m_vFwdReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vFwdReinfocementElementUID");
            }
            
            // read element vRearReinfocementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vRearReinfocementElementUID")) {
                m_vRearReinfocementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vRearReinfocementElementUID");
            }
            
        }
        
        void CPACSLandingGearInterfaceKeelbeam::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element sheetElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);
            
            // write element keelWidthStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/keelWidthStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/keelWidthStringerUID", m_keelWidthStringerUID);
            
            // write element keelHeightStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/keelHeightStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/keelHeightStringerUID", m_keelHeightStringerUID);
            
            // write element hFwdConLengthFrameUID
            if (m_hFwdConLengthFrameUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdConLengthFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdConLengthFrameUID", *m_hFwdConLengthFrameUID);
            }
            
            // write element hFwdConHeightStringerUID
            if (m_hFwdConHeightStringerUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdConHeightStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdConHeightStringerUID", *m_hFwdConHeightStringerUID);
            }
            
            // write element hRearConLengthFrameUID
            if (m_hRearConLengthFrameUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearConLengthFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearConLengthFrameUID", *m_hRearConLengthFrameUID);
            }
            
            // write element hRearConHeightStringerUID
            if (m_hRearConHeightStringerUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearConHeightStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearConHeightStringerUID", *m_hRearConHeightStringerUID);
            }
            
            // write element vFwdConLengthFrameUID
            if (m_vFwdConLengthFrameUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vFwdConLengthFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vFwdConLengthFrameUID", *m_vFwdConLengthFrameUID);
            }
            
            // write element vRearConLengthFrameUID
            if (m_vRearConLengthFrameUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vRearConLengthFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vRearConLengthFrameUID", *m_vRearConLengthFrameUID);
            }
            
            // write element hFwdReinfocementElementUID
            if (m_hFwdReinfocementElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hFwdReinfocementElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hFwdReinfocementElementUID", *m_hFwdReinfocementElementUID);
            }
            
            // write element hRearReinfocementElementUID
            if (m_hRearReinfocementElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hRearReinfocementElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hRearReinfocementElementUID", *m_hRearReinfocementElementUID);
            }
            
            // write element vFwdReinfocementElementUID
            if (m_vFwdReinfocementElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vFwdReinfocementElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vFwdReinfocementElementUID", *m_vFwdReinfocementElementUID);
            }
            
            // write element vRearReinfocementElementUID
            if (m_vRearReinfocementElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vRearReinfocementElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vRearReinfocementElementUID", *m_vRearReinfocementElementUID);
            }
            
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetSheetElementUID() const
        {
            return m_sheetElementUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetSheetElementUID(const std::string& value)
        {
            m_sheetElementUID = value;
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetKeelWidthStringerUID() const
        {
            return m_keelWidthStringerUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetKeelWidthStringerUID(const std::string& value)
        {
            m_keelWidthStringerUID = value;
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetKeelHeightStringerUID() const
        {
            return m_keelHeightStringerUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetKeelHeightStringerUID(const std::string& value)
        {
            m_keelHeightStringerUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHFwdConLengthFrameUID() const
        {
            return static_cast<bool>(m_hFwdConLengthFrameUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHFwdConLengthFrameUID() const
        {
            return *m_hFwdConLengthFrameUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHFwdConLengthFrameUID(const std::string& value)
        {
            m_hFwdConLengthFrameUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHFwdConHeightStringerUID() const
        {
            return static_cast<bool>(m_hFwdConHeightStringerUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHFwdConHeightStringerUID() const
        {
            return *m_hFwdConHeightStringerUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHFwdConHeightStringerUID(const std::string& value)
        {
            m_hFwdConHeightStringerUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHRearConLengthFrameUID() const
        {
            return static_cast<bool>(m_hRearConLengthFrameUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHRearConLengthFrameUID() const
        {
            return *m_hRearConLengthFrameUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHRearConLengthFrameUID(const std::string& value)
        {
            m_hRearConLengthFrameUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHRearConHeightStringerUID() const
        {
            return static_cast<bool>(m_hRearConHeightStringerUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHRearConHeightStringerUID() const
        {
            return *m_hRearConHeightStringerUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHRearConHeightStringerUID(const std::string& value)
        {
            m_hRearConHeightStringerUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasVFwdConLengthFrameUID() const
        {
            return static_cast<bool>(m_vFwdConLengthFrameUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetVFwdConLengthFrameUID() const
        {
            return *m_vFwdConLengthFrameUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetVFwdConLengthFrameUID(const std::string& value)
        {
            m_vFwdConLengthFrameUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasVRearConLengthFrameUID() const
        {
            return static_cast<bool>(m_vRearConLengthFrameUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetVRearConLengthFrameUID() const
        {
            return *m_vRearConLengthFrameUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetVRearConLengthFrameUID(const std::string& value)
        {
            m_vRearConLengthFrameUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHFwdReinfocementElementUID() const
        {
            return static_cast<bool>(m_hFwdReinfocementElementUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHFwdReinfocementElementUID() const
        {
            return *m_hFwdReinfocementElementUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHFwdReinfocementElementUID(const std::string& value)
        {
            m_hFwdReinfocementElementUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasHRearReinfocementElementUID() const
        {
            return static_cast<bool>(m_hRearReinfocementElementUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetHRearReinfocementElementUID() const
        {
            return *m_hRearReinfocementElementUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetHRearReinfocementElementUID(const std::string& value)
        {
            m_hRearReinfocementElementUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasVFwdReinfocementElementUID() const
        {
            return static_cast<bool>(m_vFwdReinfocementElementUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetVFwdReinfocementElementUID() const
        {
            return *m_vFwdReinfocementElementUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetVFwdReinfocementElementUID(const std::string& value)
        {
            m_vFwdReinfocementElementUID = value;
        }
        
        bool CPACSLandingGearInterfaceKeelbeam::HasVRearReinfocementElementUID() const
        {
            return static_cast<bool>(m_vRearReinfocementElementUID);
        }
        
        const std::string& CPACSLandingGearInterfaceKeelbeam::GetVRearReinfocementElementUID() const
        {
            return *m_vRearReinfocementElementUID;
        }
        
        void CPACSLandingGearInterfaceKeelbeam::SetVRearReinfocementElementUID(const std::string& value)
        {
            m_vRearReinfocementElementUID = value;
        }
        
    }
}
