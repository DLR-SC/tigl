// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSPointListXYZ.h>
#include "CPACSMassInertiaVector.h"
#include "CPACSWeightAndBalanceFuel.h"
#include "CPACSWeightAndBalancePayload.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSOperationalCases
        
        // generated from /xsd:schema/xsd:complexType[669]
        class CPACSOperationalCase
        {
        public:
            TIGL_EXPORT CPACSOperationalCase();
            TIGL_EXPORT virtual ~CPACSOperationalCase();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const CCPACSStringVector& GetMass() const;
            TIGL_EXPORT CCPACSStringVector& GetMass();
            
            TIGL_EXPORT const CCPACSPointListXYZ& GetCoG() const;
            TIGL_EXPORT CCPACSPointListXYZ& GetCoG();
            
            TIGL_EXPORT bool HasMassInertia() const;
            TIGL_EXPORT const CPACSMassInertiaVector& GetMassInertia() const;
            TIGL_EXPORT CPACSMassInertiaVector& GetMassInertia();
            
            TIGL_EXPORT bool HasMFuel() const;
            TIGL_EXPORT const CPACSWeightAndBalanceFuel& GetMFuel() const;
            TIGL_EXPORT CPACSWeightAndBalanceFuel& GetMFuel();
            
            TIGL_EXPORT const CPACSWeightAndBalancePayload& GetMPayload() const;
            TIGL_EXPORT CPACSWeightAndBalancePayload& GetMPayload();
            
        protected:
            std::string                                m_uID;
            boost::optional<std::string>               m_name;
            boost::optional<std::string>               m_description;
            CCPACSStringVector                         m_mass;
            CCPACSPointListXYZ                         m_coG;
            boost::optional<CPACSMassInertiaVector>    m_massInertia;
            boost::optional<CPACSWeightAndBalanceFuel> m_mFuel;
            CPACSWeightAndBalancePayload               m_mPayload;
            
        private:
            #ifdef HAVE_CPP11
            CPACSOperationalCase(const CPACSOperationalCase&) = delete;
            CPACSOperationalCase& operator=(const CPACSOperationalCase&) = delete;
            
            CPACSOperationalCase(CPACSOperationalCase&&) = delete;
            CPACSOperationalCase& operator=(CPACSOperationalCase&&) = delete;
            #else
            CPACSOperationalCase(const CPACSOperationalCase&);
            CPACSOperationalCase& operator=(const CPACSOperationalCase&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSOperationalCase = generated::CPACSOperationalCase;
    #else
    typedef generated::CPACSOperationalCase CCPACSOperationalCase;
    #endif
}
