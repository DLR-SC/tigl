// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseTranslation.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseTranslation::CPACSLoadCaseTranslation(){}
        CPACSLoadCaseTranslation::~CPACSLoadCaseTranslation() {}
        
        void CPACSLoadCaseTranslation::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element displacement
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/displacement")) {
                m_displacement = boost::in_place();
                try {
                    m_displacement->ReadCPACS(tixiHandle, xpath + "/displacement");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read displacement at xpath << " << xpath << ": " << e.what();
                    m_displacement = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read displacement at xpath << " << xpath << ": " << e.getError();
                    m_displacement = boost::none;
                }
            }
            
            // read element velocity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/velocity")) {
                m_velocity = boost::in_place();
                try {
                    m_velocity->ReadCPACS(tixiHandle, xpath + "/velocity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read velocity at xpath << " << xpath << ": " << e.what();
                    m_velocity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read velocity at xpath << " << xpath << ": " << e.getError();
                    m_velocity = boost::none;
                }
            }
            
            // read element acceleration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/acceleration")) {
                m_acceleration = boost::in_place();
                try {
                    m_acceleration->ReadCPACS(tixiHandle, xpath + "/acceleration");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read acceleration at xpath << " << xpath << ": " << e.what();
                    m_acceleration = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read acceleration at xpath << " << xpath << ": " << e.getError();
                    m_acceleration = boost::none;
                }
            }
            
        }
        
        void CPACSLoadCaseTranslation::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element displacement
            if (m_displacement) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/displacement");
                m_displacement->WriteCPACS(tixiHandle, xpath + "/displacement");
            }
            
            // write element velocity
            if (m_velocity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/velocity");
                m_velocity->WriteCPACS(tixiHandle, xpath + "/velocity");
            }
            
            // write element acceleration
            if (m_acceleration) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/acceleration");
                m_acceleration->WriteCPACS(tixiHandle, xpath + "/acceleration");
            }
            
        }
        
        bool CPACSLoadCaseTranslation::HasDisplacement() const
        {
            return static_cast<bool>(m_displacement);
        }
        
        const CPACSPointXYZ& CPACSLoadCaseTranslation::GetDisplacement() const
        {
            return *m_displacement;
        }
        
        CPACSPointXYZ& CPACSLoadCaseTranslation::GetDisplacement()
        {
            return *m_displacement;
        }
        
        bool CPACSLoadCaseTranslation::HasVelocity() const
        {
            return static_cast<bool>(m_velocity);
        }
        
        const CPACSLoadCaseTranslationVelocity& CPACSLoadCaseTranslation::GetVelocity() const
        {
            return *m_velocity;
        }
        
        CPACSLoadCaseTranslationVelocity& CPACSLoadCaseTranslation::GetVelocity()
        {
            return *m_velocity;
        }
        
        bool CPACSLoadCaseTranslation::HasAcceleration() const
        {
            return static_cast<bool>(m_acceleration);
        }
        
        const CPACSLoadCaseTranslationAcceleration& CPACSLoadCaseTranslation::GetAcceleration() const
        {
            return *m_acceleration;
        }
        
        CPACSLoadCaseTranslationAcceleration& CPACSLoadCaseTranslation::GetAcceleration()
        {
            return *m_acceleration;
        }
        
    }
}
