// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSBeamCrossSection.h"

namespace tigl
{
    namespace generated
    {
        CPACSBeamCrossSection::CPACSBeamCrossSection(){}
        CPACSBeamCrossSection::~CPACSBeamCrossSection() {}
        
        void CPACSBeamCrossSection::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element area
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/area")) {
                m_area = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/area");
            }
            else {
                LOG(ERROR) << "Required element area is missing";
            }
            
            // read element xMin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xMin")) {
                m_xMin = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xMin");
            }
            else {
                LOG(ERROR) << "Required element xMin is missing";
            }
            
            // read element xMax
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xMax")) {
                m_xMax = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xMax");
            }
            else {
                LOG(ERROR) << "Required element xMax is missing";
            }
            
            // read element yMin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yMin")) {
                m_yMin = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/yMin");
            }
            else {
                LOG(ERROR) << "Required element yMin is missing";
            }
            
            // read element yMax
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/yMax")) {
                m_yMax = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/yMax");
            }
            else {
                LOG(ERROR) << "Required element yMax is missing";
            }
            
        }
        
        void CPACSBeamCrossSection::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element area
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/area");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/area", m_area);
            
            // write element xMin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xMin");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xMin", m_xMin);
            
            // write element xMax
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xMax");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xMax", m_xMax);
            
            // write element yMin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yMin");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/yMin", m_yMin);
            
            // write element yMax
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/yMax");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/yMax", m_yMax);
            
        }
        
        bool CPACSBeamCrossSection::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSBeamCrossSection::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSBeamCrossSection::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const double& CPACSBeamCrossSection::GetArea() const
        {
            return m_area;
        }
        
        void CPACSBeamCrossSection::SetArea(const double& value)
        {
            m_area = value;
        }
        
        const double& CPACSBeamCrossSection::GetXMin() const
        {
            return m_xMin;
        }
        
        void CPACSBeamCrossSection::SetXMin(const double& value)
        {
            m_xMin = value;
        }
        
        const double& CPACSBeamCrossSection::GetXMax() const
        {
            return m_xMax;
        }
        
        void CPACSBeamCrossSection::SetXMax(const double& value)
        {
            m_xMax = value;
        }
        
        const double& CPACSBeamCrossSection::GetYMin() const
        {
            return m_yMin;
        }
        
        void CPACSBeamCrossSection::SetYMin(const double& value)
        {
            m_yMin = value;
        }
        
        const double& CPACSBeamCrossSection::GetYMax() const
        {
            return m_yMax;
        }
        
        void CPACSBeamCrossSection::SetYMax(const double& value)
        {
            m_yMax = value;
        }
        
    }
}
