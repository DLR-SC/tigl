// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearBase.h"
#include "CPACSLandingGearComponentAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearComponentAssembly::CPACSLandingGearComponentAssembly(CPACSLandingGearBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_mainStrut(this, m_uidMgr)
        , m_piston(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearComponentAssembly::~CPACSLandingGearComponentAssembly()
    {
    }

    const CPACSLandingGearBase* CPACSLandingGearComponentAssembly::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearBase* CPACSLandingGearComponentAssembly::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearComponentAssembly::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSLandingGearComponentAssembly::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSLandingGearComponentAssembly::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearComponentAssembly::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearComponentAssembly::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element mainStrut
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mainStrut")) {
            m_mainStrut.ReadCPACS(tixiHandle, xpath + "/mainStrut");
        }
        else {
            LOG(ERROR) << "Required element mainStrut is missing at xpath " << xpath;
        }

        // read element piston
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/piston")) {
            m_piston.ReadCPACS(tixiHandle, xpath + "/piston");
        }
        else {
            LOG(ERROR) << "Required element piston is missing at xpath " << xpath;
        }

        // read element axle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/axle")) {
            m_axle_choice1 = boost::in_place(this, m_uidMgr);
            try {
                m_axle_choice1->ReadCPACS(tixiHandle, xpath + "/axle");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read axle at xpath " << xpath << ": " << e.what();
                m_axle_choice1 = boost::none;
            }
        }

        // read element bogie
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/bogie")) {
            m_bogie_choice2 = boost::in_place(this, m_uidMgr);
            try {
                m_bogie_choice2->ReadCPACS(tixiHandle, xpath + "/bogie");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read bogie at xpath " << xpath << ": " << e.what();
                m_bogie_choice2 = boost::none;
            }
        }

        // read element dragStrut
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/dragStrut")) {
            m_dragStrut = boost::in_place(this, m_uidMgr);
            try {
                m_dragStrut->ReadCPACS(tixiHandle, xpath + "/dragStrut");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read dragStrut at xpath " << xpath << ": " << e.what();
                m_dragStrut = boost::none;
            }
        }

        // read element pintleStruts
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/pintleStruts")) {
            m_pintleStruts = boost::in_place(this, m_uidMgr);
            try {
                m_pintleStruts->ReadCPACS(tixiHandle, xpath + "/pintleStruts");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read pintleStruts at xpath " << xpath << ": " << e.what();
                m_pintleStruts = boost::none;
            }
        }

        // read element sideStruts
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sideStruts")) {
            m_sideStruts = boost::in_place(this, m_uidMgr);
            try {
                m_sideStruts->ReadCPACS(tixiHandle, xpath + "/sideStruts");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read sideStruts at xpath " << xpath << ": " << e.what();
                m_sideStruts = boost::none;
            }
        }

        // read element mainActuator
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mainActuator")) {
            m_mainActuator = boost::in_place(this, m_uidMgr);
            try {
                m_mainActuator->ReadCPACS(tixiHandle, xpath + "/mainActuator");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read mainActuator at xpath " << xpath << ": " << e.what();
                m_mainActuator = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSLandingGearComponentAssembly::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "mainStrut", "piston", "axle", "bogie", "dragStrut", "pintleStruts", "sideStruts", "mainActuator" };

        // write element mainStrut
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/mainStrut", childElemOrder);
        m_mainStrut.WriteCPACS(tixiHandle, xpath + "/mainStrut");

        // write element piston
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/piston", childElemOrder);
        m_piston.WriteCPACS(tixiHandle, xpath + "/piston");

        // write element axle
        if (m_axle_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/axle", childElemOrder);
            m_axle_choice1->WriteCPACS(tixiHandle, xpath + "/axle");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/axle")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/axle");
            }
        }

        // write element bogie
        if (m_bogie_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/bogie", childElemOrder);
            m_bogie_choice2->WriteCPACS(tixiHandle, xpath + "/bogie");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/bogie")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/bogie");
            }
        }

        // write element dragStrut
        if (m_dragStrut) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/dragStrut", childElemOrder);
            m_dragStrut->WriteCPACS(tixiHandle, xpath + "/dragStrut");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/dragStrut")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/dragStrut");
            }
        }

        // write element pintleStruts
        if (m_pintleStruts) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/pintleStruts", childElemOrder);
            m_pintleStruts->WriteCPACS(tixiHandle, xpath + "/pintleStruts");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/pintleStruts")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/pintleStruts");
            }
        }

        // write element sideStruts
        if (m_sideStruts) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/sideStruts", childElemOrder);
            m_sideStruts->WriteCPACS(tixiHandle, xpath + "/sideStruts");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sideStruts")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sideStruts");
            }
        }

        // write element mainActuator
        if (m_mainActuator) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/mainActuator", childElemOrder);
            m_mainActuator->WriteCPACS(tixiHandle, xpath + "/mainActuator");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/mainActuator")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/mainActuator");
            }
        }

    }

    bool CPACSLandingGearComponentAssembly::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_axle_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_bogie_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_bogie_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_axle_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const CPACSStrut& CPACSLandingGearComponentAssembly::GetMainStrut() const
    {
        return m_mainStrut;
    }

    CPACSStrut& CPACSLandingGearComponentAssembly::GetMainStrut()
    {
        return m_mainStrut;
    }

    const CPACSPiston& CPACSLandingGearComponentAssembly::GetPiston() const
    {
        return m_piston;
    }

    CPACSPiston& CPACSLandingGearComponentAssembly::GetPiston()
    {
        return m_piston;
    }

    const boost::optional<CPACSAxle>& CPACSLandingGearComponentAssembly::GetAxle_choice1() const
    {
        return m_axle_choice1;
    }

    boost::optional<CPACSAxle>& CPACSLandingGearComponentAssembly::GetAxle_choice1()
    {
        return m_axle_choice1;
    }

    const boost::optional<CPACSBogie>& CPACSLandingGearComponentAssembly::GetBogie_choice2() const
    {
        return m_bogie_choice2;
    }

    boost::optional<CPACSBogie>& CPACSLandingGearComponentAssembly::GetBogie_choice2()
    {
        return m_bogie_choice2;
    }

    const boost::optional<CPACSStrutAssembly>& CPACSLandingGearComponentAssembly::GetDragStrut() const
    {
        return m_dragStrut;
    }

    boost::optional<CPACSStrutAssembly>& CPACSLandingGearComponentAssembly::GetDragStrut()
    {
        return m_dragStrut;
    }

    const boost::optional<CPACSPintleStruts>& CPACSLandingGearComponentAssembly::GetPintleStruts() const
    {
        return m_pintleStruts;
    }

    boost::optional<CPACSPintleStruts>& CPACSLandingGearComponentAssembly::GetPintleStruts()
    {
        return m_pintleStruts;
    }

    const boost::optional<CPACSSideStruts>& CPACSLandingGearComponentAssembly::GetSideStruts() const
    {
        return m_sideStruts;
    }

    boost::optional<CPACSSideStruts>& CPACSLandingGearComponentAssembly::GetSideStruts()
    {
        return m_sideStruts;
    }

    const boost::optional<CPACSMainActuator>& CPACSLandingGearComponentAssembly::GetMainActuator() const
    {
        return m_mainActuator;
    }

    boost::optional<CPACSMainActuator>& CPACSLandingGearComponentAssembly::GetMainActuator()
    {
        return m_mainActuator;
    }

    CPACSAxle& CPACSLandingGearComponentAssembly::GetAxle_choice1(CreateIfNotExistsTag)
    {
        if (!m_axle_choice1)
            m_axle_choice1 = boost::in_place(this, m_uidMgr);
        return *m_axle_choice1;
    }

    void CPACSLandingGearComponentAssembly::RemoveAxle_choice1()
    {
        m_axle_choice1 = boost::none;
    }

    CPACSBogie& CPACSLandingGearComponentAssembly::GetBogie_choice2(CreateIfNotExistsTag)
    {
        if (!m_bogie_choice2)
            m_bogie_choice2 = boost::in_place(this, m_uidMgr);
        return *m_bogie_choice2;
    }

    void CPACSLandingGearComponentAssembly::RemoveBogie_choice2()
    {
        m_bogie_choice2 = boost::none;
    }

    CPACSStrutAssembly& CPACSLandingGearComponentAssembly::GetDragStrut(CreateIfNotExistsTag)
    {
        if (!m_dragStrut)
            m_dragStrut = boost::in_place(this, m_uidMgr);
        return *m_dragStrut;
    }

    void CPACSLandingGearComponentAssembly::RemoveDragStrut()
    {
        m_dragStrut = boost::none;
    }

    CPACSPintleStruts& CPACSLandingGearComponentAssembly::GetPintleStruts(CreateIfNotExistsTag)
    {
        if (!m_pintleStruts)
            m_pintleStruts = boost::in_place(this, m_uidMgr);
        return *m_pintleStruts;
    }

    void CPACSLandingGearComponentAssembly::RemovePintleStruts()
    {
        m_pintleStruts = boost::none;
    }

    CPACSSideStruts& CPACSLandingGearComponentAssembly::GetSideStruts(CreateIfNotExistsTag)
    {
        if (!m_sideStruts)
            m_sideStruts = boost::in_place(this, m_uidMgr);
        return *m_sideStruts;
    }

    void CPACSLandingGearComponentAssembly::RemoveSideStruts()
    {
        m_sideStruts = boost::none;
    }

    CPACSMainActuator& CPACSLandingGearComponentAssembly::GetMainActuator(CreateIfNotExistsTag)
    {
        if (!m_mainActuator)
            m_mainActuator = boost::in_place(this, m_uidMgr);
        return *m_mainActuator;
    }

    void CPACSLandingGearComponentAssembly::RemoveMainActuator()
    {
        m_mainActuator = boost::none;
    }

} // namespace generated
} // namespace tigl
