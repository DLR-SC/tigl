// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingRibsPositioning.h"
#include "CPACSRibRotation.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSRibRotation::CPACSRibRotation(CCPACSWingRibsPositioning* parent)
        {
            //assert(parent != NULL);
            m_parent = parent;
        }
        
        CPACSRibRotation::~CPACSRibRotation() {}
        
        CCPACSWingRibsPositioning* CPACSRibRotation::GetParent() const
        {
            return m_parent;
        }
        
        void CPACSRibRotation::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element ribRotationReference
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribRotationReference")) {
                m_ribRotationReference = boost::in_place();
                try {
                    m_ribRotationReference->ReadCPACS(tixiHandle, xpath + "/ribRotationReference");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ribRotationReference at xpath << " << xpath << ": " << e.what();
                    m_ribRotationReference = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ribRotationReference at xpath << " << xpath << ": " << e.getError();
                    m_ribRotationReference = boost::none;
                }
            }
            
            // read element z
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/z")) {
                m_z = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/z");
            }
            else {
                LOG(ERROR) << "Required element z is missing at xpath " << xpath;
            }
            
        }
        
        void CPACSRibRotation::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element ribRotationReference
            if (m_ribRotationReference) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribRotationReference");
                m_ribRotationReference->WriteCPACS(tixiHandle, xpath + "/ribRotationReference");
            }
            
            // write element z
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/z", m_z);
            
        }
        
        bool CPACSRibRotation::HasRibRotationReference() const
        {
            return static_cast<bool>(m_ribRotationReference);
        }
        
        const CPACSRibRotation_ribRotationReference& CPACSRibRotation::GetRibRotationReference() const
        {
            return *m_ribRotationReference;
        }
        
        CPACSRibRotation_ribRotationReference& CPACSRibRotation::GetRibRotationReference()
        {
            return *m_ribRotationReference;
        }
        
        const double& CPACSRibRotation::GetZ() const
        {
            return m_z;
        }
        
        void CPACSRibRotation::SetZ(const double& value)
        {
            m_z = value;
        }
        
    }
}
