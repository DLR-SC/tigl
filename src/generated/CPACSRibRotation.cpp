// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingRibsPositioning.h"
#include "CPACSRibRotation.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRibRotation::CPACSRibRotation(CCPACSWingRibsPositioning* parent)
        : m_z(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSRibRotation::~CPACSRibRotation()
    {
    }

    const CCPACSWingRibsPositioning* CPACSRibRotation::GetParent() const
    {
        return m_parent;
    }

    CCPACSWingRibsPositioning* CPACSRibRotation::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSRibRotation::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSRibRotation::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSRibRotation::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element ribRotationReference
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribRotationReference")) {
            m_ribRotationReference = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/ribRotationReference");
            if (m_ribRotationReference->empty()) {
                LOG(WARNING) << "Optional element ribRotationReference is present but empty at xpath " << xpath;
            }
        }

        // read element z
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/z")) {
            m_z = tixi::TixiGetElement<double>(tixiHandle, xpath + "/z");
        }
        else {
            LOG(ERROR) << "Required element z is missing at xpath " << xpath;
        }

    }

    void CPACSRibRotation::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "ribRotationReference", "z" };

        // write element ribRotationReference
        if (m_ribRotationReference) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/ribRotationReference", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribRotationReference", *m_ribRotationReference);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribRotationReference")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribRotationReference");
            }
        }

        // write element z
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/z", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/z", m_z);

    }

    const boost::optional<std::string>& CPACSRibRotation::GetRibRotationReference() const
    {
        return m_ribRotationReference;
    }

    void CPACSRibRotation::SetRibRotationReference(const boost::optional<std::string>& value)
    {
        m_ribRotationReference = value;
    }

    const double& CPACSRibRotation::GetZ() const
    {
        return m_z;
    }

    void CPACSRibRotation::SetZ(const double& value)
    {
        m_z = value;
    }

} // namespace generated
} // namespace tigl
