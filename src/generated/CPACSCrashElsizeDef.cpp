// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashElsizeDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashElsizeDef::CPACSCrashElsizeDef(){}
        CPACSCrashElsizeDef::~CPACSCrashElsizeDef() {}
        
        void CPACSCrashElsizeDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element elsizeSkin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeSkin")) {
                m_elsizeSkin = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeSkin");
            }
            
            // read element numberOfTransitionAreas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfTransitionAreas")) {
                m_numberOfTransitionAreas = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfTransitionAreas");
            }
            
            // read element elsizeStringer
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeStringer")) {
                m_elsizeStringer = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeStringer");
            }
            
            // read element elsizeFrame
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeFrame")) {
                m_elsizeFrame = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeFrame");
            }
            
            // read element elsizePAXCrossbeam
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizePAXCrossbeam")) {
                m_elsizePAXCrossbeam = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizePAXCrossbeam");
            }
            
            // read element elsizeCargoCrossbeam
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeCargoCrossbeam")) {
                m_elsizeCargoCrossbeam = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeCargoCrossbeam");
            }
            
            // read element elsizePAXBeamStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizePAXBeamStruts")) {
                m_elsizePAXBeamStruts = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizePAXBeamStruts");
            }
            
            // read element elsizeCargoSupportStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeCargoSupportStruts")) {
                m_elsizeCargoSupportStruts = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeCargoSupportStruts");
            }
            
            // read element elsizeLongFloorBeams
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeLongFloorBeams")) {
                m_elsizeLongFloorBeams = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeLongFloorBeams");
            }
            
            // read element elsizeFloorPanels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeFloorPanels")) {
                m_elsizeFloorPanels = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeFloorPanels");
            }
            
            // read element elsizePressureBulkheads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizePressureBulkheads")) {
                m_elsizePressureBulkheads = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizePressureBulkheads");
            }
            
            // read element elsizeWindows
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeWindows")) {
                m_elsizeWindows = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeWindows");
            }
            
            // read element elsizePaxDoors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizePaxDoors")) {
                m_elsizePaxDoors = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizePaxDoors");
            }
            
            // read element elsizeCargoDoors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeCargoDoors")) {
                m_elsizeCargoDoors = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeCargoDoors");
            }
            
            // read element elsizeCenterFuselageArea
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeCenterFuselageArea")) {
                m_elsizeCenterFuselageArea = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeCenterFuselageArea");
            }
            
            // read element elsizeIntercostals
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elsizeIntercostals")) {
                m_elsizeIntercostals = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/elsizeIntercostals");
            }
            
        }
        
        void CPACSCrashElsizeDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element elsizeSkin
            if (m_elsizeSkin) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeSkin");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeSkin", *m_elsizeSkin);
            }
            
            // write element numberOfTransitionAreas
            if (m_numberOfTransitionAreas) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfTransitionAreas");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfTransitionAreas", *m_numberOfTransitionAreas);
            }
            
            // write element elsizeStringer
            if (m_elsizeStringer) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeStringer");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeStringer", *m_elsizeStringer);
            }
            
            // write element elsizeFrame
            if (m_elsizeFrame) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeFrame");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeFrame", *m_elsizeFrame);
            }
            
            // write element elsizePAXCrossbeam
            if (m_elsizePAXCrossbeam) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizePAXCrossbeam");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizePAXCrossbeam", *m_elsizePAXCrossbeam);
            }
            
            // write element elsizeCargoCrossbeam
            if (m_elsizeCargoCrossbeam) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeCargoCrossbeam");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeCargoCrossbeam", *m_elsizeCargoCrossbeam);
            }
            
            // write element elsizePAXBeamStruts
            if (m_elsizePAXBeamStruts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizePAXBeamStruts");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizePAXBeamStruts", *m_elsizePAXBeamStruts);
            }
            
            // write element elsizeCargoSupportStruts
            if (m_elsizeCargoSupportStruts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeCargoSupportStruts");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeCargoSupportStruts", *m_elsizeCargoSupportStruts);
            }
            
            // write element elsizeLongFloorBeams
            if (m_elsizeLongFloorBeams) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeLongFloorBeams");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeLongFloorBeams", *m_elsizeLongFloorBeams);
            }
            
            // write element elsizeFloorPanels
            if (m_elsizeFloorPanels) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeFloorPanels");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeFloorPanels", *m_elsizeFloorPanels);
            }
            
            // write element elsizePressureBulkheads
            if (m_elsizePressureBulkheads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizePressureBulkheads");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizePressureBulkheads", *m_elsizePressureBulkheads);
            }
            
            // write element elsizeWindows
            if (m_elsizeWindows) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeWindows");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeWindows", *m_elsizeWindows);
            }
            
            // write element elsizePaxDoors
            if (m_elsizePaxDoors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizePaxDoors");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizePaxDoors", *m_elsizePaxDoors);
            }
            
            // write element elsizeCargoDoors
            if (m_elsizeCargoDoors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeCargoDoors");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeCargoDoors", *m_elsizeCargoDoors);
            }
            
            // write element elsizeCenterFuselageArea
            if (m_elsizeCenterFuselageArea) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeCenterFuselageArea");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeCenterFuselageArea", *m_elsizeCenterFuselageArea);
            }
            
            // write element elsizeIntercostals
            if (m_elsizeIntercostals) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elsizeIntercostals");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/elsizeIntercostals", *m_elsizeIntercostals);
            }
            
        }
        
        const std::string& CPACSCrashElsizeDef::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSCrashElsizeDef::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSCrashElsizeDef::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSCrashElsizeDef::GetName() const
        {
            return *m_name;
        }
        
        void CPACSCrashElsizeDef::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeSkin() const
        {
            return static_cast<bool>(m_elsizeSkin);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeSkin() const
        {
            return *m_elsizeSkin;
        }
        
        void CPACSCrashElsizeDef::SetElsizeSkin(const double& value)
        {
            m_elsizeSkin = value;
        }
        
        bool CPACSCrashElsizeDef::HasNumberOfTransitionAreas() const
        {
            return static_cast<bool>(m_numberOfTransitionAreas);
        }
        
        const int& CPACSCrashElsizeDef::GetNumberOfTransitionAreas() const
        {
            return *m_numberOfTransitionAreas;
        }
        
        void CPACSCrashElsizeDef::SetNumberOfTransitionAreas(const int& value)
        {
            m_numberOfTransitionAreas = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeStringer() const
        {
            return static_cast<bool>(m_elsizeStringer);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeStringer() const
        {
            return *m_elsizeStringer;
        }
        
        void CPACSCrashElsizeDef::SetElsizeStringer(const double& value)
        {
            m_elsizeStringer = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeFrame() const
        {
            return static_cast<bool>(m_elsizeFrame);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeFrame() const
        {
            return *m_elsizeFrame;
        }
        
        void CPACSCrashElsizeDef::SetElsizeFrame(const double& value)
        {
            m_elsizeFrame = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizePAXCrossbeam() const
        {
            return static_cast<bool>(m_elsizePAXCrossbeam);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizePAXCrossbeam() const
        {
            return *m_elsizePAXCrossbeam;
        }
        
        void CPACSCrashElsizeDef::SetElsizePAXCrossbeam(const double& value)
        {
            m_elsizePAXCrossbeam = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeCargoCrossbeam() const
        {
            return static_cast<bool>(m_elsizeCargoCrossbeam);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeCargoCrossbeam() const
        {
            return *m_elsizeCargoCrossbeam;
        }
        
        void CPACSCrashElsizeDef::SetElsizeCargoCrossbeam(const double& value)
        {
            m_elsizeCargoCrossbeam = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizePAXBeamStruts() const
        {
            return static_cast<bool>(m_elsizePAXBeamStruts);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizePAXBeamStruts() const
        {
            return *m_elsizePAXBeamStruts;
        }
        
        void CPACSCrashElsizeDef::SetElsizePAXBeamStruts(const double& value)
        {
            m_elsizePAXBeamStruts = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeCargoSupportStruts() const
        {
            return static_cast<bool>(m_elsizeCargoSupportStruts);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeCargoSupportStruts() const
        {
            return *m_elsizeCargoSupportStruts;
        }
        
        void CPACSCrashElsizeDef::SetElsizeCargoSupportStruts(const double& value)
        {
            m_elsizeCargoSupportStruts = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeLongFloorBeams() const
        {
            return static_cast<bool>(m_elsizeLongFloorBeams);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeLongFloorBeams() const
        {
            return *m_elsizeLongFloorBeams;
        }
        
        void CPACSCrashElsizeDef::SetElsizeLongFloorBeams(const double& value)
        {
            m_elsizeLongFloorBeams = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeFloorPanels() const
        {
            return static_cast<bool>(m_elsizeFloorPanels);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeFloorPanels() const
        {
            return *m_elsizeFloorPanels;
        }
        
        void CPACSCrashElsizeDef::SetElsizeFloorPanels(const double& value)
        {
            m_elsizeFloorPanels = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizePressureBulkheads() const
        {
            return static_cast<bool>(m_elsizePressureBulkheads);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizePressureBulkheads() const
        {
            return *m_elsizePressureBulkheads;
        }
        
        void CPACSCrashElsizeDef::SetElsizePressureBulkheads(const double& value)
        {
            m_elsizePressureBulkheads = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeWindows() const
        {
            return static_cast<bool>(m_elsizeWindows);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeWindows() const
        {
            return *m_elsizeWindows;
        }
        
        void CPACSCrashElsizeDef::SetElsizeWindows(const double& value)
        {
            m_elsizeWindows = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizePaxDoors() const
        {
            return static_cast<bool>(m_elsizePaxDoors);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizePaxDoors() const
        {
            return *m_elsizePaxDoors;
        }
        
        void CPACSCrashElsizeDef::SetElsizePaxDoors(const double& value)
        {
            m_elsizePaxDoors = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeCargoDoors() const
        {
            return static_cast<bool>(m_elsizeCargoDoors);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeCargoDoors() const
        {
            return *m_elsizeCargoDoors;
        }
        
        void CPACSCrashElsizeDef::SetElsizeCargoDoors(const double& value)
        {
            m_elsizeCargoDoors = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeCenterFuselageArea() const
        {
            return static_cast<bool>(m_elsizeCenterFuselageArea);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeCenterFuselageArea() const
        {
            return *m_elsizeCenterFuselageArea;
        }
        
        void CPACSCrashElsizeDef::SetElsizeCenterFuselageArea(const double& value)
        {
            m_elsizeCenterFuselageArea = value;
        }
        
        bool CPACSCrashElsizeDef::HasElsizeIntercostals() const
        {
            return static_cast<bool>(m_elsizeIntercostals);
        }
        
        const double& CPACSCrashElsizeDef::GetElsizeIntercostals() const
        {
            return *m_elsizeIntercostals;
        }
        
        void CPACSCrashElsizeDef::SetElsizeIntercostals(const double& value)
        {
            m_elsizeIntercostals = value;
        }
        
    }
}
