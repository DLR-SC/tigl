// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSDoubleConstraintBase.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSPointPerformanceDefinition;

    // This class is used in:
    // CPACSPointPerformanceDefinition

    /// @brief Constraints
    /// 
    /// Constraint settings for the point performance definition
    /// 
    class CPACSPointPerformanceConstraints
    {
    public:
        TIGL_EXPORT CPACSPointPerformanceConstraints(CPACSPointPerformanceDefinition* parent);

        TIGL_EXPORT virtual ~CPACSPointPerformanceConstraints();

        TIGL_EXPORT CPACSPointPerformanceDefinition* GetParent();

        TIGL_EXPORT const CPACSPointPerformanceDefinition* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetCalibratedAirSpeed() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetCalibratedAirSpeed();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetMachNumber() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetMachNumber();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetClimbAngle() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetClimbAngle();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetRateOfClimb() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetRateOfClimb();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetRateOfTurn() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetRateOfTurn();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetThrustSetting() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetThrustSetting();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetAcceleration() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetAcceleration();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetDuration() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetDuration();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetAngleOfAttack() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetAngleOfAttack();

        TIGL_EXPORT virtual const boost::optional<CPACSDoubleConstraintBase>& GetAltitude() const;
        TIGL_EXPORT virtual boost::optional<CPACSDoubleConstraintBase>& GetAltitude();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetCalibratedAirSpeed(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCalibratedAirSpeed();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetMachNumber(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveMachNumber();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetClimbAngle(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveClimbAngle();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetRateOfClimb(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRateOfClimb();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetRateOfTurn(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRateOfTurn();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetThrustSetting(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveThrustSetting();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetAcceleration(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAcceleration();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetDuration(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveDuration();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetAngleOfAttack(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAngleOfAttack();

        TIGL_EXPORT virtual CPACSDoubleConstraintBase& GetAltitude(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAltitude();

    protected:
        CPACSPointPerformanceDefinition* m_parent;

        /// Calibrated airspeed [m/s]
        boost::optional<CPACSDoubleConstraintBase> m_calibratedAirSpeed;

        /// Mach number [-]
        boost::optional<CPACSDoubleConstraintBase> m_machNumber;

        /// Climb angle [deg]
        boost::optional<CPACSDoubleConstraintBase> m_climbAngle;

        /// Rate of climb [m/s]
        boost::optional<CPACSDoubleConstraintBase> m_rateOfClimb;

        /// Rate of turn [deg/s]
        boost::optional<CPACSDoubleConstraintBase> m_rateOfTurn;

        /// Thrust setting for derated engine as fraction of max. thrust (e.g.: for powered descents, deceleration not at IDLE, manoevres)
        boost::optional<CPACSDoubleConstraintBase> m_thrustSetting;

        /// Rate of velocity [m/s^2]
        boost::optional<CPACSDoubleConstraintBase> m_acceleration;

        /// Duration [s]
        boost::optional<CPACSDoubleConstraintBase> m_duration;

        /// Angle of attack [deg]
        boost::optional<CPACSDoubleConstraintBase> m_angleOfAttack;

        /// Constant altitude [m]
        boost::optional<CPACSDoubleConstraintBase> m_altitude;

    private:
        CPACSPointPerformanceConstraints(const CPACSPointPerformanceConstraints&) = delete;
        CPACSPointPerformanceConstraints& operator=(const CPACSPointPerformanceConstraints&) = delete;

        CPACSPointPerformanceConstraints(CPACSPointPerformanceConstraints&&) = delete;
        CPACSPointPerformanceConstraints& operator=(CPACSPointPerformanceConstraints&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSPointPerformanceConstraints = generated::CPACSPointPerformanceConstraints;
using CCPACSPointPerformanceDefinition = generated::CPACSPointPerformanceDefinition;
} // namespace tigl
