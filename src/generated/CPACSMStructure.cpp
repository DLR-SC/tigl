// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMStructure.h"

namespace tigl
{
    namespace generated
    {
        CPACSMStructure::CPACSMStructure(){}
        CPACSMStructure::~CPACSMStructure() {}
        
        void CPACSMStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mWingsStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mWingsStructure")) {
                m_mWingsStructure = boost::in_place();
                try {
                    m_mWingsStructure->ReadCPACS(tixiHandle, xpath + "/mWingsStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mWingsStructure at xpath << " << xpath << ": " << e.what();
                    m_mWingsStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mWingsStructure at xpath << " << xpath << ": " << e.getError();
                    m_mWingsStructure = boost::none;
                }
            }
            
            // read element mFuselagesStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFuselagesStructure")) {
                m_mFuselagesStructure = boost::in_place();
                try {
                    m_mFuselagesStructure->ReadCPACS(tixiHandle, xpath + "/mFuselagesStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFuselagesStructure at xpath << " << xpath << ": " << e.what();
                    m_mFuselagesStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFuselagesStructure at xpath << " << xpath << ": " << e.getError();
                    m_mFuselagesStructure = boost::none;
                }
            }
            
            // read element mLandingGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mLandingGears")) {
                m_mLandingGears = boost::in_place();
                try {
                    m_mLandingGears->ReadCPACS(tixiHandle, xpath + "/mLandingGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mLandingGears at xpath << " << xpath << ": " << e.what();
                    m_mLandingGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mLandingGears at xpath << " << xpath << ": " << e.getError();
                    m_mLandingGears = boost::none;
                }
            }
            
            // read element mPylons
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPylons")) {
                m_mPylons = boost::in_place();
                try {
                    m_mPylons->ReadCPACS(tixiHandle, xpath + "/mPylons");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mPylons at xpath << " << xpath << ": " << e.what();
                    m_mPylons = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mPylons at xpath << " << xpath << ": " << e.getError();
                    m_mPylons = boost::none;
                }
            }
            
        }
        
        void CPACSMStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mWingsStructure
            if (m_mWingsStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mWingsStructure");
                m_mWingsStructure->WriteCPACS(tixiHandle, xpath + "/mWingsStructure");
            }
            
            // write element mFuselagesStructure
            if (m_mFuselagesStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFuselagesStructure");
                m_mFuselagesStructure->WriteCPACS(tixiHandle, xpath + "/mFuselagesStructure");
            }
            
            // write element mLandingGears
            if (m_mLandingGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mLandingGears");
                m_mLandingGears->WriteCPACS(tixiHandle, xpath + "/mLandingGears");
            }
            
            // write element mPylons
            if (m_mPylons) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mPylons");
                m_mPylons->WriteCPACS(tixiHandle, xpath + "/mPylons");
            }
            
        }
        
        const CPACSGenericMass& CPACSMStructure::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMStructure::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMStructure::HasMWingsStructure() const
        {
            return static_cast<bool>(m_mWingsStructure);
        }
        
        const CPACSMWingsStructure& CPACSMStructure::GetMWingsStructure() const
        {
            return *m_mWingsStructure;
        }
        
        CPACSMWingsStructure& CPACSMStructure::GetMWingsStructure()
        {
            return *m_mWingsStructure;
        }
        
        bool CPACSMStructure::HasMFuselagesStructure() const
        {
            return static_cast<bool>(m_mFuselagesStructure);
        }
        
        const CPACSMFuselagesStructure& CPACSMStructure::GetMFuselagesStructure() const
        {
            return *m_mFuselagesStructure;
        }
        
        CPACSMFuselagesStructure& CPACSMStructure::GetMFuselagesStructure()
        {
            return *m_mFuselagesStructure;
        }
        
        bool CPACSMStructure::HasMLandingGears() const
        {
            return static_cast<bool>(m_mLandingGears);
        }
        
        const CPACSMLandingGears& CPACSMStructure::GetMLandingGears() const
        {
            return *m_mLandingGears;
        }
        
        CPACSMLandingGears& CPACSMStructure::GetMLandingGears()
        {
            return *m_mLandingGears;
        }
        
        bool CPACSMStructure::HasMPylons() const
        {
            return static_cast<bool>(m_mPylons);
        }
        
        const CPACSMPylons& CPACSMStructure::GetMPylons() const
        {
            return *m_mPylons;
        }
        
        CPACSMPylons& CPACSMStructure::GetMPylons()
        {
            return *m_mPylons;
        }
        
    }
}
