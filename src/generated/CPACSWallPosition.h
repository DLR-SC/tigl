// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSWallPositions;

    // This class is used in:
    // CPACSWallPositions

    // generated from /xsd:schema/xsd:complexType[1005]
    class CPACSWallPosition : public CTiglOptUIDObject
    {
    public:
        TIGL_EXPORT CPACSWallPosition(CPACSWallPositions* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWallPosition();

        TIGL_EXPORT CPACSWallPositions* GetParent();

        TIGL_EXPORT const CPACSWallPositions* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetBulkheadUID_choice1() const;
        TIGL_EXPORT virtual void SetBulkheadUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetWallSegmentUID_choice2() const;
        TIGL_EXPORT virtual void SetWallSegmentUID_choice2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetFuselageSectionUID_choice3() const;
        TIGL_EXPORT virtual void SetFuselageSectionUID_choice3(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetX_choice4() const;
        TIGL_EXPORT virtual void SetX_choice4(const boost::optional<double>& value);

        TIGL_EXPORT virtual const double& GetY() const;
        TIGL_EXPORT virtual void SetY(const double& value);

        TIGL_EXPORT virtual const double& GetZ() const;
        TIGL_EXPORT virtual void SetZ(const double& value);

    protected:
        CPACSWallPositions* m_parent;

        CTiglUIDManager* m_uidMgr;

        boost::optional<std::string> m_uID;

        /// uID of a bulkhead determining the x-coordinate of the position with the given y- and z-coordinates.
        boost::optional<std::string> m_bulkheadUID_choice1;

        /// uID of a wall segment determining the x-coordinate of the position with the given y- and z-coordinates.
        boost::optional<std::string> m_wallSegmentUID_choice2;

        /// uID of fuselage section determining the x-coordinate of the position with the given y- and z-coordinates.
        boost::optional<std::string> m_fuselageSectionUID_choice3;

        /// Absolute x-coordinate of wall position in fuselage coordinate system.
        boost::optional<double>      m_x_choice4;

        /// Absolute y-coordinate of wall position in fuselage coordinate system.
        double                       m_y;

        /// Absolute z-coordinate of wall position in fuselage coordinate system.
        double                       m_z;

    private:
        CPACSWallPosition(const CPACSWallPosition&) = delete;
        CPACSWallPosition& operator=(const CPACSWallPosition&) = delete;

        CPACSWallPosition(CPACSWallPosition&&) = delete;
        CPACSWallPosition& operator=(CPACSWallPosition&&) = delete;
    };
} // namespace generated

// CPACSWallPosition is customized, use type CCPACSWallPosition directly

// Aliases in tigl namespace
using CCPACSWallPositions = generated::CPACSWallPositions;
} // namespace tigl
