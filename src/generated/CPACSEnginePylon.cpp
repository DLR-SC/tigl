// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSEnginePylon.h"

namespace tigl
{
    namespace generated
    {
        CPACSEnginePylon::CPACSEnginePylon(){}
        CPACSEnginePylon::~CPACSEnginePylon() {}
        
        void CPACSEnginePylon::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element parentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                m_parentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            }
            else {
                LOG(ERROR) << "Required element parentUID is missing";
            }
            
            // read element transformation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
                m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
            }
            else {
                LOG(ERROR) << "Required element transformation is missing";
            }
            
            // read element sections
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sections")) {
                m_sections = boost::in_place();
                try {
                    m_sections->ReadCPACS(tixiHandle, xpath + "/sections");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read sections at xpath << " << xpath << ": " << e.what();
                    m_sections = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read sections at xpath << " << xpath << ": " << e.getError();
                    m_sections = boost::none;
                }
            }
            
            // read element segments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/segments")) {
                m_segments = boost::in_place(this);
                try {
                    m_segments->ReadCPACS(tixiHandle, xpath + "/segments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read segments at xpath << " << xpath << ": " << e.what();
                    m_segments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read segments at xpath << " << xpath << ": " << e.getError();
                    m_segments = boost::none;
                }
            }
            
            // read element positionings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionings")) {
                m_positionings = boost::in_place();
                try {
                    m_positionings->ReadCPACS(tixiHandle, xpath + "/positionings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read positionings at xpath << " << xpath << ": " << e.what();
                    m_positionings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read positionings at xpath << " << xpath << ": " << e.getError();
                    m_positionings = boost::none;
                }
            }
            
            // read element loadCarryingStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/loadCarryingStructure")) {
                m_loadCarryingStructure = boost::in_place();
                try {
                    m_loadCarryingStructure->ReadCPACS(tixiHandle, xpath + "/loadCarryingStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read loadCarryingStructure at xpath << " << xpath << ": " << e.what();
                    m_loadCarryingStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read loadCarryingStructure at xpath << " << xpath << ": " << e.getError();
                    m_loadCarryingStructure = boost::none;
                }
            }
            
        }
        
        void CPACSEnginePylon::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element parentUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/parentUID", m_parentUID);
            
            // write element transformation
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
            m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");
            
            // write element sections
            if (m_sections) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
                m_sections->WriteCPACS(tixiHandle, xpath + "/sections");
            }
            
            // write element segments
            if (m_segments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segments");
                m_segments->WriteCPACS(tixiHandle, xpath + "/segments");
            }
            
            // write element positionings
            if (m_positionings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionings");
                m_positionings->WriteCPACS(tixiHandle, xpath + "/positionings");
            }
            
            // write element loadCarryingStructure
            if (m_loadCarryingStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/loadCarryingStructure");
                m_loadCarryingStructure->WriteCPACS(tixiHandle, xpath + "/loadCarryingStructure");
            }
            
        }
        
        const std::string& CPACSEnginePylon::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSEnginePylon::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSEnginePylon::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSEnginePylon::GetName() const
        {
            return *m_name;
        }
        
        void CPACSEnginePylon::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSEnginePylon::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSEnginePylon::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSEnginePylon::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSEnginePylon::GetParentUID() const
        {
            return m_parentUID;
        }
        
        void CPACSEnginePylon::SetParentUID(const std::string& value)
        {
            m_parentUID = value;
        }
        
        const CCPACSTransformation& CPACSEnginePylon::GetTransformation() const
        {
            return m_transformation;
        }
        
        CCPACSTransformation& CPACSEnginePylon::GetTransformation()
        {
            return m_transformation;
        }
        
        bool CPACSEnginePylon::HasSections() const
        {
            return static_cast<bool>(m_sections);
        }
        
        const CCPACSWingSections& CPACSEnginePylon::GetSections() const
        {
            return *m_sections;
        }
        
        CCPACSWingSections& CPACSEnginePylon::GetSections()
        {
            return *m_sections;
        }
        
        bool CPACSEnginePylon::HasSegments() const
        {
            return static_cast<bool>(m_segments);
        }
        
        const CCPACSWingSegments& CPACSEnginePylon::GetSegments() const
        {
            return *m_segments;
        }
        
        CCPACSWingSegments& CPACSEnginePylon::GetSegments()
        {
            return *m_segments;
        }
        
        bool CPACSEnginePylon::HasPositionings() const
        {
            return static_cast<bool>(m_positionings);
        }
        
        const CCPACSPositionings& CPACSEnginePylon::GetPositionings() const
        {
            return *m_positionings;
        }
        
        CCPACSPositionings& CPACSEnginePylon::GetPositionings()
        {
            return *m_positionings;
        }
        
        bool CPACSEnginePylon::HasLoadCarryingStructure() const
        {
            return static_cast<bool>(m_loadCarryingStructure);
        }
        
        const CPACSPylonStructure& CPACSEnginePylon::GetLoadCarryingStructure() const
        {
            return *m_loadCarryingStructure;
        }
        
        CPACSPylonStructure& CPACSEnginePylon::GetLoadCarryingStructure()
        {
            return *m_loadCarryingStructure;
        }
        
    }
}
