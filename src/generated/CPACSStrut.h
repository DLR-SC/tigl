// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSLandingGearComponentAssembly;

    // This class is used in:
    // CPACSLandingGearComponentAssembly

    /// @brief Geometric description and material properties of a strut
    /// 
    /// 
    class CPACSStrut : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSStrut(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSStrut();

        TIGL_EXPORT CPACSLandingGearComponentAssembly* GetParent();

        TIGL_EXPORT const CPACSLandingGearComponentAssembly* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<double>& GetRadius_choice1() const;
        TIGL_EXPORT virtual void SetRadius_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetMaterialUID_choice1() const;
        TIGL_EXPORT virtual void SetMaterialUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetInnerRadius_choice1() const;
        TIGL_EXPORT virtual void SetInnerRadius_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralElementUID_choice2() const;
        TIGL_EXPORT virtual void SetStructuralElementUID_choice2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetLength() const;
        TIGL_EXPORT virtual void SetLength(const double& value);

    protected:
        CPACSLandingGearComponentAssembly* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// (Outer) radius of the strut
        boost::optional<double>      m_radius_choice1;

        /// Material of the strut
        boost::optional<std::string> m_materialUID_choice1;

        /// Inner radius of the strut
        boost::optional<double>      m_innerRadius_choice1;

        /// Reference to structural element for a more
        /// detailed cross section definition
        boost::optional<std::string> m_structuralElementUID_choice2;

        std::string                  m_uID;

        /// Length of the strut
        double                       m_length;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSStrut(const CPACSStrut&) = delete;
        CPACSStrut& operator=(const CPACSStrut&) = delete;

        CPACSStrut(CPACSStrut&&) = delete;
        CPACSStrut& operator=(CPACSStrut&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSStrut = generated::CPACSStrut;
using CCPACSLandingGearComponentAssembly = generated::CPACSLandingGearComponentAssembly;
} // namespace tigl
