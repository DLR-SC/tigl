// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAttachmentPin
        
        // generated from /xsd:schema/xsd:complexType[816]
        class CPACSStrut
        {
        public:
            TIGL_EXPORT CPACSStrut();
            TIGL_EXPORT virtual ~CPACSStrut();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetLength() const;
            TIGL_EXPORT void SetLength(const double& value);
            
            TIGL_EXPORT bool HasRadius_choice1() const;
            TIGL_EXPORT const double& GetRadius_choice1() const;
            TIGL_EXPORT void SetRadius_choice1(const double& value);
            
            TIGL_EXPORT bool HasMaterialUID_choice1() const;
            TIGL_EXPORT const std::string& GetMaterialUID_choice1() const;
            TIGL_EXPORT void SetMaterialUID_choice1(const std::string& value);
            
            TIGL_EXPORT bool HasInnerRadius_choice1() const;
            TIGL_EXPORT const double& GetInnerRadius_choice1() const;
            TIGL_EXPORT void SetInnerRadius_choice1(const double& value);
            
            TIGL_EXPORT bool HasStructuralElementUID_choice2() const;
            TIGL_EXPORT const std::string& GetStructuralElementUID_choice2() const;
            TIGL_EXPORT void SetStructuralElementUID_choice2(const std::string& value);
            
        protected:
            double                       m_length;
            boost::optional<double>      m_radius_choice1;
            boost::optional<std::string> m_materialUID_choice1;
            boost::optional<double>      m_innerRadius_choice1;
            boost::optional<std::string> m_structuralElementUID_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSStrut(const CPACSStrut&) = delete;
            CPACSStrut& operator=(const CPACSStrut&) = delete;
            
            CPACSStrut(CPACSStrut&&) = delete;
            CPACSStrut& operator=(CPACSStrut&&) = delete;
            #else
            CPACSStrut(const CPACSStrut&);
            CPACSStrut& operator=(const CPACSStrut&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSStrut = generated::CPACSStrut;
    #else
    typedef generated::CPACSStrut CCPACSStrut;
    #endif
}
