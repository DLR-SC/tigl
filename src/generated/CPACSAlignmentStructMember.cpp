// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAlignmentStructMember.h"

namespace tigl
{
    namespace generated
    {
        CPACSAlignmentStructMember::CPACSAlignmentStructMember(){}
        CPACSAlignmentStructMember::~CPACSAlignmentStructMember() {}
        
        void CPACSAlignmentStructMember::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element offsetLocX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/offsetLocX")) {
                m_offsetLocX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/offsetLocX");
            }
            
            // read element rotationLocX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotationLocX")) {
                m_rotationLocX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rotationLocX");
            }
            
            // read element translationLocY
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/translationLocY")) {
                m_translationLocY = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/translationLocY");
            }
            
            // read element translationLocZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/translationLocZ")) {
                m_translationLocZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/translationLocZ");
            }
            
        }
        
        void CPACSAlignmentStructMember::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element offsetLocX
            if (m_offsetLocX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/offsetLocX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/offsetLocX", *m_offsetLocX);
            }
            
            // write element rotationLocX
            if (m_rotationLocX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotationLocX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rotationLocX", *m_rotationLocX);
            }
            
            // write element translationLocY
            if (m_translationLocY) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/translationLocY");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/translationLocY", *m_translationLocY);
            }
            
            // write element translationLocZ
            if (m_translationLocZ) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/translationLocZ");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/translationLocZ", *m_translationLocZ);
            }
            
        }
        
        bool CPACSAlignmentStructMember::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSAlignmentStructMember::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSAlignmentStructMember::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSAlignmentStructMember::HasOffsetLocX() const
        {
            return static_cast<bool>(m_offsetLocX);
        }
        
        const double& CPACSAlignmentStructMember::GetOffsetLocX() const
        {
            return *m_offsetLocX;
        }
        
        void CPACSAlignmentStructMember::SetOffsetLocX(const double& value)
        {
            m_offsetLocX = value;
        }
        
        bool CPACSAlignmentStructMember::HasRotationLocX() const
        {
            return static_cast<bool>(m_rotationLocX);
        }
        
        const double& CPACSAlignmentStructMember::GetRotationLocX() const
        {
            return *m_rotationLocX;
        }
        
        void CPACSAlignmentStructMember::SetRotationLocX(const double& value)
        {
            m_rotationLocX = value;
        }
        
        bool CPACSAlignmentStructMember::HasTranslationLocY() const
        {
            return static_cast<bool>(m_translationLocY);
        }
        
        const double& CPACSAlignmentStructMember::GetTranslationLocY() const
        {
            return *m_translationLocY;
        }
        
        void CPACSAlignmentStructMember::SetTranslationLocY(const double& value)
        {
            m_translationLocY = value;
        }
        
        bool CPACSAlignmentStructMember::HasTranslationLocZ() const
        {
            return static_cast<bool>(m_translationLocZ);
        }
        
        const double& CPACSAlignmentStructMember::GetTranslationLocZ() const
        {
            return *m_translationLocZ;
        }
        
        void CPACSAlignmentStructMember::SetTranslationLocZ(const double& value)
        {
            m_translationLocZ = value;
        }
        
    }
}
