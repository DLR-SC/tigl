// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSVehicles.h"

namespace tigl
{
    namespace generated
    {
        CPACSVehicles::CPACSVehicles(){}
        CPACSVehicles::~CPACSVehicles() {}
        
        void CPACSVehicles::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element aircraft
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aircraft")) {
                m_aircraft = boost::in_place();
                try {
                    m_aircraft->ReadCPACS(tixiHandle, xpath + "/aircraft");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aircraft at xpath << " << xpath << ": " << e.what();
                    m_aircraft = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aircraft at xpath << " << xpath << ": " << e.getError();
                    m_aircraft = boost::none;
                }
            }
            
            // read element rotorcraft
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotorcraft")) {
                m_rotorcraft = boost::in_place();
                try {
                    m_rotorcraft->ReadCPACS(tixiHandle, xpath + "/rotorcraft");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rotorcraft at xpath << " << xpath << ": " << e.what();
                    m_rotorcraft = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rotorcraft at xpath << " << xpath << ": " << e.getError();
                    m_rotorcraft = boost::none;
                }
            }
            
            // read element profiles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/profiles")) {
                m_profiles = boost::in_place();
                try {
                    m_profiles->ReadCPACS(tixiHandle, xpath + "/profiles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read profiles at xpath << " << xpath << ": " << e.what();
                    m_profiles = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read profiles at xpath << " << xpath << ": " << e.getError();
                    m_profiles = boost::none;
                }
            }
            
            // read element materials
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/materials")) {
                m_materials = boost::in_place();
                try {
                    m_materials->ReadCPACS(tixiHandle, xpath + "/materials");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read materials at xpath << " << xpath << ": " << e.what();
                    m_materials = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read materials at xpath << " << xpath << ": " << e.getError();
                    m_materials = boost::none;
                }
            }
            
        }
        
        void CPACSVehicles::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element aircraft
            if (m_aircraft) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aircraft");
                m_aircraft->WriteCPACS(tixiHandle, xpath + "/aircraft");
            }
            
            // write element rotorcraft
            if (m_rotorcraft) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotorcraft");
                m_rotorcraft->WriteCPACS(tixiHandle, xpath + "/rotorcraft");
            }
            
            // write element profiles
            if (m_profiles) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/profiles");
                m_profiles->WriteCPACS(tixiHandle, xpath + "/profiles");
            }
            
            // write element materials
            if (m_materials) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/materials");
                m_materials->WriteCPACS(tixiHandle, xpath + "/materials");
            }
            
        }
        
        bool CPACSVehicles::HasAircraft() const
        {
            return static_cast<bool>(m_aircraft);
        }
        
        const CPACSAircraft& CPACSVehicles::GetAircraft() const
        {
            return *m_aircraft;
        }
        
        CPACSAircraft& CPACSVehicles::GetAircraft()
        {
            return *m_aircraft;
        }
        
        bool CPACSVehicles::HasRotorcraft() const
        {
            return static_cast<bool>(m_rotorcraft);
        }
        
        const CPACSRotorcraft& CPACSVehicles::GetRotorcraft() const
        {
            return *m_rotorcraft;
        }
        
        CPACSRotorcraft& CPACSVehicles::GetRotorcraft()
        {
            return *m_rotorcraft;
        }
        
        bool CPACSVehicles::HasProfiles() const
        {
            return static_cast<bool>(m_profiles);
        }
        
        const CCPACSProfiles& CPACSVehicles::GetProfiles() const
        {
            return *m_profiles;
        }
        
        CCPACSProfiles& CPACSVehicles::GetProfiles()
        {
            return *m_profiles;
        }
        
        bool CPACSVehicles::HasMaterials() const
        {
            return static_cast<bool>(m_materials);
        }
        
        const CPACSMaterials& CPACSVehicles::GetMaterials() const
        {
            return *m_materials;
        }
        
        CPACSMaterials& CPACSVehicles::GetMaterials()
        {
            return *m_materials;
        }
        
    }
}
