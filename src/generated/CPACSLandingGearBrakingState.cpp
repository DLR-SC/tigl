// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearBrakingState.h"
#include "CPACSLandingGearControlFunctions.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearBrakingState::CPACSLandingGearBrakingState(CPACSLandingGearControlFunctions* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_controlParameterBraked(0)
        , m_controlParameterReleased(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearBrakingState::~CPACSLandingGearBrakingState()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSLandingGearControlFunctions* CPACSLandingGearBrakingState::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearControlFunctions* CPACSLandingGearBrakingState::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearBrakingState::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSLandingGearBrakingState::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSLandingGearBrakingState::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearBrakingState::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearBrakingState::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element controlParameterBraked
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlParameterBraked")) {
            m_controlParameterBraked = tixi::TixiGetElement<double>(tixiHandle, xpath + "/controlParameterBraked");
        }
        else {
            LOG(ERROR) << "Required element controlParameterBraked is missing at xpath " << xpath;
        }

        // read element controlParameterReleased
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlParameterReleased")) {
            m_controlParameterReleased = tixi::TixiGetElement<double>(tixiHandle, xpath + "/controlParameterReleased");
        }
        else {
            LOG(ERROR) << "Required element controlParameterReleased is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSLandingGearBrakingState::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element controlParameterBraked
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlParameterBraked");
        tixi::TixiSaveElement(tixiHandle, xpath + "/controlParameterBraked", m_controlParameterBraked);

        // write element controlParameterReleased
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlParameterReleased");
        tixi::TixiSaveElement(tixiHandle, xpath + "/controlParameterReleased", m_controlParameterReleased);

    }

    const std::string& CPACSLandingGearBrakingState::GetUID() const
    {
        return m_uID;
    }

    void CPACSLandingGearBrakingState::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSLandingGearBrakingState::GetControlParameterBraked() const
    {
        return m_controlParameterBraked;
    }

    void CPACSLandingGearBrakingState::SetControlParameterBraked(const double& value)
    {
        m_controlParameterBraked = value;
    }

    const double& CPACSLandingGearBrakingState::GetControlParameterReleased() const
    {
        return m_controlParameterReleased;
    }

    void CPACSLandingGearBrakingState::SetControlParameterReleased(const double& value)
    {
        m_controlParameterReleased = value;
    }

} // namespace generated
} // namespace tigl
