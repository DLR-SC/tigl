// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDynamicAircraftModelAnalysis.h"

namespace tigl
{
    namespace generated
    {
        CPACSDynamicAircraftModelAnalysis::CPACSDynamicAircraftModelAnalysis(){}
        CPACSDynamicAircraftModelAnalysis::~CPACSDynamicAircraftModelAnalysis() {}
        
        void CPACSDynamicAircraftModelAnalysis::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element topologyEntries
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/topologyEntries")) {
                m_topologyEntries = boost::in_place();
                try {
                    m_topologyEntries->ReadCPACS(tixiHandle, xpath + "/topologyEntries");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read topologyEntries at xpath << " << xpath << ": " << e.what();
                    m_topologyEntries = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read topologyEntries at xpath << " << xpath << ": " << e.getError();
                    m_topologyEntries = boost::none;
                }
            }
            
        }
        
        void CPACSDynamicAircraftModelAnalysis::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element topologyEntries
            if (m_topologyEntries) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/topologyEntries");
                m_topologyEntries->WriteCPACS(tixiHandle, xpath + "/topologyEntries");
            }
            
        }
        
        bool CPACSDynamicAircraftModelAnalysis::HasTopologyEntries() const
        {
            return static_cast<bool>(m_topologyEntries);
        }
        
        const CPACSTopologyEntries& CPACSDynamicAircraftModelAnalysis::GetTopologyEntries() const
        {
            return *m_topologyEntries;
        }
        
        CPACSTopologyEntries& CPACSDynamicAircraftModelAnalysis::GetTopologyEntries()
        {
            return *m_topologyEntries;
        }
        
    }
}
