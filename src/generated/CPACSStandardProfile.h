// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSRectangleProfile.h"
#include "CPACSSuperEllipseProfile.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSProfileGeometry;

    // This class is used in:
    // CPACSProfileGeometry

    /// @brief Standard profile
    /// 
    /// 
    /// 
    class CPACSStandardProfile
    {
    public:
        TIGL_EXPORT CPACSStandardProfile(CPACSProfileGeometry* parent);

        TIGL_EXPORT virtual ~CPACSStandardProfile();

        TIGL_EXPORT CPACSProfileGeometry* GetParent();

        TIGL_EXPORT const CPACSProfileGeometry* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<CPACSRectangleProfile>& GetRectangle_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSRectangleProfile>& GetRectangle_choice1();

        TIGL_EXPORT virtual const boost::optional<CPACSSuperEllipseProfile>& GetSuperEllipse_choice2() const;
        TIGL_EXPORT virtual boost::optional<CPACSSuperEllipseProfile>& GetSuperEllipse_choice2();

        TIGL_EXPORT virtual CPACSRectangleProfile& GetRectangle_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRectangle_choice1();

        TIGL_EXPORT virtual CPACSSuperEllipseProfile& GetSuperEllipse_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSuperEllipse_choice2();

    protected:
        CPACSProfileGeometry* m_parent;

        boost::optional<CPACSRectangleProfile>    m_rectangle_choice1;
        boost::optional<CPACSSuperEllipseProfile> m_superEllipse_choice2;

    private:
        CPACSStandardProfile(const CPACSStandardProfile&) = delete;
        CPACSStandardProfile& operator=(const CPACSStandardProfile&) = delete;

        CPACSStandardProfile(CPACSStandardProfile&&) = delete;
        CPACSStandardProfile& operator=(CPACSStandardProfile&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSStandardProfile = generated::CPACSStandardProfile;
using CCPACSProfileGeometry = generated::CPACSProfileGeometry;
} // namespace tigl
