// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashModelDefinition.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashModelDefinition::CPACSCrashModelDefinition(){}
        CPACSCrashModelDefinition::~CPACSCrashModelDefinition() {}
        
        void CPACSCrashModelDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element generalCrashModelElementSizesUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/generalCrashModelElementSizesUID")) {
                m_generalCrashModelElementSizesUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/generalCrashModelElementSizesUID");
            }
            else {
                LOG(ERROR) << "Required element generalCrashModelElementSizesUID is missing";
            }
            
            // read element detailedRegions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/detailedRegions")) {
                m_detailedRegions = boost::in_place();
                try {
                    m_detailedRegions->ReadCPACS(tixiHandle, xpath + "/detailedRegions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read detailedRegions at xpath << " << xpath << ": " << e.what();
                    m_detailedRegions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read detailedRegions at xpath << " << xpath << ": " << e.getError();
                    m_detailedRegions = boost::none;
                }
            }
            
        }
        
        void CPACSCrashModelDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element generalCrashModelElementSizesUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/generalCrashModelElementSizesUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/generalCrashModelElementSizesUID", m_generalCrashModelElementSizesUID);
            
            // write element detailedRegions
            if (m_detailedRegions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/detailedRegions");
                m_detailedRegions->WriteCPACS(tixiHandle, xpath + "/detailedRegions");
            }
            
        }
        
        const std::string& CPACSCrashModelDefinition::GetGeneralCrashModelElementSizesUID() const
        {
            return m_generalCrashModelElementSizesUID;
        }
        
        void CPACSCrashModelDefinition::SetGeneralCrashModelElementSizesUID(const std::string& value)
        {
            m_generalCrashModelElementSizesUID = value;
        }
        
        bool CPACSCrashModelDefinition::HasDetailedRegions() const
        {
            return static_cast<bool>(m_detailedRegions);
        }
        
        const CPACSCrashDetailedRegions& CPACSCrashModelDefinition::GetDetailedRegions() const
        {
            return *m_detailedRegions;
        }
        
        CPACSCrashDetailedRegions& CPACSCrashModelDefinition::GetDetailedRegions()
        {
            return *m_detailedRegions;
        }
        
    }
}
