// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSteffsSizingParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSSteffsSizingParameters::CPACSSteffsSizingParameters(){}
        CPACSSteffsSizingParameters::~CPACSSteffsSizingParameters() {}
        
        void CPACSSteffsSizingParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element skinStringerRatio
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/skinStringerRatio")) {
                m_skinStringerRatio = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/skinStringerRatio");
            }
            else {
                LOG(ERROR) << "Required element skinStringerRatio is missing";
            }
            
            // read element minSkinThickness
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/minSkinThickness")) {
                m_minSkinThickness = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/minSkinThickness");
            }
            else {
                LOG(ERROR) << "Required element minSkinThickness is missing";
            }
            
            // read element plasticityFactor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plasticityFactor")) {
                m_plasticityFactor = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/plasticityFactor");
            }
            else {
                LOG(ERROR) << "Required element plasticityFactor is missing";
            }
            
            // read element pointsPerPerimeter
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pointsPerPerimeter")) {
                m_pointsPerPerimeter = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/pointsPerPerimeter");
            }
            else {
                LOG(ERROR) << "Required element pointsPerPerimeter is missing";
            }
            
            // read element xPosCrossSectionCut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xPosCrossSectionCut")) {
                m_xPosCrossSectionCut = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xPosCrossSectionCut");
            }
            else {
                LOG(ERROR) << "Required element xPosCrossSectionCut is missing";
            }
            
            // read element considerCabinPressure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/considerCabinPressure")) {
                m_considerCabinPressure = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/considerCabinPressure");
            }
            else {
                LOG(ERROR) << "Required element considerCabinPressure is missing";
            }
            
            // read element considerStringerPositions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/considerStringerPositions")) {
                m_considerStringerPositions = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/considerStringerPositions");
            }
            else {
                LOG(ERROR) << "Required element considerStringerPositions is missing";
            }
            
            // read element consideredLoadCases
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/consideredLoadCases")) {
                m_consideredLoadCases = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/consideredLoadCases");
            }
            else {
                LOG(ERROR) << "Required element consideredLoadCases is missing";
            }
            
            // read element bucklingBoundaryCondition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bucklingBoundaryCondition")) {
                m_bucklingBoundaryCondition = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/bucklingBoundaryCondition");
            }
            else {
                LOG(ERROR) << "Required element bucklingBoundaryCondition is missing";
            }
            
            // read element tConstForStress
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tConstForStress")) {
                m_tConstForStress = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/tConstForStress");
            }
            else {
                LOG(ERROR) << "Required element tConstForStress is missing";
            }
            
        }
        
        void CPACSSteffsSizingParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element skinStringerRatio
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skinStringerRatio");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/skinStringerRatio", m_skinStringerRatio);
            
            // write element minSkinThickness
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/minSkinThickness");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/minSkinThickness", m_minSkinThickness);
            
            // write element plasticityFactor
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plasticityFactor");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plasticityFactor", m_plasticityFactor);
            
            // write element pointsPerPerimeter
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pointsPerPerimeter");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/pointsPerPerimeter", m_pointsPerPerimeter);
            
            // write element xPosCrossSectionCut
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xPosCrossSectionCut");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xPosCrossSectionCut", m_xPosCrossSectionCut);
            
            // write element considerCabinPressure
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/considerCabinPressure");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/considerCabinPressure", m_considerCabinPressure);
            
            // write element considerStringerPositions
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/considerStringerPositions");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/considerStringerPositions", m_considerStringerPositions);
            
            // write element consideredLoadCases
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/consideredLoadCases");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/consideredLoadCases", m_consideredLoadCases);
            
            // write element bucklingBoundaryCondition
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bucklingBoundaryCondition");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/bucklingBoundaryCondition", m_bucklingBoundaryCondition);
            
            // write element tConstForStress
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tConstForStress");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/tConstForStress", m_tConstForStress);
            
        }
        
        const double& CPACSSteffsSizingParameters::GetSkinStringerRatio() const
        {
            return m_skinStringerRatio;
        }
        
        void CPACSSteffsSizingParameters::SetSkinStringerRatio(const double& value)
        {
            m_skinStringerRatio = value;
        }
        
        const double& CPACSSteffsSizingParameters::GetMinSkinThickness() const
        {
            return m_minSkinThickness;
        }
        
        void CPACSSteffsSizingParameters::SetMinSkinThickness(const double& value)
        {
            m_minSkinThickness = value;
        }
        
        const double& CPACSSteffsSizingParameters::GetPlasticityFactor() const
        {
            return m_plasticityFactor;
        }
        
        void CPACSSteffsSizingParameters::SetPlasticityFactor(const double& value)
        {
            m_plasticityFactor = value;
        }
        
        const int& CPACSSteffsSizingParameters::GetPointsPerPerimeter() const
        {
            return m_pointsPerPerimeter;
        }
        
        void CPACSSteffsSizingParameters::SetPointsPerPerimeter(const int& value)
        {
            m_pointsPerPerimeter = value;
        }
        
        const double& CPACSSteffsSizingParameters::GetXPosCrossSectionCut() const
        {
            return m_xPosCrossSectionCut;
        }
        
        void CPACSSteffsSizingParameters::SetXPosCrossSectionCut(const double& value)
        {
            m_xPosCrossSectionCut = value;
        }
        
        const bool& CPACSSteffsSizingParameters::GetConsiderCabinPressure() const
        {
            return m_considerCabinPressure;
        }
        
        void CPACSSteffsSizingParameters::SetConsiderCabinPressure(const bool& value)
        {
            m_considerCabinPressure = value;
        }
        
        const bool& CPACSSteffsSizingParameters::GetConsiderStringerPositions() const
        {
            return m_considerStringerPositions;
        }
        
        void CPACSSteffsSizingParameters::SetConsiderStringerPositions(const bool& value)
        {
            m_considerStringerPositions = value;
        }
        
        const std::string& CPACSSteffsSizingParameters::GetConsideredLoadCases() const
        {
            return m_consideredLoadCases;
        }
        
        void CPACSSteffsSizingParameters::SetConsideredLoadCases(const std::string& value)
        {
            m_consideredLoadCases = value;
        }
        
        const std::string& CPACSSteffsSizingParameters::GetBucklingBoundaryCondition() const
        {
            return m_bucklingBoundaryCondition;
        }
        
        void CPACSSteffsSizingParameters::SetBucklingBoundaryCondition(const std::string& value)
        {
            m_bucklingBoundaryCondition = value;
        }
        
        const double& CPACSSteffsSizingParameters::GetTConstForStress() const
        {
            return m_tConstForStress;
        }
        
        void CPACSSteffsSizingParameters::SetTConstForStress(const double& value)
        {
            m_tConstForStress = value;
        }
        
    }
}
