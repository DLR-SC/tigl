// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSRadiativeForcing.h"
#include "CPACSDeltaTemperature.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSTrajectory
        
        // generated from /xsd:schema/xsd:complexType[844]
        class CPACSTrajectoryGlobal
        {
        public:
            TIGL_EXPORT CPACSTrajectoryGlobal();
            TIGL_EXPORT virtual ~CPACSTrajectoryGlobal();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetFuelMass() const;
            TIGL_EXPORT void SetFuelMass(const double& value);
            
            TIGL_EXPORT const double& GetTime() const;
            TIGL_EXPORT void SetTime(const double& value);
            
            TIGL_EXPORT const double& GetDistance() const;
            TIGL_EXPORT void SetDistance(const double& value);
            
            TIGL_EXPORT bool HasRadiativeForcing() const;
            TIGL_EXPORT const CPACSRadiativeForcing& GetRadiativeForcing() const;
            TIGL_EXPORT CPACSRadiativeForcing& GetRadiativeForcing();
            
            TIGL_EXPORT bool HasDeltaTemperature() const;
            TIGL_EXPORT const CPACSDeltaTemperature& GetDeltaTemperature() const;
            TIGL_EXPORT CPACSDeltaTemperature& GetDeltaTemperature();
            
            TIGL_EXPORT bool HasNOXMass() const;
            TIGL_EXPORT const double& GetNOXMass() const;
            TIGL_EXPORT void SetNOXMass(const double& value);
            
            TIGL_EXPORT bool HasNOXMassHumid() const;
            TIGL_EXPORT const double& GetNOXMassHumid() const;
            TIGL_EXPORT void SetNOXMassHumid(const double& value);
            
            TIGL_EXPORT bool HasCO2Mass() const;
            TIGL_EXPORT const double& GetCO2Mass() const;
            TIGL_EXPORT void SetCO2Mass(const double& value);
            
            TIGL_EXPORT bool HasCOMass() const;
            TIGL_EXPORT const double& GetCOMass() const;
            TIGL_EXPORT void SetCOMass(const double& value);
            
            TIGL_EXPORT bool HasH2OMass() const;
            TIGL_EXPORT const double& GetH2OMass() const;
            TIGL_EXPORT void SetH2OMass(const double& value);
            
            TIGL_EXPORT bool HasSO2Mass() const;
            TIGL_EXPORT const double& GetSO2Mass() const;
            TIGL_EXPORT void SetSO2Mass(const double& value);
            
            TIGL_EXPORT bool HasHCMass() const;
            TIGL_EXPORT const double& GetHCMass() const;
            TIGL_EXPORT void SetHCMass(const double& value);
            
            TIGL_EXPORT bool HasSootMass() const;
            TIGL_EXPORT const double& GetSootMass() const;
            TIGL_EXPORT void SetSootMass(const double& value);
            
        protected:
            double                                 m_fuelMass;
            double                                 m_time;
            double                                 m_distance;
            boost::optional<CPACSRadiativeForcing> m_radiativeForcing;
            boost::optional<CPACSDeltaTemperature> m_deltaTemperature;
            boost::optional<double>                m_nOXMass;
            boost::optional<double>                m_nOXMassHumid;
            boost::optional<double>                m_cO2Mass;
            boost::optional<double>                m_cOMass;
            boost::optional<double>                m_h2OMass;
            boost::optional<double>                m_sO2Mass;
            boost::optional<double>                m_hCMass;
            boost::optional<double>                m_sootMass;
            
        private:
            #ifdef HAVE_CPP11
            CPACSTrajectoryGlobal(const CPACSTrajectoryGlobal&) = delete;
            CPACSTrajectoryGlobal& operator=(const CPACSTrajectoryGlobal&) = delete;
            
            CPACSTrajectoryGlobal(CPACSTrajectoryGlobal&&) = delete;
            CPACSTrajectoryGlobal& operator=(CPACSTrajectoryGlobal&&) = delete;
            #else
            CPACSTrajectoryGlobal(const CPACSTrajectoryGlobal&);
            CPACSTrajectoryGlobal& operator=(const CPACSTrajectoryGlobal&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSTrajectoryGlobal = generated::CPACSTrajectoryGlobal;
    #else
    typedef generated::CPACSTrajectoryGlobal CCPACSTrajectoryGlobal;
    #endif
}
