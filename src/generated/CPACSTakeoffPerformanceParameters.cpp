// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTakeoffPerformanceParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSTakeoffPerformanceParameters::CPACSTakeoffPerformanceParameters(){}
        CPACSTakeoffPerformanceParameters::~CPACSTakeoffPerformanceParameters() {}
        
        void CPACSTakeoffPerformanceParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element todVLiftoff
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/todVLiftoff")) {
                m_todVLiftoff = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/todVLiftoff");
            }
            else {
                LOG(ERROR) << "Required element todVLiftoff is missing";
            }
            
            // read element todV2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/todV2")) {
                m_todV2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/todV2");
            }
            else {
                LOG(ERROR) << "Required element todV2 is missing";
            }
            
            // read element vElevOptimal
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vElevOptimal")) {
                m_vElevOptimal = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vElevOptimal");
            }
            else {
                LOG(ERROR) << "Required element vElevOptimal is missing";
            }
            
            // read element vRotationOptimal
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vRotationOptimal")) {
                m_vRotationOptimal = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vRotationOptimal");
            }
            else {
                LOG(ERROR) << "Required element vRotationOptimal is missing";
            }
            
            // read element vLiftoff
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vLiftoff")) {
                m_vLiftoff = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vLiftoff");
            }
            else {
                LOG(ERROR) << "Required element vLiftoff is missing";
            }
            
            // read element v2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/v2")) {
                m_v2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/v2");
            }
            else {
                LOG(ERROR) << "Required element v2 is missing";
            }
            
            // read element v1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/v1")) {
                m_v1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/v1");
            }
            else {
                LOG(ERROR) << "Required element v1 is missing";
            }
            
            // read element vMCG
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vMCG")) {
                m_vMCG = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vMCG");
            }
            else {
                LOG(ERROR) << "Required element vMCG is missing";
            }
            
            // read element gammaCheck
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/gammaCheck")) {
                m_gammaCheck = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/gammaCheck");
            }
            else {
                LOG(ERROR) << "Required element gammaCheck is missing";
            }
            
        }
        
        void CPACSTakeoffPerformanceParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element todVLiftoff
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/todVLiftoff");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/todVLiftoff", m_todVLiftoff);
            
            // write element todV2
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/todV2");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/todV2", m_todV2);
            
            // write element vElevOptimal
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vElevOptimal");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vElevOptimal", m_vElevOptimal);
            
            // write element vRotationOptimal
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vRotationOptimal");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vRotationOptimal", m_vRotationOptimal);
            
            // write element vLiftoff
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vLiftoff");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vLiftoff", m_vLiftoff);
            
            // write element v2
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/v2");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/v2", m_v2);
            
            // write element v1
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/v1");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/v1", m_v1);
            
            // write element vMCG
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vMCG");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vMCG", m_vMCG);
            
            // write element gammaCheck
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gammaCheck");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/gammaCheck", m_gammaCheck);
            
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetTodVLiftoff() const
        {
            return m_todVLiftoff;
        }
        
        void CPACSTakeoffPerformanceParameters::SetTodVLiftoff(const double& value)
        {
            m_todVLiftoff = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetTodV2() const
        {
            return m_todV2;
        }
        
        void CPACSTakeoffPerformanceParameters::SetTodV2(const double& value)
        {
            m_todV2 = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetVElevOptimal() const
        {
            return m_vElevOptimal;
        }
        
        void CPACSTakeoffPerformanceParameters::SetVElevOptimal(const double& value)
        {
            m_vElevOptimal = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetVRotationOptimal() const
        {
            return m_vRotationOptimal;
        }
        
        void CPACSTakeoffPerformanceParameters::SetVRotationOptimal(const double& value)
        {
            m_vRotationOptimal = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetVLiftoff() const
        {
            return m_vLiftoff;
        }
        
        void CPACSTakeoffPerformanceParameters::SetVLiftoff(const double& value)
        {
            m_vLiftoff = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetV2() const
        {
            return m_v2;
        }
        
        void CPACSTakeoffPerformanceParameters::SetV2(const double& value)
        {
            m_v2 = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetV1() const
        {
            return m_v1;
        }
        
        void CPACSTakeoffPerformanceParameters::SetV1(const double& value)
        {
            m_v1 = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetVMCG() const
        {
            return m_vMCG;
        }
        
        void CPACSTakeoffPerformanceParameters::SetVMCG(const double& value)
        {
            m_vMCG = value;
        }
        
        const double& CPACSTakeoffPerformanceParameters::GetGammaCheck() const
        {
            return m_gammaCheck;
        }
        
        void CPACSTakeoffPerformanceParameters::SetGammaCheck(const double& value)
        {
            m_gammaCheck = value;
        }
        
    }
}
