// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSSubLoad.h"
#include "CPACSSubLoad.h"
#include "CPACSSubLoad.h"
#include "CPACSSubLoad.h"
#include "CPACSSubLoad.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSCutLoad
        // CPACSNodalLoad
        
        // generated from /xsd:schema/xsd:complexType[488]
        class CPACSLoadBreakdown
        {
        public:
            TIGL_EXPORT CPACSLoadBreakdown();
            TIGL_EXPORT virtual ~CPACSLoadBreakdown();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasInertialLoads() const;
            TIGL_EXPORT const CPACSSubLoad& GetInertialLoads() const;
            TIGL_EXPORT CPACSSubLoad& GetInertialLoads();
            
            TIGL_EXPORT bool HasAeroLoads() const;
            TIGL_EXPORT const CPACSSubLoad& GetAeroLoads() const;
            TIGL_EXPORT CPACSSubLoad& GetAeroLoads();
            
            TIGL_EXPORT bool HasPropulsionLoads() const;
            TIGL_EXPORT const CPACSSubLoad& GetPropulsionLoads() const;
            TIGL_EXPORT CPACSSubLoad& GetPropulsionLoads();
            
            TIGL_EXPORT bool HasLandingGearLoads() const;
            TIGL_EXPORT const CPACSSubLoad& GetLandingGearLoads() const;
            TIGL_EXPORT CPACSSubLoad& GetLandingGearLoads();
            
            TIGL_EXPORT bool HasCalibrationLoads() const;
            TIGL_EXPORT const CPACSSubLoad& GetCalibrationLoads() const;
            TIGL_EXPORT CPACSSubLoad& GetCalibrationLoads();
            
        protected:
            boost::optional<CPACSSubLoad> m_inertialLoads;
            boost::optional<CPACSSubLoad> m_aeroLoads;
            boost::optional<CPACSSubLoad> m_propulsionLoads;
            boost::optional<CPACSSubLoad> m_landingGearLoads;
            boost::optional<CPACSSubLoad> m_calibrationLoads;
            
        private:
            #ifdef HAVE_CPP11
            CPACSLoadBreakdown(const CPACSLoadBreakdown&) = delete;
            CPACSLoadBreakdown& operator=(const CPACSLoadBreakdown&) = delete;
            
            CPACSLoadBreakdown(CPACSLoadBreakdown&&) = delete;
            CPACSLoadBreakdown& operator=(CPACSLoadBreakdown&&) = delete;
            #else
            CPACSLoadBreakdown(const CPACSLoadBreakdown&);
            CPACSLoadBreakdown& operator=(const CPACSLoadBreakdown&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSLoadBreakdown = generated::CPACSLoadBreakdown;
    #else
    typedef generated::CPACSLoadBreakdown CCPACSLoadBreakdown;
    #endif
}
