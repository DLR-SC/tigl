// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSEtaIsoLine.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCell;

namespace generated
{
    // This class is used in:
    // CPACSWingCell

    /// @brief Spanwise positioning of wing cells.
    /// 
    /// CellPositioningSpanwise defines the chordwise direction of a wing cell either in two eta
    /// (eta1 at leadingEdge and eta2 at trailingEdge) coordinates, via referencing a rib-uID or via a contour
    /// coordinate in chordwise direction.
    /// 
    class CPACSCellPositioningSpanwise : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSCellPositioningSpanwise(CCPACSWingCell* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSCellPositioningSpanwise();

        TIGL_EXPORT CCPACSWingCell* GetParent();

        TIGL_EXPORT const CCPACSWingCell* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<double>& GetContourCoordinate_choice1() const;
        TIGL_EXPORT virtual void SetContourCoordinate_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSEtaIsoLine>& GetEta1_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEtaIsoLine>& GetEta1_choice2();

        TIGL_EXPORT virtual const boost::optional<CCPACSEtaIsoLine>& GetEta2_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEtaIsoLine>& GetEta2_choice2();

        TIGL_EXPORT virtual const boost::optional<int>& GetRibNumber_choice3() const;
        TIGL_EXPORT virtual void SetRibNumber_choice3(const boost::optional<int>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetRibDefinitionUID_choice3() const;
        TIGL_EXPORT virtual void SetRibDefinitionUID_choice3(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual CCPACSEtaIsoLine& GetEta1_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEta1_choice2();

        TIGL_EXPORT virtual CCPACSEtaIsoLine& GetEta2_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEta2_choice2();

    protected:
        CCPACSWingCell* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Spanwise contour coordinate as spanwise border. 0 equals root, 1 equals tip.
        boost::optional<double>           m_contourCoordinate_choice1;

        /// Relative spanwise position of the forward end.
        boost::optional<CCPACSEtaIsoLine> m_eta1_choice2;

        /// Relative spanwise position of the rear end.
        boost::optional<CCPACSEtaIsoLine> m_eta2_choice2;

        /// RibNumber is the reference to the rib number of the rib set which is referenced by 'ribDefinitionUID'.
        boost::optional<int>              m_ribNumber_choice3;

        /// Reference to a ribDefinition set. The single rib of this ribDefinition set is defined by using 'ribNumber'.
        boost::optional<std::string>      m_ribDefinitionUID_choice3;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSCellPositioningSpanwise(const CPACSCellPositioningSpanwise&) = delete;
        CPACSCellPositioningSpanwise& operator=(const CPACSCellPositioningSpanwise&) = delete;

        CPACSCellPositioningSpanwise(CPACSCellPositioningSpanwise&&) = delete;
        CPACSCellPositioningSpanwise& operator=(CPACSCellPositioningSpanwise&&) = delete;
    };
} // namespace generated

// CPACSCellPositioningSpanwise is customized, use type CCPACSWingCellPositionSpanwise directly
} // namespace tigl
