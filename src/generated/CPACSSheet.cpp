// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSSheetList.h"
#include "CPACSSheet.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSheet::CPACSSheet(CCPACSSheetList* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSheet::~CPACSSheet()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_fromPointUID.empty()) m_uidMgr->TryUnregisterReference(m_fromPointUID, *this);
            if (!m_toPointUID.empty()) m_uidMgr->TryUnregisterReference(m_toPointUID, *this);
        }
    }

    const CCPACSSheetList* CPACSSheet::GetParent() const
    {
        return m_parent;
    }

    CCPACSSheetList* CPACSSheet::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSheet::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSheet::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSheet::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSheet::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSSheet::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element fromPointUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromPointUID")) {
            m_fromPointUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/fromPointUID");
            if (m_fromPointUID.empty()) {
                LOG(WARNING) << "Required element fromPointUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_fromPointUID.empty()) m_uidMgr->RegisterReference(m_fromPointUID, *this);
        }
        else {
            LOG(ERROR) << "Required element fromPointUID is missing at xpath " << xpath;
        }

        // read element continuityAtP1
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/continuityAtP1")) {
            m_continuityAtP1 = stringToCPACSContinuityAtP(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/continuityAtP1"));
        }

        // read element orientationAtP1
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/orientationAtP1")) {
            m_orientationAtP1 = boost::in_place(this, m_uidMgr);
            try {
                m_orientationAtP1->ReadCPACS(tixiHandle, xpath + "/orientationAtP1");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read orientationAtP1 at xpath " << xpath << ": " << e.what();
                m_orientationAtP1 = boost::none;
            }
        }

        // read element toPointUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/toPointUID")) {
            m_toPointUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/toPointUID");
            if (m_toPointUID.empty()) {
                LOG(WARNING) << "Required element toPointUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_toPointUID.empty()) m_uidMgr->RegisterReference(m_toPointUID, *this);
        }
        else {
            LOG(ERROR) << "Required element toPointUID is missing at xpath " << xpath;
        }

        // read element continuityAtP2
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/continuityAtP2")) {
            m_continuityAtP2 = stringToCPACSContinuityAtP(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/continuityAtP2"));
        }

        // read element orientationAtP2
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/orientationAtP2")) {
            m_orientationAtP2 = boost::in_place(this, m_uidMgr);
            try {
                m_orientationAtP2->ReadCPACS(tixiHandle, xpath + "/orientationAtP2");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read orientationAtP2 at xpath " << xpath << ": " << e.what();
                m_orientationAtP2 = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSSheet::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        if (m_name) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element fromPointUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromPointUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/fromPointUID", m_fromPointUID);

        // write element continuityAtP1
        if (m_continuityAtP1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuityAtP1");
            tixi::TixiSaveElement(tixiHandle, xpath + "/continuityAtP1", CPACSContinuityAtPToString(*m_continuityAtP1));
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/continuityAtP1")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/continuityAtP1");
            }
        }

        // write element orientationAtP1
        if (m_orientationAtP1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationAtP1");
            m_orientationAtP1->WriteCPACS(tixiHandle, xpath + "/orientationAtP1");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/orientationAtP1")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/orientationAtP1");
            }
        }

        // write element toPointUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toPointUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/toPointUID", m_toPointUID);

        // write element continuityAtP2
        if (m_continuityAtP2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuityAtP2");
            tixi::TixiSaveElement(tixiHandle, xpath + "/continuityAtP2", CPACSContinuityAtPToString(*m_continuityAtP2));
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/continuityAtP2")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/continuityAtP2");
            }
        }

        // write element orientationAtP2
        if (m_orientationAtP2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationAtP2");
            m_orientationAtP2->WriteCPACS(tixiHandle, xpath + "/orientationAtP2");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/orientationAtP2")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/orientationAtP2");
            }
        }

    }

    const std::string& CPACSSheet::GetUID() const
    {
        return m_uID;
    }

    void CPACSSheet::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSSheet::GetName() const
    {
        return m_name;
    }

    void CPACSSheet::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSSheet::GetDescription() const
    {
        return m_description;
    }

    void CPACSSheet::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const std::string& CPACSSheet::GetFromPointUID() const
    {
        return m_fromPointUID;
    }

    void CPACSSheet::SetFromPointUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_fromPointUID.empty()) m_uidMgr->TryUnregisterReference(m_fromPointUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_fromPointUID = value;
    }

    const boost::optional<CPACSContinuityAtP>& CPACSSheet::GetContinuityAtP1() const
    {
        return m_continuityAtP1;
    }

    void CPACSSheet::SetContinuityAtP1(const boost::optional<CPACSContinuityAtP>& value)
    {
        m_continuityAtP1 = value;
    }

    const boost::optional<CCPACSPointXY>& CPACSSheet::GetOrientationAtP1() const
    {
        return m_orientationAtP1;
    }

    boost::optional<CCPACSPointXY>& CPACSSheet::GetOrientationAtP1()
    {
        return m_orientationAtP1;
    }

    const std::string& CPACSSheet::GetToPointUID() const
    {
        return m_toPointUID;
    }

    void CPACSSheet::SetToPointUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_toPointUID.empty()) m_uidMgr->TryUnregisterReference(m_toPointUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_toPointUID = value;
    }

    const boost::optional<CPACSContinuityAtP>& CPACSSheet::GetContinuityAtP2() const
    {
        return m_continuityAtP2;
    }

    void CPACSSheet::SetContinuityAtP2(const boost::optional<CPACSContinuityAtP>& value)
    {
        m_continuityAtP2 = value;
    }

    const boost::optional<CCPACSPointXY>& CPACSSheet::GetOrientationAtP2() const
    {
        return m_orientationAtP2;
    }

    boost::optional<CCPACSPointXY>& CPACSSheet::GetOrientationAtP2()
    {
        return m_orientationAtP2;
    }

    CCPACSPointXY& CPACSSheet::GetOrientationAtP1(CreateIfNotExistsTag)
    {
        if (!m_orientationAtP1)
            m_orientationAtP1 = boost::in_place(this, m_uidMgr);
        return *m_orientationAtP1;
    }

    void CPACSSheet::RemoveOrientationAtP1()
    {
        m_orientationAtP1 = boost::none;
    }

    CCPACSPointXY& CPACSSheet::GetOrientationAtP2(CreateIfNotExistsTag)
    {
        if (!m_orientationAtP2)
            m_orientationAtP2 = boost::in_place(this, m_uidMgr);
        return *m_orientationAtP2;
    }

    void CPACSSheet::RemoveOrientationAtP2()
    {
        m_orientationAtP2 = boost::none;
    }

    const CTiglUIDObject* CPACSSheet::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSSheet::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_fromPointUID == oldUid) {
            m_fromPointUID = newUid;
        }
        if (m_toPointUID == oldUid) {
            m_toPointUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
