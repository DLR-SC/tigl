// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSheet.h"

namespace tigl
{
    namespace generated
    {
        CPACSSheet::CPACSSheet(){}
        CPACSSheet::~CPACSSheet() {}
        
        void CPACSSheet::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element fromPointUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromPointUID")) {
                m_fromPointUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fromPointUID");
            }
            else {
                LOG(ERROR) << "Required element fromPointUID is missing";
            }
            
            // read element continuityAtP1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/continuityAtP1")) {
                m_continuityAtP1 = boost::in_place();
                try {
                    m_continuityAtP1->ReadCPACS(tixiHandle, xpath + "/continuityAtP1");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read continuityAtP1 at xpath << " << xpath << ": " << e.what();
                    m_continuityAtP1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read continuityAtP1 at xpath << " << xpath << ": " << e.getError();
                    m_continuityAtP1 = boost::none;
                }
            }
            
            // read element orientationAtP1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientationAtP1")) {
                m_orientationAtP1 = boost::in_place();
                try {
                    m_orientationAtP1->ReadCPACS(tixiHandle, xpath + "/orientationAtP1");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientationAtP1 at xpath << " << xpath << ": " << e.what();
                    m_orientationAtP1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientationAtP1 at xpath << " << xpath << ": " << e.getError();
                    m_orientationAtP1 = boost::none;
                }
            }
            
            // read element toPointUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toPointUID")) {
                m_toPointUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toPointUID");
            }
            else {
                LOG(ERROR) << "Required element toPointUID is missing";
            }
            
            // read element continuityAtP2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/continuityAtP2")) {
                m_continuityAtP2 = boost::in_place();
                try {
                    m_continuityAtP2->ReadCPACS(tixiHandle, xpath + "/continuityAtP2");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read continuityAtP2 at xpath << " << xpath << ": " << e.what();
                    m_continuityAtP2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read continuityAtP2 at xpath << " << xpath << ": " << e.getError();
                    m_continuityAtP2 = boost::none;
                }
            }
            
            // read element orientationAtP2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientationAtP2")) {
                m_orientationAtP2 = boost::in_place();
                try {
                    m_orientationAtP2->ReadCPACS(tixiHandle, xpath + "/orientationAtP2");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientationAtP2 at xpath << " << xpath << ": " << e.what();
                    m_orientationAtP2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientationAtP2 at xpath << " << xpath << ": " << e.getError();
                    m_orientationAtP2 = boost::none;
                }
            }
            
        }
        
        void CPACSSheet::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element fromPointUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromPointUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromPointUID", m_fromPointUID);
            
            // write element continuityAtP1
            if (m_continuityAtP1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuityAtP1");
                m_continuityAtP1->WriteCPACS(tixiHandle, xpath + "/continuityAtP1");
            }
            
            // write element orientationAtP1
            if (m_orientationAtP1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationAtP1");
                m_orientationAtP1->WriteCPACS(tixiHandle, xpath + "/orientationAtP1");
            }
            
            // write element toPointUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toPointUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toPointUID", m_toPointUID);
            
            // write element continuityAtP2
            if (m_continuityAtP2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuityAtP2");
                m_continuityAtP2->WriteCPACS(tixiHandle, xpath + "/continuityAtP2");
            }
            
            // write element orientationAtP2
            if (m_orientationAtP2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationAtP2");
                m_orientationAtP2->WriteCPACS(tixiHandle, xpath + "/orientationAtP2");
            }
            
        }
        
        bool CPACSSheet::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSSheet::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSSheet::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSSheet::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSSheet::GetName() const
        {
            return *m_name;
        }
        
        void CPACSSheet::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSSheet::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSSheet::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSSheet::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSSheet::GetFromPointUID() const
        {
            return m_fromPointUID;
        }
        
        void CPACSSheet::SetFromPointUID(const std::string& value)
        {
            m_fromPointUID = value;
        }
        
        bool CPACSSheet::HasContinuityAtP1() const
        {
            return static_cast<bool>(m_continuityAtP1);
        }
        
        const CPACSSheet_continuityAtP1& CPACSSheet::GetContinuityAtP1() const
        {
            return *m_continuityAtP1;
        }
        
        CPACSSheet_continuityAtP1& CPACSSheet::GetContinuityAtP1()
        {
            return *m_continuityAtP1;
        }
        
        bool CPACSSheet::HasOrientationAtP1() const
        {
            return static_cast<bool>(m_orientationAtP1);
        }
        
        const CPACSPointXY& CPACSSheet::GetOrientationAtP1() const
        {
            return *m_orientationAtP1;
        }
        
        CPACSPointXY& CPACSSheet::GetOrientationAtP1()
        {
            return *m_orientationAtP1;
        }
        
        const std::string& CPACSSheet::GetToPointUID() const
        {
            return m_toPointUID;
        }
        
        void CPACSSheet::SetToPointUID(const std::string& value)
        {
            m_toPointUID = value;
        }
        
        bool CPACSSheet::HasContinuityAtP2() const
        {
            return static_cast<bool>(m_continuityAtP2);
        }
        
        const CPACSSheet_continuityAtP2& CPACSSheet::GetContinuityAtP2() const
        {
            return *m_continuityAtP2;
        }
        
        CPACSSheet_continuityAtP2& CPACSSheet::GetContinuityAtP2()
        {
            return *m_continuityAtP2;
        }
        
        bool CPACSSheet::HasOrientationAtP2() const
        {
            return static_cast<bool>(m_orientationAtP2);
        }
        
        const CPACSPointXY& CPACSSheet::GetOrientationAtP2() const
        {
            return *m_orientationAtP2;
        }
        
        CPACSPointXY& CPACSSheet::GetOrientationAtP2()
        {
            return *m_orientationAtP2;
        }
        
    }
}
