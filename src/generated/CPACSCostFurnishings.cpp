// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCostFurnishings.h"

namespace tigl
{
    namespace generated
    {
        CPACSCostFurnishings::CPACSCostFurnishings(){}
        CPACSCostFurnishings::~CPACSCostFurnishings() {}
        
        void CPACSCostFurnishings::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element costDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/costDescription")) {
                m_costDescription.ReadCPACS(tixiHandle, xpath + "/costDescription");
            }
            else {
                LOG(ERROR) << "Required element costDescription is missing";
            }
            
            // read element furnishingElements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/furnishingElements")) {
                m_furnishingElements = boost::in_place();
                try {
                    m_furnishingElements->ReadCPACS(tixiHandle, xpath + "/furnishingElements");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read furnishingElements at xpath << " << xpath << ": " << e.what();
                    m_furnishingElements = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read furnishingElements at xpath << " << xpath << ": " << e.getError();
                    m_furnishingElements = boost::none;
                }
            }
            
            // read element fixedEmergencyOxygenSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fixedEmergencyOxygenSystems")) {
                m_fixedEmergencyOxygenSystems = boost::in_place();
                try {
                    m_fixedEmergencyOxygenSystems->ReadCPACS(tixiHandle, xpath + "/fixedEmergencyOxygenSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fixedEmergencyOxygenSystems at xpath << " << xpath << ": " << e.what();
                    m_fixedEmergencyOxygenSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fixedEmergencyOxygenSystems at xpath << " << xpath << ": " << e.getError();
                    m_fixedEmergencyOxygenSystems = boost::none;
                }
            }
            
            // read element lightingSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lightingSystems")) {
                m_lightingSystems = boost::in_place();
                try {
                    m_lightingSystems->ReadCPACS(tixiHandle, xpath + "/lightingSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read lightingSystems at xpath << " << xpath << ": " << e.what();
                    m_lightingSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read lightingSystems at xpath << " << xpath << ": " << e.getError();
                    m_lightingSystems = boost::none;
                }
            }
            
            // read element waterInstallationSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/waterInstallationSystems")) {
                m_waterInstallationSystems = boost::in_place();
                try {
                    m_waterInstallationSystems->ReadCPACS(tixiHandle, xpath + "/waterInstallationSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read waterInstallationSystems at xpath << " << xpath << ": " << e.what();
                    m_waterInstallationSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read waterInstallationSystems at xpath << " << xpath << ": " << e.getError();
                    m_waterInstallationSystems = boost::none;
                }
            }
            
        }
        
        void CPACSCostFurnishings::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element costDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/costDescription");
            m_costDescription.WriteCPACS(tixiHandle, xpath + "/costDescription");
            
            // write element furnishingElements
            if (m_furnishingElements) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/furnishingElements");
                m_furnishingElements->WriteCPACS(tixiHandle, xpath + "/furnishingElements");
            }
            
            // write element fixedEmergencyOxygenSystems
            if (m_fixedEmergencyOxygenSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fixedEmergencyOxygenSystems");
                m_fixedEmergencyOxygenSystems->WriteCPACS(tixiHandle, xpath + "/fixedEmergencyOxygenSystems");
            }
            
            // write element lightingSystems
            if (m_lightingSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lightingSystems");
                m_lightingSystems->WriteCPACS(tixiHandle, xpath + "/lightingSystems");
            }
            
            // write element waterInstallationSystems
            if (m_waterInstallationSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/waterInstallationSystems");
                m_waterInstallationSystems->WriteCPACS(tixiHandle, xpath + "/waterInstallationSystems");
            }
            
        }
        
        const CPACSGenericCost& CPACSCostFurnishings::GetCostDescription() const
        {
            return m_costDescription;
        }
        
        CPACSGenericCost& CPACSCostFurnishings::GetCostDescription()
        {
            return m_costDescription;
        }
        
        bool CPACSCostFurnishings::HasFurnishingElements() const
        {
            return static_cast<bool>(m_furnishingElements);
        }
        
        const CPACSCostFurnishingElements& CPACSCostFurnishings::GetFurnishingElements() const
        {
            return *m_furnishingElements;
        }
        
        CPACSCostFurnishingElements& CPACSCostFurnishings::GetFurnishingElements()
        {
            return *m_furnishingElements;
        }
        
        bool CPACSCostFurnishings::HasFixedEmergencyOxygenSystems() const
        {
            return static_cast<bool>(m_fixedEmergencyOxygenSystems);
        }
        
        const CPACSCostFixedEmergencyOxygenSystems& CPACSCostFurnishings::GetFixedEmergencyOxygenSystems() const
        {
            return *m_fixedEmergencyOxygenSystems;
        }
        
        CPACSCostFixedEmergencyOxygenSystems& CPACSCostFurnishings::GetFixedEmergencyOxygenSystems()
        {
            return *m_fixedEmergencyOxygenSystems;
        }
        
        bool CPACSCostFurnishings::HasLightingSystems() const
        {
            return static_cast<bool>(m_lightingSystems);
        }
        
        const CPACSCostLightingSystems& CPACSCostFurnishings::GetLightingSystems() const
        {
            return *m_lightingSystems;
        }
        
        CPACSCostLightingSystems& CPACSCostFurnishings::GetLightingSystems()
        {
            return *m_lightingSystems;
        }
        
        bool CPACSCostFurnishings::HasWaterInstallationSystems() const
        {
            return static_cast<bool>(m_waterInstallationSystems);
        }
        
        const CPACSCostWaterInstallationSystems& CPACSCostFurnishings::GetWaterInstallationSystems() const
        {
            return *m_waterInstallationSystems;
        }
        
        CPACSCostWaterInstallationSystems& CPACSCostFurnishings::GetWaterInstallationSystems()
        {
            return *m_waterInstallationSystems;
        }
        
    }
}
