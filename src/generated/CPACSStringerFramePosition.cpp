// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSStringerFramePosition.h"

namespace tigl
{
    namespace generated
    {
        CPACSStringerFramePosition::CPACSStringerFramePosition(){}
        CPACSStringerFramePosition::~CPACSStringerFramePosition() {}
        
        void CPACSStringerFramePosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element structuralElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementUID")) {
                m_structuralElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementUID");
            }
            else {
                LOG(ERROR) << "Required element structuralElementUID is missing";
            }
            
            // read element positionX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionX")) {
                m_positionX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionX");
            }
            else {
                LOG(ERROR) << "Required element positionX is missing";
            }
            
            // read element referenceY
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/referenceY")) {
                m_referenceY = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/referenceY");
            }
            else {
                LOG(ERROR) << "Required element referenceY is missing";
            }
            
            // read element referenceZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/referenceZ")) {
                m_referenceZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/referenceZ");
            }
            else {
                LOG(ERROR) << "Required element referenceZ is missing";
            }
            
            // read element referenceAngle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/referenceAngle")) {
                m_referenceAngle = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/referenceAngle");
            }
            else {
                LOG(ERROR) << "Required element referenceAngle is missing";
            }
            
            // read element alignment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
                m_alignment = boost::in_place();
                try {
                    m_alignment->ReadCPACS(tixiHandle, xpath + "/alignment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.what();
                    m_alignment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.getError();
                    m_alignment = boost::none;
                }
            }
            
            // read element continuity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/continuity")) {
                m_continuity = boost::in_place();
                try {
                    m_continuity->ReadCPACS(tixiHandle, xpath + "/continuity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read continuity at xpath << " << xpath << ": " << e.what();
                    m_continuity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read continuity at xpath << " << xpath << ": " << e.getError();
                    m_continuity = boost::none;
                }
            }
            
            // read element interpolation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/interpolation")) {
                m_interpolation = boost::in_place();
                try {
                    m_interpolation->ReadCPACS(tixiHandle, xpath + "/interpolation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read interpolation at xpath << " << xpath << ": " << e.what();
                    m_interpolation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read interpolation at xpath << " << xpath << ": " << e.getError();
                    m_interpolation = boost::none;
                }
            }
            
        }
        
        void CPACSStringerFramePosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element structuralElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementUID", m_structuralElementUID);
            
            // write element positionX
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionX");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionX", m_positionX);
            
            // write element referenceY
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceY");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/referenceY", m_referenceY);
            
            // write element referenceZ
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceZ");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/referenceZ", m_referenceZ);
            
            // write element referenceAngle
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceAngle");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/referenceAngle", m_referenceAngle);
            
            // write element alignment
            if (m_alignment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alignment");
                m_alignment->WriteCPACS(tixiHandle, xpath + "/alignment");
            }
            
            // write element continuity
            if (m_continuity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/continuity");
                m_continuity->WriteCPACS(tixiHandle, xpath + "/continuity");
            }
            
            // write element interpolation
            if (m_interpolation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/interpolation");
                m_interpolation->WriteCPACS(tixiHandle, xpath + "/interpolation");
            }
            
        }
        
        bool CPACSStringerFramePosition::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSStringerFramePosition::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSStringerFramePosition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSStringerFramePosition::GetStructuralElementUID() const
        {
            return m_structuralElementUID;
        }
        
        void CPACSStringerFramePosition::SetStructuralElementUID(const std::string& value)
        {
            m_structuralElementUID = value;
        }
        
        const double& CPACSStringerFramePosition::GetPositionX() const
        {
            return m_positionX;
        }
        
        void CPACSStringerFramePosition::SetPositionX(const double& value)
        {
            m_positionX = value;
        }
        
        const double& CPACSStringerFramePosition::GetReferenceY() const
        {
            return m_referenceY;
        }
        
        void CPACSStringerFramePosition::SetReferenceY(const double& value)
        {
            m_referenceY = value;
        }
        
        const double& CPACSStringerFramePosition::GetReferenceZ() const
        {
            return m_referenceZ;
        }
        
        void CPACSStringerFramePosition::SetReferenceZ(const double& value)
        {
            m_referenceZ = value;
        }
        
        const double& CPACSStringerFramePosition::GetReferenceAngle() const
        {
            return m_referenceAngle;
        }
        
        void CPACSStringerFramePosition::SetReferenceAngle(const double& value)
        {
            m_referenceAngle = value;
        }
        
        bool CPACSStringerFramePosition::HasAlignment() const
        {
            return static_cast<bool>(m_alignment);
        }
        
        const CPACSAlignmentStringFrame& CPACSStringerFramePosition::GetAlignment() const
        {
            return *m_alignment;
        }
        
        CPACSAlignmentStringFrame& CPACSStringerFramePosition::GetAlignment()
        {
            return *m_alignment;
        }
        
        bool CPACSStringerFramePosition::HasContinuity() const
        {
            return static_cast<bool>(m_continuity);
        }
        
        const CPACSStringerFramePosition_continuity& CPACSStringerFramePosition::GetContinuity() const
        {
            return *m_continuity;
        }
        
        CPACSStringerFramePosition_continuity& CPACSStringerFramePosition::GetContinuity()
        {
            return *m_continuity;
        }
        
        bool CPACSStringerFramePosition::HasInterpolation() const
        {
            return static_cast<bool>(m_interpolation);
        }
        
        const CPACSStringerFramePosition_interpolation& CPACSStringerFramePosition::GetInterpolation() const
        {
            return *m_interpolation;
        }
        
        CPACSStringerFramePosition_interpolation& CPACSStringerFramePosition::GetInterpolation()
        {
            return *m_interpolation;
        }
        
    }
}
