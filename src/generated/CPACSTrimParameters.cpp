// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTrimParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSTrimParameters::CPACSTrimParameters(){}
        CPACSTrimParameters::~CPACSTrimParameters() {}
        
        void CPACSTrimParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element machNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
                m_machNumber = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/machNumber");
            }
            
            // read element reynoldsNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reynoldsNumber")) {
                m_reynoldsNumber = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/reynoldsNumber");
            }
            
            // read element airspeed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/airspeed")) {
                m_airspeed = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/airspeed");
            }
            
            // read element angleOfYaw
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfYaw")) {
                m_angleOfYaw = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angleOfYaw");
            }
            
            // read element angleOfAttack
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
                m_angleOfAttack = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angleOfAttack");
            }
            
            // read element loadFactorZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/loadFactorZ")) {
                m_loadFactorZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/loadFactorZ");
            }
            
            // read element targetLiftCoefficient
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/targetLiftCoefficient")) {
                m_targetLiftCoefficient = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/targetLiftCoefficient");
            }
            
            // read element quasiSteadyRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/quasiSteadyRotation")) {
                m_quasiSteadyRotation = boost::in_place();
                try {
                    m_quasiSteadyRotation->ReadCPACS(tixiHandle, xpath + "/quasiSteadyRotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read quasiSteadyRotation at xpath << " << xpath << ": " << e.what();
                    m_quasiSteadyRotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read quasiSteadyRotation at xpath << " << xpath << ": " << e.getError();
                    m_quasiSteadyRotation = boost::none;
                }
            }
            
        }
        
        void CPACSTrimParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element machNumber
            if (m_machNumber) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/machNumber");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/machNumber", *m_machNumber);
            }
            
            // write element reynoldsNumber
            if (m_reynoldsNumber) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reynoldsNumber");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/reynoldsNumber", *m_reynoldsNumber);
            }
            
            // write element airspeed
            if (m_airspeed) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airspeed");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/airspeed", *m_airspeed);
            }
            
            // write element angleOfYaw
            if (m_angleOfYaw) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfYaw");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleOfYaw", *m_angleOfYaw);
            }
            
            // write element angleOfAttack
            if (m_angleOfAttack) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfAttack");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleOfAttack", *m_angleOfAttack);
            }
            
            // write element loadFactorZ
            if (m_loadFactorZ) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/loadFactorZ");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/loadFactorZ", *m_loadFactorZ);
            }
            
            // write element targetLiftCoefficient
            if (m_targetLiftCoefficient) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/targetLiftCoefficient");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/targetLiftCoefficient", *m_targetLiftCoefficient);
            }
            
            // write element quasiSteadyRotation
            if (m_quasiSteadyRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/quasiSteadyRotation");
                m_quasiSteadyRotation->WriteCPACS(tixiHandle, xpath + "/quasiSteadyRotation");
            }
            
        }
        
        bool CPACSTrimParameters::HasMachNumber() const
        {
            return static_cast<bool>(m_machNumber);
        }
        
        const double& CPACSTrimParameters::GetMachNumber() const
        {
            return *m_machNumber;
        }
        
        void CPACSTrimParameters::SetMachNumber(const double& value)
        {
            m_machNumber = value;
        }
        
        bool CPACSTrimParameters::HasReynoldsNumber() const
        {
            return static_cast<bool>(m_reynoldsNumber);
        }
        
        const double& CPACSTrimParameters::GetReynoldsNumber() const
        {
            return *m_reynoldsNumber;
        }
        
        void CPACSTrimParameters::SetReynoldsNumber(const double& value)
        {
            m_reynoldsNumber = value;
        }
        
        bool CPACSTrimParameters::HasAirspeed() const
        {
            return static_cast<bool>(m_airspeed);
        }
        
        const double& CPACSTrimParameters::GetAirspeed() const
        {
            return *m_airspeed;
        }
        
        void CPACSTrimParameters::SetAirspeed(const double& value)
        {
            m_airspeed = value;
        }
        
        bool CPACSTrimParameters::HasAngleOfYaw() const
        {
            return static_cast<bool>(m_angleOfYaw);
        }
        
        const double& CPACSTrimParameters::GetAngleOfYaw() const
        {
            return *m_angleOfYaw;
        }
        
        void CPACSTrimParameters::SetAngleOfYaw(const double& value)
        {
            m_angleOfYaw = value;
        }
        
        bool CPACSTrimParameters::HasAngleOfAttack() const
        {
            return static_cast<bool>(m_angleOfAttack);
        }
        
        const double& CPACSTrimParameters::GetAngleOfAttack() const
        {
            return *m_angleOfAttack;
        }
        
        void CPACSTrimParameters::SetAngleOfAttack(const double& value)
        {
            m_angleOfAttack = value;
        }
        
        bool CPACSTrimParameters::HasLoadFactorZ() const
        {
            return static_cast<bool>(m_loadFactorZ);
        }
        
        const double& CPACSTrimParameters::GetLoadFactorZ() const
        {
            return *m_loadFactorZ;
        }
        
        void CPACSTrimParameters::SetLoadFactorZ(const double& value)
        {
            m_loadFactorZ = value;
        }
        
        bool CPACSTrimParameters::HasTargetLiftCoefficient() const
        {
            return static_cast<bool>(m_targetLiftCoefficient);
        }
        
        const double& CPACSTrimParameters::GetTargetLiftCoefficient() const
        {
            return *m_targetLiftCoefficient;
        }
        
        void CPACSTrimParameters::SetTargetLiftCoefficient(const double& value)
        {
            m_targetLiftCoefficient = value;
        }
        
        bool CPACSTrimParameters::HasQuasiSteadyRotation() const
        {
            return static_cast<bool>(m_quasiSteadyRotation);
        }
        
        const CPACSQuasiSteadyRotation& CPACSTrimParameters::GetQuasiSteadyRotation() const
        {
            return *m_quasiSteadyRotation;
        }
        
        CPACSQuasiSteadyRotation& CPACSTrimParameters::GetQuasiSteadyRotation()
        {
            return *m_quasiSteadyRotation;
        }
        
    }
}
