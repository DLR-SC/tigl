// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAeroDataSetForLoads.h"

namespace tigl
{
    namespace generated
    {
        CPACSAeroDataSetForLoads::CPACSAeroDataSetForLoads(){}
        CPACSAeroDataSetForLoads::~CPACSAeroDataSetForLoads() {}
        
        void CPACSAeroDataSetForLoads::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element flowCondition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flowCondition")) {
                m_flowCondition.ReadCPACS(tixiHandle, xpath + "/flowCondition");
            }
            else {
                LOG(ERROR) << "Required element flowCondition is missing";
            }
            
            // read element totalCoefficients
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/totalCoefficients")) {
                m_totalCoefficients = boost::in_place();
                try {
                    m_totalCoefficients->ReadCPACS(tixiHandle, xpath + "/totalCoefficients");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read totalCoefficients at xpath << " << xpath << ": " << e.what();
                    m_totalCoefficients = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read totalCoefficients at xpath << " << xpath << ": " << e.getError();
                    m_totalCoefficients = boost::none;
                }
            }
            
            // read element wings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wings")) {
                m_wings = boost::in_place();
                try {
                    m_wings->ReadCPACS(tixiHandle, xpath + "/wings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.what();
                    m_wings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.getError();
                    m_wings = boost::none;
                }
            }
            
            // read element fuselages
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselages")) {
                m_fuselages = boost::in_place();
                try {
                    m_fuselages->ReadCPACS(tixiHandle, xpath + "/fuselages");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.what();
                    m_fuselages = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.getError();
                    m_fuselages = boost::none;
                }
            }
            
            // read element genericComponents
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/genericComponents")) {
                m_genericComponents = boost::in_place();
                try {
                    m_genericComponents->ReadCPACS(tixiHandle, xpath + "/genericComponents");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read genericComponents at xpath << " << xpath << ": " << e.what();
                    m_genericComponents = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read genericComponents at xpath << " << xpath << ": " << e.getError();
                    m_genericComponents = boost::none;
                }
            }
            
        }
        
        void CPACSAeroDataSetForLoads::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element flowCondition
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flowCondition");
            m_flowCondition.WriteCPACS(tixiHandle, xpath + "/flowCondition");
            
            // write element totalCoefficients
            if (m_totalCoefficients) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/totalCoefficients");
                m_totalCoefficients->WriteCPACS(tixiHandle, xpath + "/totalCoefficients");
            }
            
            // write element wings
            if (m_wings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wings");
                m_wings->WriteCPACS(tixiHandle, xpath + "/wings");
            }
            
            // write element fuselages
            if (m_fuselages) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselages");
                m_fuselages->WriteCPACS(tixiHandle, xpath + "/fuselages");
            }
            
            // write element genericComponents
            if (m_genericComponents) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericComponents");
                m_genericComponents->WriteCPACS(tixiHandle, xpath + "/genericComponents");
            }
            
        }
        
        const std::string& CPACSAeroDataSetForLoads::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSAeroDataSetForLoads::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSFlowCondition& CPACSAeroDataSetForLoads::GetFlowCondition() const
        {
            return m_flowCondition;
        }
        
        CPACSFlowCondition& CPACSAeroDataSetForLoads::GetFlowCondition()
        {
            return m_flowCondition;
        }
        
        bool CPACSAeroDataSetForLoads::HasTotalCoefficients() const
        {
            return static_cast<bool>(m_totalCoefficients);
        }
        
        const CPACSCoefficients& CPACSAeroDataSetForLoads::GetTotalCoefficients() const
        {
            return *m_totalCoefficients;
        }
        
        CPACSCoefficients& CPACSAeroDataSetForLoads::GetTotalCoefficients()
        {
            return *m_totalCoefficients;
        }
        
        bool CPACSAeroDataSetForLoads::HasWings() const
        {
            return static_cast<bool>(m_wings);
        }
        
        const CPACSWingsCoefficients& CPACSAeroDataSetForLoads::GetWings() const
        {
            return *m_wings;
        }
        
        CPACSWingsCoefficients& CPACSAeroDataSetForLoads::GetWings()
        {
            return *m_wings;
        }
        
        bool CPACSAeroDataSetForLoads::HasFuselages() const
        {
            return static_cast<bool>(m_fuselages);
        }
        
        const CPACSFuselagesCoefficients& CPACSAeroDataSetForLoads::GetFuselages() const
        {
            return *m_fuselages;
        }
        
        CPACSFuselagesCoefficients& CPACSAeroDataSetForLoads::GetFuselages()
        {
            return *m_fuselages;
        }
        
        bool CPACSAeroDataSetForLoads::HasGenericComponents() const
        {
            return static_cast<bool>(m_genericComponents);
        }
        
        const CPACSGenericComponentsCoefficients& CPACSAeroDataSetForLoads::GetGenericComponents() const
        {
            return *m_genericComponents;
        }
        
        CPACSGenericComponentsCoefficients& CPACSAeroDataSetForLoads::GetGenericComponents()
        {
            return *m_genericComponents;
        }
        
    }
}
