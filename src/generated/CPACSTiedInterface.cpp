// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTiedInterface.h"

namespace tigl
{
    namespace generated
    {
        CPACSTiedInterface::CPACSTiedInterface(){}
        CPACSTiedInterface::~CPACSTiedInterface() {}
        
        void CPACSTiedInterface::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element structuralMember1UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralMember1UID")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralMember1UID", m_structuralMember1UID);
            }
            
            // read element structuralMember2UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralMember2UID")) {
                tixihelper::TixiReadElements(tixiHandle, xpath + "/structuralMember2UID", m_structuralMember2UID);
            }
            
            // read element connectionSearchRadius
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/connectionSearchRadius")) {
                m_connectionSearchRadius = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/connectionSearchRadius");
            }
            
        }
        
        void CPACSTiedInterface::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element structuralMember1UID
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralMember1UID", m_structuralMember1UID);
            
            // write element structuralMember2UID
            tixihelper::TixiSaveElements(tixiHandle, xpath + "/structuralMember2UID", m_structuralMember2UID);
            
            // write element connectionSearchRadius
            if (m_connectionSearchRadius) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/connectionSearchRadius");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/connectionSearchRadius", *m_connectionSearchRadius);
            }
            
        }
        
        const std::vector<std::string>& CPACSTiedInterface::GetStructuralMember1UID() const
        {
            return m_structuralMember1UID;
        }
        
        void CPACSTiedInterface::SetStructuralMember1UID(const std::vector<std::string>& value)
        {
            m_structuralMember1UID = value;
        }
        
        const std::vector<std::string>& CPACSTiedInterface::GetStructuralMember2UID() const
        {
            return m_structuralMember2UID;
        }
        
        void CPACSTiedInterface::SetStructuralMember2UID(const std::vector<std::string>& value)
        {
            m_structuralMember2UID = value;
        }
        
        bool CPACSTiedInterface::HasConnectionSearchRadius() const
        {
            return static_cast<bool>(m_connectionSearchRadius);
        }
        
        const double& CPACSTiedInterface::GetConnectionSearchRadius() const
        {
            return *m_connectionSearchRadius;
        }
        
        void CPACSTiedInterface::SetConnectionSearchRadius(const double& value)
        {
            m_connectionSearchRadius = value;
        }
        
    }
}
