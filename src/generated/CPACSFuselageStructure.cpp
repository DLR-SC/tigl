// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFuselageStructure.h"

namespace tigl
{
    namespace generated
    {
        CPACSFuselageStructure::CPACSFuselageStructure(){}
        CPACSFuselageStructure::~CPACSFuselageStructure() {}
        
        void CPACSFuselageStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element skinSegments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/skinSegments")) {
                m_skinSegments = boost::in_place();
                try {
                    m_skinSegments->ReadCPACS(tixiHandle, xpath + "/skinSegments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read skinSegments at xpath << " << xpath << ": " << e.what();
                    m_skinSegments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read skinSegments at xpath << " << xpath << ": " << e.getError();
                    m_skinSegments = boost::none;
                }
            }
            
            // read element stringers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/stringers")) {
                m_stringers = boost::in_place();
                try {
                    m_stringers->ReadCPACS(tixiHandle, xpath + "/stringers");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read stringers at xpath << " << xpath << ": " << e.what();
                    m_stringers = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read stringers at xpath << " << xpath << ": " << e.getError();
                    m_stringers = boost::none;
                }
            }
            
            // read element frames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/frames")) {
                m_frames = boost::in_place();
                try {
                    m_frames->ReadCPACS(tixiHandle, xpath + "/frames");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read frames at xpath << " << xpath << ": " << e.what();
                    m_frames = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read frames at xpath << " << xpath << ": " << e.getError();
                    m_frames = boost::none;
                }
            }
            
            // read element paxCrossBeams
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxCrossBeams")) {
                m_paxCrossBeams = boost::in_place();
                try {
                    m_paxCrossBeams->ReadCPACS(tixiHandle, xpath + "/paxCrossBeams");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read paxCrossBeams at xpath << " << xpath << ": " << e.what();
                    m_paxCrossBeams = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read paxCrossBeams at xpath << " << xpath << ": " << e.getError();
                    m_paxCrossBeams = boost::none;
                }
            }
            
            // read element paxCrossBeamStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxCrossBeamStruts")) {
                m_paxCrossBeamStruts = boost::in_place();
                try {
                    m_paxCrossBeamStruts->ReadCPACS(tixiHandle, xpath + "/paxCrossBeamStruts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read paxCrossBeamStruts at xpath << " << xpath << ": " << e.what();
                    m_paxCrossBeamStruts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read paxCrossBeamStruts at xpath << " << xpath << ": " << e.getError();
                    m_paxCrossBeamStruts = boost::none;
                }
            }
            
            // read element cargoCrossBeams
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cargoCrossBeams")) {
                m_cargoCrossBeams = boost::in_place();
                try {
                    m_cargoCrossBeams->ReadCPACS(tixiHandle, xpath + "/cargoCrossBeams");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cargoCrossBeams at xpath << " << xpath << ": " << e.what();
                    m_cargoCrossBeams = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cargoCrossBeams at xpath << " << xpath << ": " << e.getError();
                    m_cargoCrossBeams = boost::none;
                }
            }
            
            // read element cargoCrossBeamStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cargoCrossBeamStruts")) {
                m_cargoCrossBeamStruts = boost::in_place();
                try {
                    m_cargoCrossBeamStruts->ReadCPACS(tixiHandle, xpath + "/cargoCrossBeamStruts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cargoCrossBeamStruts at xpath << " << xpath << ": " << e.what();
                    m_cargoCrossBeamStruts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cargoCrossBeamStruts at xpath << " << xpath << ": " << e.getError();
                    m_cargoCrossBeamStruts = boost::none;
                }
            }
            
            // read element longFloorBeams
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/longFloorBeams")) {
                m_longFloorBeams = boost::in_place();
                try {
                    m_longFloorBeams->ReadCPACS(tixiHandle, xpath + "/longFloorBeams");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read longFloorBeams at xpath << " << xpath << ": " << e.what();
                    m_longFloorBeams = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read longFloorBeams at xpath << " << xpath << ": " << e.getError();
                    m_longFloorBeams = boost::none;
                }
            }
            
            // read element generalStructuralMembers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/generalStructuralMembers")) {
                m_generalStructuralMembers = boost::in_place();
                try {
                    m_generalStructuralMembers->ReadCPACS(tixiHandle, xpath + "/generalStructuralMembers");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read generalStructuralMembers at xpath << " << xpath << ": " << e.what();
                    m_generalStructuralMembers = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read generalStructuralMembers at xpath << " << xpath << ": " << e.getError();
                    m_generalStructuralMembers = boost::none;
                }
            }
            
            // read element floorPanels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/floorPanels")) {
                m_floorPanels = boost::in_place();
                try {
                    m_floorPanels->ReadCPACS(tixiHandle, xpath + "/floorPanels");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read floorPanels at xpath << " << xpath << ": " << e.what();
                    m_floorPanels = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read floorPanels at xpath << " << xpath << ": " << e.getError();
                    m_floorPanels = boost::none;
                }
            }
            
            // read element pressureBulkheads
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pressureBulkheads")) {
                m_pressureBulkheads = boost::in_place();
                try {
                    m_pressureBulkheads->ReadCPACS(tixiHandle, xpath + "/pressureBulkheads");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read pressureBulkheads at xpath << " << xpath << ": " << e.what();
                    m_pressureBulkheads = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read pressureBulkheads at xpath << " << xpath << ": " << e.getError();
                    m_pressureBulkheads = boost::none;
                }
            }
            
            // read element windows
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/windows")) {
                m_windows = boost::in_place();
                try {
                    m_windows->ReadCPACS(tixiHandle, xpath + "/windows");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read windows at xpath << " << xpath << ": " << e.what();
                    m_windows = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read windows at xpath << " << xpath << ": " << e.getError();
                    m_windows = boost::none;
                }
            }
            
            // read element paxDoors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxDoors")) {
                m_paxDoors = boost::in_place();
                try {
                    m_paxDoors->ReadCPACS(tixiHandle, xpath + "/paxDoors");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read paxDoors at xpath << " << xpath << ": " << e.what();
                    m_paxDoors = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read paxDoors at xpath << " << xpath << ": " << e.getError();
                    m_paxDoors = boost::none;
                }
            }
            
            // read element cargoDoors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cargoDoors")) {
                m_cargoDoors = boost::in_place();
                try {
                    m_cargoDoors->ReadCPACS(tixiHandle, xpath + "/cargoDoors");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cargoDoors at xpath << " << xpath << ": " << e.what();
                    m_cargoDoors = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cargoDoors at xpath << " << xpath << ": " << e.getError();
                    m_cargoDoors = boost::none;
                }
            }
            
            // read element intercostals
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/intercostals")) {
                m_intercostals = boost::in_place();
                try {
                    m_intercostals->ReadCPACS(tixiHandle, xpath + "/intercostals");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read intercostals at xpath << " << xpath << ": " << e.what();
                    m_intercostals = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read intercostals at xpath << " << xpath << ": " << e.getError();
                    m_intercostals = boost::none;
                }
            }
            
            // read element centerFuselageAreas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageAreas")) {
                m_centerFuselageAreas = boost::in_place();
                try {
                    m_centerFuselageAreas->ReadCPACS(tixiHandle, xpath + "/centerFuselageAreas");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read centerFuselageAreas at xpath << " << xpath << ": " << e.what();
                    m_centerFuselageAreas = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read centerFuselageAreas at xpath << " << xpath << ": " << e.getError();
                    m_centerFuselageAreas = boost::none;
                }
            }
            
            // read element tailplaneAttachmentArea
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tailplaneAttachmentArea")) {
                m_tailplaneAttachmentArea = boost::in_place();
                try {
                    m_tailplaneAttachmentArea->ReadCPACS(tixiHandle, xpath + "/tailplaneAttachmentArea");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read tailplaneAttachmentArea at xpath << " << xpath << ": " << e.what();
                    m_tailplaneAttachmentArea = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read tailplaneAttachmentArea at xpath << " << xpath << ": " << e.getError();
                    m_tailplaneAttachmentArea = boost::none;
                }
            }
            
            // read element interfaceDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/interfaceDefinitions")) {
                m_interfaceDefinitions = boost::in_place();
                try {
                    m_interfaceDefinitions->ReadCPACS(tixiHandle, xpath + "/interfaceDefinitions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read interfaceDefinitions at xpath << " << xpath << ": " << e.what();
                    m_interfaceDefinitions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read interfaceDefinitions at xpath << " << xpath << ": " << e.getError();
                    m_interfaceDefinitions = boost::none;
                }
            }
            
            // read element UIDGroupDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/UIDGroupDefinitions")) {
                m_UIDGroupDefinitions = boost::in_place();
                try {
                    m_UIDGroupDefinitions->ReadCPACS(tixiHandle, xpath + "/UIDGroupDefinitions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read UIDGroupDefinitions at xpath << " << xpath << ": " << e.what();
                    m_UIDGroupDefinitions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read UIDGroupDefinitions at xpath << " << xpath << ": " << e.getError();
                    m_UIDGroupDefinitions = boost::none;
                }
            }
            
        }
        
        void CPACSFuselageStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element skinSegments
            if (m_skinSegments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skinSegments");
                m_skinSegments->WriteCPACS(tixiHandle, xpath + "/skinSegments");
            }
            
            // write element stringers
            if (m_stringers) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringers");
                m_stringers->WriteCPACS(tixiHandle, xpath + "/stringers");
            }
            
            // write element frames
            if (m_frames) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frames");
                m_frames->WriteCPACS(tixiHandle, xpath + "/frames");
            }
            
            // write element paxCrossBeams
            if (m_paxCrossBeams) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxCrossBeams");
                m_paxCrossBeams->WriteCPACS(tixiHandle, xpath + "/paxCrossBeams");
            }
            
            // write element paxCrossBeamStruts
            if (m_paxCrossBeamStruts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxCrossBeamStruts");
                m_paxCrossBeamStruts->WriteCPACS(tixiHandle, xpath + "/paxCrossBeamStruts");
            }
            
            // write element cargoCrossBeams
            if (m_cargoCrossBeams) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoCrossBeams");
                m_cargoCrossBeams->WriteCPACS(tixiHandle, xpath + "/cargoCrossBeams");
            }
            
            // write element cargoCrossBeamStruts
            if (m_cargoCrossBeamStruts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoCrossBeamStruts");
                m_cargoCrossBeamStruts->WriteCPACS(tixiHandle, xpath + "/cargoCrossBeamStruts");
            }
            
            // write element longFloorBeams
            if (m_longFloorBeams) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/longFloorBeams");
                m_longFloorBeams->WriteCPACS(tixiHandle, xpath + "/longFloorBeams");
            }
            
            // write element generalStructuralMembers
            if (m_generalStructuralMembers) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/generalStructuralMembers");
                m_generalStructuralMembers->WriteCPACS(tixiHandle, xpath + "/generalStructuralMembers");
            }
            
            // write element floorPanels
            if (m_floorPanels) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/floorPanels");
                m_floorPanels->WriteCPACS(tixiHandle, xpath + "/floorPanels");
            }
            
            // write element pressureBulkheads
            if (m_pressureBulkheads) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pressureBulkheads");
                m_pressureBulkheads->WriteCPACS(tixiHandle, xpath + "/pressureBulkheads");
            }
            
            // write element windows
            if (m_windows) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/windows");
                m_windows->WriteCPACS(tixiHandle, xpath + "/windows");
            }
            
            // write element paxDoors
            if (m_paxDoors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxDoors");
                m_paxDoors->WriteCPACS(tixiHandle, xpath + "/paxDoors");
            }
            
            // write element cargoDoors
            if (m_cargoDoors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoDoors");
                m_cargoDoors->WriteCPACS(tixiHandle, xpath + "/cargoDoors");
            }
            
            // write element intercostals
            if (m_intercostals) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/intercostals");
                m_intercostals->WriteCPACS(tixiHandle, xpath + "/intercostals");
            }
            
            // write element centerFuselageAreas
            if (m_centerFuselageAreas) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageAreas");
                m_centerFuselageAreas->WriteCPACS(tixiHandle, xpath + "/centerFuselageAreas");
            }
            
            // write element tailplaneAttachmentArea
            if (m_tailplaneAttachmentArea) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tailplaneAttachmentArea");
                m_tailplaneAttachmentArea->WriteCPACS(tixiHandle, xpath + "/tailplaneAttachmentArea");
            }
            
            // write element interfaceDefinitions
            if (m_interfaceDefinitions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/interfaceDefinitions");
                m_interfaceDefinitions->WriteCPACS(tixiHandle, xpath + "/interfaceDefinitions");
            }
            
            // write element UIDGroupDefinitions
            if (m_UIDGroupDefinitions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/UIDGroupDefinitions");
                m_UIDGroupDefinitions->WriteCPACS(tixiHandle, xpath + "/UIDGroupDefinitions");
            }
            
        }
        
        bool CPACSFuselageStructure::HasSkinSegments() const
        {
            return static_cast<bool>(m_skinSegments);
        }
        
        const CPACSSkinSegments& CPACSFuselageStructure::GetSkinSegments() const
        {
            return *m_skinSegments;
        }
        
        CPACSSkinSegments& CPACSFuselageStructure::GetSkinSegments()
        {
            return *m_skinSegments;
        }
        
        bool CPACSFuselageStructure::HasStringers() const
        {
            return static_cast<bool>(m_stringers);
        }
        
        const CPACSStringersAssembly& CPACSFuselageStructure::GetStringers() const
        {
            return *m_stringers;
        }
        
        CPACSStringersAssembly& CPACSFuselageStructure::GetStringers()
        {
            return *m_stringers;
        }
        
        bool CPACSFuselageStructure::HasFrames() const
        {
            return static_cast<bool>(m_frames);
        }
        
        const CPACSFramesAssembly& CPACSFuselageStructure::GetFrames() const
        {
            return *m_frames;
        }
        
        CPACSFramesAssembly& CPACSFuselageStructure::GetFrames()
        {
            return *m_frames;
        }
        
        bool CPACSFuselageStructure::HasPaxCrossBeams() const
        {
            return static_cast<bool>(m_paxCrossBeams);
        }
        
        const CPACSPaxCrossBeamsAssembly& CPACSFuselageStructure::GetPaxCrossBeams() const
        {
            return *m_paxCrossBeams;
        }
        
        CPACSPaxCrossBeamsAssembly& CPACSFuselageStructure::GetPaxCrossBeams()
        {
            return *m_paxCrossBeams;
        }
        
        bool CPACSFuselageStructure::HasPaxCrossBeamStruts() const
        {
            return static_cast<bool>(m_paxCrossBeamStruts);
        }
        
        const CPACSPaxCrossBeamStrutsAssembly& CPACSFuselageStructure::GetPaxCrossBeamStruts() const
        {
            return *m_paxCrossBeamStruts;
        }
        
        CPACSPaxCrossBeamStrutsAssembly& CPACSFuselageStructure::GetPaxCrossBeamStruts()
        {
            return *m_paxCrossBeamStruts;
        }
        
        bool CPACSFuselageStructure::HasCargoCrossBeams() const
        {
            return static_cast<bool>(m_cargoCrossBeams);
        }
        
        const CPACSCargoCrossBeamsAssembly& CPACSFuselageStructure::GetCargoCrossBeams() const
        {
            return *m_cargoCrossBeams;
        }
        
        CPACSCargoCrossBeamsAssembly& CPACSFuselageStructure::GetCargoCrossBeams()
        {
            return *m_cargoCrossBeams;
        }
        
        bool CPACSFuselageStructure::HasCargoCrossBeamStruts() const
        {
            return static_cast<bool>(m_cargoCrossBeamStruts);
        }
        
        const CPACSCargoCrossBeamStrutsAssembly& CPACSFuselageStructure::GetCargoCrossBeamStruts() const
        {
            return *m_cargoCrossBeamStruts;
        }
        
        CPACSCargoCrossBeamStrutsAssembly& CPACSFuselageStructure::GetCargoCrossBeamStruts()
        {
            return *m_cargoCrossBeamStruts;
        }
        
        bool CPACSFuselageStructure::HasLongFloorBeams() const
        {
            return static_cast<bool>(m_longFloorBeams);
        }
        
        const CPACSLongFloorBeamsAssembly& CPACSFuselageStructure::GetLongFloorBeams() const
        {
            return *m_longFloorBeams;
        }
        
        CPACSLongFloorBeamsAssembly& CPACSFuselageStructure::GetLongFloorBeams()
        {
            return *m_longFloorBeams;
        }
        
        bool CPACSFuselageStructure::HasGeneralStructuralMembers() const
        {
            return static_cast<bool>(m_generalStructuralMembers);
        }
        
        const CPACSGeneralStructuralMembersAssembly& CPACSFuselageStructure::GetGeneralStructuralMembers() const
        {
            return *m_generalStructuralMembers;
        }
        
        CPACSGeneralStructuralMembersAssembly& CPACSFuselageStructure::GetGeneralStructuralMembers()
        {
            return *m_generalStructuralMembers;
        }
        
        bool CPACSFuselageStructure::HasFloorPanels() const
        {
            return static_cast<bool>(m_floorPanels);
        }
        
        const CPACSFloorPanels& CPACSFuselageStructure::GetFloorPanels() const
        {
            return *m_floorPanels;
        }
        
        CPACSFloorPanels& CPACSFuselageStructure::GetFloorPanels()
        {
            return *m_floorPanels;
        }
        
        bool CPACSFuselageStructure::HasPressureBulkheads() const
        {
            return static_cast<bool>(m_pressureBulkheads);
        }
        
        const CPACSPressureBulkheadAssembly& CPACSFuselageStructure::GetPressureBulkheads() const
        {
            return *m_pressureBulkheads;
        }
        
        CPACSPressureBulkheadAssembly& CPACSFuselageStructure::GetPressureBulkheads()
        {
            return *m_pressureBulkheads;
        }
        
        bool CPACSFuselageStructure::HasWindows() const
        {
            return static_cast<bool>(m_windows);
        }
        
        const CPACSWindowsAssembly& CPACSFuselageStructure::GetWindows() const
        {
            return *m_windows;
        }
        
        CPACSWindowsAssembly& CPACSFuselageStructure::GetWindows()
        {
            return *m_windows;
        }
        
        bool CPACSFuselageStructure::HasPaxDoors() const
        {
            return static_cast<bool>(m_paxDoors);
        }
        
        const CPACSPaxDoorsAssembly& CPACSFuselageStructure::GetPaxDoors() const
        {
            return *m_paxDoors;
        }
        
        CPACSPaxDoorsAssembly& CPACSFuselageStructure::GetPaxDoors()
        {
            return *m_paxDoors;
        }
        
        bool CPACSFuselageStructure::HasCargoDoors() const
        {
            return static_cast<bool>(m_cargoDoors);
        }
        
        const CPACSCargoDoorsAssembly& CPACSFuselageStructure::GetCargoDoors() const
        {
            return *m_cargoDoors;
        }
        
        CPACSCargoDoorsAssembly& CPACSFuselageStructure::GetCargoDoors()
        {
            return *m_cargoDoors;
        }
        
        bool CPACSFuselageStructure::HasIntercostals() const
        {
            return static_cast<bool>(m_intercostals);
        }
        
        const CPACSIntercostalsAssembly& CPACSFuselageStructure::GetIntercostals() const
        {
            return *m_intercostals;
        }
        
        CPACSIntercostalsAssembly& CPACSFuselageStructure::GetIntercostals()
        {
            return *m_intercostals;
        }
        
        bool CPACSFuselageStructure::HasCenterFuselageAreas() const
        {
            return static_cast<bool>(m_centerFuselageAreas);
        }
        
        const CPACSCenterFuselageAreasAssembly& CPACSFuselageStructure::GetCenterFuselageAreas() const
        {
            return *m_centerFuselageAreas;
        }
        
        CPACSCenterFuselageAreasAssembly& CPACSFuselageStructure::GetCenterFuselageAreas()
        {
            return *m_centerFuselageAreas;
        }
        
        bool CPACSFuselageStructure::HasTailplaneAttachmentArea() const
        {
            return static_cast<bool>(m_tailplaneAttachmentArea);
        }
        
        const CPACSTailplaneAttachmentArea& CPACSFuselageStructure::GetTailplaneAttachmentArea() const
        {
            return *m_tailplaneAttachmentArea;
        }
        
        CPACSTailplaneAttachmentArea& CPACSFuselageStructure::GetTailplaneAttachmentArea()
        {
            return *m_tailplaneAttachmentArea;
        }
        
        bool CPACSFuselageStructure::HasInterfaceDefinitions() const
        {
            return static_cast<bool>(m_interfaceDefinitions);
        }
        
        const CPACSInterfaceDefinitions& CPACSFuselageStructure::GetInterfaceDefinitions() const
        {
            return *m_interfaceDefinitions;
        }
        
        CPACSInterfaceDefinitions& CPACSFuselageStructure::GetInterfaceDefinitions()
        {
            return *m_interfaceDefinitions;
        }
        
        bool CPACSFuselageStructure::HasUIDGroupDefinitions() const
        {
            return static_cast<bool>(m_UIDGroupDefinitions);
        }
        
        const CPACSUIDGroupDefinitions& CPACSFuselageStructure::GetUIDGroupDefinitions() const
        {
            return *m_UIDGroupDefinitions;
        }
        
        CPACSUIDGroupDefinitions& CPACSFuselageStructure::GetUIDGroupDefinitions()
        {
            return *m_UIDGroupDefinitions;
        }
        
    }
}
