// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSDomeType;

    // This class is used in:
    // CPACSDomeType

    /// @brief stringBaseType
    /// 
    /// Base type for string nodes (including external data
    /// attributes)
    /// 
    class CPACSEmptyElementBase
    {
    public:
        TIGL_EXPORT CPACSEmptyElementBase(CPACSDomeType* parent);

        TIGL_EXPORT virtual ~CPACSEmptyElementBase();

        TIGL_EXPORT CPACSDomeType* GetParent();

        TIGL_EXPORT const CPACSDomeType* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalDataNodePath() const;
        TIGL_EXPORT virtual void SetExternalDataNodePath(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalFileName() const;
        TIGL_EXPORT virtual void SetExternalFileName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetExternalDataDirectory() const;
        TIGL_EXPORT virtual void SetExternalDataDirectory(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetValue() const;
        TIGL_EXPORT virtual void SetValue(const std::string& value);

    protected:
        CPACSDomeType* m_parent;

        boost::optional<std::string> m_externalDataNodePath;
        boost::optional<std::string> m_externalFileName;
        boost::optional<std::string> m_externalDataDirectory;
        std::string                  m_value;

    private:
        CPACSEmptyElementBase(const CPACSEmptyElementBase&) = delete;
        CPACSEmptyElementBase& operator=(const CPACSEmptyElementBase&) = delete;

        CPACSEmptyElementBase(CPACSEmptyElementBase&&) = delete;
        CPACSEmptyElementBase& operator=(CPACSEmptyElementBase&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSEmptyElementBase = generated::CPACSEmptyElementBase;
using CCPACSDomeType = generated::CPACSDomeType;
} // namespace tigl
