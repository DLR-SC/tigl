// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfaceBorderTrailingEdge.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfaceBorderTrailingEdge::CPACSControlSurfaceBorderTrailingEdge(){}
        CPACSControlSurfaceBorderTrailingEdge::~CPACSControlSurfaceBorderTrailingEdge() {}
        
        void CPACSControlSurfaceBorderTrailingEdge::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element etaLE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/etaLE")) {
                m_etaLE = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/etaLE");
            }
            else {
                LOG(ERROR) << "Required element etaLE is missing";
            }
            
            // read element etaTE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
                m_etaTE = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/etaTE");
            }
            
            // read element xsiLE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsiLE")) {
                m_xsiLE = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsiLE");
            }
            else {
                LOG(ERROR) << "Required element xsiLE is missing";
            }
            
            // read element innerShape
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerShape")) {
                m_innerShape = boost::in_place();
                try {
                    m_innerShape->ReadCPACS(tixiHandle, xpath + "/innerShape");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read innerShape at xpath << " << xpath << ": " << e.what();
                    m_innerShape = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read innerShape at xpath << " << xpath << ": " << e.getError();
                    m_innerShape = boost::none;
                }
            }
            
            // read element leadingEdgeShape
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/leadingEdgeShape")) {
                m_leadingEdgeShape = boost::in_place();
                try {
                    m_leadingEdgeShape->ReadCPACS(tixiHandle, xpath + "/leadingEdgeShape");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read leadingEdgeShape at xpath << " << xpath << ": " << e.what();
                    m_leadingEdgeShape = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read leadingEdgeShape at xpath << " << xpath << ": " << e.getError();
                    m_leadingEdgeShape = boost::none;
                }
            }
            
            // read element airfoil
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/airfoil")) {
                m_airfoil = boost::in_place();
                try {
                    m_airfoil->ReadCPACS(tixiHandle, xpath + "/airfoil");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read airfoil at xpath << " << xpath << ": " << e.what();
                    m_airfoil = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read airfoil at xpath << " << xpath << ": " << e.getError();
                    m_airfoil = boost::none;
                }
            }
            
        }
        
        void CPACSControlSurfaceBorderTrailingEdge::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element etaLE
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/etaLE");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/etaLE", m_etaLE);
            
            // write element etaTE
            if (m_etaTE) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/etaTE");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/etaTE", *m_etaTE);
            }
            
            // write element xsiLE
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsiLE");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsiLE", m_xsiLE);
            
            // write element innerShape
            if (m_innerShape) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerShape");
                m_innerShape->WriteCPACS(tixiHandle, xpath + "/innerShape");
            }
            
            // write element leadingEdgeShape
            if (m_leadingEdgeShape) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/leadingEdgeShape");
                m_leadingEdgeShape->WriteCPACS(tixiHandle, xpath + "/leadingEdgeShape");
            }
            
            // write element airfoil
            if (m_airfoil) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airfoil");
                m_airfoil->WriteCPACS(tixiHandle, xpath + "/airfoil");
            }
            
        }
        
        const double& CPACSControlSurfaceBorderTrailingEdge::GetEtaLE() const
        {
            return m_etaLE;
        }
        
        void CPACSControlSurfaceBorderTrailingEdge::SetEtaLE(const double& value)
        {
            m_etaLE = value;
        }
        
        bool CPACSControlSurfaceBorderTrailingEdge::HasEtaTE() const
        {
            return static_cast<bool>(m_etaTE);
        }
        
        const double& CPACSControlSurfaceBorderTrailingEdge::GetEtaTE() const
        {
            return *m_etaTE;
        }
        
        void CPACSControlSurfaceBorderTrailingEdge::SetEtaTE(const double& value)
        {
            m_etaTE = value;
        }
        
        const double& CPACSControlSurfaceBorderTrailingEdge::GetXsiLE() const
        {
            return m_xsiLE;
        }
        
        void CPACSControlSurfaceBorderTrailingEdge::SetXsiLE(const double& value)
        {
            m_xsiLE = value;
        }
        
        bool CPACSControlSurfaceBorderTrailingEdge::HasInnerShape() const
        {
            return static_cast<bool>(m_innerShape);
        }
        
        const CPACSLeadingEdgeHollow& CPACSControlSurfaceBorderTrailingEdge::GetInnerShape() const
        {
            return *m_innerShape;
        }
        
        CPACSLeadingEdgeHollow& CPACSControlSurfaceBorderTrailingEdge::GetInnerShape()
        {
            return *m_innerShape;
        }
        
        bool CPACSControlSurfaceBorderTrailingEdge::HasLeadingEdgeShape() const
        {
            return static_cast<bool>(m_leadingEdgeShape);
        }
        
        const CPACSLeadingEdgeShape& CPACSControlSurfaceBorderTrailingEdge::GetLeadingEdgeShape() const
        {
            return *m_leadingEdgeShape;
        }
        
        CPACSLeadingEdgeShape& CPACSControlSurfaceBorderTrailingEdge::GetLeadingEdgeShape()
        {
            return *m_leadingEdgeShape;
        }
        
        bool CPACSControlSurfaceBorderTrailingEdge::HasAirfoil() const
        {
            return static_cast<bool>(m_airfoil);
        }
        
        const CPACSContourReference& CPACSControlSurfaceBorderTrailingEdge::GetAirfoil() const
        {
            return *m_airfoil;
        }
        
        CPACSContourReference& CPACSControlSurfaceBorderTrailingEdge::GetAirfoil()
        {
            return *m_airfoil;
        }
        
    }
}
