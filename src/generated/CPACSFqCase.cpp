// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqCase.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqCase::CPACSFqCase(){}
        CPACSFqCase::~CPACSFqCase() {}
        
        void CPACSFqCase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element class
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/class")) {
                m_class = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/class");
            }
            else {
                LOG(ERROR) << "Required element class is missing";
            }
            
            // read element category
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/category")) {
                m_category = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/category");
            }
            else {
                LOG(ERROR) << "Required element category is missing";
            }
            
            // read element longitudinal
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/longitudinal")) {
                m_longitudinal = boost::in_place();
                try {
                    m_longitudinal->ReadCPACS(tixiHandle, xpath + "/longitudinal");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read longitudinal at xpath << " << xpath << ": " << e.what();
                    m_longitudinal = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read longitudinal at xpath << " << xpath << ": " << e.getError();
                    m_longitudinal = boost::none;
                }
            }
            
            // read element lateral
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lateral")) {
                m_lateral = boost::in_place();
                try {
                    m_lateral->ReadCPACS(tixiHandle, xpath + "/lateral");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read lateral at xpath << " << xpath << ": " << e.what();
                    m_lateral = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read lateral at xpath << " << xpath << ": " << e.getError();
                    m_lateral = boost::none;
                }
            }
            
            // read element charParameters
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/charParameters")) {
                m_charParameters = boost::in_place();
                try {
                    m_charParameters->ReadCPACS(tixiHandle, xpath + "/charParameters");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read charParameters at xpath << " << xpath << ": " << e.what();
                    m_charParameters = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read charParameters at xpath << " << xpath << ": " << e.getError();
                    m_charParameters = boost::none;
                }
            }
            
            // read element ratings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ratings")) {
                m_ratings = boost::in_place();
                try {
                    m_ratings->ReadCPACS(tixiHandle, xpath + "/ratings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ratings at xpath << " << xpath << ": " << e.what();
                    m_ratings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ratings at xpath << " << xpath << ": " << e.getError();
                    m_ratings = boost::none;
                }
            }
            
        }
        
        void CPACSFqCase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element class
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/class");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/class", m_class);
            
            // write element category
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/category");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/category", m_category);
            
            // write element longitudinal
            if (m_longitudinal) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/longitudinal");
                m_longitudinal->WriteCPACS(tixiHandle, xpath + "/longitudinal");
            }
            
            // write element lateral
            if (m_lateral) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lateral");
                m_lateral->WriteCPACS(tixiHandle, xpath + "/lateral");
            }
            
            // write element charParameters
            if (m_charParameters) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/charParameters");
                m_charParameters->WriteCPACS(tixiHandle, xpath + "/charParameters");
            }
            
            // write element ratings
            if (m_ratings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ratings");
                m_ratings->WriteCPACS(tixiHandle, xpath + "/ratings");
            }
            
        }
        
        const std::string& CPACSFqCase::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSFqCase::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const int& CPACSFqCase::GetClass() const
        {
            return m_class;
        }
        
        void CPACSFqCase::SetClass(const int& value)
        {
            m_class = value;
        }
        
        const std::string& CPACSFqCase::GetCategory() const
        {
            return m_category;
        }
        
        void CPACSFqCase::SetCategory(const std::string& value)
        {
            m_category = value;
        }
        
        bool CPACSFqCase::HasLongitudinal() const
        {
            return static_cast<bool>(m_longitudinal);
        }
        
        const CPACSFqLongitudinal& CPACSFqCase::GetLongitudinal() const
        {
            return *m_longitudinal;
        }
        
        CPACSFqLongitudinal& CPACSFqCase::GetLongitudinal()
        {
            return *m_longitudinal;
        }
        
        bool CPACSFqCase::HasLateral() const
        {
            return static_cast<bool>(m_lateral);
        }
        
        const CPACSFqLateral& CPACSFqCase::GetLateral() const
        {
            return *m_lateral;
        }
        
        CPACSFqLateral& CPACSFqCase::GetLateral()
        {
            return *m_lateral;
        }
        
        bool CPACSFqCase::HasCharParameters() const
        {
            return static_cast<bool>(m_charParameters);
        }
        
        const CPACSFqCharParameters& CPACSFqCase::GetCharParameters() const
        {
            return *m_charParameters;
        }
        
        CPACSFqCharParameters& CPACSFqCase::GetCharParameters()
        {
            return *m_charParameters;
        }
        
        bool CPACSFqCase::HasRatings() const
        {
            return static_cast<bool>(m_ratings);
        }
        
        const CPACSFqRatings& CPACSFqCase::GetRatings() const
        {
            return *m_ratings;
        }
        
        CPACSFqRatings& CPACSFqCase::GetRatings()
        {
            return *m_ratings;
        }
        
    }
}
