// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSComponent.h"
#include "CCPACSDuctAssembly.h"
#include "CPACSLandingGearStrutAttachment.h"
#include "CPACSUIDSequence.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSUIDSequence::CPACSUIDSequence(CCPACSComponent* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSComponent);
    }

    CPACSUIDSequence::CPACSUIDSequence(CCPACSDuctAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSDuctAssembly);
    }

    CPACSUIDSequence::CPACSUIDSequence(CPACSLandingGearStrutAttachment* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSLandingGearStrutAttachment);
    }

    CPACSUIDSequence::~CPACSUIDSequence()
    {
        if (m_uidMgr) {
            for (std::vector<std::string>::iterator it = m_uIDs.begin(); it != m_uIDs.end(); ++it) {
                if (!it->empty()) m_uidMgr->TryUnregisterReference(*it, *this);
            }
        }
    }

    const CTiglUIDObject* CPACSUIDSequence::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CCPACSComponent>()) {
                return GetParent<CCPACSComponent>();
            }
            if (IsParent<CCPACSDuctAssembly>()) {
                return GetParent<CCPACSDuctAssembly>();
            }
            if (IsParent<CPACSLandingGearStrutAttachment>()) {
                return GetParent<CPACSLandingGearStrutAttachment>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSUIDSequence::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CCPACSComponent>()) {
                return GetParent<CCPACSComponent>();
            }
            if (IsParent<CCPACSDuctAssembly>()) {
                return GetParent<CCPACSDuctAssembly>();
            }
            if (IsParent<CPACSLandingGearStrutAttachment>()) {
                return GetParent<CPACSLandingGearStrutAttachment>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSUIDSequence::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSUIDSequence::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSUIDSequence::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element uID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/uID")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/uID", m_uIDs, 1, tixi::xsdUnbounded);
            if (m_uidMgr) {
                for (std::vector<std::string>::iterator it = m_uIDs.begin(); it != m_uIDs.end(); ++it) {
                    if (!it->empty()) m_uidMgr->RegisterReference(*it, *this);
                }
            }
        }

    }

    void CPACSUIDSequence::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element uID
        tixi::TixiSaveElements(tixiHandle, xpath + "/uID", m_uIDs);

    }

    const std::vector<std::string>& CPACSUIDSequence::GetUIDs() const
    {
        return m_uIDs;
    }

    void CPACSUIDSequence::AddToUIDs(const std::string& value)
    {
        if (m_uidMgr) {
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_uIDs.push_back(value);
    }

    bool CPACSUIDSequence::RemoveFromUIDs(const std::string& value)
    {
        const auto it = std::find(m_uIDs.begin(), m_uIDs.end(), value);
        if (it != m_uIDs.end()) {
            if (m_uidMgr && !it->empty()) {
                m_uidMgr->TryUnregisterReference(*it, *this);
            }
            m_uIDs.erase(it);
            return true;
        }
        return false;
    }

    const CTiglUIDObject* CPACSUIDSequence::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSUIDSequence::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        for (auto& entry : m_uIDs) {
            if (entry == oldUid) {
                entry = newUid;
            }
        }
    }

} // namespace generated
} // namespace tigl
