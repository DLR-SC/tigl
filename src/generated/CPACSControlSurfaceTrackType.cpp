// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfaceTrackType.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfaceTrackType::CPACSControlSurfaceTrackType(){}
        CPACSControlSurfaceTrackType::~CPACSControlSurfaceTrackType() {}
        
        void CPACSControlSurfaceTrackType::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element eta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eta")) {
                m_eta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/eta");
            }
            else {
                LOG(ERROR) << "Required element eta is missing";
            }
            
            // read element trackType
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trackType")) {
                m_trackType.ReadCPACS(tixiHandle, xpath + "/trackType");
            }
            else {
                LOG(ERROR) << "Required element trackType is missing";
            }
            
            // read element trackSubType
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trackSubType")) {
                m_trackSubType = boost::in_place();
                try {
                    m_trackSubType->ReadCPACS(tixiHandle, xpath + "/trackSubType");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trackSubType at xpath << " << xpath << ": " << e.what();
                    m_trackSubType = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trackSubType at xpath << " << xpath << ": " << e.getError();
                    m_trackSubType = boost::none;
                }
            }
            
            // read element actuator
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/actuator")) {
                m_actuator = boost::in_place();
                try {
                    m_actuator->ReadCPACS(tixiHandle, xpath + "/actuator");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read actuator at xpath << " << xpath << ": " << e.what();
                    m_actuator = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read actuator at xpath << " << xpath << ": " << e.getError();
                    m_actuator = boost::none;
                }
            }
            
            // read element trackStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trackStructure")) {
                m_trackStructure = boost::in_place();
                try {
                    m_trackStructure->ReadCPACS(tixiHandle, xpath + "/trackStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trackStructure at xpath << " << xpath << ": " << e.what();
                    m_trackStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trackStructure at xpath << " << xpath << ": " << e.getError();
                    m_trackStructure = boost::none;
                }
            }
            
        }
        
        void CPACSControlSurfaceTrackType::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element eta
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/eta", m_eta);
            
            // write element trackType
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackType");
            m_trackType.WriteCPACS(tixiHandle, xpath + "/trackType");
            
            // write element trackSubType
            if (m_trackSubType) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackSubType");
                m_trackSubType->WriteCPACS(tixiHandle, xpath + "/trackSubType");
            }
            
            // write element actuator
            if (m_actuator) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/actuator");
                m_actuator->WriteCPACS(tixiHandle, xpath + "/actuator");
            }
            
            // write element trackStructure
            if (m_trackStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackStructure");
                m_trackStructure->WriteCPACS(tixiHandle, xpath + "/trackStructure");
            }
            
        }
        
        const std::string& CPACSControlSurfaceTrackType::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSControlSurfaceTrackType::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const double& CPACSControlSurfaceTrackType::GetEta() const
        {
            return m_eta;
        }
        
        void CPACSControlSurfaceTrackType::SetEta(const double& value)
        {
            m_eta = value;
        }
        
        const CPACSControlSurfaceTrackType_trackType& CPACSControlSurfaceTrackType::GetTrackType() const
        {
            return m_trackType;
        }
        
        CPACSControlSurfaceTrackType_trackType& CPACSControlSurfaceTrackType::GetTrackType()
        {
            return m_trackType;
        }
        
        bool CPACSControlSurfaceTrackType::HasTrackSubType() const
        {
            return static_cast<bool>(m_trackSubType);
        }
        
        const CPACSControlSurfaceTrackType_trackSubType& CPACSControlSurfaceTrackType::GetTrackSubType() const
        {
            return *m_trackSubType;
        }
        
        CPACSControlSurfaceTrackType_trackSubType& CPACSControlSurfaceTrackType::GetTrackSubType()
        {
            return *m_trackSubType;
        }
        
        bool CPACSControlSurfaceTrackType::HasActuator() const
        {
            return static_cast<bool>(m_actuator);
        }
        
        const CPACSTrackActuator& CPACSControlSurfaceTrackType::GetActuator() const
        {
            return *m_actuator;
        }
        
        CPACSTrackActuator& CPACSControlSurfaceTrackType::GetActuator()
        {
            return *m_actuator;
        }
        
        bool CPACSControlSurfaceTrackType::HasTrackStructure() const
        {
            return static_cast<bool>(m_trackStructure);
        }
        
        const CPACSTrackStructure& CPACSControlSurfaceTrackType::GetTrackStructure() const
        {
            return *m_trackStructure;
        }
        
        CPACSTrackStructure& CPACSControlSurfaceTrackType::GetTrackStructure()
        {
            return *m_trackStructure;
        }
        
    }
}
