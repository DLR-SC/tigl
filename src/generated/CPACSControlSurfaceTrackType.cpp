// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSControlSurfaceTracks.h"
#include "CPACSControlSurfaceTrackType.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceTrackType::CPACSControlSurfaceTrackType(CPACSControlSurfaceTracks* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceTrackType::~CPACSControlSurfaceTrackType()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    CPACSControlSurfaceTracks* CPACSControlSurfaceTrackType::GetParent() const
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSControlSurfaceTrackType::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSControlSurfaceTrackType::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSControlSurfaceTrackType::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element eta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta")) {
            m_eta.ReadCPACS(tixiHandle, xpath + "/eta");
        }
        else {
            LOG(ERROR) << "Required element eta is missing at xpath " << xpath;
        }

        // read element trackType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/trackType")) {
            m_trackType = stringToCPACSControlSurfaceTrackType_trackType(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/trackType"));
        }
        else {
            LOG(ERROR) << "Required element trackType is missing at xpath " << xpath;
        }

        // read element trackSubType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/trackSubType")) {
            m_trackSubType = stringToCPACSControlSurfaceTrackType_trackSubType(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/trackSubType"));
        }

        // read element actuator
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/actuator")) {
            m_actuator = boost::in_place(m_uidMgr);
            try {
                m_actuator->ReadCPACS(tixiHandle, xpath + "/actuator");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read actuator at xpath " << xpath << ": " << e.what();
                m_actuator = boost::none;
            }
        }

        // read element trackStructure
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/trackStructure")) {
            m_trackStructure = boost::in_place();
            try {
                m_trackStructure->ReadCPACS(tixiHandle, xpath + "/trackStructure");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read trackStructure at xpath " << xpath << ": " << e.what();
                m_trackStructure = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSControlSurfaceTrackType::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element eta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
        m_eta.WriteCPACS(tixiHandle, xpath + "/eta");

        // write element trackType
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackType");
        tixi::TixiSaveElement(tixiHandle, xpath + "/trackType", CPACSControlSurfaceTrackType_trackTypeToString(m_trackType));

        // write element trackSubType
        if (m_trackSubType) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackSubType");
            tixi::TixiSaveElement(tixiHandle, xpath + "/trackSubType", CPACSControlSurfaceTrackType_trackSubTypeToString(*m_trackSubType));
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/trackSubType")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/trackSubType");
            }
        }

        // write element actuator
        if (m_actuator) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/actuator");
            m_actuator->WriteCPACS(tixiHandle, xpath + "/actuator");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/actuator")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/actuator");
            }
        }

        // write element trackStructure
        if (m_trackStructure) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trackStructure");
            m_trackStructure->WriteCPACS(tixiHandle, xpath + "/trackStructure");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/trackStructure")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/trackStructure");
            }
        }

    }

    const std::string& CPACSControlSurfaceTrackType::GetUID() const
    {
        return m_uID;
    }

    void CPACSControlSurfaceTrackType::SetUID(const std::string& value)
    {
        if (m_uidMgr) {
            m_uidMgr->TryUnregisterObject(m_uID);
            m_uidMgr->RegisterObject(value, *this);
        }
        m_uID = value;
    }

    const CPACSEtaIsoLine& CPACSControlSurfaceTrackType::GetEta() const
    {
        return m_eta;
    }

    CPACSEtaIsoLine& CPACSControlSurfaceTrackType::GetEta()
    {
        return m_eta;
    }

    const CPACSControlSurfaceTrackType_trackType& CPACSControlSurfaceTrackType::GetTrackType() const
    {
        return m_trackType;
    }

    void CPACSControlSurfaceTrackType::SetTrackType(const CPACSControlSurfaceTrackType_trackType& value)
    {
        m_trackType = value;
    }

    const boost::optional<CPACSControlSurfaceTrackType_trackSubType>& CPACSControlSurfaceTrackType::GetTrackSubType() const
    {
        return m_trackSubType;
    }

    void CPACSControlSurfaceTrackType::SetTrackSubType(const boost::optional<CPACSControlSurfaceTrackType_trackSubType>& value)
    {
        m_trackSubType = value;
    }

    const boost::optional<CPACSTrackActuator>& CPACSControlSurfaceTrackType::GetActuator() const
    {
        return m_actuator;
    }

    boost::optional<CPACSTrackActuator>& CPACSControlSurfaceTrackType::GetActuator()
    {
        return m_actuator;
    }

    const boost::optional<CPACSTrackStructure>& CPACSControlSurfaceTrackType::GetTrackStructure() const
    {
        return m_trackStructure;
    }

    boost::optional<CPACSTrackStructure>& CPACSControlSurfaceTrackType::GetTrackStructure()
    {
        return m_trackStructure;
    }

    CPACSTrackActuator& CPACSControlSurfaceTrackType::GetActuator(CreateIfNotExistsTag)
    {
        if (!m_actuator)
            m_actuator = boost::in_place(m_uidMgr);
        return *m_actuator;
    }

    void CPACSControlSurfaceTrackType::RemoveActuator()
    {
        m_actuator = boost::none;
    }

    CPACSTrackStructure& CPACSControlSurfaceTrackType::GetTrackStructure(CreateIfNotExistsTag)
    {
        if (!m_trackStructure)
            m_trackStructure = boost::in_place();
        return *m_trackStructure;
    }

    void CPACSControlSurfaceTrackType::RemoveTrackStructure()
    {
        m_trackStructure = boost::none;
    }

} // namespace generated
} // namespace tigl
