// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCostPowerUnits.h"

namespace tigl
{
    namespace generated
    {
        CPACSCostPowerUnits::CPACSCostPowerUnits(){}
        CPACSCostPowerUnits::~CPACSCostPowerUnits() {}
        
        void CPACSCostPowerUnits::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element costDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/costDescription")) {
                m_costDescription.ReadCPACS(tixiHandle, xpath + "/costDescription");
            }
            else {
                LOG(ERROR) << "Required element costDescription is missing";
            }
            
            // read element equippedEngines
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/equippedEngines")) {
                m_equippedEngines = boost::in_place();
                try {
                    m_equippedEngines->ReadCPACS(tixiHandle, xpath + "/equippedEngines");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read equippedEngines at xpath << " << xpath << ": " << e.what();
                    m_equippedEngines = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read equippedEngines at xpath << " << xpath << ": " << e.getError();
                    m_equippedEngines = boost::none;
                }
            }
            
            // read element nacelles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nacelles")) {
                m_nacelles = boost::in_place();
                try {
                    m_nacelles->ReadCPACS(tixiHandle, xpath + "/nacelles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read nacelles at xpath << " << xpath << ": " << e.what();
                    m_nacelles = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read nacelles at xpath << " << xpath << ": " << e.getError();
                    m_nacelles = boost::none;
                }
            }
            
            // read element bleedAirSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bleedAirSystems")) {
                m_bleedAirSystems = boost::in_place();
                try {
                    m_bleedAirSystems->ReadCPACS(tixiHandle, xpath + "/bleedAirSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read bleedAirSystems at xpath << " << xpath << ": " << e.what();
                    m_bleedAirSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read bleedAirSystems at xpath << " << xpath << ": " << e.getError();
                    m_bleedAirSystems = boost::none;
                }
            }
            
            // read element fuelSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuelSystems")) {
                m_fuelSystems = boost::in_place();
                try {
                    m_fuelSystems->ReadCPACS(tixiHandle, xpath + "/fuelSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuelSystems at xpath << " << xpath << ": " << e.what();
                    m_fuelSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuelSystems at xpath << " << xpath << ": " << e.getError();
                    m_fuelSystems = boost::none;
                }
            }
            
        }
        
        void CPACSCostPowerUnits::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element costDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/costDescription");
            m_costDescription.WriteCPACS(tixiHandle, xpath + "/costDescription");
            
            // write element equippedEngines
            if (m_equippedEngines) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/equippedEngines");
                m_equippedEngines->WriteCPACS(tixiHandle, xpath + "/equippedEngines");
            }
            
            // write element nacelles
            if (m_nacelles) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nacelles");
                m_nacelles->WriteCPACS(tixiHandle, xpath + "/nacelles");
            }
            
            // write element bleedAirSystems
            if (m_bleedAirSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bleedAirSystems");
                m_bleedAirSystems->WriteCPACS(tixiHandle, xpath + "/bleedAirSystems");
            }
            
            // write element fuelSystems
            if (m_fuelSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuelSystems");
                m_fuelSystems->WriteCPACS(tixiHandle, xpath + "/fuelSystems");
            }
            
        }
        
        const CPACSGenericCost& CPACSCostPowerUnits::GetCostDescription() const
        {
            return m_costDescription;
        }
        
        CPACSGenericCost& CPACSCostPowerUnits::GetCostDescription()
        {
            return m_costDescription;
        }
        
        bool CPACSCostPowerUnits::HasEquippedEngines() const
        {
            return static_cast<bool>(m_equippedEngines);
        }
        
        const CPACSCostEquippedEngines& CPACSCostPowerUnits::GetEquippedEngines() const
        {
            return *m_equippedEngines;
        }
        
        CPACSCostEquippedEngines& CPACSCostPowerUnits::GetEquippedEngines()
        {
            return *m_equippedEngines;
        }
        
        bool CPACSCostPowerUnits::HasNacelles() const
        {
            return static_cast<bool>(m_nacelles);
        }
        
        const CPACSCostNacelles& CPACSCostPowerUnits::GetNacelles() const
        {
            return *m_nacelles;
        }
        
        CPACSCostNacelles& CPACSCostPowerUnits::GetNacelles()
        {
            return *m_nacelles;
        }
        
        bool CPACSCostPowerUnits::HasBleedAirSystems() const
        {
            return static_cast<bool>(m_bleedAirSystems);
        }
        
        const CPACSCostBleedAirSystems& CPACSCostPowerUnits::GetBleedAirSystems() const
        {
            return *m_bleedAirSystems;
        }
        
        CPACSCostBleedAirSystems& CPACSCostPowerUnits::GetBleedAirSystems()
        {
            return *m_bleedAirSystems;
        }
        
        bool CPACSCostPowerUnits::HasFuelSystems() const
        {
            return static_cast<bool>(m_fuelSystems);
        }
        
        const CPACSCostFuelSystems& CPACSCostPowerUnits::GetFuelSystems() const
        {
            return *m_fuelSystems;
        }
        
        CPACSCostFuelSystems& CPACSCostPowerUnits::GetFuelSystems()
        {
            return *m_fuelSystems;
        }
        
    }
}
