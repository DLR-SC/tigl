// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSControlSurfaceSkinCutOutBorder.h"
#include "CPACSControlSurfaceWingCutOut.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceSkinCutOutBorder::CPACSControlSurfaceSkinCutOutBorder(CPACSControlSurfaceWingCutOut* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSControlSurfaceSkinCutOutBorder::~CPACSControlSurfaceSkinCutOutBorder()
    {
    }

    CPACSControlSurfaceWingCutOut* CPACSControlSurfaceSkinCutOutBorder::GetParent() const
    {
        return m_parent;
    }

    void CPACSControlSurfaceSkinCutOutBorder::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element ribDefinitionUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
            m_ribDefinitionUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/ribDefinitionUID");
            if (m_ribDefinitionUID_choice1->empty()) {
                LOG(WARNING) << "Optional element ribDefinitionUID is present but empty at xpath " << xpath;
            }
        }

        // read element ribNumber
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
            m_ribNumber_choice1 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/ribNumber");
        }

        // read element etaLE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaLE")) {
            m_etaLE_choice2 = boost::in_place();
            try {
                m_etaLE_choice2->ReadCPACS(tixiHandle, xpath + "/etaLE");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read etaLE at xpath " << xpath << ": " << e.what();
                m_etaLE_choice2 = boost::none;
            }
        }

        // read element etaTE
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
            m_etaTE_choice2 = boost::in_place();
            try {
                m_etaTE_choice2->ReadCPACS(tixiHandle, xpath + "/etaTE");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read etaTE at xpath " << xpath << ": " << e.what();
                m_etaTE_choice2 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSControlSurfaceSkinCutOutBorder::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element ribDefinitionUID
        if (m_ribDefinitionUID_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribDefinitionUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribDefinitionUID", *m_ribDefinitionUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribDefinitionUID");
            }
        }

        // write element ribNumber
        if (m_ribNumber_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribNumber");
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribNumber", *m_ribNumber_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribNumber");
            }
        }

        // write element etaLE
        if (m_etaLE_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/etaLE");
            m_etaLE_choice2->WriteCPACS(tixiHandle, xpath + "/etaLE");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaLE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/etaLE");
            }
        }

        // write element etaTE
        if (m_etaTE_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/etaTE");
            m_etaTE_choice2->WriteCPACS(tixiHandle, xpath + "/etaTE");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/etaTE")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/etaTE");
            }
        }

    }

    bool CPACSControlSurfaceSkinCutOutBorder::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_ribDefinitionUID_choice1.is_initialized()
                    &&
                    m_ribNumber_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_etaLE_choice2.is_initialized()
                        ||
                        m_etaTE_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_etaLE_choice2.is_initialized()
                    &&
                    m_etaTE_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_ribDefinitionUID_choice1.is_initialized()
                        ||
                        m_ribNumber_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<std::string>& CPACSControlSurfaceSkinCutOutBorder::GetRibDefinitionUID_choice1() const
    {
        return m_ribDefinitionUID_choice1;
    }

    void CPACSControlSurfaceSkinCutOutBorder::SetRibDefinitionUID_choice1(const boost::optional<std::string>& value)
    {
        m_ribDefinitionUID_choice1 = value;
    }

    const boost::optional<int>& CPACSControlSurfaceSkinCutOutBorder::GetRibNumber_choice1() const
    {
        return m_ribNumber_choice1;
    }

    void CPACSControlSurfaceSkinCutOutBorder::SetRibNumber_choice1(const boost::optional<int>& value)
    {
        m_ribNumber_choice1 = value;
    }

    const boost::optional<CPACSEtaIsoLine>& CPACSControlSurfaceSkinCutOutBorder::GetEtaLE_choice2() const
    {
        return m_etaLE_choice2;
    }

    boost::optional<CPACSEtaIsoLine>& CPACSControlSurfaceSkinCutOutBorder::GetEtaLE_choice2()
    {
        return m_etaLE_choice2;
    }

    const boost::optional<CPACSEtaIsoLine>& CPACSControlSurfaceSkinCutOutBorder::GetEtaTE_choice2() const
    {
        return m_etaTE_choice2;
    }

    boost::optional<CPACSEtaIsoLine>& CPACSControlSurfaceSkinCutOutBorder::GetEtaTE_choice2()
    {
        return m_etaTE_choice2;
    }

    CPACSEtaIsoLine& CPACSControlSurfaceSkinCutOutBorder::GetEtaLE_choice2(CreateIfNotExistsTag)
    {
        if (!m_etaLE_choice2)
            m_etaLE_choice2 = boost::in_place();
        return *m_etaLE_choice2;
    }

    void CPACSControlSurfaceSkinCutOutBorder::RemoveEtaLE_choice2()
    {
        m_etaLE_choice2 = boost::none;
    }

    CPACSEtaIsoLine& CPACSControlSurfaceSkinCutOutBorder::GetEtaTE_choice2(CreateIfNotExistsTag)
    {
        if (!m_etaTE_choice2)
            m_etaTE_choice2 = boost::in_place();
        return *m_etaTE_choice2;
    }

    void CPACSControlSurfaceSkinCutOutBorder::RemoveEtaTE_choice2()
    {
        m_etaTE_choice2 = boost::none;
    }

} // namespace generated
} // namespace tigl
