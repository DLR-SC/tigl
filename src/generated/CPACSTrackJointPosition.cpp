// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSTrackJointPosition.h"
#include "CPACSTrackJointPositions.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTrackJointPosition::CPACSTrackJointPosition(CPACSTrackJointPositions* parent)
        : m_controlParameters(this)
        , m_jointCoordinates(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTrackJointPosition::~CPACSTrackJointPosition()
    {
    }

    const CPACSTrackJointPositions* CPACSTrackJointPosition::GetParent() const
    {
        return m_parent;
    }

    CPACSTrackJointPositions* CPACSTrackJointPosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTrackJointPosition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTrackJointPosition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTrackJointPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element controlParameters
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlParameters")) {
            m_controlParameters.ReadCPACS(tixiHandle, xpath + "/controlParameters");
        }
        else {
            LOG(ERROR) << "Required element controlParameters is missing at xpath " << xpath;
        }

        // read element jointCoordinates
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/jointCoordinates")) {
            m_jointCoordinates.ReadCPACS(tixiHandle, xpath + "/jointCoordinates");
        }
        else {
            LOG(ERROR) << "Required element jointCoordinates is missing at xpath " << xpath;
        }

    }

    void CPACSTrackJointPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element controlParameters
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlParameters");
        m_controlParameters.WriteCPACS(tixiHandle, xpath + "/controlParameters");

        // write element jointCoordinates
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/jointCoordinates");
        m_jointCoordinates.WriteCPACS(tixiHandle, xpath + "/jointCoordinates");

    }

    const CCPACSStringVector& CPACSTrackJointPosition::GetControlParameters() const
    {
        return m_controlParameters;
    }

    CCPACSStringVector& CPACSTrackJointPosition::GetControlParameters()
    {
        return m_controlParameters;
    }

    const CPACSTrackJointCoordinates& CPACSTrackJointPosition::GetJointCoordinates() const
    {
        return m_jointCoordinates;
    }

    CPACSTrackJointCoordinates& CPACSTrackJointPosition::GetJointCoordinates()
    {
        return m_jointCoordinates;
    }

} // namespace generated
} // namespace tigl
