// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSLoadCondition_identifier
        
        // generated from /xsd:schema/xsd:complexType[500]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[1]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSLoadCondition_identifier_SimpleContent
        #else
        enum CPACSLoadCondition_identifier_SimpleContent
        #endif
        {
            Symmetric_Trim_Horizontal,
            Symmetric_Trim_NZ,
            Roll_Trim_Steady,
            Roll_Trim_Accelerated,
            Yaw_Trim_rudder_deflect,
            Yaw_Trim_beta_overswing,
            Yaw_Trim_beta_steady,
            Yaw_Trim_rudder_neutral,
            Discrete_Gust
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSLoadCondition_identifier_SimpleContentToString(const CPACSLoadCondition_identifier_SimpleContent& value)
        {
            switch(value) {
            case CPACSLoadCondition_identifier_SimpleContent::Symmetric_Trim_Horizontal: return "Symmetric Trim Horizontal";
            case CPACSLoadCondition_identifier_SimpleContent::Symmetric_Trim_NZ: return "Symmetric Trim NZ";
            case CPACSLoadCondition_identifier_SimpleContent::Roll_Trim_Steady: return "Roll Trim Steady";
            case CPACSLoadCondition_identifier_SimpleContent::Roll_Trim_Accelerated: return "Roll Trim Accelerated";
            case CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_rudder_deflect: return "Yaw Trim rudder deflect";
            case CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_beta_overswing: return "Yaw Trim beta overswing";
            case CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_beta_steady: return "Yaw Trim beta steady";
            case CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_rudder_neutral: return "Yaw Trim rudder neutral";
            case CPACSLoadCondition_identifier_SimpleContent::Discrete_Gust: return "Discrete Gust";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSLoadCondition_identifier_SimpleContent");
            }
        }
        inline CPACSLoadCondition_identifier_SimpleContent stringToCPACSLoadCondition_identifier_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "symmetric trim horizontal") { return CPACSLoadCondition_identifier_SimpleContent::Symmetric_Trim_Horizontal; }
            if (toLower(value) == "symmetric trim nz") { return CPACSLoadCondition_identifier_SimpleContent::Symmetric_Trim_NZ; }
            if (toLower(value) == "roll trim steady") { return CPACSLoadCondition_identifier_SimpleContent::Roll_Trim_Steady; }
            if (toLower(value) == "roll trim accelerated") { return CPACSLoadCondition_identifier_SimpleContent::Roll_Trim_Accelerated; }
            if (toLower(value) == "yaw trim rudder deflect") { return CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_rudder_deflect; }
            if (toLower(value) == "yaw trim beta overswing") { return CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_beta_overswing; }
            if (toLower(value) == "yaw trim beta steady") { return CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_beta_steady; }
            if (toLower(value) == "yaw trim rudder neutral") { return CPACSLoadCondition_identifier_SimpleContent::Yaw_Trim_rudder_neutral; }
            if (toLower(value) == "discrete gust") { return CPACSLoadCondition_identifier_SimpleContent::Discrete_Gust; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSLoadCondition_identifier_SimpleContent");
        }
        #else
        inline std::string CPACSLoadCondition_identifier_SimpleContentToString(const CPACSLoadCondition_identifier_SimpleContent& value)
        {
            switch(value) {
            case Symmetric_Trim_Horizontal: return "Symmetric Trim Horizontal";
            case Symmetric_Trim_NZ: return "Symmetric Trim NZ";
            case Roll_Trim_Steady: return "Roll Trim Steady";
            case Roll_Trim_Accelerated: return "Roll Trim Accelerated";
            case Yaw_Trim_rudder_deflect: return "Yaw Trim rudder deflect";
            case Yaw_Trim_beta_overswing: return "Yaw Trim beta overswing";
            case Yaw_Trim_beta_steady: return "Yaw Trim beta steady";
            case Yaw_Trim_rudder_neutral: return "Yaw Trim rudder neutral";
            case Discrete_Gust: return "Discrete Gust";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSLoadCondition_identifier_SimpleContent");
            }
        }
        inline CPACSLoadCondition_identifier_SimpleContent stringToCPACSLoadCondition_identifier_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "symmetric trim horizontal") { return Symmetric_Trim_Horizontal; }
            if (toLower(value) == "symmetric trim nz") { return Symmetric_Trim_NZ; }
            if (toLower(value) == "roll trim steady") { return Roll_Trim_Steady; }
            if (toLower(value) == "roll trim accelerated") { return Roll_Trim_Accelerated; }
            if (toLower(value) == "yaw trim rudder deflect") { return Yaw_Trim_rudder_deflect; }
            if (toLower(value) == "yaw trim beta overswing") { return Yaw_Trim_beta_overswing; }
            if (toLower(value) == "yaw trim beta steady") { return Yaw_Trim_beta_steady; }
            if (toLower(value) == "yaw trim rudder neutral") { return Yaw_Trim_rudder_neutral; }
            if (toLower(value) == "discrete gust") { return Discrete_Gust; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSLoadCondition_identifier_SimpleContent");
        }
        #endif
    }
}
