// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSQuasiSteadyRotation.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSLoadCaseState
        
        // generated from /xsd:schema/xsd:complexType[856]
        class CPACSTrimParameters
        {
        public:
            TIGL_EXPORT CPACSTrimParameters();
            TIGL_EXPORT virtual ~CPACSTrimParameters();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasMachNumber() const;
            TIGL_EXPORT const double& GetMachNumber() const;
            TIGL_EXPORT void SetMachNumber(const double& value);
            
            TIGL_EXPORT bool HasReynoldsNumber() const;
            TIGL_EXPORT const double& GetReynoldsNumber() const;
            TIGL_EXPORT void SetReynoldsNumber(const double& value);
            
            TIGL_EXPORT bool HasAirspeed() const;
            TIGL_EXPORT const double& GetAirspeed() const;
            TIGL_EXPORT void SetAirspeed(const double& value);
            
            TIGL_EXPORT bool HasAngleOfYaw() const;
            TIGL_EXPORT const double& GetAngleOfYaw() const;
            TIGL_EXPORT void SetAngleOfYaw(const double& value);
            
            TIGL_EXPORT bool HasAngleOfAttack() const;
            TIGL_EXPORT const double& GetAngleOfAttack() const;
            TIGL_EXPORT void SetAngleOfAttack(const double& value);
            
            TIGL_EXPORT bool HasLoadFactorZ() const;
            TIGL_EXPORT const double& GetLoadFactorZ() const;
            TIGL_EXPORT void SetLoadFactorZ(const double& value);
            
            TIGL_EXPORT bool HasTargetLiftCoefficient() const;
            TIGL_EXPORT const double& GetTargetLiftCoefficient() const;
            TIGL_EXPORT void SetTargetLiftCoefficient(const double& value);
            
            TIGL_EXPORT bool HasQuasiSteadyRotation() const;
            TIGL_EXPORT const CPACSQuasiSteadyRotation& GetQuasiSteadyRotation() const;
            TIGL_EXPORT CPACSQuasiSteadyRotation& GetQuasiSteadyRotation();
            
        protected:
            boost::optional<double>                   m_machNumber;
            boost::optional<double>                   m_reynoldsNumber;
            boost::optional<double>                   m_airspeed;
            boost::optional<double>                   m_angleOfYaw;
            boost::optional<double>                   m_angleOfAttack;
            boost::optional<double>                   m_loadFactorZ;
            boost::optional<double>                   m_targetLiftCoefficient;
            boost::optional<CPACSQuasiSteadyRotation> m_quasiSteadyRotation;
            
        private:
            #ifdef HAVE_CPP11
            CPACSTrimParameters(const CPACSTrimParameters&) = delete;
            CPACSTrimParameters& operator=(const CPACSTrimParameters&) = delete;
            
            CPACSTrimParameters(CPACSTrimParameters&&) = delete;
            CPACSTrimParameters& operator=(CPACSTrimParameters&&) = delete;
            #else
            CPACSTrimParameters(const CPACSTrimParameters&);
            CPACSTrimParameters& operator=(const CPACSTrimParameters&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSTrimParameters = generated::CPACSTrimParameters;
    #else
    typedef generated::CPACSTrimParameters CCPACSTrimParameters;
    #endif
}
