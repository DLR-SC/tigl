// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSControlSurfaceTrackType.h"
#include "CPACSTrackStructure.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTrackStructure::CPACSTrackStructure(CPACSControlSurfaceTrackType* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_struts(this, m_uidMgr)
        , m_jointPositions(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTrackStructure::~CPACSTrackStructure()
    {
    }

    const CPACSControlSurfaceTrackType* CPACSTrackStructure::GetParent() const
    {
        return m_parent;
    }

    CPACSControlSurfaceTrackType* CPACSTrackStructure::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTrackStructure::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSTrackStructure::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSTrackStructure::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSTrackStructure::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSTrackStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element struts
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/struts")) {
            m_struts.ReadCPACS(tixiHandle, xpath + "/struts");
        }
        else {
            LOG(ERROR) << "Required element struts is missing at xpath " << xpath;
        }

        // read element jointPositions
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/jointPositions")) {
            m_jointPositions.ReadCPACS(tixiHandle, xpath + "/jointPositions");
        }
        else {
            LOG(ERROR) << "Required element jointPositions is missing at xpath " << xpath;
        }

        // read element controlSurfaceAttachment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlSurfaceAttachment")) {
            m_controlSurfaceAttachment = boost::in_place(this, m_uidMgr);
            try {
                m_controlSurfaceAttachment->ReadCPACS(tixiHandle, xpath + "/controlSurfaceAttachment");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read controlSurfaceAttachment at xpath " << xpath << ": " << e.what();
                m_controlSurfaceAttachment = boost::none;
            }
        }

        // read element carriage
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/carriage")) {
            m_carriage = boost::in_place(this, m_uidMgr);
            try {
                m_carriage->ReadCPACS(tixiHandle, xpath + "/carriage");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read carriage at xpath " << xpath << ": " << e.what();
                m_carriage = boost::none;
            }
        }

        // read element sidePanels
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sidePanels")) {
            m_sidePanels = boost::in_place(this, m_uidMgr);
            try {
                m_sidePanels->ReadCPACS(tixiHandle, xpath + "/sidePanels");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read sidePanels at xpath " << xpath << ": " << e.what();
                m_sidePanels = boost::none;
            }
        }

        // read element upperPanel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/upperPanel")) {
            m_upperPanel = boost::in_place(this, m_uidMgr);
            try {
                m_upperPanel->ReadCPACS(tixiHandle, xpath + "/upperPanel");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read upperPanel at xpath " << xpath << ": " << e.what();
                m_upperPanel = boost::none;
            }
        }

        // read element lowerPanel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/lowerPanel")) {
            m_lowerPanel = boost::in_place(this, m_uidMgr);
            try {
                m_lowerPanel->ReadCPACS(tixiHandle, xpath + "/lowerPanel");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read lowerPanel at xpath " << xpath << ": " << e.what();
                m_lowerPanel = boost::none;
            }
        }

        // read element rollerTrack
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollerTrack")) {
            m_rollerTrack = boost::in_place(this, m_uidMgr);
            try {
                m_rollerTrack->ReadCPACS(tixiHandle, xpath + "/rollerTrack");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read rollerTrack at xpath " << xpath << ": " << e.what();
                m_rollerTrack = boost::none;
            }
        }

        // read element ribs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribs")) {
            m_ribs = boost::in_place(this, m_uidMgr);
            try {
                m_ribs->ReadCPACS(tixiHandle, xpath + "/ribs");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read ribs at xpath " << xpath << ": " << e.what();
                m_ribs = boost::none;
            }
        }

        // read element fairing
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fairing")) {
            m_fairing = boost::in_place(this, m_uidMgr);
            try {
                m_fairing->ReadCPACS(tixiHandle, xpath + "/fairing");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read fairing at xpath " << xpath << ": " << e.what();
                m_fairing = boost::none;
            }
        }

    }

    void CPACSTrackStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element struts
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/struts");
        m_struts.WriteCPACS(tixiHandle, xpath + "/struts");

        // write element jointPositions
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/jointPositions");
        m_jointPositions.WriteCPACS(tixiHandle, xpath + "/jointPositions");

        // write element controlSurfaceAttachment
        if (m_controlSurfaceAttachment) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaceAttachment");
            m_controlSurfaceAttachment->WriteCPACS(tixiHandle, xpath + "/controlSurfaceAttachment");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlSurfaceAttachment")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/controlSurfaceAttachment");
            }
        }

        // write element carriage
        if (m_carriage) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/carriage");
            m_carriage->WriteCPACS(tixiHandle, xpath + "/carriage");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/carriage")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/carriage");
            }
        }

        // write element sidePanels
        if (m_sidePanels) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sidePanels");
            m_sidePanels->WriteCPACS(tixiHandle, xpath + "/sidePanels");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sidePanels")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sidePanels");
            }
        }

        // write element upperPanel
        if (m_upperPanel) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperPanel");
            m_upperPanel->WriteCPACS(tixiHandle, xpath + "/upperPanel");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/upperPanel")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/upperPanel");
            }
        }

        // write element lowerPanel
        if (m_lowerPanel) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerPanel");
            m_lowerPanel->WriteCPACS(tixiHandle, xpath + "/lowerPanel");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/lowerPanel")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/lowerPanel");
            }
        }

        // write element rollerTrack
        if (m_rollerTrack) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollerTrack");
            m_rollerTrack->WriteCPACS(tixiHandle, xpath + "/rollerTrack");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rollerTrack")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rollerTrack");
            }
        }

        // write element ribs
        if (m_ribs) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribs");
            m_ribs->WriteCPACS(tixiHandle, xpath + "/ribs");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribs")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribs");
            }
        }

        // write element fairing
        if (m_fairing) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fairing");
            m_fairing->WriteCPACS(tixiHandle, xpath + "/fairing");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/fairing")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/fairing");
            }
        }

    }

    const CPACSTrackStruts& CPACSTrackStructure::GetStruts() const
    {
        return m_struts;
    }

    CPACSTrackStruts& CPACSTrackStructure::GetStruts()
    {
        return m_struts;
    }

    const CPACSTrackJointPositions& CPACSTrackStructure::GetJointPositions() const
    {
        return m_jointPositions;
    }

    CPACSTrackJointPositions& CPACSTrackStructure::GetJointPositions()
    {
        return m_jointPositions;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetControlSurfaceAttachment() const
    {
        return m_controlSurfaceAttachment;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetControlSurfaceAttachment()
    {
        return m_controlSurfaceAttachment;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetCarriage() const
    {
        return m_carriage;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetCarriage()
    {
        return m_carriage;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetSidePanels() const
    {
        return m_sidePanels;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetSidePanels()
    {
        return m_sidePanels;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetUpperPanel() const
    {
        return m_upperPanel;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetUpperPanel()
    {
        return m_upperPanel;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetLowerPanel() const
    {
        return m_lowerPanel;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetLowerPanel()
    {
        return m_lowerPanel;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetRollerTrack() const
    {
        return m_rollerTrack;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetRollerTrack()
    {
        return m_rollerTrack;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetRibs() const
    {
        return m_ribs;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetRibs()
    {
        return m_ribs;
    }

    const boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetFairing() const
    {
        return m_fairing;
    }

    boost::optional<CPACSTrackSecondaryStructure>& CPACSTrackStructure::GetFairing()
    {
        return m_fairing;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetControlSurfaceAttachment(CreateIfNotExistsTag)
    {
        if (!m_controlSurfaceAttachment)
            m_controlSurfaceAttachment = boost::in_place(this, m_uidMgr);
        return *m_controlSurfaceAttachment;
    }

    void CPACSTrackStructure::RemoveControlSurfaceAttachment()
    {
        m_controlSurfaceAttachment = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetCarriage(CreateIfNotExistsTag)
    {
        if (!m_carriage)
            m_carriage = boost::in_place(this, m_uidMgr);
        return *m_carriage;
    }

    void CPACSTrackStructure::RemoveCarriage()
    {
        m_carriage = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetSidePanels(CreateIfNotExistsTag)
    {
        if (!m_sidePanels)
            m_sidePanels = boost::in_place(this, m_uidMgr);
        return *m_sidePanels;
    }

    void CPACSTrackStructure::RemoveSidePanels()
    {
        m_sidePanels = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetUpperPanel(CreateIfNotExistsTag)
    {
        if (!m_upperPanel)
            m_upperPanel = boost::in_place(this, m_uidMgr);
        return *m_upperPanel;
    }

    void CPACSTrackStructure::RemoveUpperPanel()
    {
        m_upperPanel = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetLowerPanel(CreateIfNotExistsTag)
    {
        if (!m_lowerPanel)
            m_lowerPanel = boost::in_place(this, m_uidMgr);
        return *m_lowerPanel;
    }

    void CPACSTrackStructure::RemoveLowerPanel()
    {
        m_lowerPanel = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetRollerTrack(CreateIfNotExistsTag)
    {
        if (!m_rollerTrack)
            m_rollerTrack = boost::in_place(this, m_uidMgr);
        return *m_rollerTrack;
    }

    void CPACSTrackStructure::RemoveRollerTrack()
    {
        m_rollerTrack = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetRibs(CreateIfNotExistsTag)
    {
        if (!m_ribs)
            m_ribs = boost::in_place(this, m_uidMgr);
        return *m_ribs;
    }

    void CPACSTrackStructure::RemoveRibs()
    {
        m_ribs = boost::none;
    }

    CPACSTrackSecondaryStructure& CPACSTrackStructure::GetFairing(CreateIfNotExistsTag)
    {
        if (!m_fairing)
            m_fairing = boost::in_place(this, m_uidMgr);
        return *m_fairing;
    }

    void CPACSTrackStructure::RemoveFairing()
    {
        m_fairing = boost::none;
    }

} // namespace generated
} // namespace tigl
