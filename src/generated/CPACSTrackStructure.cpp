// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTrackStructure.h"

namespace tigl
{
    namespace generated
    {
        CPACSTrackStructure::CPACSTrackStructure(){}
        CPACSTrackStructure::~CPACSTrackStructure() {}
        
        void CPACSTrackStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element controlSurfaceAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaceAttachment")) {
                m_controlSurfaceAttachment = boost::in_place();
                try {
                    m_controlSurfaceAttachment->ReadCPACS(tixiHandle, xpath + "/controlSurfaceAttachment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfaceAttachment at xpath << " << xpath << ": " << e.what();
                    m_controlSurfaceAttachment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfaceAttachment at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfaceAttachment = boost::none;
                }
            }
            
            // read element car
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/car")) {
                m_car = boost::in_place();
                try {
                    m_car->ReadCPACS(tixiHandle, xpath + "/car");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read car at xpath << " << xpath << ": " << e.what();
                    m_car = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read car at xpath << " << xpath << ": " << e.getError();
                    m_car = boost::none;
                }
            }
            
            // read element strut1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/strut1")) {
                m_strut1 = boost::in_place();
                try {
                    m_strut1->ReadCPACS(tixiHandle, xpath + "/strut1");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read strut1 at xpath << " << xpath << ": " << e.what();
                    m_strut1 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read strut1 at xpath << " << xpath << ": " << e.getError();
                    m_strut1 = boost::none;
                }
            }
            
            // read element strut2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/strut2")) {
                m_strut2 = boost::in_place();
                try {
                    m_strut2->ReadCPACS(tixiHandle, xpath + "/strut2");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read strut2 at xpath << " << xpath << ": " << e.what();
                    m_strut2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read strut2 at xpath << " << xpath << ": " << e.getError();
                    m_strut2 = boost::none;
                }
            }
            
            // read element strut3
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/strut3")) {
                m_strut3 = boost::in_place();
                try {
                    m_strut3->ReadCPACS(tixiHandle, xpath + "/strut3");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read strut3 at xpath << " << xpath << ": " << e.what();
                    m_strut3 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read strut3 at xpath << " << xpath << ": " << e.getError();
                    m_strut3 = boost::none;
                }
            }
            
            // read element sidePanels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sidePanels")) {
                m_sidePanels = boost::in_place();
                try {
                    m_sidePanels->ReadCPACS(tixiHandle, xpath + "/sidePanels");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read sidePanels at xpath << " << xpath << ": " << e.what();
                    m_sidePanels = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read sidePanels at xpath << " << xpath << ": " << e.getError();
                    m_sidePanels = boost::none;
                }
            }
            
            // read element upperPanel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/upperPanel")) {
                m_upperPanel = boost::in_place();
                try {
                    m_upperPanel->ReadCPACS(tixiHandle, xpath + "/upperPanel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read upperPanel at xpath << " << xpath << ": " << e.what();
                    m_upperPanel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read upperPanel at xpath << " << xpath << ": " << e.getError();
                    m_upperPanel = boost::none;
                }
            }
            
            // read element lowerPanel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lowerPanel")) {
                m_lowerPanel = boost::in_place();
                try {
                    m_lowerPanel->ReadCPACS(tixiHandle, xpath + "/lowerPanel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read lowerPanel at xpath << " << xpath << ": " << e.what();
                    m_lowerPanel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read lowerPanel at xpath << " << xpath << ": " << e.getError();
                    m_lowerPanel = boost::none;
                }
            }
            
            // read element rollerTrack
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollerTrack")) {
                m_rollerTrack = boost::in_place();
                try {
                    m_rollerTrack->ReadCPACS(tixiHandle, xpath + "/rollerTrack");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rollerTrack at xpath << " << xpath << ": " << e.what();
                    m_rollerTrack = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rollerTrack at xpath << " << xpath << ": " << e.getError();
                    m_rollerTrack = boost::none;
                }
            }
            
            // read element ribs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribs")) {
                m_ribs = boost::in_place();
                try {
                    m_ribs->ReadCPACS(tixiHandle, xpath + "/ribs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ribs at xpath << " << xpath << ": " << e.what();
                    m_ribs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ribs at xpath << " << xpath << ": " << e.getError();
                    m_ribs = boost::none;
                }
            }
            
            // read element fairing
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fairing")) {
                m_fairing = boost::in_place();
                try {
                    m_fairing->ReadCPACS(tixiHandle, xpath + "/fairing");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fairing at xpath << " << xpath << ": " << e.what();
                    m_fairing = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fairing at xpath << " << xpath << ": " << e.getError();
                    m_fairing = boost::none;
                }
            }
            
        }
        
        void CPACSTrackStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element controlSurfaceAttachment
            if (m_controlSurfaceAttachment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaceAttachment");
                m_controlSurfaceAttachment->WriteCPACS(tixiHandle, xpath + "/controlSurfaceAttachment");
            }
            
            // write element car
            if (m_car) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/car");
                m_car->WriteCPACS(tixiHandle, xpath + "/car");
            }
            
            // write element strut1
            if (m_strut1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/strut1");
                m_strut1->WriteCPACS(tixiHandle, xpath + "/strut1");
            }
            
            // write element strut2
            if (m_strut2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/strut2");
                m_strut2->WriteCPACS(tixiHandle, xpath + "/strut2");
            }
            
            // write element strut3
            if (m_strut3) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/strut3");
                m_strut3->WriteCPACS(tixiHandle, xpath + "/strut3");
            }
            
            // write element sidePanels
            if (m_sidePanels) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sidePanels");
                m_sidePanels->WriteCPACS(tixiHandle, xpath + "/sidePanels");
            }
            
            // write element upperPanel
            if (m_upperPanel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperPanel");
                m_upperPanel->WriteCPACS(tixiHandle, xpath + "/upperPanel");
            }
            
            // write element lowerPanel
            if (m_lowerPanel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerPanel");
                m_lowerPanel->WriteCPACS(tixiHandle, xpath + "/lowerPanel");
            }
            
            // write element rollerTrack
            if (m_rollerTrack) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollerTrack");
                m_rollerTrack->WriteCPACS(tixiHandle, xpath + "/rollerTrack");
            }
            
            // write element ribs
            if (m_ribs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribs");
                m_ribs->WriteCPACS(tixiHandle, xpath + "/ribs");
            }
            
            // write element fairing
            if (m_fairing) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fairing");
                m_fairing->WriteCPACS(tixiHandle, xpath + "/fairing");
            }
            
        }
        
        bool CPACSTrackStructure::HasControlSurfaceAttachment() const
        {
            return static_cast<bool>(m_controlSurfaceAttachment);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetControlSurfaceAttachment() const
        {
            return *m_controlSurfaceAttachment;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetControlSurfaceAttachment()
        {
            return *m_controlSurfaceAttachment;
        }
        
        bool CPACSTrackStructure::HasCar() const
        {
            return static_cast<bool>(m_car);
        }
        
        const CPACSTrackCar& CPACSTrackStructure::GetCar() const
        {
            return *m_car;
        }
        
        CPACSTrackCar& CPACSTrackStructure::GetCar()
        {
            return *m_car;
        }
        
        bool CPACSTrackStructure::HasStrut1() const
        {
            return static_cast<bool>(m_strut1);
        }
        
        const CPACSTrackStrut1& CPACSTrackStructure::GetStrut1() const
        {
            return *m_strut1;
        }
        
        CPACSTrackStrut1& CPACSTrackStructure::GetStrut1()
        {
            return *m_strut1;
        }
        
        bool CPACSTrackStructure::HasStrut2() const
        {
            return static_cast<bool>(m_strut2);
        }
        
        const CPACSTrackStrut2& CPACSTrackStructure::GetStrut2() const
        {
            return *m_strut2;
        }
        
        CPACSTrackStrut2& CPACSTrackStructure::GetStrut2()
        {
            return *m_strut2;
        }
        
        bool CPACSTrackStructure::HasStrut3() const
        {
            return static_cast<bool>(m_strut3);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetStrut3() const
        {
            return *m_strut3;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetStrut3()
        {
            return *m_strut3;
        }
        
        bool CPACSTrackStructure::HasSidePanels() const
        {
            return static_cast<bool>(m_sidePanels);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetSidePanels() const
        {
            return *m_sidePanels;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetSidePanels()
        {
            return *m_sidePanels;
        }
        
        bool CPACSTrackStructure::HasUpperPanel() const
        {
            return static_cast<bool>(m_upperPanel);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetUpperPanel() const
        {
            return *m_upperPanel;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetUpperPanel()
        {
            return *m_upperPanel;
        }
        
        bool CPACSTrackStructure::HasLowerPanel() const
        {
            return static_cast<bool>(m_lowerPanel);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetLowerPanel() const
        {
            return *m_lowerPanel;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetLowerPanel()
        {
            return *m_lowerPanel;
        }
        
        bool CPACSTrackStructure::HasRollerTrack() const
        {
            return static_cast<bool>(m_rollerTrack);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetRollerTrack() const
        {
            return *m_rollerTrack;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetRollerTrack()
        {
            return *m_rollerTrack;
        }
        
        bool CPACSTrackStructure::HasRibs() const
        {
            return static_cast<bool>(m_ribs);
        }
        
        const CCPACSMaterial& CPACSTrackStructure::GetRibs() const
        {
            return *m_ribs;
        }
        
        CCPACSMaterial& CPACSTrackStructure::GetRibs()
        {
            return *m_ribs;
        }
        
        bool CPACSTrackStructure::HasFairing() const
        {
            return static_cast<bool>(m_fairing);
        }
        
        const CPACSTrackFairing& CPACSTrackStructure::GetFairing() const
        {
            return *m_fairing;
        }
        
        CPACSTrackFairing& CPACSTrackStructure::GetFairing()
        {
            return *m_fairing;
        }
        
    }
}
