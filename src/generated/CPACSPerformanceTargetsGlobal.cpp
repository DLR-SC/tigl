// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPerformanceTargetsGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSPerformanceTargetsGlobal::CPACSPerformanceTargetsGlobal(){}
        CPACSPerformanceTargetsGlobal::~CPACSPerformanceTargetsGlobal() {}
        
        void CPACSPerformanceTargetsGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element cruiseMach
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cruiseMach")) {
                m_cruiseMach = boost::in_place();
                try {
                    m_cruiseMach->ReadCPACS(tixiHandle, xpath + "/cruiseMach");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cruiseMach at xpath << " << xpath << ": " << e.what();
                    m_cruiseMach = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cruiseMach at xpath << " << xpath << ": " << e.getError();
                    m_cruiseMach = boost::none;
                }
            }
            
            // read element maximumOperatingVelocity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maximumOperatingVelocity")) {
                m_maximumOperatingVelocity = boost::in_place();
                try {
                    m_maximumOperatingVelocity->ReadCPACS(tixiHandle, xpath + "/maximumOperatingVelocity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read maximumOperatingVelocity at xpath << " << xpath << ": " << e.what();
                    m_maximumOperatingVelocity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read maximumOperatingVelocity at xpath << " << xpath << ": " << e.getError();
                    m_maximumOperatingVelocity = boost::none;
                }
            }
            
            // read element maximumOperatingMach
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maximumOperatingMach")) {
                m_maximumOperatingMach = boost::in_place();
                try {
                    m_maximumOperatingMach->ReadCPACS(tixiHandle, xpath + "/maximumOperatingMach");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read maximumOperatingMach at xpath << " << xpath << ": " << e.what();
                    m_maximumOperatingMach = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read maximumOperatingMach at xpath << " << xpath << ": " << e.getError();
                    m_maximumOperatingMach = boost::none;
                }
            }
            
            // read element initialCruiseAltitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/initialCruiseAltitude")) {
                m_initialCruiseAltitude = boost::in_place();
                try {
                    m_initialCruiseAltitude->ReadCPACS(tixiHandle, xpath + "/initialCruiseAltitude");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read initialCruiseAltitude at xpath << " << xpath << ": " << e.what();
                    m_initialCruiseAltitude = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read initialCruiseAltitude at xpath << " << xpath << ": " << e.getError();
                    m_initialCruiseAltitude = boost::none;
                }
            }
            
            // read element timeToClimb
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/timeToClimb")) {
                m_timeToClimb = boost::in_place();
                try {
                    m_timeToClimb->ReadCPACS(tixiHandle, xpath + "/timeToClimb");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read timeToClimb at xpath << " << xpath << ": " << e.what();
                    m_timeToClimb = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read timeToClimb at xpath << " << xpath << ": " << e.getError();
                    m_timeToClimb = boost::none;
                }
            }
            
            // read element maxOperatingAltitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maxOperatingAltitude")) {
                m_maxOperatingAltitude = boost::in_place();
                try {
                    m_maxOperatingAltitude->ReadCPACS(tixiHandle, xpath + "/maxOperatingAltitude");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read maxOperatingAltitude at xpath << " << xpath << ": " << e.what();
                    m_maxOperatingAltitude = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read maxOperatingAltitude at xpath << " << xpath << ": " << e.getError();
                    m_maxOperatingAltitude = boost::none;
                }
            }
            
            // read element approachSpeed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/approachSpeed")) {
                m_approachSpeed = boost::in_place();
                try {
                    m_approachSpeed->ReadCPACS(tixiHandle, xpath + "/approachSpeed");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read approachSpeed at xpath << " << xpath << ": " << e.what();
                    m_approachSpeed = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read approachSpeed at xpath << " << xpath << ": " << e.getError();
                    m_approachSpeed = boost::none;
                }
            }
            
        }
        
        void CPACSPerformanceTargetsGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element cruiseMach
            if (m_cruiseMach) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cruiseMach");
                m_cruiseMach->WriteCPACS(tixiHandle, xpath + "/cruiseMach");
            }
            
            // write element maximumOperatingVelocity
            if (m_maximumOperatingVelocity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maximumOperatingVelocity");
                m_maximumOperatingVelocity->WriteCPACS(tixiHandle, xpath + "/maximumOperatingVelocity");
            }
            
            // write element maximumOperatingMach
            if (m_maximumOperatingMach) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maximumOperatingMach");
                m_maximumOperatingMach->WriteCPACS(tixiHandle, xpath + "/maximumOperatingMach");
            }
            
            // write element initialCruiseAltitude
            if (m_initialCruiseAltitude) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/initialCruiseAltitude");
                m_initialCruiseAltitude->WriteCPACS(tixiHandle, xpath + "/initialCruiseAltitude");
            }
            
            // write element timeToClimb
            if (m_timeToClimb) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/timeToClimb");
                m_timeToClimb->WriteCPACS(tixiHandle, xpath + "/timeToClimb");
            }
            
            // write element maxOperatingAltitude
            if (m_maxOperatingAltitude) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maxOperatingAltitude");
                m_maxOperatingAltitude->WriteCPACS(tixiHandle, xpath + "/maxOperatingAltitude");
            }
            
            // write element approachSpeed
            if (m_approachSpeed) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/approachSpeed");
                m_approachSpeed->WriteCPACS(tixiHandle, xpath + "/approachSpeed");
            }
            
        }
        
        bool CPACSPerformanceTargetsGlobal::HasCruiseMach() const
        {
            return static_cast<bool>(m_cruiseMach);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetCruiseMach() const
        {
            return *m_cruiseMach;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetCruiseMach()
        {
            return *m_cruiseMach;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasMaximumOperatingVelocity() const
        {
            return static_cast<bool>(m_maximumOperatingVelocity);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaximumOperatingVelocity() const
        {
            return *m_maximumOperatingVelocity;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaximumOperatingVelocity()
        {
            return *m_maximumOperatingVelocity;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasMaximumOperatingMach() const
        {
            return static_cast<bool>(m_maximumOperatingMach);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaximumOperatingMach() const
        {
            return *m_maximumOperatingMach;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaximumOperatingMach()
        {
            return *m_maximumOperatingMach;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasInitialCruiseAltitude() const
        {
            return static_cast<bool>(m_initialCruiseAltitude);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetInitialCruiseAltitude() const
        {
            return *m_initialCruiseAltitude;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetInitialCruiseAltitude()
        {
            return *m_initialCruiseAltitude;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasTimeToClimb() const
        {
            return static_cast<bool>(m_timeToClimb);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetTimeToClimb() const
        {
            return *m_timeToClimb;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetTimeToClimb()
        {
            return *m_timeToClimb;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasMaxOperatingAltitude() const
        {
            return static_cast<bool>(m_maxOperatingAltitude);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaxOperatingAltitude() const
        {
            return *m_maxOperatingAltitude;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetMaxOperatingAltitude()
        {
            return *m_maxOperatingAltitude;
        }
        
        bool CPACSPerformanceTargetsGlobal::HasApproachSpeed() const
        {
            return static_cast<bool>(m_approachSpeed);
        }
        
        const CPACSRequirement& CPACSPerformanceTargetsGlobal::GetApproachSpeed() const
        {
            return *m_approachSpeed;
        }
        
        CPACSRequirement& CPACSPerformanceTargetsGlobal::GetApproachSpeed()
        {
            return *m_approachSpeed;
        }
        
    }
}
