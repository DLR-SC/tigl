// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearComponentAssembly.h"
#include "CPACSPiston.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPiston::CPACSPiston(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_length(0)
        , m_strutProperties(this, m_uidMgr)
        , m_maxSpringDeflection(0)
        , m_compressedExternalLength(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPiston::~CPACSPiston()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSLandingGearComponentAssembly* CPACSPiston::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearComponentAssembly* CPACSPiston::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPiston::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSPiston::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSPiston::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSPiston::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSPiston::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element length
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/length")) {
            m_length = tixi::TixiGetElement<double>(tixiHandle, xpath + "/length");
        }
        else {
            LOG(ERROR) << "Required element length is missing at xpath " << xpath;
        }

        // read element strutProperties
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/strutProperties")) {
            m_strutProperties.ReadCPACS(tixiHandle, xpath + "/strutProperties");
        }
        else {
            LOG(ERROR) << "Required element strutProperties is missing at xpath " << xpath;
        }

        // read element maxSpringDeflection
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/maxSpringDeflection")) {
            m_maxSpringDeflection = tixi::TixiGetElement<double>(tixiHandle, xpath + "/maxSpringDeflection");
        }
        else {
            LOG(ERROR) << "Required element maxSpringDeflection is missing at xpath " << xpath;
        }

        // read element compressedExternalLength
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/compressedExternalLength")) {
            m_compressedExternalLength = tixi::TixiGetElement<double>(tixiHandle, xpath + "/compressedExternalLength");
        }
        else {
            LOG(ERROR) << "Required element compressedExternalLength is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSPiston::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element length
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/length");
        tixi::TixiSaveElement(tixiHandle, xpath + "/length", m_length);

        // write element strutProperties
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/strutProperties");
        m_strutProperties.WriteCPACS(tixiHandle, xpath + "/strutProperties");

        // write element maxSpringDeflection
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maxSpringDeflection");
        tixi::TixiSaveElement(tixiHandle, xpath + "/maxSpringDeflection", m_maxSpringDeflection);

        // write element compressedExternalLength
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/compressedExternalLength");
        tixi::TixiSaveElement(tixiHandle, xpath + "/compressedExternalLength", m_compressedExternalLength);

    }

    const std::string& CPACSPiston::GetUID() const
    {
        return m_uID;
    }

    void CPACSPiston::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSPiston::GetLength() const
    {
        return m_length;
    }

    void CPACSPiston::SetLength(const double& value)
    {
        m_length = value;
    }

    const CPACSStrutProperties& CPACSPiston::GetStrutProperties() const
    {
        return m_strutProperties;
    }

    CPACSStrutProperties& CPACSPiston::GetStrutProperties()
    {
        return m_strutProperties;
    }

    const double& CPACSPiston::GetMaxSpringDeflection() const
    {
        return m_maxSpringDeflection;
    }

    void CPACSPiston::SetMaxSpringDeflection(const double& value)
    {
        m_maxSpringDeflection = value;
    }

    const double& CPACSPiston::GetCompressedExternalLength() const
    {
        return m_compressedExternalLength;
    }

    void CPACSPiston::SetCompressedExternalLength(const double& value)
    {
        m_compressedExternalLength = value;
    }

} // namespace generated
} // namespace tigl
