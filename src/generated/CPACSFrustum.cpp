// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSElementGeometry.h"
#include "CPACSElementGeometryAddtionalPart.h"
#include "CPACSFrustum.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSFrustum::CPACSFrustum(CPACSElementGeometry* parent)
        : m_lowerRadius(0)
        , m_height(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometry);
    }

    CPACSFrustum::CPACSFrustum(CPACSElementGeometryAddtionalPart* parent)
        : m_lowerRadius(0)
        , m_height(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElementGeometryAddtionalPart);
    }

    CPACSFrustum::~CPACSFrustum()
    {
    }

    const CTiglUIDObject* CPACSFrustum::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSFrustum::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSElementGeometry>()) {
                return GetParent<CPACSElementGeometry>()->GetNextUIDParent();
            }
            if (IsParent<CPACSElementGeometryAddtionalPart>()) {
                return GetParent<CPACSElementGeometryAddtionalPart>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    void CPACSFrustum::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element lowerRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/lowerRadius")) {
            m_lowerRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/lowerRadius");
        }
        else {
            LOG(ERROR) << "Required element lowerRadius is missing at xpath " << xpath;
        }

        // read element upperRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/upperRadius")) {
            m_upperRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/upperRadius");
        }

        // read element height
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/height")) {
            m_height = tixi::TixiGetElement<double>(tixiHandle, xpath + "/height");
        }
        else {
            LOG(ERROR) << "Required element height is missing at xpath " << xpath;
        }

    }

    void CPACSFrustum::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element lowerRadius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerRadius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/lowerRadius", m_lowerRadius);

        // write element upperRadius
        if (m_upperRadius) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperRadius");
            tixi::TixiSaveElement(tixiHandle, xpath + "/upperRadius", *m_upperRadius);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/upperRadius")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/upperRadius");
            }
        }

        // write element height
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/height");
        tixi::TixiSaveElement(tixiHandle, xpath + "/height", m_height);

    }

    const double& CPACSFrustum::GetLowerRadius() const
    {
        return m_lowerRadius;
    }

    void CPACSFrustum::SetLowerRadius(const double& value)
    {
        m_lowerRadius = value;
    }

    const boost::optional<double>& CPACSFrustum::GetUpperRadius() const
    {
        return m_upperRadius;
    }

    void CPACSFrustum::SetUpperRadius(const boost::optional<double>& value)
    {
        m_upperRadius = value;
    }

    const double& CPACSFrustum::GetHeight() const
    {
        return m_height;
    }

    void CPACSFrustum::SetHeight(const double& value)
    {
        m_height = value;
    }

} // namespace generated
} // namespace tigl
