// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAlignmentCrossBeam.h"

namespace tigl
{
    namespace generated
    {
        CPACSAlignmentCrossBeam::CPACSAlignmentCrossBeam(){}
        CPACSAlignmentCrossBeam::~CPACSAlignmentCrossBeam() {}
        
        void CPACSAlignmentCrossBeam::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element offset1LocX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/offset1LocX")) {
                m_offset1LocX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/offset1LocX");
            }
            
            // read element offset2LocX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/offset2LocX")) {
                m_offset2LocX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/offset2LocX");
            }
            
            // read element rotationLocX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotationLocX")) {
                m_rotationLocX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rotationLocX");
            }
            
            // read element translationLocY
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/translationLocY")) {
                m_translationLocY = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/translationLocY");
            }
            
            // read element translationLocZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/translationLocZ")) {
                m_translationLocZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/translationLocZ");
            }
            
        }
        
        void CPACSAlignmentCrossBeam::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element offset1LocX
            if (m_offset1LocX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/offset1LocX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/offset1LocX", *m_offset1LocX);
            }
            
            // write element offset2LocX
            if (m_offset2LocX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/offset2LocX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/offset2LocX", *m_offset2LocX);
            }
            
            // write element rotationLocX
            if (m_rotationLocX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotationLocX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rotationLocX", *m_rotationLocX);
            }
            
            // write element translationLocY
            if (m_translationLocY) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/translationLocY");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/translationLocY", *m_translationLocY);
            }
            
            // write element translationLocZ
            if (m_translationLocZ) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/translationLocZ");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/translationLocZ", *m_translationLocZ);
            }
            
        }
        
        bool CPACSAlignmentCrossBeam::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSAlignmentCrossBeam::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSAlignmentCrossBeam::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSAlignmentCrossBeam::HasOffset1LocX() const
        {
            return static_cast<bool>(m_offset1LocX);
        }
        
        const double& CPACSAlignmentCrossBeam::GetOffset1LocX() const
        {
            return *m_offset1LocX;
        }
        
        void CPACSAlignmentCrossBeam::SetOffset1LocX(const double& value)
        {
            m_offset1LocX = value;
        }
        
        bool CPACSAlignmentCrossBeam::HasOffset2LocX() const
        {
            return static_cast<bool>(m_offset2LocX);
        }
        
        const double& CPACSAlignmentCrossBeam::GetOffset2LocX() const
        {
            return *m_offset2LocX;
        }
        
        void CPACSAlignmentCrossBeam::SetOffset2LocX(const double& value)
        {
            m_offset2LocX = value;
        }
        
        bool CPACSAlignmentCrossBeam::HasRotationLocX() const
        {
            return static_cast<bool>(m_rotationLocX);
        }
        
        const double& CPACSAlignmentCrossBeam::GetRotationLocX() const
        {
            return *m_rotationLocX;
        }
        
        void CPACSAlignmentCrossBeam::SetRotationLocX(const double& value)
        {
            m_rotationLocX = value;
        }
        
        bool CPACSAlignmentCrossBeam::HasTranslationLocY() const
        {
            return static_cast<bool>(m_translationLocY);
        }
        
        const double& CPACSAlignmentCrossBeam::GetTranslationLocY() const
        {
            return *m_translationLocY;
        }
        
        void CPACSAlignmentCrossBeam::SetTranslationLocY(const double& value)
        {
            m_translationLocY = value;
        }
        
        bool CPACSAlignmentCrossBeam::HasTranslationLocZ() const
        {
            return static_cast<bool>(m_translationLocZ);
        }
        
        const double& CPACSAlignmentCrossBeam::GetTranslationLocZ() const
        {
            return *m_translationLocZ;
        }
        
        void CPACSAlignmentCrossBeam::SetTranslationLocZ(const double& value)
        {
            m_translationLocZ = value;
        }
        
    }
}
