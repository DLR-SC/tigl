// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <vector>
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSInternalPressure;
    class CPACSVehicleConfiguration;

    // This class is used in:
    // CPACSVehicleConfiguration

    /// @brief Internal pressure of a deck
    /// 
    /// 
    class CPACSInternalPressures
    {
    public:
        TIGL_EXPORT CPACSInternalPressures(CPACSVehicleConfiguration* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSInternalPressures();

        TIGL_EXPORT CPACSVehicleConfiguration* GetParent();

        TIGL_EXPORT const CPACSVehicleConfiguration* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CPACSInternalPressure>>& GetInternalPressures() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CPACSInternalPressure>>& GetInternalPressures();

        TIGL_EXPORT virtual size_t GetInternalPressureCount() const;

        TIGL_EXPORT virtual const CPACSInternalPressure& GetInternalPressure(size_t index) const;
        TIGL_EXPORT virtual CPACSInternalPressure& GetInternalPressure(size_t index);

        TIGL_EXPORT virtual CPACSInternalPressure& AddInternalPressure();
        TIGL_EXPORT virtual void RemoveInternalPressure(CPACSInternalPressure& ref);

    protected:
        CPACSVehicleConfiguration* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Internal pressure of a fuselage, deck or compartment
        std::vector<std::unique_ptr<CPACSInternalPressure>> m_internalPressures;

    private:
        CPACSInternalPressures(const CPACSInternalPressures&) = delete;
        CPACSInternalPressures& operator=(const CPACSInternalPressures&) = delete;

        CPACSInternalPressures(CPACSInternalPressures&&) = delete;
        CPACSInternalPressures& operator=(CPACSInternalPressures&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSInternalPressures = generated::CPACSInternalPressures;
using CCPACSInternalPressure = generated::CPACSInternalPressure;
using CCPACSVehicleConfiguration = generated::CPACSVehicleConfiguration;
} // namespace tigl
