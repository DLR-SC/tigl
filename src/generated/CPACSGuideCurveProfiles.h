// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <vector>
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSGuideCurveProfile;

namespace generated
{
    class CPACSProfiles;

    // This class is used in:
    // CPACSProfiles

    /// @brief guideCurveProfilesType
    /// 
    /// Guide Curve Profiles type. This type is used to
    /// describe guide curves that enable designers to create a geometry
    /// that deviates from a standard loft.
    /// 
    class CPACSGuideCurveProfiles
    {
    public:
        TIGL_EXPORT CPACSGuideCurveProfiles(CPACSProfiles* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSGuideCurveProfiles();

        TIGL_EXPORT CPACSProfiles* GetParent();

        TIGL_EXPORT const CPACSProfiles* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CCPACSGuideCurveProfile>>& GetGuideCurveProfiles() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CCPACSGuideCurveProfile>>& GetGuideCurveProfiles();

        TIGL_EXPORT virtual size_t GetGuideCurveProfileCount() const;
        TIGL_EXPORT virtual size_t GetGuideCurveProfileIndex(const std::string& UID) const;

        TIGL_EXPORT virtual const CCPACSGuideCurveProfile& GetGuideCurveProfile(size_t index) const;
        TIGL_EXPORT virtual CCPACSGuideCurveProfile& GetGuideCurveProfile(size_t index);

        TIGL_EXPORT virtual const CCPACSGuideCurveProfile& GetGuideCurveProfile(const std::string& UID) const;
        TIGL_EXPORT virtual CCPACSGuideCurveProfile& GetGuideCurveProfile(const std::string& UID);

        TIGL_EXPORT virtual CCPACSGuideCurveProfile& AddGuideCurveProfile();
        TIGL_EXPORT virtual void RemoveGuideCurveProfile(CCPACSGuideCurveProfile& ref);

    protected:
        CPACSProfiles* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::vector<std::unique_ptr<CCPACSGuideCurveProfile>> m_guideCurveProfiles;

    private:
        CPACSGuideCurveProfiles(const CPACSGuideCurveProfiles&) = delete;
        CPACSGuideCurveProfiles& operator=(const CPACSGuideCurveProfiles&) = delete;

        CPACSGuideCurveProfiles(CPACSGuideCurveProfiles&&) = delete;
        CPACSGuideCurveProfiles& operator=(CPACSGuideCurveProfiles&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSGuideCurveProfiles = generated::CPACSGuideCurveProfiles;
using CCPACSProfiles = generated::CPACSProfiles;
} // namespace tigl
