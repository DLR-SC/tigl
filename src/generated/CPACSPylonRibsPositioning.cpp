// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPylonRibsPositioning.h"

namespace tigl
{
    namespace generated
    {
        CPACSPylonRibsPositioning::CPACSPylonRibsPositioning(){}
        CPACSPylonRibsPositioning::~CPACSPylonRibsPositioning() {}
        
        void CPACSPylonRibsPositioning::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element relDepthStart
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relDepthStart")) {
                m_relDepthStart = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relDepthStart");
            }
            else {
                LOG(ERROR) << "Required element relDepthStart is missing";
            }
            
            // read element relDepthEnd
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relDepthEnd")) {
                m_relDepthEnd = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relDepthEnd");
            }
            else {
                LOG(ERROR) << "Required element relDepthEnd is missing";
            }
            
            // read element ribRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribRotation")) {
                m_ribRotation = boost::in_place();
                try {
                    m_ribRotation->ReadCPACS(tixiHandle, xpath + "/ribRotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ribRotation at xpath << " << xpath << ": " << e.what();
                    m_ribRotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ribRotation at xpath << " << xpath << ": " << e.getError();
                    m_ribRotation = boost::none;
                }
            }
            
            // read element ribCrossingBehaviour
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribCrossingBehaviour")) {
                m_ribCrossingBehaviour.ReadCPACS(tixiHandle, xpath + "/ribCrossingBehaviour");
            }
            else {
                LOG(ERROR) << "Required element ribCrossingBehaviour is missing";
            }
            
            // read element spacing
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spacing")) {
                m_spacing_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/spacing");
            }
            
            // read element numberOfRibs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfRibs")) {
                m_numberOfRibs_choice2 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfRibs");
            }
            
        }
        
        void CPACSPylonRibsPositioning::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element relDepthStart
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDepthStart");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relDepthStart", m_relDepthStart);
            
            // write element relDepthEnd
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDepthEnd");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relDepthEnd", m_relDepthEnd);
            
            // write element ribRotation
            if (m_ribRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribRotation");
                m_ribRotation->WriteCPACS(tixiHandle, xpath + "/ribRotation");
            }
            
            // write element ribCrossingBehaviour
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribCrossingBehaviour");
            m_ribCrossingBehaviour.WriteCPACS(tixiHandle, xpath + "/ribCrossingBehaviour");
            
            // write element spacing
            if (m_spacing_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spacing");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/spacing", *m_spacing_choice1);
            }
            
            // write element numberOfRibs
            if (m_numberOfRibs_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfRibs");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfRibs", *m_numberOfRibs_choice2);
            }
            
        }
        
        const double& CPACSPylonRibsPositioning::GetRelDepthStart() const
        {
            return m_relDepthStart;
        }
        
        void CPACSPylonRibsPositioning::SetRelDepthStart(const double& value)
        {
            m_relDepthStart = value;
        }
        
        const double& CPACSPylonRibsPositioning::GetRelDepthEnd() const
        {
            return m_relDepthEnd;
        }
        
        void CPACSPylonRibsPositioning::SetRelDepthEnd(const double& value)
        {
            m_relDepthEnd = value;
        }
        
        bool CPACSPylonRibsPositioning::HasRibRotation() const
        {
            return static_cast<bool>(m_ribRotation);
        }
        
        const CPACSPointY& CPACSPylonRibsPositioning::GetRibRotation() const
        {
            return *m_ribRotation;
        }
        
        CPACSPointY& CPACSPylonRibsPositioning::GetRibRotation()
        {
            return *m_ribRotation;
        }
        
        const CPACSPylonRibsPositioning_ribCrossingBehaviour& CPACSPylonRibsPositioning::GetRibCrossingBehaviour() const
        {
            return m_ribCrossingBehaviour;
        }
        
        CPACSPylonRibsPositioning_ribCrossingBehaviour& CPACSPylonRibsPositioning::GetRibCrossingBehaviour()
        {
            return m_ribCrossingBehaviour;
        }
        
        bool CPACSPylonRibsPositioning::HasSpacing_choice1() const
        {
            return static_cast<bool>(m_spacing_choice1);
        }
        
        const double& CPACSPylonRibsPositioning::GetSpacing_choice1() const
        {
            return *m_spacing_choice1;
        }
        
        void CPACSPylonRibsPositioning::SetSpacing_choice1(const double& value)
        {
            m_spacing_choice1 = value;
        }
        
        bool CPACSPylonRibsPositioning::HasNumberOfRibs_choice2() const
        {
            return static_cast<bool>(m_numberOfRibs_choice2);
        }
        
        const int& CPACSPylonRibsPositioning::GetNumberOfRibs_choice2() const
        {
            return *m_numberOfRibs_choice2;
        }
        
        void CPACSPylonRibsPositioning::SetNumberOfRibs_choice2(const int& value)
        {
            m_numberOfRibs_choice2 = value;
        }
        
    }
}
