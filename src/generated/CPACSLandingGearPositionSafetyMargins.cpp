// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGearPositionSafetyMargins.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGearPositionSafetyMargins::CPACSLandingGearPositionSafetyMargins(){}
        CPACSLandingGearPositionSafetyMargins::~CPACSLandingGearPositionSafetyMargins() {}
        
        void CPACSLandingGearPositionSafetyMargins::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element takeOff
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/takeOff")) {
                m_takeOff = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/takeOff");
            }
            
            // read element touchDown
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/touchDown")) {
                m_touchDown = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/touchDown");
            }
            
            // read element turnOver
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/turnOver")) {
                m_turnOver = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/turnOver");
            }
            
            // read element rollAngle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollAngle")) {
                m_rollAngle = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollAngle");
            }
            
        }
        
        void CPACSLandingGearPositionSafetyMargins::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element takeOff
            if (m_takeOff) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/takeOff");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/takeOff", *m_takeOff);
            }
            
            // write element touchDown
            if (m_touchDown) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/touchDown");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/touchDown", *m_touchDown);
            }
            
            // write element turnOver
            if (m_turnOver) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/turnOver");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/turnOver", *m_turnOver);
            }
            
            // write element rollAngle
            if (m_rollAngle) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollAngle");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollAngle", *m_rollAngle);
            }
            
        }
        
        bool CPACSLandingGearPositionSafetyMargins::HasTakeOff() const
        {
            return static_cast<bool>(m_takeOff);
        }
        
        const double& CPACSLandingGearPositionSafetyMargins::GetTakeOff() const
        {
            return *m_takeOff;
        }
        
        void CPACSLandingGearPositionSafetyMargins::SetTakeOff(const double& value)
        {
            m_takeOff = value;
        }
        
        bool CPACSLandingGearPositionSafetyMargins::HasTouchDown() const
        {
            return static_cast<bool>(m_touchDown);
        }
        
        const double& CPACSLandingGearPositionSafetyMargins::GetTouchDown() const
        {
            return *m_touchDown;
        }
        
        void CPACSLandingGearPositionSafetyMargins::SetTouchDown(const double& value)
        {
            m_touchDown = value;
        }
        
        bool CPACSLandingGearPositionSafetyMargins::HasTurnOver() const
        {
            return static_cast<bool>(m_turnOver);
        }
        
        const double& CPACSLandingGearPositionSafetyMargins::GetTurnOver() const
        {
            return *m_turnOver;
        }
        
        void CPACSLandingGearPositionSafetyMargins::SetTurnOver(const double& value)
        {
            m_turnOver = value;
        }
        
        bool CPACSLandingGearPositionSafetyMargins::HasRollAngle() const
        {
            return static_cast<bool>(m_rollAngle);
        }
        
        const double& CPACSLandingGearPositionSafetyMargins::GetRollAngle() const
        {
            return *m_rollAngle;
        }
        
        void CPACSLandingGearPositionSafetyMargins::SetRollAngle(const double& value)
        {
            m_rollAngle = value;
        }
        
    }
}
