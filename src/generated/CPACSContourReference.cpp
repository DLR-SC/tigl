// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSControlSurfaceBorderTrailingEdge.h"
#include "CPACSContourReference.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSContourReference::CPACSContourReference(CCPACSControlSurfaceBorderTrailingEdge* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_rotX(0)
        , m_scalY(0)
        , m_scalZ(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSContourReference::~CPACSContourReference()
    {
        if (m_uidMgr) {
            if (!m_airfoilUID.empty()) m_uidMgr->TryUnregisterReference(m_airfoilUID, *this);
        }
    }

    const CCPACSControlSurfaceBorderTrailingEdge* CPACSContourReference::GetParent() const
    {
        return m_parent;
    }

    CCPACSControlSurfaceBorderTrailingEdge* CPACSContourReference::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSContourReference::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSContourReference::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSContourReference::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSContourReference::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSContourReference::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element airfoilUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoilUID")) {
            m_airfoilUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/airfoilUID");
            if (m_airfoilUID.empty()) {
                LOG(WARNING) << "Required element airfoilUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_airfoilUID.empty()) m_uidMgr->RegisterReference(m_airfoilUID, *this);
        }
        else {
            LOG(ERROR) << "Required element airfoilUID is missing at xpath " << xpath;
        }

        // read element rotX
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotX")) {
            m_rotX = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rotX");
        }
        else {
            LOG(ERROR) << "Required element rotX is missing at xpath " << xpath;
        }

        // read element scalY
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/scalY")) {
            m_scalY = tixi::TixiGetElement<double>(tixiHandle, xpath + "/scalY");
        }
        else {
            LOG(ERROR) << "Required element scalY is missing at xpath " << xpath;
        }

        // read element scalZ
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/scalZ")) {
            m_scalZ = tixi::TixiGetElement<double>(tixiHandle, xpath + "/scalZ");
        }
        else {
            LOG(ERROR) << "Required element scalZ is missing at xpath " << xpath;
        }

    }

    void CPACSContourReference::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "airfoilUID", "rotX", "scalY", "scalZ" };

        // write element airfoilUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/airfoilUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/airfoilUID", m_airfoilUID);

        // write element rotX
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/rotX", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/rotX", m_rotX);

        // write element scalY
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/scalY", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/scalY", m_scalY);

        // write element scalZ
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/scalZ", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/scalZ", m_scalZ);

    }

    const std::string& CPACSContourReference::GetAirfoilUID() const
    {
        return m_airfoilUID;
    }

    void CPACSContourReference::SetAirfoilUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_airfoilUID.empty()) m_uidMgr->TryUnregisterReference(m_airfoilUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_airfoilUID = value;
    }

    const double& CPACSContourReference::GetRotX() const
    {
        return m_rotX;
    }

    void CPACSContourReference::SetRotX(const double& value)
    {
        m_rotX = value;
    }

    const double& CPACSContourReference::GetScalY() const
    {
        return m_scalY;
    }

    void CPACSContourReference::SetScalY(const double& value)
    {
        m_scalY = value;
    }

    const double& CPACSContourReference::GetScalZ() const
    {
        return m_scalZ;
    }

    void CPACSContourReference::SetScalZ(const double& value)
    {
        m_scalZ = value;
    }

    const CTiglUIDObject* CPACSContourReference::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSContourReference::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_airfoilUID == oldUid) {
            m_airfoilUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
