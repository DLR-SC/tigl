// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCenterFuselageLowWingConfiguration.h"

namespace tigl
{
    namespace generated
    {
        CPACSCenterFuselageLowWingConfiguration::CPACSCenterFuselageLowWingConfiguration(){}
        CPACSCenterFuselageLowWingConfiguration::~CPACSCenterFuselageLowWingConfiguration() {}
        
        void CPACSCenterFuselageLowWingConfiguration::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element centerFuselageMainFrames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageMainFrames")) {
                m_centerFuselageMainFrames.ReadCPACS(tixiHandle, xpath + "/centerFuselageMainFrames");
            }
            else {
                LOG(ERROR) << "Required element centerFuselageMainFrames is missing";
            }
            
            // read element centerFuselagePressureFloor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselagePressureFloor")) {
                m_centerFuselagePressureFloor.ReadCPACS(tixiHandle, xpath + "/centerFuselagePressureFloor");
            }
            else {
                LOG(ERROR) << "Required element centerFuselagePressureFloor is missing";
            }
            
            // read element centerFuselageSidebox
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageSidebox")) {
                m_centerFuselageSidebox.ReadCPACS(tixiHandle, xpath + "/centerFuselageSidebox");
            }
            else {
                LOG(ERROR) << "Required element centerFuselageSidebox is missing";
            }
            
            // read element centerFuselageLateralPanels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageLateralPanels")) {
                m_centerFuselageLateralPanels.ReadCPACS(tixiHandle, xpath + "/centerFuselageLateralPanels");
            }
            else {
                LOG(ERROR) << "Required element centerFuselageLateralPanels is missing";
            }
            
            // read element centerFuselageKeelbeam
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageKeelbeam")) {
                m_centerFuselageKeelbeam.ReadCPACS(tixiHandle, xpath + "/centerFuselageKeelbeam");
            }
            else {
                LOG(ERROR) << "Required element centerFuselageKeelbeam is missing";
            }
            
            // read element centerFuselageLongFloorBeamsConnection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageLongFloorBeamsConnection")) {
                m_centerFuselageLongFloorBeamsConnection.ReadCPACS(tixiHandle, xpath + "/centerFuselageLongFloorBeamsConnection");
            }
            else {
                LOG(ERROR) << "Required element centerFuselageLongFloorBeamsConnection is missing";
            }
            
        }
        
        void CPACSCenterFuselageLowWingConfiguration::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element centerFuselageMainFrames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageMainFrames");
            m_centerFuselageMainFrames.WriteCPACS(tixiHandle, xpath + "/centerFuselageMainFrames");
            
            // write element centerFuselagePressureFloor
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselagePressureFloor");
            m_centerFuselagePressureFloor.WriteCPACS(tixiHandle, xpath + "/centerFuselagePressureFloor");
            
            // write element centerFuselageSidebox
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageSidebox");
            m_centerFuselageSidebox.WriteCPACS(tixiHandle, xpath + "/centerFuselageSidebox");
            
            // write element centerFuselageLateralPanels
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageLateralPanels");
            m_centerFuselageLateralPanels.WriteCPACS(tixiHandle, xpath + "/centerFuselageLateralPanels");
            
            // write element centerFuselageKeelbeam
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageKeelbeam");
            m_centerFuselageKeelbeam.WriteCPACS(tixiHandle, xpath + "/centerFuselageKeelbeam");
            
            // write element centerFuselageLongFloorBeamsConnection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageLongFloorBeamsConnection");
            m_centerFuselageLongFloorBeamsConnection.WriteCPACS(tixiHandle, xpath + "/centerFuselageLongFloorBeamsConnection");
            
        }
        
        bool CPACSCenterFuselageLowWingConfiguration::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSCenterFuselageLowWingConfiguration::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSCenterFuselageLowWingConfiguration::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSCenterFuselageMainFrames& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageMainFrames() const
        {
            return m_centerFuselageMainFrames;
        }
        
        CPACSCenterFuselageMainFrames& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageMainFrames()
        {
            return m_centerFuselageMainFrames;
        }
        
        const CPACSCenterFuselagePressureFloor& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselagePressureFloor() const
        {
            return m_centerFuselagePressureFloor;
        }
        
        CPACSCenterFuselagePressureFloor& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselagePressureFloor()
        {
            return m_centerFuselagePressureFloor;
        }
        
        const CPACSCenterFuselageSidebox& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageSidebox() const
        {
            return m_centerFuselageSidebox;
        }
        
        CPACSCenterFuselageSidebox& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageSidebox()
        {
            return m_centerFuselageSidebox;
        }
        
        const CPACSCenterFuselageLateralPanels& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageLateralPanels() const
        {
            return m_centerFuselageLateralPanels;
        }
        
        CPACSCenterFuselageLateralPanels& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageLateralPanels()
        {
            return m_centerFuselageLateralPanels;
        }
        
        const CPACSCenterFuselageKeelbeam& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageKeelbeam() const
        {
            return m_centerFuselageKeelbeam;
        }
        
        CPACSCenterFuselageKeelbeam& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageKeelbeam()
        {
            return m_centerFuselageKeelbeam;
        }
        
        const CPACSCenterFuselageLongFloorBeamsConnection& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageLongFloorBeamsConnection() const
        {
            return m_centerFuselageLongFloorBeamsConnection;
        }
        
        CPACSCenterFuselageLongFloorBeamsConnection& CPACSCenterFuselageLowWingConfiguration::GetCenterFuselageLongFloorBeamsConnection()
        {
            return m_centerFuselageLongFloorBeamsConnection;
        }
        
    }
}
