// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDomeType.h"
#include "CPACSEmptyElementBase.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSEmptyElementBase::CPACSEmptyElementBase(CPACSDomeType* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSEmptyElementBase::~CPACSEmptyElementBase()
    {
    }

    const CPACSDomeType* CPACSEmptyElementBase::GetParent() const
    {
        return m_parent;
    }

    CPACSDomeType* CPACSEmptyElementBase::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSEmptyElementBase::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSEmptyElementBase::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSEmptyElementBase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute externalDataNodePath
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalDataNodePath")) {
            m_externalDataNodePath = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalDataNodePath");
            if (m_externalDataNodePath->empty()) {
                LOG(WARNING) << "Optional attribute externalDataNodePath is present but empty at xpath " << xpath;
            }
        }

        // read attribute externalFileName
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalFileName")) {
            m_externalFileName = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalFileName");
            if (m_externalFileName->empty()) {
                LOG(WARNING) << "Optional attribute externalFileName is present but empty at xpath " << xpath;
            }
        }

        // read attribute externalDataDirectory
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalDataDirectory")) {
            m_externalDataDirectory = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalDataDirectory");
            if (m_externalDataDirectory->empty()) {
                LOG(WARNING) << "Optional attribute externalDataDirectory is present but empty at xpath " << xpath;
            }
        }

        // read simpleContent 
        if (tixi::TixiCheckElement(tixiHandle, xpath)) {
            m_value = tixi::TixiGetElement<std::string>(tixiHandle, xpath);
            if (m_value.empty()) {
                LOG(WARNING) << "Required element  is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required simpleContent  is missing at xpath " << xpath;
        }

    }

    void CPACSEmptyElementBase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute externalDataNodePath
        if (m_externalDataNodePath) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "externalDataNodePath", *m_externalDataNodePath);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalDataNodePath")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "externalDataNodePath");
            }
        }

        // write attribute externalFileName
        if (m_externalFileName) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "externalFileName", *m_externalFileName);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalFileName")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "externalFileName");
            }
        }

        // write attribute externalDataDirectory
        if (m_externalDataDirectory) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "externalDataDirectory", *m_externalDataDirectory);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "externalDataDirectory")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "externalDataDirectory");
            }
        }

        // write simpleContent 
        tixi::TixiSaveElement(tixiHandle, xpath, m_value);

    }

    const boost::optional<std::string>& CPACSEmptyElementBase::GetExternalDataNodePath() const
    {
        return m_externalDataNodePath;
    }

    void CPACSEmptyElementBase::SetExternalDataNodePath(const boost::optional<std::string>& value)
    {
        m_externalDataNodePath = value;
    }

    const boost::optional<std::string>& CPACSEmptyElementBase::GetExternalFileName() const
    {
        return m_externalFileName;
    }

    void CPACSEmptyElementBase::SetExternalFileName(const boost::optional<std::string>& value)
    {
        m_externalFileName = value;
    }

    const boost::optional<std::string>& CPACSEmptyElementBase::GetExternalDataDirectory() const
    {
        return m_externalDataDirectory;
    }

    void CPACSEmptyElementBase::SetExternalDataDirectory(const boost::optional<std::string>& value)
    {
        m_externalDataDirectory = value;
    }

    const std::string& CPACSEmptyElementBase::GetValue() const
    {
        return m_value;
    }

    void CPACSEmptyElementBase::SetValue(const std::string& value)
    {
        m_value = value;
    }

} // namespace generated
} // namespace tigl
