// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSEnginePositions.h>
#include <CCPACSFuselages.h>
#include <CCPACSRotorBlades.h>
#include <CCPACSRotors.h>
#include <CCPACSWings.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSRotorcraft;

    // This class is used in:
    // CPACSRotorcraft

    // generated from /xsd:schema/xsd:complexType[791]
    /// @brief rotorcraftModelType
    /// 
    /// RotorCraftModel type, containing a complete rotorcraft
    /// model (Geometry and all specific data). The rotorcraftModelType
    /// is basically a copy of the aircraftModelType with the following
    /// additional elements: rotors, rotorBlades, driveSystems.
    /// Furthermore the folowing elements have been adapted for
    /// rotorcraft: global and analyses (aeroPerformance and
    /// massBreakdown).
    /// 
    class CPACSRotorcraftModel : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSRotorcraftModel(CPACSRotorcraft* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSRotorcraftModel();

        TIGL_EXPORT CPACSRotorcraft* GetParent();

        TIGL_EXPORT const CPACSRotorcraft* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetName() const;
        TIGL_EXPORT virtual void SetName(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSFuselages>& GetFuselages() const;
        TIGL_EXPORT virtual boost::optional<CCPACSFuselages>& GetFuselages();

        TIGL_EXPORT virtual const boost::optional<CCPACSWings>& GetWings() const;
        TIGL_EXPORT virtual boost::optional<CCPACSWings>& GetWings();

        TIGL_EXPORT virtual const boost::optional<CCPACSRotors>& GetRotors() const;
        TIGL_EXPORT virtual boost::optional<CCPACSRotors>& GetRotors();

        TIGL_EXPORT virtual const boost::optional<CCPACSRotorBlades>& GetRotorBlades() const;
        TIGL_EXPORT virtual boost::optional<CCPACSRotorBlades>& GetRotorBlades();

        TIGL_EXPORT virtual const boost::optional<CCPACSEnginePositions>& GetEngines() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEnginePositions>& GetEngines();

        TIGL_EXPORT virtual CCPACSFuselages& GetFuselages(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveFuselages();

        TIGL_EXPORT virtual CCPACSWings& GetWings(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveWings();

        TIGL_EXPORT virtual CCPACSRotors& GetRotors(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRotors();

        TIGL_EXPORT virtual CCPACSRotorBlades& GetRotorBlades(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRotorBlades();

        TIGL_EXPORT virtual CCPACSEnginePositions& GetEngines(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEngines();

    protected:
        CPACSRotorcraft* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                            m_uID;

        /// Name of rotorcraft model
        std::string                            m_name;

        /// Description of rotorcraft model
        boost::optional<std::string>           m_description;

        boost::optional<CCPACSFuselages>       m_fuselages;

        boost::optional<CCPACSWings>           m_wings;

        boost::optional<CCPACSRotors>          m_rotors;

        boost::optional<CCPACSRotorBlades>     m_rotorBlades;

        boost::optional<CCPACSEnginePositions> m_engines;

    private:
        CPACSRotorcraftModel(const CPACSRotorcraftModel&) = delete;
        CPACSRotorcraftModel& operator=(const CPACSRotorcraftModel&) = delete;

        CPACSRotorcraftModel(CPACSRotorcraftModel&&) = delete;
        CPACSRotorcraftModel& operator=(CPACSRotorcraftModel&&) = delete;
    };
} // namespace generated

// CPACSRotorcraftModel is customized, use type CCPACSRotorcraftModel directly

// Aliases in tigl namespace
using CCPACSRotorcraft = generated::CPACSRotorcraft;
} // namespace tigl
