// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFreePath.h"

namespace tigl
{
    namespace generated
    {
        CPACSFreePath::CPACSFreePath(){}
        CPACSFreePath::~CPACSFreePath() {}
        
        void CPACSFreePath::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element positive
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positive")) {
                m_positive = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positive");
            }
            else {
                LOG(ERROR) << "Required element positive is missing";
            }
            
            // read element negative
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/negative")) {
                m_negative = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/negative");
            }
            else {
                LOG(ERROR) << "Required element negative is missing";
            }
            
        }
        
        void CPACSFreePath::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element positive
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positive");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positive", m_positive);
            
            // write element negative
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/negative");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/negative", m_negative);
            
        }
        
        const double& CPACSFreePath::GetPositive() const
        {
            return m_positive;
        }
        
        void CPACSFreePath::SetPositive(const double& value)
        {
            m_positive = value;
        }
        
        const double& CPACSFreePath::GetNegative() const
        {
            return m_negative;
        }
        
        void CPACSFreePath::SetNegative(const double& value)
        {
            m_negative = value;
        }
        
    }
}
