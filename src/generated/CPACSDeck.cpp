// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDeck.h"

namespace tigl
{
    namespace generated
    {
        CPACSDeck::CPACSDeck(){}
        CPACSDeck::~CPACSDeck() {}
        
        void CPACSDeck::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element parentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                m_parentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            }
            
            // read element x0
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/x0")) {
                m_x0 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/x0");
            }
            else {
                LOG(ERROR) << "Required element x0 is missing";
            }
            
            // read element z0
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/z0")) {
                m_z0 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/z0");
            }
            else {
                LOG(ERROR) << "Required element z0 is missing";
            }
            
            // read element type
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/type")) {
                m_type.ReadCPACS(tixiHandle, xpath + "/type");
            }
            else {
                LOG(ERROR) << "Required element type is missing";
            }
            
            // read element cabGeometry
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cabGeometry")) {
                m_cabGeometry.ReadCPACS(tixiHandle, xpath + "/cabGeometry");
            }
            else {
                LOG(ERROR) << "Required element cabGeometry is missing";
            }
            
            // read element aisles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aisles")) {
                m_aisles = boost::in_place();
                try {
                    m_aisles->ReadCPACS(tixiHandle, xpath + "/aisles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aisles at xpath << " << xpath << ": " << e.what();
                    m_aisles = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aisles at xpath << " << xpath << ": " << e.getError();
                    m_aisles = boost::none;
                }
            }
            
            // read element spaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spaces")) {
                m_spaces = boost::in_place();
                try {
                    m_spaces->ReadCPACS(tixiHandle, xpath + "/spaces");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read spaces at xpath << " << xpath << ": " << e.what();
                    m_spaces = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read spaces at xpath << " << xpath << ": " << e.getError();
                    m_spaces = boost::none;
                }
            }
            
            // read element doors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/doors")) {
                m_doors = boost::in_place();
                try {
                    m_doors->ReadCPACS(tixiHandle, xpath + "/doors");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read doors at xpath << " << xpath << ": " << e.what();
                    m_doors = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read doors at xpath << " << xpath << ": " << e.getError();
                    m_doors = boost::none;
                }
            }
            
            // read element seatElements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/seatElements")) {
                m_seatElements = boost::in_place();
                try {
                    m_seatElements->ReadCPACS(tixiHandle, xpath + "/seatElements");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read seatElements at xpath << " << xpath << ": " << e.what();
                    m_seatElements = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read seatElements at xpath << " << xpath << ": " << e.getError();
                    m_seatElements = boost::none;
                }
            }
            
            // read element floorElements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/floorElements")) {
                m_floorElements = boost::in_place();
                try {
                    m_floorElements->ReadCPACS(tixiHandle, xpath + "/floorElements");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read floorElements at xpath << " << xpath << ": " << e.what();
                    m_floorElements = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read floorElements at xpath << " << xpath << ": " << e.getError();
                    m_floorElements = boost::none;
                }
            }
            
        }
        
        void CPACSDeck::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element parentUID
            if (m_parentUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/parentUID", *m_parentUID);
            }
            
            // write element x0
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/x0");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/x0", m_x0);
            
            // write element z0
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z0");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/z0", m_z0);
            
            // write element type
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/type");
            m_type.WriteCPACS(tixiHandle, xpath + "/type");
            
            // write element cabGeometry
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cabGeometry");
            m_cabGeometry.WriteCPACS(tixiHandle, xpath + "/cabGeometry");
            
            // write element aisles
            if (m_aisles) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aisles");
                m_aisles->WriteCPACS(tixiHandle, xpath + "/aisles");
            }
            
            // write element spaces
            if (m_spaces) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spaces");
                m_spaces->WriteCPACS(tixiHandle, xpath + "/spaces");
            }
            
            // write element doors
            if (m_doors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doors");
                m_doors->WriteCPACS(tixiHandle, xpath + "/doors");
            }
            
            // write element seatElements
            if (m_seatElements) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/seatElements");
                m_seatElements->WriteCPACS(tixiHandle, xpath + "/seatElements");
            }
            
            // write element floorElements
            if (m_floorElements) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/floorElements");
                m_floorElements->WriteCPACS(tixiHandle, xpath + "/floorElements");
            }
            
        }
        
        bool CPACSDeck::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSDeck::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSDeck::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSDeck::GetName() const
        {
            return m_name;
        }
        
        void CPACSDeck::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSDeck::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSDeck::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSDeck::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSDeck::HasParentUID() const
        {
            return static_cast<bool>(m_parentUID);
        }
        
        const std::string& CPACSDeck::GetParentUID() const
        {
            return *m_parentUID;
        }
        
        void CPACSDeck::SetParentUID(const std::string& value)
        {
            m_parentUID = value;
        }
        
        const double& CPACSDeck::GetX0() const
        {
            return m_x0;
        }
        
        void CPACSDeck::SetX0(const double& value)
        {
            m_x0 = value;
        }
        
        const double& CPACSDeck::GetZ0() const
        {
            return m_z0;
        }
        
        void CPACSDeck::SetZ0(const double& value)
        {
            m_z0 = value;
        }
        
        const CPACSDeck_type& CPACSDeck::GetType() const
        {
            return m_type;
        }
        
        CPACSDeck_type& CPACSDeck::GetType()
        {
            return m_type;
        }
        
        const CPACSCabGeometry& CPACSDeck::GetCabGeometry() const
        {
            return m_cabGeometry;
        }
        
        CPACSCabGeometry& CPACSDeck::GetCabGeometry()
        {
            return m_cabGeometry;
        }
        
        bool CPACSDeck::HasAisles() const
        {
            return static_cast<bool>(m_aisles);
        }
        
        const CPACSCabinAisles& CPACSDeck::GetAisles() const
        {
            return *m_aisles;
        }
        
        CPACSCabinAisles& CPACSDeck::GetAisles()
        {
            return *m_aisles;
        }
        
        bool CPACSDeck::HasSpaces() const
        {
            return static_cast<bool>(m_spaces);
        }
        
        const CPACSCabinSpaces& CPACSDeck::GetSpaces() const
        {
            return *m_spaces;
        }
        
        CPACSCabinSpaces& CPACSDeck::GetSpaces()
        {
            return *m_spaces;
        }
        
        bool CPACSDeck::HasDoors() const
        {
            return static_cast<bool>(m_doors);
        }
        
        const CPACSCabinDoors& CPACSDeck::GetDoors() const
        {
            return *m_doors;
        }
        
        CPACSCabinDoors& CPACSDeck::GetDoors()
        {
            return *m_doors;
        }
        
        bool CPACSDeck::HasSeatElements() const
        {
            return static_cast<bool>(m_seatElements);
        }
        
        const CPACSCabinSeatElements& CPACSDeck::GetSeatElements() const
        {
            return *m_seatElements;
        }
        
        CPACSCabinSeatElements& CPACSDeck::GetSeatElements()
        {
            return *m_seatElements;
        }
        
        bool CPACSDeck::HasFloorElements() const
        {
            return static_cast<bool>(m_floorElements);
        }
        
        const CPACSCabinFloorElements& CPACSDeck::GetFloorElements() const
        {
            return *m_floorElements;
        }
        
        CPACSCabinFloorElements& CPACSDeck::GetFloorElements()
        {
            return *m_floorElements;
        }
        
    }
}
