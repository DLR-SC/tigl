// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightDynamicsAnalysis.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightDynamicsAnalysis::CPACSFlightDynamicsAnalysis(){}
        CPACSFlightDynamicsAnalysis::~CPACSFlightDynamicsAnalysis() {}
        
        void CPACSFlightDynamicsAnalysis::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element flightCases
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightCases")) {
                m_flightCases = boost::in_place();
                try {
                    m_flightCases->ReadCPACS(tixiHandle, xpath + "/flightCases");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightCases at xpath << " << xpath << ": " << e.what();
                    m_flightCases = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightCases at xpath << " << xpath << ": " << e.getError();
                    m_flightCases = boost::none;
                }
            }
            
            // read element model
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/model")) {
                m_model = boost::in_place();
                try {
                    m_model->ReadCPACS(tixiHandle, xpath + "/model");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read model at xpath << " << xpath << ": " << e.what();
                    m_model = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read model at xpath << " << xpath << ": " << e.getError();
                    m_model = boost::none;
                }
            }
            
        }
        
        void CPACSFlightDynamicsAnalysis::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element flightCases
            if (m_flightCases) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightCases");
                m_flightCases->WriteCPACS(tixiHandle, xpath + "/flightCases");
            }
            
            // write element model
            if (m_model) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/model");
                m_model->WriteCPACS(tixiHandle, xpath + "/model");
            }
            
        }
        
        bool CPACSFlightDynamicsAnalysis::HasFlightCases() const
        {
            return static_cast<bool>(m_flightCases);
        }
        
        const CPACSFlightDynamicsFlightCases& CPACSFlightDynamicsAnalysis::GetFlightCases() const
        {
            return *m_flightCases;
        }
        
        CPACSFlightDynamicsFlightCases& CPACSFlightDynamicsAnalysis::GetFlightCases()
        {
            return *m_flightCases;
        }
        
        bool CPACSFlightDynamicsAnalysis::HasModel() const
        {
            return static_cast<bool>(m_model);
        }
        
        const CPACSFlightDynamicsModel& CPACSFlightDynamicsAnalysis::GetModel() const
        {
            return *m_model;
        }
        
        CPACSFlightDynamicsModel& CPACSFlightDynamicsAnalysis::GetModel()
        {
            return *m_model;
        }
        
    }
}
