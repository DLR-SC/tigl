// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCostComponents.h"

namespace tigl
{
    namespace generated
    {
        CPACSCostComponents::CPACSCostComponents(){}
        CPACSCostComponents::~CPACSCostComponents() {}
        
        void CPACSCostComponents::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element costDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/costDescription")) {
                m_costDescription.ReadCPACS(tixiHandle, xpath + "/costDescription");
            }
            else {
                LOG(ERROR) << "Required element costDescription is missing";
            }
            
            // read element wings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wings")) {
                m_wings = boost::in_place();
                try {
                    m_wings->ReadCPACS(tixiHandle, xpath + "/wings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.what();
                    m_wings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.getError();
                    m_wings = boost::none;
                }
            }
            
            // read element fuselages
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselages")) {
                m_fuselages = boost::in_place();
                try {
                    m_fuselages->ReadCPACS(tixiHandle, xpath + "/fuselages");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.what();
                    m_fuselages = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.getError();
                    m_fuselages = boost::none;
                }
            }
            
            // read element enginePylons
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/enginePylons")) {
                m_enginePylons = boost::in_place();
                try {
                    m_enginePylons->ReadCPACS(tixiHandle, xpath + "/enginePylons");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read enginePylons at xpath << " << xpath << ": " << e.what();
                    m_enginePylons = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read enginePylons at xpath << " << xpath << ": " << e.getError();
                    m_enginePylons = boost::none;
                }
            }
            
            // read element landingGear
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGear")) {
                m_landingGear = boost::in_place();
                try {
                    m_landingGear->ReadCPACS(tixiHandle, xpath + "/landingGear");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGear at xpath << " << xpath << ": " << e.what();
                    m_landingGear = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGear at xpath << " << xpath << ": " << e.getError();
                    m_landingGear = boost::none;
                }
            }
            
        }
        
        void CPACSCostComponents::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element costDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/costDescription");
            m_costDescription.WriteCPACS(tixiHandle, xpath + "/costDescription");
            
            // write element wings
            if (m_wings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wings");
                m_wings->WriteCPACS(tixiHandle, xpath + "/wings");
            }
            
            // write element fuselages
            if (m_fuselages) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselages");
                m_fuselages->WriteCPACS(tixiHandle, xpath + "/fuselages");
            }
            
            // write element enginePylons
            if (m_enginePylons) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/enginePylons");
                m_enginePylons->WriteCPACS(tixiHandle, xpath + "/enginePylons");
            }
            
            // write element landingGear
            if (m_landingGear) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGear");
                m_landingGear->WriteCPACS(tixiHandle, xpath + "/landingGear");
            }
            
        }
        
        const CPACSGenericCost& CPACSCostComponents::GetCostDescription() const
        {
            return m_costDescription;
        }
        
        CPACSGenericCost& CPACSCostComponents::GetCostDescription()
        {
            return m_costDescription;
        }
        
        bool CPACSCostComponents::HasWings() const
        {
            return static_cast<bool>(m_wings);
        }
        
        const CPACSCostWings& CPACSCostComponents::GetWings() const
        {
            return *m_wings;
        }
        
        CPACSCostWings& CPACSCostComponents::GetWings()
        {
            return *m_wings;
        }
        
        bool CPACSCostComponents::HasFuselages() const
        {
            return static_cast<bool>(m_fuselages);
        }
        
        const CPACSCostFuselages& CPACSCostComponents::GetFuselages() const
        {
            return *m_fuselages;
        }
        
        CPACSCostFuselages& CPACSCostComponents::GetFuselages()
        {
            return *m_fuselages;
        }
        
        bool CPACSCostComponents::HasEnginePylons() const
        {
            return static_cast<bool>(m_enginePylons);
        }
        
        const CPACSCostEnginePylons& CPACSCostComponents::GetEnginePylons() const
        {
            return *m_enginePylons;
        }
        
        CPACSCostEnginePylons& CPACSCostComponents::GetEnginePylons()
        {
            return *m_enginePylons;
        }
        
        bool CPACSCostComponents::HasLandingGear() const
        {
            return static_cast<bool>(m_landingGear);
        }
        
        const CPACSCostLandingGear& CPACSCostComponents::GetLandingGear() const
        {
            return *m_landingGear;
        }
        
        CPACSCostLandingGear& CPACSCostComponents::GetLandingGear()
        {
            return *m_landingGear;
        }
        
    }
}
