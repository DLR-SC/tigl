// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCompartment.h"
#include "CPACSCompartments.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCompartment::CPACSCompartment(CPACSCompartments* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_geometry(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCompartment::~CPACSCompartment()
    {
        if (m_uidMgr && m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
    }

    const CPACSCompartments* CPACSCompartment::GetParent() const
    {
        return m_parent;
    }

    CPACSCompartments* CPACSCompartment::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCompartment::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCompartment::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSCompartment::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCompartment::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSCompartment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID->empty()) {
                LOG(WARNING) << "Optional attribute uID is present but empty at xpath " << xpath;
            }
        }

        // read element geometry
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/geometry")) {
            m_geometry.ReadCPACS(tixiHandle, xpath + "/geometry");
        }
        else {
            LOG(ERROR) << "Required element geometry is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element designVolume
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/designVolume")) {
            m_designVolume = tixi::TixiGetElement<double>(tixiHandle, xpath + "/designVolume");
        }

        if (m_uidMgr && m_uID) m_uidMgr->RegisterObject(*m_uID, *this);
    }

    void CPACSCompartment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "geometry", "name", "description", "designVolume" };

        // write attribute uID
        if (m_uID) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "uID");
            }
        }

        // write element geometry
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/geometry", childElemOrder);
        m_geometry.WriteCPACS(tixiHandle, xpath + "/geometry");

        // write element name
        if (m_name) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element designVolume
        if (m_designVolume) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/designVolume", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/designVolume", *m_designVolume);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/designVolume")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/designVolume");
            }
        }

    }

    const boost::optional<std::string>& CPACSCompartment::GetUID() const
    {
        return m_uID;
    }

    void CPACSCompartment::SetUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (!m_uID && value) {
                m_uidMgr->RegisterObject(*value, *this);
            }
            else if (m_uID && !value) {
                m_uidMgr->TryUnregisterObject(*m_uID);
            }
            else if (m_uID && value) {
                m_uidMgr->UpdateObjectUID(*m_uID, *value);
            }
        }
        m_uID = value;
    }

    const CPACSCompartmentGeometry& CPACSCompartment::GetGeometry() const
    {
        return m_geometry;
    }

    CPACSCompartmentGeometry& CPACSCompartment::GetGeometry()
    {
        return m_geometry;
    }

    const boost::optional<std::string>& CPACSCompartment::GetName() const
    {
        return m_name;
    }

    void CPACSCompartment::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSCompartment::GetDescription() const
    {
        return m_description;
    }

    void CPACSCompartment::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<double>& CPACSCompartment::GetDesignVolume() const
    {
        return m_designVolume;
    }

    void CPACSCompartment::SetDesignVolume(const boost::optional<double>& value)
    {
        m_designVolume = value;
    }

} // namespace generated
} // namespace tigl
