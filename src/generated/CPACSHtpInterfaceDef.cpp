// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSHtpInterfaceDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSHtpInterfaceDef::CPACSHtpInterfaceDef(){}
        CPACSHtpInterfaceDef::~CPACSHtpInterfaceDef() {}
        
        void CPACSHtpInterfaceDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element htpFrame1UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFrame1UID")) {
                m_htpFrame1UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFrame1UID");
            }
            else {
                LOG(ERROR) << "Required element htpFrame1UID is missing";
            }
            
            // read element htpFrame2UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFrame2UID")) {
                m_htpFrame2UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFrame2UID");
            }
            else {
                LOG(ERROR) << "Required element htpFrame2UID is missing";
            }
            
            // read element htpAlphaUp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpAlphaUp")) {
                m_htpAlphaUp = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpAlphaUp");
            }
            else {
                LOG(ERROR) << "Required element htpAlphaUp is missing";
            }
            
            // read element htpAlphaDown
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpAlphaDown")) {
                m_htpAlphaDown = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpAlphaDown");
            }
            else {
                LOG(ERROR) << "Required element htpAlphaDown is missing";
            }
            
            // read element htpReinfAngle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpReinfAngle")) {
                m_htpReinfAngle = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpReinfAngle");
            }
            else {
                LOG(ERROR) << "Required element htpReinfAngle is missing";
            }
            
            // read element htpAreaToleranceX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpAreaToleranceX")) {
                m_htpAreaToleranceX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpAreaToleranceX");
            }
            
            // read element htpAreaToleranceY
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpAreaToleranceY")) {
                m_htpAreaToleranceY = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpAreaToleranceY");
            }
            
            // read element htpAreaToleranceZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpAreaToleranceZ")) {
                m_htpAreaToleranceZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpAreaToleranceZ");
            }
            
            // read element htpStructuralElementDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpStructuralElementDefinitions")) {
                m_htpStructuralElementDefinitions.ReadCPACS(tixiHandle, xpath + "/htpStructuralElementDefinitions");
            }
            else {
                LOG(ERROR) << "Required element htpStructuralElementDefinitions is missing";
            }
            
            // read element htpForwardInterfaceDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpForwardInterfaceDefinitions")) {
                m_htpForwardInterfaceDefinitions.ReadCPACS(tixiHandle, xpath + "/htpForwardInterfaceDefinitions");
            }
            else {
                LOG(ERROR) << "Required element htpForwardInterfaceDefinitions is missing";
            }
            
        }
        
        void CPACSHtpInterfaceDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element htpFrame1UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFrame1UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFrame1UID", m_htpFrame1UID);
            
            // write element htpFrame2UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFrame2UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFrame2UID", m_htpFrame2UID);
            
            // write element htpAlphaUp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpAlphaUp");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpAlphaUp", m_htpAlphaUp);
            
            // write element htpAlphaDown
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpAlphaDown");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpAlphaDown", m_htpAlphaDown);
            
            // write element htpReinfAngle
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpReinfAngle");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpReinfAngle", m_htpReinfAngle);
            
            // write element htpAreaToleranceX
            if (m_htpAreaToleranceX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpAreaToleranceX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpAreaToleranceX", *m_htpAreaToleranceX);
            }
            
            // write element htpAreaToleranceY
            if (m_htpAreaToleranceY) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpAreaToleranceY");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpAreaToleranceY", *m_htpAreaToleranceY);
            }
            
            // write element htpAreaToleranceZ
            if (m_htpAreaToleranceZ) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpAreaToleranceZ");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpAreaToleranceZ", *m_htpAreaToleranceZ);
            }
            
            // write element htpStructuralElementDefinitions
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpStructuralElementDefinitions");
            m_htpStructuralElementDefinitions.WriteCPACS(tixiHandle, xpath + "/htpStructuralElementDefinitions");
            
            // write element htpForwardInterfaceDefinitions
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpForwardInterfaceDefinitions");
            m_htpForwardInterfaceDefinitions.WriteCPACS(tixiHandle, xpath + "/htpForwardInterfaceDefinitions");
            
        }
        
        bool CPACSHtpInterfaceDef::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSHtpInterfaceDef::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSHtpInterfaceDef::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSHtpInterfaceDef::GetHtpFrame1UID() const
        {
            return m_htpFrame1UID;
        }
        
        void CPACSHtpInterfaceDef::SetHtpFrame1UID(const std::string& value)
        {
            m_htpFrame1UID = value;
        }
        
        const std::string& CPACSHtpInterfaceDef::GetHtpFrame2UID() const
        {
            return m_htpFrame2UID;
        }
        
        void CPACSHtpInterfaceDef::SetHtpFrame2UID(const std::string& value)
        {
            m_htpFrame2UID = value;
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpAlphaUp() const
        {
            return m_htpAlphaUp;
        }
        
        void CPACSHtpInterfaceDef::SetHtpAlphaUp(const double& value)
        {
            m_htpAlphaUp = value;
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpAlphaDown() const
        {
            return m_htpAlphaDown;
        }
        
        void CPACSHtpInterfaceDef::SetHtpAlphaDown(const double& value)
        {
            m_htpAlphaDown = value;
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpReinfAngle() const
        {
            return m_htpReinfAngle;
        }
        
        void CPACSHtpInterfaceDef::SetHtpReinfAngle(const double& value)
        {
            m_htpReinfAngle = value;
        }
        
        bool CPACSHtpInterfaceDef::HasHtpAreaToleranceX() const
        {
            return static_cast<bool>(m_htpAreaToleranceX);
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpAreaToleranceX() const
        {
            return *m_htpAreaToleranceX;
        }
        
        void CPACSHtpInterfaceDef::SetHtpAreaToleranceX(const double& value)
        {
            m_htpAreaToleranceX = value;
        }
        
        bool CPACSHtpInterfaceDef::HasHtpAreaToleranceY() const
        {
            return static_cast<bool>(m_htpAreaToleranceY);
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpAreaToleranceY() const
        {
            return *m_htpAreaToleranceY;
        }
        
        void CPACSHtpInterfaceDef::SetHtpAreaToleranceY(const double& value)
        {
            m_htpAreaToleranceY = value;
        }
        
        bool CPACSHtpInterfaceDef::HasHtpAreaToleranceZ() const
        {
            return static_cast<bool>(m_htpAreaToleranceZ);
        }
        
        const double& CPACSHtpInterfaceDef::GetHtpAreaToleranceZ() const
        {
            return *m_htpAreaToleranceZ;
        }
        
        void CPACSHtpInterfaceDef::SetHtpAreaToleranceZ(const double& value)
        {
            m_htpAreaToleranceZ = value;
        }
        
        const CPACSHtpStructElemDef& CPACSHtpInterfaceDef::GetHtpStructuralElementDefinitions() const
        {
            return m_htpStructuralElementDefinitions;
        }
        
        CPACSHtpStructElemDef& CPACSHtpInterfaceDef::GetHtpStructuralElementDefinitions()
        {
            return m_htpStructuralElementDefinitions;
        }
        
        const CPACSHtpFwdInterfaceDef& CPACSHtpInterfaceDef::GetHtpForwardInterfaceDefinitions() const
        {
            return m_htpForwardInterfaceDefinitions;
        }
        
        CPACSHtpFwdInterfaceDef& CPACSHtpInterfaceDef::GetHtpForwardInterfaceDefinitions()
        {
            return m_htpForwardInterfaceDefinitions;
        }
        
    }
}
