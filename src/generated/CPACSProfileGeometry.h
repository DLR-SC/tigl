// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPointListXYZVector.h>
#include <CCPACSWingProfileCST.h>
#include <string>
#include <TiglSymmetryAxis.h>
#include <tixi.h>
#include <typeinfo>
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSFuselageProfiles;
class CCPACSRotorProfiles;
class CCPACSWingProfiles;

namespace generated
{
    // This class is used in:
    // CPACSFuselageProfiles
    // CPACSRotorAirfoils
    // CPACSWingAirfoils

    // generated from /xsd:schema/xsd:complexType[746]
    /// @brief profileGeometryType
    /// 
    /// A profile is defined by a profile name, an optional
    /// description and a 3-dimensional pointlist with all three
    /// coordinates mandatory. For typical profiles, one of the
    /// coordinate vectors contains only "0" entries. All point
    /// coordinates are transferred to the global coordinate system. The
    /// points have to be ordered in a mathematical positive sense.
    /// Normalized coordinates are not required. First and last point
    /// may, but need not to, be identical. Hence, it is possible to
    /// include "open" profiles. However, the trailing edge position of
    /// the upper and lower point need to be identical. No crooked
    /// trailing edges are possible.
    /// Example 1: For a conventional wing, the airfoil
    /// coordinates are defined in x and z with all the y-coordinates
    /// set to "0". The points have to be ordered from the trailing edge
    /// along the lower side to the leading edge and then along the
    /// upper side back to the trailing edge.
    /// Example 2: For a fuselage, the coordinates are
    /// typically given in y and z with x set to "0". Starting point of
    /// the profile sould be the lowest point (typically in the symmetry
    /// plane), then upwards on the positive y-side up to the highest
    /// point (again, typically in the symmetry plane). Depending on,
    /// whether the fuselage shall be specified with symmetry condition
    /// or not, the profile either ends there, or continues on the
    /// negative y-side back down to the lowest point.
    /// Alternatively, it is possible to specify the
    /// coordinates of a profile via the CST (class function /shape
    /// function transformation technique) notation. Please see the
    /// cst2DType for further information.
    /// A profile can be symmetric. In that case the profile
    /// is interpreted as being not closed and will be closed by
    /// mirroring it on the symmetry plane.
    /// 
    class CPACSProfileGeometry : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSProfileGeometry(CCPACSFuselageProfiles* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSProfileGeometry(CCPACSRotorProfiles* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSProfileGeometry(CCPACSWingProfiles* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSProfileGeometry();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSFuselageProfiles>::value || std::is_same<P, CCPACSRotorProfiles>::value || std::is_same<P, CCPACSWingProfiles>::value, "template argument for P is not a parent class of CPACSProfileGeometry");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSFuselageProfiles>::value || std::is_same<P, CCPACSRotorProfiles>::value || std::is_same<P, CCPACSWingProfiles>::value, "template argument for P is not a parent class of CPACSProfileGeometry");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<TiglSymmetryAxis>& GetSymmetry() const;
        TIGL_EXPORT virtual void SetSymmetry(const boost::optional<TiglSymmetryAxis>& value);

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetName() const;
        TIGL_EXPORT virtual void SetName(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPointListXYZVector>& GetPointList_choice1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPointListXYZVector>& GetPointList_choice1();

        TIGL_EXPORT virtual const boost::optional<CCPACSWingProfileCST>& GetCst2D_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSWingProfileCST>& GetCst2D_choice2();

        TIGL_EXPORT virtual CCPACSPointListXYZVector& GetPointList_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemovePointList_choice1();

        TIGL_EXPORT virtual CCPACSWingProfileCST& GetCst2D_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCst2D_choice2();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        boost::optional<TiglSymmetryAxis>         m_symmetry;

        std::string                               m_uID;

        /// Name of profile
        std::string                               m_name;

        /// Description of profile
        boost::optional<std::string>              m_description;

        boost::optional<CCPACSPointListXYZVector> m_pointList_choice1;

        boost::optional<CCPACSWingProfileCST>     m_cst2D_choice2;

    private:
        CPACSProfileGeometry(const CPACSProfileGeometry&) = delete;
        CPACSProfileGeometry& operator=(const CPACSProfileGeometry&) = delete;

        CPACSProfileGeometry(CPACSProfileGeometry&&) = delete;
        CPACSProfileGeometry& operator=(CPACSProfileGeometry&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSProfileGeometry = generated::CPACSProfileGeometry;
} // namespace tigl
