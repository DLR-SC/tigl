// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightDynamicsLinearModel.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightDynamicsLinearModel::CPACSFlightDynamicsLinearModel(){}
        CPACSFlightDynamicsLinearModel::~CPACSFlightDynamicsLinearModel() {}
        
        void CPACSFlightDynamicsLinearModel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element aLon
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aLon")) {
                m_aLon.ReadCPACS(tixiHandle, xpath + "/aLon");
            }
            else {
                LOG(ERROR) << "Required element aLon is missing";
            }
            
            // read element bLon
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bLon")) {
                m_bLon.ReadCPACS(tixiHandle, xpath + "/bLon");
            }
            else {
                LOG(ERROR) << "Required element bLon is missing";
            }
            
            // read element cLon
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cLon")) {
                m_cLon.ReadCPACS(tixiHandle, xpath + "/cLon");
            }
            else {
                LOG(ERROR) << "Required element cLon is missing";
            }
            
            // read element dLon
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dLon")) {
                m_dLon.ReadCPACS(tixiHandle, xpath + "/dLon");
            }
            else {
                LOG(ERROR) << "Required element dLon is missing";
            }
            
            // read element aLat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aLat")) {
                m_aLat.ReadCPACS(tixiHandle, xpath + "/aLat");
            }
            else {
                LOG(ERROR) << "Required element aLat is missing";
            }
            
            // read element bLat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bLat")) {
                m_bLat.ReadCPACS(tixiHandle, xpath + "/bLat");
            }
            else {
                LOG(ERROR) << "Required element bLat is missing";
            }
            
            // read element cLat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cLat")) {
                m_cLat.ReadCPACS(tixiHandle, xpath + "/cLat");
            }
            else {
                LOG(ERROR) << "Required element cLat is missing";
            }
            
            // read element dLat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dLat")) {
                m_dLat.ReadCPACS(tixiHandle, xpath + "/dLat");
            }
            else {
                LOG(ERROR) << "Required element dLat is missing";
            }
            
        }
        
        void CPACSFlightDynamicsLinearModel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element aLon
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aLon");
            m_aLon.WriteCPACS(tixiHandle, xpath + "/aLon");
            
            // write element bLon
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bLon");
            m_bLon.WriteCPACS(tixiHandle, xpath + "/bLon");
            
            // write element cLon
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cLon");
            m_cLon.WriteCPACS(tixiHandle, xpath + "/cLon");
            
            // write element dLon
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dLon");
            m_dLon.WriteCPACS(tixiHandle, xpath + "/dLon");
            
            // write element aLat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aLat");
            m_aLat.WriteCPACS(tixiHandle, xpath + "/aLat");
            
            // write element bLat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bLat");
            m_bLat.WriteCPACS(tixiHandle, xpath + "/bLat");
            
            // write element cLat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cLat");
            m_cLat.WriteCPACS(tixiHandle, xpath + "/cLat");
            
            // write element dLat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dLat");
            m_dLat.WriteCPACS(tixiHandle, xpath + "/dLat");
            
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetALon() const
        {
            return m_aLon;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetALon()
        {
            return m_aLon;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetBLon() const
        {
            return m_bLon;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetBLon()
        {
            return m_bLon;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetCLon() const
        {
            return m_cLon;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetCLon()
        {
            return m_cLon;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetDLon() const
        {
            return m_dLon;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetDLon()
        {
            return m_dLon;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetALat() const
        {
            return m_aLat;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetALat()
        {
            return m_aLat;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetBLat() const
        {
            return m_bLat;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetBLat()
        {
            return m_bLat;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetCLat() const
        {
            return m_cLat;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetCLat()
        {
            return m_cLat;
        }
        
        const CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetDLat() const
        {
            return m_dLat;
        }
        
        CCPACSStringVector& CPACSFlightDynamicsLinearModel::GetDLat()
        {
            return m_dLat;
        }
        
    }
}
