// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <vector>
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCell;
class CCPACSWingShell;

namespace generated
{
    // This class is used in:
    // CPACSWingShell

    // generated from /xsd:schema/xsd:complexType[941]
    /// @brief Cells of the wing.
    /// 
    /// WingCells type, containing all the cells of the wing.
    /// 
    class CPACSWingCells
    {
    public:
        TIGL_EXPORT CPACSWingCells(CCPACSWingShell* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWingCells();

        TIGL_EXPORT CCPACSWingShell* GetParent();

        TIGL_EXPORT const CCPACSWingShell* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CCPACSWingCell>>& GetCells() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CCPACSWingCell>>& GetCells();

        TIGL_EXPORT virtual CCPACSWingCell& AddCell();
        TIGL_EXPORT virtual void RemoveCell(CCPACSWingCell& ref);

    protected:
        CCPACSWingShell* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::vector<std::unique_ptr<CCPACSWingCell>> m_cells;

    private:
        CPACSWingCells(const CPACSWingCells&) = delete;
        CPACSWingCells& operator=(const CPACSWingCells&) = delete;

        CPACSWingCells(CPACSWingCells&&) = delete;
        CPACSWingCells& operator=(CPACSWingCells&&) = delete;
    };
} // namespace generated

// CPACSWingCells is customized, use type CCPACSWingCells directly
} // namespace tigl
