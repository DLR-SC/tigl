// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAcCrashTool.h"

namespace tigl
{
    namespace generated
    {
        CPACSAcCrashTool::CPACSAcCrashTool(){}
        CPACSAcCrashTool::~CPACSAcCrashTool() {}
        
        void CPACSAcCrashTool::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element tool
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tool")) {
                m_tool.ReadCPACS(tixiHandle, xpath + "/tool");
            }
            else {
                LOG(ERROR) << "Required element tool is missing";
            }
            
            // read element analysisType
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/analysisType")) {
                m_analysisType.ReadCPACS(tixiHandle, xpath + "/analysisType");
            }
            else {
                LOG(ERROR) << "Required element analysisType is missing";
            }
            
            // read element modelDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/modelDefinitions")) {
                m_modelDefinitions.ReadCPACS(tixiHandle, xpath + "/modelDefinitions");
            }
            else {
                LOG(ERROR) << "Required element modelDefinitions is missing";
            }
            
            // read element crashJobDefinition
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashJobDefinition")) {
                m_crashJobDefinition.ReadCPACS(tixiHandle, xpath + "/crashJobDefinition");
            }
            else {
                LOG(ERROR) << "Required element crashJobDefinition is missing";
            }
            
            // read element crashJobControl
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashJobControl")) {
                m_crashJobControl.ReadCPACS(tixiHandle, xpath + "/crashJobControl");
            }
            else {
                LOG(ERROR) << "Required element crashJobControl is missing";
            }
            
            // read element crashElsizeDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashElsizeDefinitions")) {
                m_crashElsizeDefinitions = boost::in_place();
                try {
                    m_crashElsizeDefinitions->ReadCPACS(tixiHandle, xpath + "/crashElsizeDefinitions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashElsizeDefinitions at xpath << " << xpath << ": " << e.what();
                    m_crashElsizeDefinitions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashElsizeDefinitions at xpath << " << xpath << ": " << e.getError();
                    m_crashElsizeDefinitions = boost::none;
                }
            }
            
            // read element bkMassCaseDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bkMassCaseDefinitions")) {
                m_bkMassCaseDefinitions = boost::in_place();
                try {
                    m_bkMassCaseDefinitions->ReadCPACS(tixiHandle, xpath + "/bkMassCaseDefinitions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read bkMassCaseDefinitions at xpath << " << xpath << ": " << e.what();
                    m_bkMassCaseDefinitions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read bkMassCaseDefinitions at xpath << " << xpath << ": " << e.getError();
                    m_bkMassCaseDefinitions = boost::none;
                }
            }
            
        }
        
        void CPACSAcCrashTool::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element tool
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tool");
            m_tool.WriteCPACS(tixiHandle, xpath + "/tool");
            
            // write element analysisType
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/analysisType");
            m_analysisType.WriteCPACS(tixiHandle, xpath + "/analysisType");
            
            // write element modelDefinitions
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/modelDefinitions");
            m_modelDefinitions.WriteCPACS(tixiHandle, xpath + "/modelDefinitions");
            
            // write element crashJobDefinition
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashJobDefinition");
            m_crashJobDefinition.WriteCPACS(tixiHandle, xpath + "/crashJobDefinition");
            
            // write element crashJobControl
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashJobControl");
            m_crashJobControl.WriteCPACS(tixiHandle, xpath + "/crashJobControl");
            
            // write element crashElsizeDefinitions
            if (m_crashElsizeDefinitions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashElsizeDefinitions");
                m_crashElsizeDefinitions->WriteCPACS(tixiHandle, xpath + "/crashElsizeDefinitions");
            }
            
            // write element bkMassCaseDefinitions
            if (m_bkMassCaseDefinitions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bkMassCaseDefinitions");
                m_bkMassCaseDefinitions->WriteCPACS(tixiHandle, xpath + "/bkMassCaseDefinitions");
            }
            
        }
        
        const CPACSTool& CPACSAcCrashTool::GetTool() const
        {
            return m_tool;
        }
        
        CPACSTool& CPACSAcCrashTool::GetTool()
        {
            return m_tool;
        }
        
        const CPACSAcCrashTool_analysisType& CPACSAcCrashTool::GetAnalysisType() const
        {
            return m_analysisType;
        }
        
        CPACSAcCrashTool_analysisType& CPACSAcCrashTool::GetAnalysisType()
        {
            return m_analysisType;
        }
        
        const CPACSCrashModelDefinition& CPACSAcCrashTool::GetModelDefinitions() const
        {
            return m_modelDefinitions;
        }
        
        CPACSCrashModelDefinition& CPACSAcCrashTool::GetModelDefinitions()
        {
            return m_modelDefinitions;
        }
        
        const CPACSCrashJobDefinition& CPACSAcCrashTool::GetCrashJobDefinition() const
        {
            return m_crashJobDefinition;
        }
        
        CPACSCrashJobDefinition& CPACSAcCrashTool::GetCrashJobDefinition()
        {
            return m_crashJobDefinition;
        }
        
        const CPACSCrashJobControl& CPACSAcCrashTool::GetCrashJobControl() const
        {
            return m_crashJobControl;
        }
        
        CPACSCrashJobControl& CPACSAcCrashTool::GetCrashJobControl()
        {
            return m_crashJobControl;
        }
        
        bool CPACSAcCrashTool::HasCrashElsizeDefinitions() const
        {
            return static_cast<bool>(m_crashElsizeDefinitions);
        }
        
        const CPACSCrashElsizeDefs& CPACSAcCrashTool::GetCrashElsizeDefinitions() const
        {
            return *m_crashElsizeDefinitions;
        }
        
        CPACSCrashElsizeDefs& CPACSAcCrashTool::GetCrashElsizeDefinitions()
        {
            return *m_crashElsizeDefinitions;
        }
        
        bool CPACSAcCrashTool::HasBkMassCaseDefinitions() const
        {
            return static_cast<bool>(m_bkMassCaseDefinitions);
        }
        
        const CPACSBkMassCases& CPACSAcCrashTool::GetBkMassCaseDefinitions() const
        {
            return *m_bkMassCaseDefinitions;
        }
        
        CPACSBkMassCases& CPACSAcCrashTool::GetBkMassCaseDefinitions()
        {
            return *m_bkMassCaseDefinitions;
        }
        
    }
}
