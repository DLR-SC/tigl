// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqRatings.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqRatings::CPACSFqRatings(){}
        CPACSFqRatings::~CPACSFqRatings() {}
        
        void CPACSFqRatings::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element phugoid
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/phugoid")) {
                m_phugoid = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/phugoid");
            }
            else {
                LOG(ERROR) << "Required element phugoid is missing";
            }
            
            // read element cStar
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cStar")) {
                m_cStar = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/cStar");
            }
            else {
                LOG(ERROR) << "Required element cStar is missing";
            }
            
            // read element shortPeriod
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shortPeriod")) {
                m_shortPeriod.ReadCPACS(tixiHandle, xpath + "/shortPeriod");
            }
            else {
                LOG(ERROR) << "Required element shortPeriod is missing";
            }
            
            // read element rolosc
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rolosc")) {
                m_rolosc.ReadCPACS(tixiHandle, xpath + "/rolosc");
            }
            else {
                LOG(ERROR) << "Required element rolosc is missing";
            }
            
            // read element eiglat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eiglat")) {
                m_eiglat.ReadCPACS(tixiHandle, xpath + "/eiglat");
            }
            else {
                LOG(ERROR) << "Required element eiglat is missing";
            }
            
            // read element treff
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/treff")) {
                m_treff = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/treff");
            }
            else {
                LOG(ERROR) << "Required element treff is missing";
            }
            
            // read element rollPerf
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollPerf")) {
                m_rollPerf = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/rollPerf");
            }
            else {
                LOG(ERROR) << "Required element rollPerf is missing";
            }
            
        }
        
        void CPACSFqRatings::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element phugoid
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phugoid");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/phugoid", m_phugoid);
            
            // write element cStar
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cStar");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/cStar", m_cStar);
            
            // write element shortPeriod
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shortPeriod");
            m_shortPeriod.WriteCPACS(tixiHandle, xpath + "/shortPeriod");
            
            // write element rolosc
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rolosc");
            m_rolosc.WriteCPACS(tixiHandle, xpath + "/rolosc");
            
            // write element eiglat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eiglat");
            m_eiglat.WriteCPACS(tixiHandle, xpath + "/eiglat");
            
            // write element treff
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/treff");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/treff", m_treff);
            
            // write element rollPerf
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollPerf");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollPerf", m_rollPerf);
            
        }
        
        const std::string& CPACSFqRatings::GetPhugoid() const
        {
            return m_phugoid;
        }
        
        void CPACSFqRatings::SetPhugoid(const std::string& value)
        {
            m_phugoid = value;
        }
        
        const std::string& CPACSFqRatings::GetCStar() const
        {
            return m_cStar;
        }
        
        void CPACSFqRatings::SetCStar(const std::string& value)
        {
            m_cStar = value;
        }
        
        const CPACSFqShortPeriod& CPACSFqRatings::GetShortPeriod() const
        {
            return m_shortPeriod;
        }
        
        CPACSFqShortPeriod& CPACSFqRatings::GetShortPeriod()
        {
            return m_shortPeriod;
        }
        
        const CPACSFqRolosc& CPACSFqRatings::GetRolosc() const
        {
            return m_rolosc;
        }
        
        CPACSFqRolosc& CPACSFqRatings::GetRolosc()
        {
            return m_rolosc;
        }
        
        const CPACSFqEiglat& CPACSFqRatings::GetEiglat() const
        {
            return m_eiglat;
        }
        
        CPACSFqEiglat& CPACSFqRatings::GetEiglat()
        {
            return m_eiglat;
        }
        
        const std::string& CPACSFqRatings::GetTreff() const
        {
            return m_treff;
        }
        
        void CPACSFqRatings::SetTreff(const std::string& value)
        {
            m_treff = value;
        }
        
        const std::string& CPACSFqRatings::GetRollPerf() const
        {
            return m_rollPerf;
        }
        
        void CPACSFqRatings::SetRollPerf(const std::string& value)
        {
            m_rollPerf = value;
        }
        
    }
}
