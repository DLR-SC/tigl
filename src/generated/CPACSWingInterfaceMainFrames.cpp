// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingInterfaceMainFrames.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingInterfaceMainFrames::CPACSWingInterfaceMainFrames(){}
        CPACSWingInterfaceMainFrames::~CPACSWingInterfaceMainFrames() {}
        
        void CPACSWingInterfaceMainFrames::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element mainFrame1UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mainFrame1UID")) {
                m_mainFrame1UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/mainFrame1UID");
            }
            else {
                LOG(ERROR) << "Required element mainFrame1UID is missing";
            }
            
            // read element mainFrame2UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mainFrame2UID")) {
                m_mainFrame2UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/mainFrame2UID");
            }
            else {
                LOG(ERROR) << "Required element mainFrame2UID is missing";
            }
            
        }
        
        void CPACSWingInterfaceMainFrames::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element mainFrame1UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mainFrame1UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/mainFrame1UID", m_mainFrame1UID);
            
            // write element mainFrame2UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mainFrame2UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/mainFrame2UID", m_mainFrame2UID);
            
        }
        
        bool CPACSWingInterfaceMainFrames::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSWingInterfaceMainFrames::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSWingInterfaceMainFrames::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSWingInterfaceMainFrames::GetMainFrame1UID() const
        {
            return m_mainFrame1UID;
        }
        
        void CPACSWingInterfaceMainFrames::SetMainFrame1UID(const std::string& value)
        {
            m_mainFrame1UID = value;
        }
        
        const std::string& CPACSWingInterfaceMainFrames::GetMainFrame2UID() const
        {
            return m_mainFrame2UID;
        }
        
        void CPACSWingInterfaceMainFrames::SetMainFrame2UID(const std::string& value)
        {
            m_mainFrame2UID = value;
        }
        
    }
}
