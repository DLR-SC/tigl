// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSRotorBlades.h"
#include "CCPACSWings.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWing.h"

namespace tigl
{
    namespace generated
    {
        CPACSWing::CPACSWing(CCPACSRotorBlades* parent) :
            m_segments(reinterpret_cast<CCPACSWing*>(this))
        {
            //assert(parent != NULL);
            m_parent = parent;
            m_parentType = &typeid(CCPACSRotorBlades);
        }
        
        CPACSWing::CPACSWing(CCPACSWings* parent) :
            m_segments(reinterpret_cast<CCPACSWing*>(this))
        {
            //assert(parent != NULL);
            m_parent = parent;
            m_parentType = &typeid(CCPACSWings);
        }
        
        CPACSWing::~CPACSWing() {}
        
        void CPACSWing::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read attribute symmetry
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                m_symmetry = stringToTiglSymmetryAxis(tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "symmetry"));
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element parentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                m_parentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            }
            
            // read element transformation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
                m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
            }
            else {
                LOG(ERROR) << "Required element transformation is missing";
            }
            
            // read element sections
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sections")) {
                m_sections.ReadCPACS(tixiHandle, xpath + "/sections");
            }
            else {
                LOG(ERROR) << "Required element sections is missing";
            }
            
            // read element positionings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionings")) {
                m_positionings = boost::in_place();
                try {
                    m_positionings->ReadCPACS(tixiHandle, xpath + "/positionings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read positionings at xpath << " << xpath << ": " << e.what();
                    m_positionings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read positionings at xpath << " << xpath << ": " << e.getError();
                    m_positionings = boost::none;
                }
            }
            
            // read element segments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/segments")) {
                m_segments.ReadCPACS(tixiHandle, xpath + "/segments");
            }
            else {
                LOG(ERROR) << "Required element segments is missing";
            }
            
            // read element componentSegments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/componentSegments")) {
                m_componentSegments = boost::in_place(reinterpret_cast<CCPACSWing*>(this));
                try {
                    m_componentSegments->ReadCPACS(tixiHandle, xpath + "/componentSegments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read componentSegments at xpath << " << xpath << ": " << e.what();
                    m_componentSegments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read componentSegments at xpath << " << xpath << ": " << e.getError();
                    m_componentSegments = boost::none;
                }
            }
            
            // read element dynamicAircraftModel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dynamicAircraftModel")) {
                m_dynamicAircraftModel = boost::in_place();
                try {
                    m_dynamicAircraftModel->ReadCPACS(tixiHandle, xpath + "/dynamicAircraftModel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModel at xpath << " << xpath << ": " << e.what();
                    m_dynamicAircraftModel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModel at xpath << " << xpath << ": " << e.getError();
                    m_dynamicAircraftModel = boost::none;
                }
            }
            
        }
        
        void CPACSWing::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write attribute symmetry
            if (m_symmetry) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/symmetry");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "symmetry", TiglSymmetryAxisToString(*m_symmetry));
            }
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element parentUID
            if (m_parentUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/parentUID", *m_parentUID);
            }
            
            // write element transformation
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
            m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");
            
            // write element sections
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sections");
            m_sections.WriteCPACS(tixiHandle, xpath + "/sections");
            
            // write element positionings
            if (m_positionings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionings");
                m_positionings->WriteCPACS(tixiHandle, xpath + "/positionings");
            }
            
            // write element segments
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/segments");
            m_segments.WriteCPACS(tixiHandle, xpath + "/segments");
            
            // write element componentSegments
            if (m_componentSegments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/componentSegments");
                m_componentSegments->WriteCPACS(tixiHandle, xpath + "/componentSegments");
            }
            
            // write element dynamicAircraftModel
            if (m_dynamicAircraftModel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dynamicAircraftModel");
                m_dynamicAircraftModel->WriteCPACS(tixiHandle, xpath + "/dynamicAircraftModel");
            }
            
        }
        
        const std::string& CPACSWing::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSWing::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSWing::HasSymmetry() const
        {
            return static_cast<bool>(m_symmetry);
        }
        
        const TiglSymmetryAxis& CPACSWing::GetSymmetry() const
        {
            return *m_symmetry;
        }
        
        void CPACSWing::SetSymmetry(const TiglSymmetryAxis& value)
        {
            m_symmetry = value;
        }
        
        const std::string& CPACSWing::GetName() const
        {
            return m_name;
        }
        
        void CPACSWing::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSWing::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSWing::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSWing::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSWing::HasParentUID() const
        {
            return static_cast<bool>(m_parentUID);
        }
        
        const std::string& CPACSWing::GetParentUID() const
        {
            return *m_parentUID;
        }
        
        void CPACSWing::SetParentUID(const std::string& value)
        {
            m_parentUID = value;
        }
        
        const CCPACSTransformation& CPACSWing::GetTransformation() const
        {
            return m_transformation;
        }
        
        CCPACSTransformation& CPACSWing::GetTransformation()
        {
            return m_transformation;
        }
        
        const CCPACSWingSections& CPACSWing::GetSections() const
        {
            return m_sections;
        }
        
        CCPACSWingSections& CPACSWing::GetSections()
        {
            return m_sections;
        }
        
        bool CPACSWing::HasPositionings() const
        {
            return static_cast<bool>(m_positionings);
        }
        
        const CCPACSPositionings& CPACSWing::GetPositionings() const
        {
            return *m_positionings;
        }
        
        CCPACSPositionings& CPACSWing::GetPositionings()
        {
            return *m_positionings;
        }
        
        const CCPACSWingSegments& CPACSWing::GetSegments() const
        {
            return m_segments;
        }
        
        CCPACSWingSegments& CPACSWing::GetSegments()
        {
            return m_segments;
        }
        
        bool CPACSWing::HasComponentSegments() const
        {
            return static_cast<bool>(m_componentSegments);
        }
        
        const CCPACSWingComponentSegments& CPACSWing::GetComponentSegments() const
        {
            return *m_componentSegments;
        }
        
        CCPACSWingComponentSegments& CPACSWing::GetComponentSegments()
        {
            return *m_componentSegments;
        }
        
        bool CPACSWing::HasDynamicAircraftModel() const
        {
            return static_cast<bool>(m_dynamicAircraftModel);
        }
        
        const CPACSDynamicAircraftModel& CPACSWing::GetDynamicAircraftModel() const
        {
            return *m_dynamicAircraftModel;
        }
        
        CPACSDynamicAircraftModel& CPACSWing::GetDynamicAircraftModel()
        {
            return *m_dynamicAircraftModel;
        }
        
    }
}
