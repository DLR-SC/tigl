// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSFqLongitudinal.h"
#include "CPACSFqLateral.h"
#include "CPACSFqCharParameters.h"
#include "CPACSFqRatings.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFlyingQualities
        
        // generated from /xsd:schema/xsd:complexType[340]
        class CPACSFqCase
        {
        public:
            TIGL_EXPORT CPACSFqCase();
            TIGL_EXPORT virtual ~CPACSFqCase();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const int& GetClass() const;
            TIGL_EXPORT void SetClass(const int& value);
            
            TIGL_EXPORT const std::string& GetCategory() const;
            TIGL_EXPORT void SetCategory(const std::string& value);
            
            TIGL_EXPORT bool HasLongitudinal() const;
            TIGL_EXPORT const CPACSFqLongitudinal& GetLongitudinal() const;
            TIGL_EXPORT CPACSFqLongitudinal& GetLongitudinal();
            
            TIGL_EXPORT bool HasLateral() const;
            TIGL_EXPORT const CPACSFqLateral& GetLateral() const;
            TIGL_EXPORT CPACSFqLateral& GetLateral();
            
            TIGL_EXPORT bool HasCharParameters() const;
            TIGL_EXPORT const CPACSFqCharParameters& GetCharParameters() const;
            TIGL_EXPORT CPACSFqCharParameters& GetCharParameters();
            
            TIGL_EXPORT bool HasRatings() const;
            TIGL_EXPORT const CPACSFqRatings& GetRatings() const;
            TIGL_EXPORT CPACSFqRatings& GetRatings();
            
        protected:
            std::string                            m_uID;
            int                                    m_class;
            std::string                            m_category;
            boost::optional<CPACSFqLongitudinal>   m_longitudinal;
            boost::optional<CPACSFqLateral>        m_lateral;
            boost::optional<CPACSFqCharParameters> m_charParameters;
            boost::optional<CPACSFqRatings>        m_ratings;
            
        private:
            #ifdef HAVE_CPP11
            CPACSFqCase(const CPACSFqCase&) = delete;
            CPACSFqCase& operator=(const CPACSFqCase&) = delete;
            
            CPACSFqCase(CPACSFqCase&&) = delete;
            CPACSFqCase& operator=(CPACSFqCase&&) = delete;
            #else
            CPACSFqCase(const CPACSFqCase&);
            CPACSFqCase& operator=(const CPACSFqCase&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSFqCase = generated::CPACSFqCase;
    #else
    typedef generated::CPACSFqCase CCPACSFqCase;
    #endif
}
