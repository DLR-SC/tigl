// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include <CCPACSWingSection.h>
#include "CCPACSEnginePylon.h"
#include "CCPACSWing.h"
#include "CPACSWingSections.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSWingSections::CPACSWingSections(CCPACSEnginePylon* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSEnginePylon);
    }

    CPACSWingSections::CPACSWingSections(CCPACSWing* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSWing);
    }

    CPACSWingSections::~CPACSWingSections()
    {
    }

    const CTiglUIDObject* CPACSWingSections::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CCPACSEnginePylon>()) {
                return GetParent<CCPACSEnginePylon>();
            }
            if (IsParent<CCPACSWing>()) {
                return GetParent<CCPACSWing>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSWingSections::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CCPACSEnginePylon>()) {
                return GetParent<CCPACSEnginePylon>();
            }
            if (IsParent<CCPACSWing>()) {
                return GetParent<CCPACSWing>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSWingSections::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSWingSections::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSWingSections::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element section
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/section")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/section", m_sections, 2, tixi::xsdUnbounded, reinterpret_cast<CCPACSWingSections*>(this), m_uidMgr);
        }

    }

    void CPACSWingSections::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element section
        tixi::TixiSaveElements(tixiHandle, xpath + "/section", m_sections);

    }

    const std::vector<std::unique_ptr<CCPACSWingSection>>& CPACSWingSections::GetSections() const
    {
        return m_sections;
    }

    std::vector<std::unique_ptr<CCPACSWingSection>>& CPACSWingSections::GetSections()
    {
        return m_sections;
    }

    size_t CPACSWingSections::GetSectionCount() const
    {
        return m_sections.size();
    }

    size_t CPACSWingSections::GetSectionIndex(const std::string& UID) const
    {
        for (size_t i=0; i < GetSectionCount(); i++) {
            const std::string tmpUID(m_sections[i]->GetUID());
            if (tmpUID == UID) {
                return i+1;
            }
        }
        throw CTiglError("Invalid UID in CPACSWingSections::GetSectionIndex", TIGL_UID_ERROR);
    }

    CCPACSWingSection& CPACSWingSections::GetSection(size_t index)
    {
        if (index < 1 || index > GetSectionCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CCPACSWingSection>>::GetSection", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_sections[index];
    }

    const CCPACSWingSection& CPACSWingSections::GetSection(size_t index) const
    {
        if (index < 1 || index > GetSectionCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CCPACSWingSection>>::GetSection", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_sections[index];
    }

    CCPACSWingSection& CPACSWingSections::GetSection(const std::string& UID)
    {
        for (auto& elem : m_sections ) {
            if (elem->GetUID() == UID)
                return *elem;
            }
            throw CTiglError("Invalid UID in CPACSWingSections::GetSection. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
    }

    const CCPACSWingSection& CPACSWingSections::GetSection(const std::string& UID) const
    {
        for (auto& elem : m_sections ) {
            if (elem->GetUID() == UID)
                return *elem;
            }
            throw CTiglError("Invalid UID in CPACSWingSections::GetSection. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
    }


    CCPACSWingSection& CPACSWingSections::AddSection()
    {
        m_sections.push_back(make_unique<CCPACSWingSection>(reinterpret_cast<CCPACSWingSections*>(this), m_uidMgr));
        return *m_sections.back();
    }

    void CPACSWingSections::RemoveSection(CCPACSWingSection& ref)
    {
        for (std::size_t i = 0; i < m_sections.size(); i++) {
            if (m_sections[i].get() == &ref) {
                m_sections.erase(m_sections.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
