// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSControlSurfaceAirfoil.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSControlSurfaceAirfoil::CPACSControlSurfaceAirfoil()
        : m_rotX(0)
        , m_rotZ(0)
        , m_scalY(0)
        , m_scalZ(0)
    {
    }

    CPACSControlSurfaceAirfoil::~CPACSControlSurfaceAirfoil()
    {
    }

    void CPACSControlSurfaceAirfoil::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element eta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta")) {
            m_eta.ReadCPACS(tixiHandle, xpath + "/eta");
        }
        else {
            LOG(ERROR) << "Required element eta is missing at xpath " << xpath;
        }

        // read element airfoilUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/airfoilUID")) {
            m_airfoilUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/airfoilUID");
            if (m_airfoilUID.empty()) {
                LOG(WARNING) << "Required element airfoilUID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element airfoilUID is missing at xpath " << xpath;
        }

        // read element rotX
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotX")) {
            m_rotX = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rotX");
        }
        else {
            LOG(ERROR) << "Required element rotX is missing at xpath " << xpath;
        }

        // read element rotZ
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotZ")) {
            m_rotZ = tixi::TixiGetElement<double>(tixiHandle, xpath + "/rotZ");
        }
        else {
            LOG(ERROR) << "Required element rotZ is missing at xpath " << xpath;
        }

        // read element scalY
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/scalY")) {
            m_scalY = tixi::TixiGetElement<double>(tixiHandle, xpath + "/scalY");
        }
        else {
            LOG(ERROR) << "Required element scalY is missing at xpath " << xpath;
        }

        // read element scalZ
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/scalZ")) {
            m_scalZ = tixi::TixiGetElement<double>(tixiHandle, xpath + "/scalZ");
        }
        else {
            LOG(ERROR) << "Required element scalZ is missing at xpath " << xpath;
        }

    }

    void CPACSControlSurfaceAirfoil::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element eta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
        m_eta.WriteCPACS(tixiHandle, xpath + "/eta");

        // write element airfoilUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airfoilUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/airfoilUID", m_airfoilUID);

        // write element rotX
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotX");
        tixi::TixiSaveElement(tixiHandle, xpath + "/rotX", m_rotX);

        // write element rotZ
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotZ");
        tixi::TixiSaveElement(tixiHandle, xpath + "/rotZ", m_rotZ);

        // write element scalY
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/scalY");
        tixi::TixiSaveElement(tixiHandle, xpath + "/scalY", m_scalY);

        // write element scalZ
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/scalZ");
        tixi::TixiSaveElement(tixiHandle, xpath + "/scalZ", m_scalZ);

    }

    const CPACSEtaIsoLine& CPACSControlSurfaceAirfoil::GetEta() const
    {
        return m_eta;
    }

    CPACSEtaIsoLine& CPACSControlSurfaceAirfoil::GetEta()
    {
        return m_eta;
    }

    const std::string& CPACSControlSurfaceAirfoil::GetAirfoilUID() const
    {
        return m_airfoilUID;
    }

    void CPACSControlSurfaceAirfoil::SetAirfoilUID(const std::string& value)
    {
        m_airfoilUID = value;
    }

    const double& CPACSControlSurfaceAirfoil::GetRotX() const
    {
        return m_rotX;
    }

    void CPACSControlSurfaceAirfoil::SetRotX(const double& value)
    {
        m_rotX = value;
    }

    const double& CPACSControlSurfaceAirfoil::GetRotZ() const
    {
        return m_rotZ;
    }

    void CPACSControlSurfaceAirfoil::SetRotZ(const double& value)
    {
        m_rotZ = value;
    }

    const double& CPACSControlSurfaceAirfoil::GetScalY() const
    {
        return m_scalY;
    }

    void CPACSControlSurfaceAirfoil::SetScalY(const double& value)
    {
        m_scalY = value;
    }

    const double& CPACSControlSurfaceAirfoil::GetScalZ() const
    {
        return m_scalZ;
    }

    void CPACSControlSurfaceAirfoil::SetScalZ(const double& value)
    {
        m_scalZ = value;
    }

} // namespace generated
} // namespace tigl
