// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCargoContainerElement.h"
#include "CPACSCargoContainerElements.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCargoContainerElement::CPACSCargoContainerElement(CPACSCargoContainerElements* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_deltaX(0)
        , m_deltaY(0)
        , m_deltaZ(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCargoContainerElement::~CPACSCargoContainerElement()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSCargoContainerElements* CPACSCargoContainerElement::GetParent() const
    {
        return m_parent;
    }

    CPACSCargoContainerElements* CPACSCargoContainerElement::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCargoContainerElement::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCargoContainerElement::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSCargoContainerElement::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCargoContainerElement::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSCargoContainerElement::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element mass
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mass")) {
            m_mass = boost::in_place(this, m_uidMgr);
            try {
                m_mass->ReadCPACS(tixiHandle, xpath + "/mass");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read mass at xpath " << xpath << ": " << e.what();
                m_mass = boost::none;
            }
        }

        // read element contour
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/contour")) {
            m_contour = stringToCPACSCargoContainerElement_contour(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/contour"));
        }
        else {
            LOG(ERROR) << "Required element contour is missing at xpath " << xpath;
        }

        // read element deltaX
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaX")) {
            m_deltaX = tixi::TixiGetElement<double>(tixiHandle, xpath + "/deltaX");
        }
        else {
            LOG(ERROR) << "Required element deltaX is missing at xpath " << xpath;
        }

        // read element deltaY
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaY")) {
            m_deltaY = tixi::TixiGetElement<double>(tixiHandle, xpath + "/deltaY");
        }
        else {
            LOG(ERROR) << "Required element deltaY is missing at xpath " << xpath;
        }

        // read element deltaYBase
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaYBase")) {
            m_deltaYBase = tixi::TixiGetElement<double>(tixiHandle, xpath + "/deltaYBase");
        }

        // read element deltaZ
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaZ")) {
            m_deltaZ = tixi::TixiGetElement<double>(tixiHandle, xpath + "/deltaZ");
        }
        else {
            LOG(ERROR) << "Required element deltaZ is missing at xpath " << xpath;
        }

        // read element deltaZKink
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaZKink")) {
            m_deltaZKink = tixi::TixiGetElement<double>(tixiHandle, xpath + "/deltaZKink");
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSCargoContainerElement::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element mass
        if (m_mass) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
            m_mass->WriteCPACS(tixiHandle, xpath + "/mass");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/mass");
            }
        }

        // write element contour
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/contour");
        tixi::TixiSaveElement(tixiHandle, xpath + "/contour", CPACSCargoContainerElement_contourToString(m_contour));

        // write element deltaX
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaX");
        tixi::TixiSaveElement(tixiHandle, xpath + "/deltaX", m_deltaX);

        // write element deltaY
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaY");
        tixi::TixiSaveElement(tixiHandle, xpath + "/deltaY", m_deltaY);

        // write element deltaYBase
        if (m_deltaYBase) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaYBase");
            tixi::TixiSaveElement(tixiHandle, xpath + "/deltaYBase", *m_deltaYBase);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaYBase")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/deltaYBase");
            }
        }

        // write element deltaZ
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaZ");
        tixi::TixiSaveElement(tixiHandle, xpath + "/deltaZ", m_deltaZ);

        // write element deltaZKink
        if (m_deltaZKink) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaZKink");
            tixi::TixiSaveElement(tixiHandle, xpath + "/deltaZKink", *m_deltaZKink);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/deltaZKink")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/deltaZKink");
            }
        }

    }

    const std::string& CPACSCargoContainerElement::GetUID() const
    {
        return m_uID;
    }

    void CPACSCargoContainerElement::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSCargoContainerElement::GetDescription() const
    {
        return m_description;
    }

    void CPACSCargoContainerElement::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<CPACSDeckElementMass>& CPACSCargoContainerElement::GetMass() const
    {
        return m_mass;
    }

    boost::optional<CPACSDeckElementMass>& CPACSCargoContainerElement::GetMass()
    {
        return m_mass;
    }

    const CPACSCargoContainerElement_contour& CPACSCargoContainerElement::GetContour() const
    {
        return m_contour;
    }

    void CPACSCargoContainerElement::SetContour(const CPACSCargoContainerElement_contour& value)
    {
        m_contour = value;
    }

    const double& CPACSCargoContainerElement::GetDeltaX() const
    {
        return m_deltaX;
    }

    void CPACSCargoContainerElement::SetDeltaX(const double& value)
    {
        m_deltaX = value;
    }

    const double& CPACSCargoContainerElement::GetDeltaY() const
    {
        return m_deltaY;
    }

    void CPACSCargoContainerElement::SetDeltaY(const double& value)
    {
        m_deltaY = value;
    }

    const boost::optional<double>& CPACSCargoContainerElement::GetDeltaYBase() const
    {
        return m_deltaYBase;
    }

    void CPACSCargoContainerElement::SetDeltaYBase(const boost::optional<double>& value)
    {
        m_deltaYBase = value;
    }

    const double& CPACSCargoContainerElement::GetDeltaZ() const
    {
        return m_deltaZ;
    }

    void CPACSCargoContainerElement::SetDeltaZ(const double& value)
    {
        m_deltaZ = value;
    }

    const boost::optional<double>& CPACSCargoContainerElement::GetDeltaZKink() const
    {
        return m_deltaZKink;
    }

    void CPACSCargoContainerElement::SetDeltaZKink(const boost::optional<double>& value)
    {
        m_deltaZKink = value;
    }

    CPACSDeckElementMass& CPACSCargoContainerElement::GetMass(CreateIfNotExistsTag)
    {
        if (!m_mass)
            m_mass = boost::in_place(this, m_uidMgr);
        return *m_mass;
    }

    void CPACSCargoContainerElement::RemoveMass()
    {
        m_mass = boost::none;
    }

} // namespace generated
} // namespace tigl
