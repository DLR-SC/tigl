// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCellPositionSpanwise;
class CCPACSControlSurfaceBorderTrailingEdge;
class CCPACSControlSurfaceSkinCutOutBorder;
class CCPACSControlSurfaceTrackType;

namespace generated
{
    class CPACSControlSurfaceAirfoil;
    class CPACSCutOutProfile;
    class CPACSSparCell;

    // This class is used in:
    // CPACSCellPositioningSpanwise
    // CPACSControlSurfaceAirfoil
    // CPACSControlSurfaceBorderTrailingEdge
    // CPACSControlSurfaceSkinCutOutBorder
    // CPACSControlSurfaceTrackType
    // CPACSCutOutProfile
    // CPACSSparCell

    // generated from /xsd:schema/xsd:complexType[322]
    /// @brief etaIsoLineType
    /// 
    /// Iso line described by point of the same eta coordinate.
    /// Can be either segment or component segment coordinates.
    /// 
    class CPACSEtaIsoLine : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSEtaIsoLine(CCPACSWingCellPositionSpanwise* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CPACSControlSurfaceAirfoil* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CCPACSControlSurfaceBorderTrailingEdge* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CCPACSControlSurfaceSkinCutOutBorder* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CCPACSControlSurfaceTrackType* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CPACSCutOutProfile* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSEtaIsoLine(CPACSSparCell* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSEtaIsoLine();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSWingCellPositionSpanwise>::value || std::is_same<P, CPACSControlSurfaceAirfoil>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value || std::is_same<P, CCPACSControlSurfaceSkinCutOutBorder>::value || std::is_same<P, CCPACSControlSurfaceTrackType>::value || std::is_same<P, CPACSCutOutProfile>::value || std::is_same<P, CPACSSparCell>::value, "template argument for P is not a parent class of CPACSEtaIsoLine");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSWingCellPositionSpanwise>::value || std::is_same<P, CPACSControlSurfaceAirfoil>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value || std::is_same<P, CCPACSControlSurfaceSkinCutOutBorder>::value || std::is_same<P, CCPACSControlSurfaceTrackType>::value || std::is_same<P, CPACSCutOutProfile>::value || std::is_same<P, CPACSSparCell>::value, "template argument for P is not a parent class of CPACSEtaIsoLine");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetEta() const;
        TIGL_EXPORT virtual void SetEta(const double& value);

        TIGL_EXPORT virtual const std::string& GetReferenceUID() const;
        TIGL_EXPORT virtual void SetReferenceUID(const std::string& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// Relative spanwise position. Eta refers to the segment or componentSegment depending on the referenced uID.
        double      m_eta;

        /// This reference uID determines the reference coordinate system.
        /// If it points to a segment, then the eta value is considered to be in segment
        /// eta coordinate; if it points to a componentSegment,
        /// then componentSegment eta coordinate is used.
        std::string m_referenceUID;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSEtaIsoLine(const CPACSEtaIsoLine&) = delete;
        CPACSEtaIsoLine& operator=(const CPACSEtaIsoLine&) = delete;

        CPACSEtaIsoLine(CPACSEtaIsoLine&&) = delete;
        CPACSEtaIsoLine& operator=(CPACSEtaIsoLine&&) = delete;
    };
} // namespace generated

// CPACSEtaIsoLine is customized, use type CCPACSEtaIsoLine directly

// Aliases in tigl namespace
using CCPACSControlSurfaceAirfoil = generated::CPACSControlSurfaceAirfoil;
using CCPACSCutOutProfile = generated::CPACSCutOutProfile;
using CCPACSSparCell = generated::CPACSSparCell;
} // namespace tigl
