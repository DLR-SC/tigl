// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlElement.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlElement::CPACSControlElement(){}
        CPACSControlElement::~CPACSControlElement() {}
        
        void CPACSControlElement::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element controlUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlUID")) {
                m_controlUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/controlUID");
            }
            else {
                LOG(ERROR) << "Required element controlUID is missing";
            }
            
            // read element commandInputs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/commandInputs")) {
                m_commandInputs.ReadCPACS(tixiHandle, xpath + "/commandInputs");
            }
            else {
                LOG(ERROR) << "Required element commandInputs is missing";
            }
            
            // read element gainTable
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/gainTable")) {
                m_gainTable = boost::in_place();
                try {
                    m_gainTable->ReadCPACS(tixiHandle, xpath + "/gainTable");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read gainTable at xpath << " << xpath << ": " << e.what();
                    m_gainTable = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read gainTable at xpath << " << xpath << ": " << e.getError();
                    m_gainTable = boost::none;
                }
            }
            
        }
        
        void CPACSControlElement::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element controlUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/controlUID", m_controlUID);
            
            // write element commandInputs
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/commandInputs");
            m_commandInputs.WriteCPACS(tixiHandle, xpath + "/commandInputs");
            
            // write element gainTable
            if (m_gainTable) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gainTable");
                m_gainTable->WriteCPACS(tixiHandle, xpath + "/gainTable");
            }
            
        }
        
        const std::string& CPACSControlElement::GetControlUID() const
        {
            return m_controlUID;
        }
        
        void CPACSControlElement::SetControlUID(const std::string& value)
        {
            m_controlUID = value;
        }
        
        const CCPACSStringVector& CPACSControlElement::GetCommandInputs() const
        {
            return m_commandInputs;
        }
        
        CCPACSStringVector& CPACSControlElement::GetCommandInputs()
        {
            return m_commandInputs;
        }
        
        bool CPACSControlElement::HasGainTable() const
        {
            return static_cast<bool>(m_gainTable);
        }
        
        const CCPACSStringVector& CPACSControlElement::GetGainTable() const
        {
            return *m_gainTable;
        }
        
        CCPACSStringVector& CPACSControlElement::GetGainTable()
        {
            return *m_gainTable;
        }
        
    }
}
