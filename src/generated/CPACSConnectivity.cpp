// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSConnectivity.h"

namespace tigl
{
    namespace generated
    {
        CPACSConnectivity::CPACSConnectivity(){}
        CPACSConnectivity::~CPACSConnectivity() {}
        
        void CPACSConnectivity::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element damPoint1UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/damPoint1UID")) {
                m_damPoint1UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/damPoint1UID");
            }
            else {
                LOG(ERROR) << "Required element damPoint1UID is missing";
            }
            
            // read element damPoint2UID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/damPoint2UID")) {
                m_damPoint2UID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/damPoint2UID");
            }
            else {
                LOG(ERROR) << "Required element damPoint2UID is missing";
            }
            
            // read element rotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotation")) {
                m_rotation = boost::in_place();
                try {
                    m_rotation->ReadCPACS(tixiHandle, xpath + "/rotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rotation at xpath << " << xpath << ": " << e.what();
                    m_rotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rotation at xpath << " << xpath << ": " << e.getError();
                    m_rotation = boost::none;
                }
            }
            
            // read element stiffness
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/stiffness")) {
                m_stiffness = boost::in_place();
                try {
                    m_stiffness->ReadCPACS(tixiHandle, xpath + "/stiffness");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read stiffness at xpath << " << xpath << ": " << e.what();
                    m_stiffness = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read stiffness at xpath << " << xpath << ": " << e.getError();
                    m_stiffness = boost::none;
                }
            }
            
        }
        
        void CPACSConnectivity::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element damPoint1UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/damPoint1UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/damPoint1UID", m_damPoint1UID);
            
            // write element damPoint2UID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/damPoint2UID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/damPoint2UID", m_damPoint2UID);
            
            // write element rotation
            if (m_rotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotation");
                m_rotation->WriteCPACS(tixiHandle, xpath + "/rotation");
            }
            
            // write element stiffness
            if (m_stiffness) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stiffness");
                m_stiffness->WriteCPACS(tixiHandle, xpath + "/stiffness");
            }
            
        }
        
        const std::string& CPACSConnectivity::GetDamPoint1UID() const
        {
            return m_damPoint1UID;
        }
        
        void CPACSConnectivity::SetDamPoint1UID(const std::string& value)
        {
            m_damPoint1UID = value;
        }
        
        const std::string& CPACSConnectivity::GetDamPoint2UID() const
        {
            return m_damPoint2UID;
        }
        
        void CPACSConnectivity::SetDamPoint2UID(const std::string& value)
        {
            m_damPoint2UID = value;
        }
        
        bool CPACSConnectivity::HasRotation() const
        {
            return static_cast<bool>(m_rotation);
        }
        
        const CPACSPointXYZ& CPACSConnectivity::GetRotation() const
        {
            return *m_rotation;
        }
        
        CPACSPointXYZ& CPACSConnectivity::GetRotation()
        {
            return *m_rotation;
        }
        
        bool CPACSConnectivity::HasStiffness() const
        {
            return static_cast<bool>(m_stiffness);
        }
        
        const CPACSStiffness& CPACSConnectivity::GetStiffness() const
        {
            return *m_stiffness;
        }
        
        CPACSStiffness& CPACSConnectivity::GetStiffness()
        {
            return *m_stiffness;
        }
        
    }
}
