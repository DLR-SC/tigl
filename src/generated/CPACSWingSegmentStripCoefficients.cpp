// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingSegmentStripCoefficients.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingSegmentStripCoefficients::CPACSWingSegmentStripCoefficients(){}
        CPACSWingSegmentStripCoefficients::~CPACSWingSegmentStripCoefficients() {}
        
        void CPACSWingSegmentStripCoefficients::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element cfx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfx")) {
                m_cfx = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cfx");
            }
            
            // read element cfy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfy")) {
                m_cfy = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cfy");
            }
            
            // read element cfz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfz")) {
                m_cfz = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cfz");
            }
            
            // read element cmx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmx")) {
                m_cmx = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cmx");
            }
            
            // read element cmy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmy")) {
                m_cmy = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cmy");
            }
            
            // read element cmz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmz")) {
                m_cmz = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cmz");
            }
            
            // read element reference
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reference")) {
                m_reference.ReadCPACS(tixiHandle, xpath + "/reference");
            }
            else {
                LOG(ERROR) << "Required element reference is missing";
            }
            
        }
        
        void CPACSWingSegmentStripCoefficients::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element cfx
            if (m_cfx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfx");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cfx", *m_cfx);
            }
            
            // write element cfy
            if (m_cfy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfy");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cfy", *m_cfy);
            }
            
            // write element cfz
            if (m_cfz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfz");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cfz", *m_cfz);
            }
            
            // write element cmx
            if (m_cmx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmx");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cmx", *m_cmx);
            }
            
            // write element cmy
            if (m_cmy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmy");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cmy", *m_cmy);
            }
            
            // write element cmz
            if (m_cmz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmz");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cmz", *m_cmz);
            }
            
            // write element reference
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reference");
            m_reference.WriteCPACS(tixiHandle, xpath + "/reference");
            
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCfx() const
        {
            return static_cast<bool>(m_cfx);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCfx() const
        {
            return *m_cfx;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCfx(const double& value)
        {
            m_cfx = value;
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCfy() const
        {
            return static_cast<bool>(m_cfy);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCfy() const
        {
            return *m_cfy;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCfy(const double& value)
        {
            m_cfy = value;
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCfz() const
        {
            return static_cast<bool>(m_cfz);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCfz() const
        {
            return *m_cfz;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCfz(const double& value)
        {
            m_cfz = value;
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCmx() const
        {
            return static_cast<bool>(m_cmx);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCmx() const
        {
            return *m_cmx;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCmx(const double& value)
        {
            m_cmx = value;
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCmy() const
        {
            return static_cast<bool>(m_cmy);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCmy() const
        {
            return *m_cmy;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCmy(const double& value)
        {
            m_cmy = value;
        }
        
        bool CPACSWingSegmentStripCoefficients::HasCmz() const
        {
            return static_cast<bool>(m_cmz);
        }
        
        const double& CPACSWingSegmentStripCoefficients::GetCmz() const
        {
            return *m_cmz;
        }
        
        void CPACSWingSegmentStripCoefficients::SetCmz(const double& value)
        {
            m_cmz = value;
        }
        
        const CPACSLoadReference& CPACSWingSegmentStripCoefficients::GetReference() const
        {
            return m_reference;
        }
        
        CPACSLoadReference& CPACSWingSegmentStripCoefficients::GetReference()
        {
            return m_reference;
        }
        
    }
}
