// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSStructuralMount.h"

namespace tigl
{
    namespace generated
    {
        CPACSStructuralMount::CPACSStructuralMount(){}
        CPACSStructuralMount::~CPACSStructuralMount() {}
        
        void CPACSStructuralMount::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element blockedDOF
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/blockedDOF")) {
                m_blockedDOF = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/blockedDOF");
            }
            else {
                LOG(ERROR) << "Required element blockedDOF is missing";
            }
            
            // read element takeOnlyEndPoints
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/takeOnlyEndPoints")) {
                m_takeOnlyEndPoints = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/takeOnlyEndPoints");
            }
            else {
                LOG(ERROR) << "Required element takeOnlyEndPoints is missing";
            }
            
            // read element fromStructureUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromStructureUID")) {
                m_fromStructureUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fromStructureUID");
            }
            else {
                LOG(ERROR) << "Required element fromStructureUID is missing";
            }
            
            // read element fromStructureCounter
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromStructureCounter")) {
                m_fromStructureCounter = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/fromStructureCounter");
            }
            
            // read element toStructureUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toStructureUID")) {
                m_toStructureUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toStructureUID");
            }
            else {
                LOG(ERROR) << "Required element toStructureUID is missing";
            }
            
            // read element toStructureCounter
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toStructureCounter")) {
                m_toStructureCounter = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/toStructureCounter");
            }
            
        }
        
        void CPACSStructuralMount::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element blockedDOF
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/blockedDOF");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/blockedDOF", m_blockedDOF);
            
            // write element takeOnlyEndPoints
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/takeOnlyEndPoints");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/takeOnlyEndPoints", m_takeOnlyEndPoints);
            
            // write element fromStructureUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromStructureUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromStructureUID", m_fromStructureUID);
            
            // write element fromStructureCounter
            if (m_fromStructureCounter) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromStructureCounter");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromStructureCounter", *m_fromStructureCounter);
            }
            
            // write element toStructureUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toStructureUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toStructureUID", m_toStructureUID);
            
            // write element toStructureCounter
            if (m_toStructureCounter) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toStructureCounter");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/toStructureCounter", *m_toStructureCounter);
            }
            
        }
        
        const std::string& CPACSStructuralMount::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSStructuralMount::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const int& CPACSStructuralMount::GetBlockedDOF() const
        {
            return m_blockedDOF;
        }
        
        void CPACSStructuralMount::SetBlockedDOF(const int& value)
        {
            m_blockedDOF = value;
        }
        
        const bool& CPACSStructuralMount::GetTakeOnlyEndPoints() const
        {
            return m_takeOnlyEndPoints;
        }
        
        void CPACSStructuralMount::SetTakeOnlyEndPoints(const bool& value)
        {
            m_takeOnlyEndPoints = value;
        }
        
        const std::string& CPACSStructuralMount::GetFromStructureUID() const
        {
            return m_fromStructureUID;
        }
        
        void CPACSStructuralMount::SetFromStructureUID(const std::string& value)
        {
            m_fromStructureUID = value;
        }
        
        bool CPACSStructuralMount::HasFromStructureCounter() const
        {
            return static_cast<bool>(m_fromStructureCounter);
        }
        
        const int& CPACSStructuralMount::GetFromStructureCounter() const
        {
            return *m_fromStructureCounter;
        }
        
        void CPACSStructuralMount::SetFromStructureCounter(const int& value)
        {
            m_fromStructureCounter = value;
        }
        
        const std::string& CPACSStructuralMount::GetToStructureUID() const
        {
            return m_toStructureUID;
        }
        
        void CPACSStructuralMount::SetToStructureUID(const std::string& value)
        {
            m_toStructureUID = value;
        }
        
        bool CPACSStructuralMount::HasToStructureCounter() const
        {
            return static_cast<bool>(m_toStructureCounter);
        }
        
        const int& CPACSStructuralMount::GetToStructureCounter() const
        {
            return *m_toStructureCounter;
        }
        
        void CPACSStructuralMount::SetToStructureCounter(const int& value)
        {
            m_toStructureCounter = value;
        }
        
    }
}
