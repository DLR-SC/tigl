// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSStructuralMount.h"
#include "CPACSStructuralMounts.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSStructuralMount::CPACSStructuralMount(CPACSStructuralMounts* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_blockedDOF(0)
        , m_takeOnlyEndPoints(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSStructuralMount::~CPACSStructuralMount()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_fromStructureUID.empty()) m_uidMgr->TryUnregisterReference(m_fromStructureUID, *this);
            if (!m_toStructureUID.empty()) m_uidMgr->TryUnregisterReference(m_toStructureUID, *this);
        }
    }

    const CPACSStructuralMounts* CPACSStructuralMount::GetParent() const
    {
        return m_parent;
    }

    CPACSStructuralMounts* CPACSStructuralMount::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSStructuralMount::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSStructuralMount::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSStructuralMount::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSStructuralMount::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSStructuralMount::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element blockedDOF
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/blockedDOF")) {
            m_blockedDOF = tixi::TixiGetElement<int>(tixiHandle, xpath + "/blockedDOF");
        }
        else {
            LOG(ERROR) << "Required element blockedDOF is missing at xpath " << xpath;
        }

        // read element takeOnlyEndPoints
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/takeOnlyEndPoints")) {
            m_takeOnlyEndPoints = tixi::TixiGetElement<bool>(tixiHandle, xpath + "/takeOnlyEndPoints");
        }
        else {
            LOG(ERROR) << "Required element takeOnlyEndPoints is missing at xpath " << xpath;
        }

        // read element fromStructureUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromStructureUID")) {
            m_fromStructureUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/fromStructureUID");
            if (m_fromStructureUID.empty()) {
                LOG(WARNING) << "Required element fromStructureUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_fromStructureUID.empty()) m_uidMgr->RegisterReference(m_fromStructureUID, *this);
        }
        else {
            LOG(ERROR) << "Required element fromStructureUID is missing at xpath " << xpath;
        }

        // read element fromStructureCounter
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromStructureCounter")) {
            m_fromStructureCounter = tixi::TixiGetElement<int>(tixiHandle, xpath + "/fromStructureCounter");
        }

        // read element toStructureUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/toStructureUID")) {
            m_toStructureUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/toStructureUID");
            if (m_toStructureUID.empty()) {
                LOG(WARNING) << "Required element toStructureUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_toStructureUID.empty()) m_uidMgr->RegisterReference(m_toStructureUID, *this);
        }
        else {
            LOG(ERROR) << "Required element toStructureUID is missing at xpath " << xpath;
        }

        // read element toStructureCounter
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/toStructureCounter")) {
            m_toStructureCounter = tixi::TixiGetElement<int>(tixiHandle, xpath + "/toStructureCounter");
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSStructuralMount::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element blockedDOF
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/blockedDOF");
        tixi::TixiSaveElement(tixiHandle, xpath + "/blockedDOF", m_blockedDOF);

        // write element takeOnlyEndPoints
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/takeOnlyEndPoints");
        tixi::TixiSaveElement(tixiHandle, xpath + "/takeOnlyEndPoints", m_takeOnlyEndPoints);

        // write element fromStructureUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromStructureUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/fromStructureUID", m_fromStructureUID);

        // write element fromStructureCounter
        if (m_fromStructureCounter) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromStructureCounter");
            tixi::TixiSaveElement(tixiHandle, xpath + "/fromStructureCounter", *m_fromStructureCounter);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromStructureCounter")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/fromStructureCounter");
            }
        }

        // write element toStructureUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toStructureUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/toStructureUID", m_toStructureUID);

        // write element toStructureCounter
        if (m_toStructureCounter) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toStructureCounter");
            tixi::TixiSaveElement(tixiHandle, xpath + "/toStructureCounter", *m_toStructureCounter);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/toStructureCounter")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/toStructureCounter");
            }
        }

    }

    const std::string& CPACSStructuralMount::GetUID() const
    {
        return m_uID;
    }

    void CPACSStructuralMount::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const int& CPACSStructuralMount::GetBlockedDOF() const
    {
        return m_blockedDOF;
    }

    void CPACSStructuralMount::SetBlockedDOF(const int& value)
    {
        m_blockedDOF = value;
    }

    const bool& CPACSStructuralMount::GetTakeOnlyEndPoints() const
    {
        return m_takeOnlyEndPoints;
    }

    void CPACSStructuralMount::SetTakeOnlyEndPoints(const bool& value)
    {
        m_takeOnlyEndPoints = value;
    }

    const std::string& CPACSStructuralMount::GetFromStructureUID() const
    {
        return m_fromStructureUID;
    }

    void CPACSStructuralMount::SetFromStructureUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_fromStructureUID.empty()) m_uidMgr->TryUnregisterReference(m_fromStructureUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_fromStructureUID = value;
    }

    const boost::optional<int>& CPACSStructuralMount::GetFromStructureCounter() const
    {
        return m_fromStructureCounter;
    }

    void CPACSStructuralMount::SetFromStructureCounter(const boost::optional<int>& value)
    {
        m_fromStructureCounter = value;
    }

    const std::string& CPACSStructuralMount::GetToStructureUID() const
    {
        return m_toStructureUID;
    }

    void CPACSStructuralMount::SetToStructureUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_toStructureUID.empty()) m_uidMgr->TryUnregisterReference(m_toStructureUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_toStructureUID = value;
    }

    const boost::optional<int>& CPACSStructuralMount::GetToStructureCounter() const
    {
        return m_toStructureCounter;
    }

    void CPACSStructuralMount::SetToStructureCounter(const boost::optional<int>& value)
    {
        m_toStructureCounter = value;
    }

    const CTiglUIDObject* CPACSStructuralMount::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSStructuralMount::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_fromStructureUID == oldUid) {
            m_fromStructureUID = newUid;
        }
        if (m_toStructureUID == oldUid) {
            m_toStructureUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
