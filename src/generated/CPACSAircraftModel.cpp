// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAircraftModel.h"

namespace tigl
{
    namespace generated
    {
        CPACSAircraftModel::CPACSAircraftModel(){}
        CPACSAircraftModel::~CPACSAircraftModel() {}
        
        void CPACSAircraftModel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element reference
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reference")) {
                m_reference = boost::in_place();
                try {
                    m_reference->ReadCPACS(tixiHandle, xpath + "/reference");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read reference at xpath << " << xpath << ": " << e.what();
                    m_reference = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read reference at xpath << " << xpath << ": " << e.getError();
                    m_reference = boost::none;
                }
            }
            
            // read element fuselages
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselages")) {
                m_fuselages = boost::in_place(reinterpret_cast<CCPACSAircraftModel*>(this));
                try {
                    m_fuselages->ReadCPACS(tixiHandle, xpath + "/fuselages");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.what();
                    m_fuselages = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuselages at xpath << " << xpath << ": " << e.getError();
                    m_fuselages = boost::none;
                }
            }
            
            // read element wings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wings")) {
                m_wings = boost::in_place(reinterpret_cast<CCPACSAircraftModel*>(this));
                try {
                    m_wings->ReadCPACS(tixiHandle, xpath + "/wings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.what();
                    m_wings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wings at xpath << " << xpath << ": " << e.getError();
                    m_wings = boost::none;
                }
            }
            
            // read element engines
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/engines")) {
                m_engines = boost::in_place();
                try {
                    m_engines->ReadCPACS(tixiHandle, xpath + "/engines");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read engines at xpath << " << xpath << ": " << e.what();
                    m_engines = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read engines at xpath << " << xpath << ": " << e.getError();
                    m_engines = boost::none;
                }
            }
            
            // read element enginePylons
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/enginePylons")) {
                m_enginePylons = boost::in_place();
                try {
                    m_enginePylons->ReadCPACS(tixiHandle, xpath + "/enginePylons");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read enginePylons at xpath << " << xpath << ": " << e.what();
                    m_enginePylons = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read enginePylons at xpath << " << xpath << ": " << e.getError();
                    m_enginePylons = boost::none;
                }
            }
            
            // read element landingGear
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGear")) {
                m_landingGear = boost::in_place();
                try {
                    m_landingGear->ReadCPACS(tixiHandle, xpath + "/landingGear");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGear at xpath << " << xpath << ": " << e.what();
                    m_landingGear = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGear at xpath << " << xpath << ": " << e.getError();
                    m_landingGear = boost::none;
                }
            }
            
            // read element systems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/systems")) {
                m_systems = boost::in_place();
                try {
                    m_systems->ReadCPACS(tixiHandle, xpath + "/systems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read systems at xpath << " << xpath << ": " << e.what();
                    m_systems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read systems at xpath << " << xpath << ": " << e.getError();
                    m_systems = boost::none;
                }
            }
            
            // read element genericGeometryComponents
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/genericGeometryComponents")) {
                m_genericGeometryComponents = boost::in_place(reinterpret_cast<CCPACSAircraftModel*>(this));
                try {
                    m_genericGeometryComponents->ReadCPACS(tixiHandle, xpath + "/genericGeometryComponents");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read genericGeometryComponents at xpath << " << xpath << ": " << e.what();
                    m_genericGeometryComponents = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read genericGeometryComponents at xpath << " << xpath << ": " << e.getError();
                    m_genericGeometryComponents = boost::none;
                }
            }
            
            // read element global
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/global")) {
                m_global = boost::in_place();
                try {
                    m_global->ReadCPACS(tixiHandle, xpath + "/global");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read global at xpath << " << xpath << ": " << e.what();
                    m_global = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read global at xpath << " << xpath << ": " << e.getError();
                    m_global = boost::none;
                }
            }
            
            // read element analyses
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/analyses")) {
                m_analyses = boost::in_place();
                try {
                    m_analyses->ReadCPACS(tixiHandle, xpath + "/analyses");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read analyses at xpath << " << xpath << ": " << e.what();
                    m_analyses = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read analyses at xpath << " << xpath << ": " << e.getError();
                    m_analyses = boost::none;
                }
            }
            
        }
        
        void CPACSAircraftModel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element reference
            if (m_reference) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reference");
                m_reference->WriteCPACS(tixiHandle, xpath + "/reference");
            }
            
            // write element fuselages
            if (m_fuselages) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselages");
                m_fuselages->WriteCPACS(tixiHandle, xpath + "/fuselages");
            }
            
            // write element wings
            if (m_wings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wings");
                m_wings->WriteCPACS(tixiHandle, xpath + "/wings");
            }
            
            // write element engines
            if (m_engines) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/engines");
                m_engines->WriteCPACS(tixiHandle, xpath + "/engines");
            }
            
            // write element enginePylons
            if (m_enginePylons) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/enginePylons");
                m_enginePylons->WriteCPACS(tixiHandle, xpath + "/enginePylons");
            }
            
            // write element landingGear
            if (m_landingGear) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGear");
                m_landingGear->WriteCPACS(tixiHandle, xpath + "/landingGear");
            }
            
            // write element systems
            if (m_systems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/systems");
                m_systems->WriteCPACS(tixiHandle, xpath + "/systems");
            }
            
            // write element genericGeometryComponents
            if (m_genericGeometryComponents) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericGeometryComponents");
                m_genericGeometryComponents->WriteCPACS(tixiHandle, xpath + "/genericGeometryComponents");
            }
            
            // write element global
            if (m_global) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/global");
                m_global->WriteCPACS(tixiHandle, xpath + "/global");
            }
            
            // write element analyses
            if (m_analyses) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/analyses");
                m_analyses->WriteCPACS(tixiHandle, xpath + "/analyses");
            }
            
        }
        
        const std::string& CPACSAircraftModel::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSAircraftModel::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSAircraftModel::GetName() const
        {
            return m_name;
        }
        
        void CPACSAircraftModel::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSAircraftModel::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSAircraftModel::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSAircraftModel::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSAircraftModel::HasReference() const
        {
            return static_cast<bool>(m_reference);
        }
        
        const CPACSReference& CPACSAircraftModel::GetReference() const
        {
            return *m_reference;
        }
        
        CPACSReference& CPACSAircraftModel::GetReference()
        {
            return *m_reference;
        }
        
        bool CPACSAircraftModel::HasFuselages() const
        {
            return static_cast<bool>(m_fuselages);
        }
        
        const CCPACSFuselages& CPACSAircraftModel::GetFuselages() const
        {
            return *m_fuselages;
        }
        
        CCPACSFuselages& CPACSAircraftModel::GetFuselages()
        {
            return *m_fuselages;
        }
        
        bool CPACSAircraftModel::HasWings() const
        {
            return static_cast<bool>(m_wings);
        }
        
        const CCPACSWings& CPACSAircraftModel::GetWings() const
        {
            return *m_wings;
        }
        
        CCPACSWings& CPACSAircraftModel::GetWings()
        {
            return *m_wings;
        }
        
        bool CPACSAircraftModel::HasEngines() const
        {
            return static_cast<bool>(m_engines);
        }
        
        const CPACSEnginePositions& CPACSAircraftModel::GetEngines() const
        {
            return *m_engines;
        }
        
        CPACSEnginePositions& CPACSAircraftModel::GetEngines()
        {
            return *m_engines;
        }
        
        bool CPACSAircraftModel::HasEnginePylons() const
        {
            return static_cast<bool>(m_enginePylons);
        }
        
        const CPACSEnginePylons& CPACSAircraftModel::GetEnginePylons() const
        {
            return *m_enginePylons;
        }
        
        CPACSEnginePylons& CPACSAircraftModel::GetEnginePylons()
        {
            return *m_enginePylons;
        }
        
        bool CPACSAircraftModel::HasLandingGear() const
        {
            return static_cast<bool>(m_landingGear);
        }
        
        const CPACSLandingGear& CPACSAircraftModel::GetLandingGear() const
        {
            return *m_landingGear;
        }
        
        CPACSLandingGear& CPACSAircraftModel::GetLandingGear()
        {
            return *m_landingGear;
        }
        
        bool CPACSAircraftModel::HasSystems() const
        {
            return static_cast<bool>(m_systems);
        }
        
        const CPACSSystems& CPACSAircraftModel::GetSystems() const
        {
            return *m_systems;
        }
        
        CPACSSystems& CPACSAircraftModel::GetSystems()
        {
            return *m_systems;
        }
        
        bool CPACSAircraftModel::HasGenericGeometryComponents() const
        {
            return static_cast<bool>(m_genericGeometryComponents);
        }
        
        const CCPACSExternalObjects& CPACSAircraftModel::GetGenericGeometryComponents() const
        {
            return *m_genericGeometryComponents;
        }
        
        CCPACSExternalObjects& CPACSAircraftModel::GetGenericGeometryComponents()
        {
            return *m_genericGeometryComponents;
        }
        
        bool CPACSAircraftModel::HasGlobal() const
        {
            return static_cast<bool>(m_global);
        }
        
        const CPACSAircraftGlobal& CPACSAircraftModel::GetGlobal() const
        {
            return *m_global;
        }
        
        CPACSAircraftGlobal& CPACSAircraftModel::GetGlobal()
        {
            return *m_global;
        }
        
        bool CPACSAircraftModel::HasAnalyses() const
        {
            return static_cast<bool>(m_analyses);
        }
        
        const CPACSAircraftAnalyses& CPACSAircraftModel::GetAnalyses() const
        {
            return *m_analyses;
        }
        
        CPACSAircraftAnalyses& CPACSAircraftModel::GetAnalyses()
        {
            return *m_analyses;
        }
        
    }
}
