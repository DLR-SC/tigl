// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashOutputFrequencyDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashOutputFrequencyDef::CPACSCrashOutputFrequencyDef(){}
        CPACSCrashOutputFrequencyDef::~CPACSCrashOutputFrequencyDef() {}
        
        void CPACSCrashOutputFrequencyDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element crashPlotInterval
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashPlotInterval")) {
                m_crashPlotInterval = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/crashPlotInterval");
            }
            
            // read element crashTimeHistoryInterval
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashTimeHistoryInterval")) {
                m_crashTimeHistoryInterval = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/crashTimeHistoryInterval");
            }
            
        }
        
        void CPACSCrashOutputFrequencyDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element crashPlotInterval
            if (m_crashPlotInterval) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashPlotInterval");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashPlotInterval", *m_crashPlotInterval);
            }
            
            // write element crashTimeHistoryInterval
            if (m_crashTimeHistoryInterval) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashTimeHistoryInterval");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashTimeHistoryInterval", *m_crashTimeHistoryInterval);
            }
            
        }
        
        bool CPACSCrashOutputFrequencyDef::HasCrashPlotInterval() const
        {
            return static_cast<bool>(m_crashPlotInterval);
        }
        
        const double& CPACSCrashOutputFrequencyDef::GetCrashPlotInterval() const
        {
            return *m_crashPlotInterval;
        }
        
        void CPACSCrashOutputFrequencyDef::SetCrashPlotInterval(const double& value)
        {
            m_crashPlotInterval = value;
        }
        
        bool CPACSCrashOutputFrequencyDef::HasCrashTimeHistoryInterval() const
        {
            return static_cast<bool>(m_crashTimeHistoryInterval);
        }
        
        const double& CPACSCrashOutputFrequencyDef::GetCrashTimeHistoryInterval() const
        {
            return *m_crashTimeHistoryInterval;
        }
        
        void CPACSCrashOutputFrequencyDef::SetCrashTimeHistoryInterval(const double& value)
        {
            m_crashTimeHistoryInterval = value;
        }
        
    }
}
