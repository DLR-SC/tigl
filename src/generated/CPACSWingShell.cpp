// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingCSStructure.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingShell.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingShell::CPACSWingShell(CCPACSWingCSStructure* parent)
        {
            //assert(parent != NULL);
            m_parent = parent;
        }
        
        CPACSWingShell::~CPACSWingShell() {}
        
        CCPACSWingCSStructure* CPACSWingShell::GetParent() const
        {
            return m_parent;
        }
        
        void CPACSWingShell::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
            }
            
            // read element skin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/skin")) {
                m_skin.ReadCPACS(tixiHandle, xpath + "/skin");
            }
            else {
                LOG(ERROR) << "Required element skin is missing at xpath " << xpath;
            }
            
            // read element cells
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cells")) {
                m_cells = boost::in_place(reinterpret_cast<CCPACSWingShell*>(this));
                try {
                    m_cells->ReadCPACS(tixiHandle, xpath + "/cells");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cells at xpath << " << xpath << ": " << e.what();
                    m_cells = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cells at xpath << " << xpath << ": " << e.getError();
                    m_cells = boost::none;
                }
            }
            
        }
        
        void CPACSWingShell::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element skin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skin");
            m_skin.WriteCPACS(tixiHandle, xpath + "/skin");
            
            // write element cells
            if (m_cells) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cells");
                m_cells->WriteCPACS(tixiHandle, xpath + "/cells");
            }
            
        }
        
        const std::string& CPACSWingShell::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSWingShell::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSWingSkin& CPACSWingShell::GetSkin() const
        {
            return m_skin;
        }
        
        CPACSWingSkin& CPACSWingShell::GetSkin()
        {
            return m_skin;
        }
        
        bool CPACSWingShell::HasCells() const
        {
            return static_cast<bool>(m_cells);
        }
        
        const CCPACSWingCells& CPACSWingShell::GetCells() const
        {
            return *m_cells;
        }
        
        CCPACSWingCells& CPACSWingShell::GetCells()
        {
            return *m_cells;
        }
        
    }
}
