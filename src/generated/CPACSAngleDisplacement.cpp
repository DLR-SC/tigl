// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAngleDisplacement.h"

namespace tigl
{
    namespace generated
    {
        CPACSAngleDisplacement::CPACSAngleDisplacement(){}
        CPACSAngleDisplacement::~CPACSAngleDisplacement() {}
        
        void CPACSAngleDisplacement::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element phi
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/phi")) {
                m_phi = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/phi");
            }
            else {
                LOG(ERROR) << "Required element phi is missing";
            }
            
            // read element theta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/theta")) {
                m_theta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/theta");
            }
            else {
                LOG(ERROR) << "Required element theta is missing";
            }
            
            // read element psi
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/psi")) {
                m_psi = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/psi");
            }
            else {
                LOG(ERROR) << "Required element psi is missing";
            }
            
        }
        
        void CPACSAngleDisplacement::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element phi
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phi");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/phi", m_phi);
            
            // write element theta
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/theta");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/theta", m_theta);
            
            // write element psi
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/psi");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/psi", m_psi);
            
        }
        
        const double& CPACSAngleDisplacement::GetPhi() const
        {
            return m_phi;
        }
        
        void CPACSAngleDisplacement::SetPhi(const double& value)
        {
            m_phi = value;
        }
        
        const double& CPACSAngleDisplacement::GetTheta() const
        {
            return m_theta;
        }
        
        void CPACSAngleDisplacement::SetTheta(const double& value)
        {
            m_theta = value;
        }
        
        const double& CPACSAngleDisplacement::GetPsi() const
        {
            return m_psi;
        }
        
        void CPACSAngleDisplacement::SetPsi(const double& value)
        {
            m_psi = value;
        }
        
    }
}
