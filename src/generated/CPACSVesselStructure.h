// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSFramesAssembly.h>
#include <CCPACSStringersAssembly.h>
#include <CCPACSWalls.h>
#include <string>
#include <tixi.h>
#include "CPACSVesselSkinLayers.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSVessel;

namespace generated
{
    // This class is used in:
    // CPACSVessel

    /// @brief Structure
    /// 
    /// 
    class CPACSVesselStructure
    {
    public:
        TIGL_EXPORT CPACSVesselStructure(CCPACSVessel* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSVesselStructure();

        TIGL_EXPORT CCPACSVessel* GetParent();

        TIGL_EXPORT const CCPACSVessel* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<CCPACSStringersAssembly>& GetStringers() const;
        TIGL_EXPORT virtual boost::optional<CCPACSStringersAssembly>& GetStringers();

        TIGL_EXPORT virtual const boost::optional<CCPACSFramesAssembly>& GetFrames() const;
        TIGL_EXPORT virtual boost::optional<CCPACSFramesAssembly>& GetFrames();

        TIGL_EXPORT virtual const boost::optional<CPACSVesselSkinLayers>& GetSkinLayers() const;
        TIGL_EXPORT virtual boost::optional<CPACSVesselSkinLayers>& GetSkinLayers();

        TIGL_EXPORT virtual const boost::optional<CCPACSWalls>& GetWalls() const;
        TIGL_EXPORT virtual boost::optional<CCPACSWalls>& GetWalls();

        TIGL_EXPORT virtual CCPACSStringersAssembly& GetStringers(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveStringers();

        TIGL_EXPORT virtual CCPACSFramesAssembly& GetFrames(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveFrames();

        TIGL_EXPORT virtual CPACSVesselSkinLayers& GetSkinLayers(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSkinLayers();

        TIGL_EXPORT virtual CCPACSWalls& GetWalls(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveWalls();

    protected:
        CCPACSVessel* m_parent;

        CTiglUIDManager* m_uidMgr;

        boost::optional<CCPACSStringersAssembly> m_stringers;
        boost::optional<CCPACSFramesAssembly>    m_frames;
        boost::optional<CPACSVesselSkinLayers>   m_skinLayers;
        boost::optional<CCPACSWalls>             m_walls;

    private:
        CPACSVesselStructure(const CPACSVesselStructure&) = delete;
        CPACSVesselStructure& operator=(const CPACSVesselStructure&) = delete;

        CPACSVesselStructure(CPACSVesselStructure&&) = delete;
        CPACSVesselStructure& operator=(CPACSVesselStructure&&) = delete;
    };
} // namespace generated

// CPACSVesselStructure is customized, use type CCPACSVesselStructure directly
} // namespace tigl
