// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFuselageFuelTank
        
        // generated from /xsd:schema/xsd:complexType[901]
        class CPACSWingFuelTankVolume
        {
        public:
            TIGL_EXPORT CPACSWingFuelTankVolume();
            TIGL_EXPORT virtual ~CPACSWingFuelTankVolume();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetOptimalVolume() const;
            TIGL_EXPORT void SetOptimalVolume(const double& value);
            
            TIGL_EXPORT bool HasUsableVolume_choice1() const;
            TIGL_EXPORT const double& GetUsableVolume_choice1() const;
            TIGL_EXPORT void SetUsableVolume_choice1(const double& value);
            
            TIGL_EXPORT bool HasRealVolume_choice1() const;
            TIGL_EXPORT const double& GetRealVolume_choice1() const;
            TIGL_EXPORT void SetRealVolume_choice1(const double& value);
            
            TIGL_EXPORT bool HasUseableVolumeFactor_choice2() const;
            TIGL_EXPORT const double& GetUseableVolumeFactor_choice2() const;
            TIGL_EXPORT void SetUseableVolumeFactor_choice2(const double& value);
            
            TIGL_EXPORT bool HasRealVolumeFactor_choice2() const;
            TIGL_EXPORT const double& GetRealVolumeFactor_choice2() const;
            TIGL_EXPORT void SetRealVolumeFactor_choice2(const double& value);
            
        protected:
            double                  m_optimalVolume;
            boost::optional<double> m_usableVolume_choice1;
            boost::optional<double> m_realVolume_choice1;
            boost::optional<double> m_useableVolumeFactor_choice2;
            boost::optional<double> m_realVolumeFactor_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWingFuelTankVolume(const CPACSWingFuelTankVolume&) = delete;
            CPACSWingFuelTankVolume& operator=(const CPACSWingFuelTankVolume&) = delete;
            
            CPACSWingFuelTankVolume(CPACSWingFuelTankVolume&&) = delete;
            CPACSWingFuelTankVolume& operator=(CPACSWingFuelTankVolume&&) = delete;
            #else
            CPACSWingFuelTankVolume(const CPACSWingFuelTankVolume&);
            CPACSWingFuelTankVolume& operator=(const CPACSWingFuelTankVolume&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSWingFuelTankVolume = generated::CPACSWingFuelTankVolume;
    #else
    typedef generated::CPACSWingFuelTankVolume CCPACSWingFuelTankVolume;
    #endif
}
