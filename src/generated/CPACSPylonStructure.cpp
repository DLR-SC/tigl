// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPylonStructure.h"

namespace tigl
{
    namespace generated
    {
        CPACSPylonStructure::CPACSPylonStructure(){}
        CPACSPylonStructure::~CPACSPylonStructure() {}
        
        void CPACSPylonStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element pylonBox
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pylonBox")) {
                m_pylonBox = boost::in_place();
                try {
                    m_pylonBox->ReadCPACS(tixiHandle, xpath + "/pylonBox");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read pylonBox at xpath << " << xpath << ": " << e.what();
                    m_pylonBox = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read pylonBox at xpath << " << xpath << ": " << e.getError();
                    m_pylonBox = boost::none;
                }
            }
            
            // read element frontPyramid
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/frontPyramid")) {
                m_frontPyramid = boost::in_place();
                try {
                    m_frontPyramid->ReadCPACS(tixiHandle, xpath + "/frontPyramid");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read frontPyramid at xpath << " << xpath << ": " << e.what();
                    m_frontPyramid = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read frontPyramid at xpath << " << xpath << ": " << e.getError();
                    m_frontPyramid = boost::none;
                }
            }
            
            // read element struts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/struts")) {
                m_struts = boost::in_place();
                try {
                    m_struts->ReadCPACS(tixiHandle, xpath + "/struts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read struts at xpath << " << xpath << ": " << e.what();
                    m_struts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read struts at xpath << " << xpath << ": " << e.getError();
                    m_struts = boost::none;
                }
            }
            
            // read element pins
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pins")) {
                m_pins = boost::in_place();
                try {
                    m_pins->ReadCPACS(tixiHandle, xpath + "/pins");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read pins at xpath << " << xpath << ": " << e.what();
                    m_pins = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read pins at xpath << " << xpath << ": " << e.getError();
                    m_pins = boost::none;
                }
            }
            
            // read element shackles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shackles")) {
                m_shackles = boost::in_place();
                try {
                    m_shackles->ReadCPACS(tixiHandle, xpath + "/shackles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read shackles at xpath << " << xpath << ": " << e.what();
                    m_shackles = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read shackles at xpath << " << xpath << ": " << e.getError();
                    m_shackles = boost::none;
                }
            }
            
            // read element wingAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingAttachments")) {
                m_wingAttachments = boost::in_place();
                try {
                    m_wingAttachments->ReadCPACS(tixiHandle, xpath + "/wingAttachments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingAttachments at xpath << " << xpath << ": " << e.what();
                    m_wingAttachments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingAttachments at xpath << " << xpath << ": " << e.getError();
                    m_wingAttachments = boost::none;
                }
            }
            
            // read element fuselageAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselageAttachments")) {
                m_fuselageAttachments = boost::in_place();
                try {
                    m_fuselageAttachments->ReadCPACS(tixiHandle, xpath + "/fuselageAttachments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fuselageAttachments at xpath << " << xpath << ": " << e.what();
                    m_fuselageAttachments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fuselageAttachments at xpath << " << xpath << ": " << e.getError();
                    m_fuselageAttachments = boost::none;
                }
            }
            
        }
        
        void CPACSPylonStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element pylonBox
            if (m_pylonBox) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pylonBox");
                m_pylonBox->WriteCPACS(tixiHandle, xpath + "/pylonBox");
            }
            
            // write element frontPyramid
            if (m_frontPyramid) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frontPyramid");
                m_frontPyramid->WriteCPACS(tixiHandle, xpath + "/frontPyramid");
            }
            
            // write element struts
            if (m_struts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/struts");
                m_struts->WriteCPACS(tixiHandle, xpath + "/struts");
            }
            
            // write element pins
            if (m_pins) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pins");
                m_pins->WriteCPACS(tixiHandle, xpath + "/pins");
            }
            
            // write element shackles
            if (m_shackles) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shackles");
                m_shackles->WriteCPACS(tixiHandle, xpath + "/shackles");
            }
            
            // write element wingAttachments
            if (m_wingAttachments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingAttachments");
                m_wingAttachments->WriteCPACS(tixiHandle, xpath + "/wingAttachments");
            }
            
            // write element fuselageAttachments
            if (m_fuselageAttachments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselageAttachments");
                m_fuselageAttachments->WriteCPACS(tixiHandle, xpath + "/fuselageAttachments");
            }
            
        }
        
        bool CPACSPylonStructure::HasPylonBox() const
        {
            return static_cast<bool>(m_pylonBox);
        }
        
        const CPACSPylonBox& CPACSPylonStructure::GetPylonBox() const
        {
            return *m_pylonBox;
        }
        
        CPACSPylonBox& CPACSPylonStructure::GetPylonBox()
        {
            return *m_pylonBox;
        }
        
        bool CPACSPylonStructure::HasFrontPyramid() const
        {
            return static_cast<bool>(m_frontPyramid);
        }
        
        const CPACSPylonShell& CPACSPylonStructure::GetFrontPyramid() const
        {
            return *m_frontPyramid;
        }
        
        CPACSPylonShell& CPACSPylonStructure::GetFrontPyramid()
        {
            return *m_frontPyramid;
        }
        
        bool CPACSPylonStructure::HasStruts() const
        {
            return static_cast<bool>(m_struts);
        }
        
        const CPACSPylonStruts& CPACSPylonStructure::GetStruts() const
        {
            return *m_struts;
        }
        
        CPACSPylonStruts& CPACSPylonStructure::GetStruts()
        {
            return *m_struts;
        }
        
        bool CPACSPylonStructure::HasPins() const
        {
            return static_cast<bool>(m_pins);
        }
        
        const CPACSPylonPins& CPACSPylonStructure::GetPins() const
        {
            return *m_pins;
        }
        
        CPACSPylonPins& CPACSPylonStructure::GetPins()
        {
            return *m_pins;
        }
        
        bool CPACSPylonStructure::HasShackles() const
        {
            return static_cast<bool>(m_shackles);
        }
        
        const CPACSPylonShackles& CPACSPylonStructure::GetShackles() const
        {
            return *m_shackles;
        }
        
        CPACSPylonShackles& CPACSPylonStructure::GetShackles()
        {
            return *m_shackles;
        }
        
        bool CPACSPylonStructure::HasWingAttachments() const
        {
            return static_cast<bool>(m_wingAttachments);
        }
        
        const CPACSPylonAttachments& CPACSPylonStructure::GetWingAttachments() const
        {
            return *m_wingAttachments;
        }
        
        CPACSPylonAttachments& CPACSPylonStructure::GetWingAttachments()
        {
            return *m_wingAttachments;
        }
        
        bool CPACSPylonStructure::HasFuselageAttachments() const
        {
            return static_cast<bool>(m_fuselageAttachments);
        }
        
        const CPACSPylonAttachments& CPACSPylonStructure::GetFuselageAttachments() const
        {
            return *m_fuselageAttachments;
        }
        
        CPACSPylonAttachments& CPACSPylonStructure::GetFuselageAttachments()
        {
            return *m_fuselageAttachments;
        }
        
    }
}
