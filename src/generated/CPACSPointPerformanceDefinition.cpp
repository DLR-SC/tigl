// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSPointPerformanceDefinition.h"
#include "CPACSPointPerformanceDefinitions.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPointPerformanceDefinition::CPACSPointPerformanceDefinition(CPACSPointPerformanceDefinitions* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPointPerformanceDefinition::~CPACSPointPerformanceDefinition()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (m_segmentUID_choice1 && !m_segmentUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_segmentUID_choice1, *this);
        }
    }

    const CPACSPointPerformanceDefinitions* CPACSPointPerformanceDefinition::GetParent() const
    {
        return m_parent;
    }

    CPACSPointPerformanceDefinitions* CPACSPointPerformanceDefinition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPointPerformanceDefinition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSPointPerformanceDefinition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSPointPerformanceDefinition::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSPointPerformanceDefinition::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSPointPerformanceDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element segmentUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/segmentUID")) {
            m_segmentUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/segmentUID");
            if (m_segmentUID_choice1->empty()) {
                LOG(WARNING) << "Optional element segmentUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_segmentUID_choice1->empty()) m_uidMgr->RegisterReference(*m_segmentUID_choice1, *this);
        }

        // read element massFraction
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/massFraction")) {
            m_massFraction_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/massFraction");
        }

        // read element fuelFraction
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fuelFraction")) {
            m_fuelFraction_choice3 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/fuelFraction");
        }

        // read element typeOfPointPerformance
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/typeOfPointPerformance")) {
            m_typeOfPointPerformance = stringToCPACSPointPerformanceDefinition_typeOfPointPerformance(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/typeOfPointPerformance"));
        }
        else {
            LOG(ERROR) << "Required element typeOfPointPerformance is missing at xpath " << xpath;
        }

        // read element constraints
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/constraints")) {
            m_constraints = boost::in_place(this);
            try {
                m_constraints->ReadCPACS(tixiHandle, xpath + "/constraints");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read constraints at xpath " << xpath << ": " << e.what();
                m_constraints = boost::none;
            }
        }

        // read element requirements
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/requirements")) {
            m_requirements = boost::in_place(this);
            try {
                m_requirements->ReadCPACS(tixiHandle, xpath + "/requirements");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read requirements at xpath " << xpath << ": " << e.what();
                m_requirements = boost::none;
            }
        }

        // read element environment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/environment")) {
            m_environment = boost::in_place(this);
            try {
                m_environment->ReadCPACS(tixiHandle, xpath + "/environment");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read environment at xpath " << xpath << ": " << e.what();
                m_environment = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSPointPerformanceDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "segmentUID", "massFraction", "fuelFraction", "typeOfPointPerformance", "constraints", "requirements", "environment" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element segmentUID
        if (m_segmentUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/segmentUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/segmentUID", *m_segmentUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/segmentUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/segmentUID");
            }
        }

        // write element massFraction
        if (m_massFraction_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/massFraction", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/massFraction", *m_massFraction_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/massFraction")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/massFraction");
            }
        }

        // write element fuelFraction
        if (m_fuelFraction_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/fuelFraction", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/fuelFraction", *m_fuelFraction_choice3);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/fuelFraction")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/fuelFraction");
            }
        }

        // write element typeOfPointPerformance
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/typeOfPointPerformance", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/typeOfPointPerformance", CPACSPointPerformanceDefinition_typeOfPointPerformanceToString(m_typeOfPointPerformance));

        // write element constraints
        if (m_constraints) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/constraints", childElemOrder);
            m_constraints->WriteCPACS(tixiHandle, xpath + "/constraints");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/constraints")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/constraints");
            }
        }

        // write element requirements
        if (m_requirements) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/requirements", childElemOrder);
            m_requirements->WriteCPACS(tixiHandle, xpath + "/requirements");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/requirements")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/requirements");
            }
        }

        // write element environment
        if (m_environment) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/environment", childElemOrder);
            m_environment->WriteCPACS(tixiHandle, xpath + "/environment");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/environment")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/environment");
            }
        }

    }

    bool CPACSPointPerformanceDefinition::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_segmentUID_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_massFraction_choice2.is_initialized()
                        ||
                        m_fuelFraction_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_massFraction_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_segmentUID_choice1.is_initialized()
                        ||
                        m_fuelFraction_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_fuelFraction_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_segmentUID_choice1.is_initialized()
                        ||
                        m_massFraction_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSPointPerformanceDefinition::GetUID() const
    {
        return m_uID;
    }

    void CPACSPointPerformanceDefinition::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSPointPerformanceDefinition::GetName() const
    {
        return m_name;
    }

    void CPACSPointPerformanceDefinition::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSPointPerformanceDefinition::GetDescription() const
    {
        return m_description;
    }

    void CPACSPointPerformanceDefinition::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<std::string>& CPACSPointPerformanceDefinition::GetSegmentUID_choice1() const
    {
        return m_segmentUID_choice1;
    }

    void CPACSPointPerformanceDefinition::SetSegmentUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_segmentUID_choice1 && !m_segmentUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_segmentUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_segmentUID_choice1 = value;
    }

    const boost::optional<double>& CPACSPointPerformanceDefinition::GetMassFraction_choice2() const
    {
        return m_massFraction_choice2;
    }

    void CPACSPointPerformanceDefinition::SetMassFraction_choice2(const boost::optional<double>& value)
    {
        m_massFraction_choice2 = value;
    }

    const boost::optional<double>& CPACSPointPerformanceDefinition::GetFuelFraction_choice3() const
    {
        return m_fuelFraction_choice3;
    }

    void CPACSPointPerformanceDefinition::SetFuelFraction_choice3(const boost::optional<double>& value)
    {
        m_fuelFraction_choice3 = value;
    }

    const CPACSPointPerformanceDefinition_typeOfPointPerformance& CPACSPointPerformanceDefinition::GetTypeOfPointPerformance() const
    {
        return m_typeOfPointPerformance;
    }

    void CPACSPointPerformanceDefinition::SetTypeOfPointPerformance(const CPACSPointPerformanceDefinition_typeOfPointPerformance& value)
    {
        m_typeOfPointPerformance = value;
    }

    const boost::optional<CPACSPointPerformanceConstraints>& CPACSPointPerformanceDefinition::GetConstraints() const
    {
        return m_constraints;
    }

    boost::optional<CPACSPointPerformanceConstraints>& CPACSPointPerformanceDefinition::GetConstraints()
    {
        return m_constraints;
    }

    const boost::optional<CPACSPointPerformanceRequirements>& CPACSPointPerformanceDefinition::GetRequirements() const
    {
        return m_requirements;
    }

    boost::optional<CPACSPointPerformanceRequirements>& CPACSPointPerformanceDefinition::GetRequirements()
    {
        return m_requirements;
    }

    const boost::optional<CPACSEnvironment>& CPACSPointPerformanceDefinition::GetEnvironment() const
    {
        return m_environment;
    }

    boost::optional<CPACSEnvironment>& CPACSPointPerformanceDefinition::GetEnvironment()
    {
        return m_environment;
    }

    CPACSPointPerformanceConstraints& CPACSPointPerformanceDefinition::GetConstraints(CreateIfNotExistsTag)
    {
        if (!m_constraints)
            m_constraints = boost::in_place(this);
        return *m_constraints;
    }

    void CPACSPointPerformanceDefinition::RemoveConstraints()
    {
        m_constraints = boost::none;
    }

    CPACSPointPerformanceRequirements& CPACSPointPerformanceDefinition::GetRequirements(CreateIfNotExistsTag)
    {
        if (!m_requirements)
            m_requirements = boost::in_place(this);
        return *m_requirements;
    }

    void CPACSPointPerformanceDefinition::RemoveRequirements()
    {
        m_requirements = boost::none;
    }

    CPACSEnvironment& CPACSPointPerformanceDefinition::GetEnvironment(CreateIfNotExistsTag)
    {
        if (!m_environment)
            m_environment = boost::in_place(this);
        return *m_environment;
    }

    void CPACSPointPerformanceDefinition::RemoveEnvironment()
    {
        m_environment = boost::none;
    }

    const CTiglUIDObject* CPACSPointPerformanceDefinition::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSPointPerformanceDefinition::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_segmentUID_choice1 && *m_segmentUID_choice1 == oldUid) {
            m_segmentUID_choice1 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
