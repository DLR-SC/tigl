// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
namespace generated
{
    // This enum is used in:
    // CPACSControlSurfaceTrackType

    // generated from /xsd:schema/xsd:complexType[189]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:element[2]/xsd:complexType/xsd:simpleContent
    enum CPACSControlSurfaceTrackType_trackType
    {
        trackType1,
        trackType2,
        trackType3,
        trackType4,
        trackType5,
        trackType6,
        trackType7
    };

    inline std::string CPACSControlSurfaceTrackType_trackTypeToString(const CPACSControlSurfaceTrackType_trackType& value)
    {
        switch(value) {
        case trackType1: return "trackType1";
        case trackType2: return "trackType2";
        case trackType3: return "trackType3";
        case trackType4: return "trackType4";
        case trackType5: return "trackType5";
        case trackType6: return "trackType6";
        case trackType7: return "trackType7";
        default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSControlSurfaceTrackType_trackType");
        }
    }
    inline CPACSControlSurfaceTrackType_trackType stringToCPACSControlSurfaceTrackType_trackType(const std::string& value)
    {
        struct ToLower { std::string operator()(std::string str) { for (std::size_t i = 0; i < str.length(); i++) { str[i] = std::tolower(str[i]); } return str; } } toLower;
        if (toLower(value) == "tracktype1") { return trackType1; }
        if (toLower(value) == "tracktype2") { return trackType2; }
        if (toLower(value) == "tracktype3") { return trackType3; }
        if (toLower(value) == "tracktype4") { return trackType4; }
        if (toLower(value) == "tracktype5") { return trackType5; }
        if (toLower(value) == "tracktype6") { return trackType6; }
        if (toLower(value) == "tracktype7") { return trackType7; }
        throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSControlSurfaceTrackType_trackType");
    }
} // namespace generated

// Aliases in tigl namespace
#ifdef HAVE_CPP11
using ECPACSControlSurfaceTrackType_trackType = generated::CPACSControlSurfaceTrackType_trackType;
#else
typedef generated::CPACSControlSurfaceTrackType_trackType ECPACSControlSurfaceTrackType_trackType;
#endif
using generated::trackType1;
using generated::trackType2;
using generated::trackType3;
using generated::trackType4;
using generated::trackType5;
using generated::trackType6;
using generated::trackType7;
} // namespace tigl
