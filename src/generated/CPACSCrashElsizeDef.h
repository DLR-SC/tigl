// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSCrashElsizeDefs
        
        // generated from /xsd:schema/xsd:complexType[224]
        class CPACSCrashElsizeDef
        {
        public:
            TIGL_EXPORT CPACSCrashElsizeDef();
            TIGL_EXPORT virtual ~CPACSCrashElsizeDef();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasElsizeSkin() const;
            TIGL_EXPORT const double& GetElsizeSkin() const;
            TIGL_EXPORT void SetElsizeSkin(const double& value);
            
            TIGL_EXPORT bool HasNumberOfTransitionAreas() const;
            TIGL_EXPORT const int& GetNumberOfTransitionAreas() const;
            TIGL_EXPORT void SetNumberOfTransitionAreas(const int& value);
            
            TIGL_EXPORT bool HasElsizeStringer() const;
            TIGL_EXPORT const double& GetElsizeStringer() const;
            TIGL_EXPORT void SetElsizeStringer(const double& value);
            
            TIGL_EXPORT bool HasElsizeFrame() const;
            TIGL_EXPORT const double& GetElsizeFrame() const;
            TIGL_EXPORT void SetElsizeFrame(const double& value);
            
            TIGL_EXPORT bool HasElsizePAXCrossbeam() const;
            TIGL_EXPORT const double& GetElsizePAXCrossbeam() const;
            TIGL_EXPORT void SetElsizePAXCrossbeam(const double& value);
            
            TIGL_EXPORT bool HasElsizeCargoCrossbeam() const;
            TIGL_EXPORT const double& GetElsizeCargoCrossbeam() const;
            TIGL_EXPORT void SetElsizeCargoCrossbeam(const double& value);
            
            TIGL_EXPORT bool HasElsizePAXBeamStruts() const;
            TIGL_EXPORT const double& GetElsizePAXBeamStruts() const;
            TIGL_EXPORT void SetElsizePAXBeamStruts(const double& value);
            
            TIGL_EXPORT bool HasElsizeCargoSupportStruts() const;
            TIGL_EXPORT const double& GetElsizeCargoSupportStruts() const;
            TIGL_EXPORT void SetElsizeCargoSupportStruts(const double& value);
            
            TIGL_EXPORT bool HasElsizeLongFloorBeams() const;
            TIGL_EXPORT const double& GetElsizeLongFloorBeams() const;
            TIGL_EXPORT void SetElsizeLongFloorBeams(const double& value);
            
            TIGL_EXPORT bool HasElsizeFloorPanels() const;
            TIGL_EXPORT const double& GetElsizeFloorPanels() const;
            TIGL_EXPORT void SetElsizeFloorPanels(const double& value);
            
            TIGL_EXPORT bool HasElsizePressureBulkheads() const;
            TIGL_EXPORT const double& GetElsizePressureBulkheads() const;
            TIGL_EXPORT void SetElsizePressureBulkheads(const double& value);
            
            TIGL_EXPORT bool HasElsizeWindows() const;
            TIGL_EXPORT const double& GetElsizeWindows() const;
            TIGL_EXPORT void SetElsizeWindows(const double& value);
            
            TIGL_EXPORT bool HasElsizePaxDoors() const;
            TIGL_EXPORT const double& GetElsizePaxDoors() const;
            TIGL_EXPORT void SetElsizePaxDoors(const double& value);
            
            TIGL_EXPORT bool HasElsizeCargoDoors() const;
            TIGL_EXPORT const double& GetElsizeCargoDoors() const;
            TIGL_EXPORT void SetElsizeCargoDoors(const double& value);
            
            TIGL_EXPORT bool HasElsizeCenterFuselageArea() const;
            TIGL_EXPORT const double& GetElsizeCenterFuselageArea() const;
            TIGL_EXPORT void SetElsizeCenterFuselageArea(const double& value);
            
            TIGL_EXPORT bool HasElsizeIntercostals() const;
            TIGL_EXPORT const double& GetElsizeIntercostals() const;
            TIGL_EXPORT void SetElsizeIntercostals(const double& value);
            
        protected:
            std::string                  m_uID;
            boost::optional<std::string> m_name;
            boost::optional<double>      m_elsizeSkin;
            boost::optional<int>         m_numberOfTransitionAreas;
            boost::optional<double>      m_elsizeStringer;
            boost::optional<double>      m_elsizeFrame;
            boost::optional<double>      m_elsizePAXCrossbeam;
            boost::optional<double>      m_elsizeCargoCrossbeam;
            boost::optional<double>      m_elsizePAXBeamStruts;
            boost::optional<double>      m_elsizeCargoSupportStruts;
            boost::optional<double>      m_elsizeLongFloorBeams;
            boost::optional<double>      m_elsizeFloorPanels;
            boost::optional<double>      m_elsizePressureBulkheads;
            boost::optional<double>      m_elsizeWindows;
            boost::optional<double>      m_elsizePaxDoors;
            boost::optional<double>      m_elsizeCargoDoors;
            boost::optional<double>      m_elsizeCenterFuselageArea;
            boost::optional<double>      m_elsizeIntercostals;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCrashElsizeDef(const CPACSCrashElsizeDef&) = delete;
            CPACSCrashElsizeDef& operator=(const CPACSCrashElsizeDef&) = delete;
            
            CPACSCrashElsizeDef(CPACSCrashElsizeDef&&) = delete;
            CPACSCrashElsizeDef& operator=(CPACSCrashElsizeDef&&) = delete;
            #else
            CPACSCrashElsizeDef(const CPACSCrashElsizeDef&);
            CPACSCrashElsizeDef& operator=(const CPACSCrashElsizeDef&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSCrashElsizeDef = generated::CPACSCrashElsizeDef;
    #else
    typedef generated::CPACSCrashElsizeDef CCPACSCrashElsizeDef;
    #endif
}
