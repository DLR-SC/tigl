// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAeroPerformanceMap.h"

namespace tigl
{
    namespace generated
    {
        CPACSAeroPerformanceMap::CPACSAeroPerformanceMap(){}
        CPACSAeroPerformanceMap::~CPACSAeroPerformanceMap() {}
        
        void CPACSAeroPerformanceMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element machNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
                m_machNumber.ReadCPACS(tixiHandle, xpath + "/machNumber");
            }
            else {
                LOG(ERROR) << "Required element machNumber is missing";
            }
            
            // read element reynoldsNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reynoldsNumber")) {
                m_reynoldsNumber.ReadCPACS(tixiHandle, xpath + "/reynoldsNumber");
            }
            else {
                LOG(ERROR) << "Required element reynoldsNumber is missing";
            }
            
            // read element angleOfYaw
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfYaw")) {
                m_angleOfYaw.ReadCPACS(tixiHandle, xpath + "/angleOfYaw");
            }
            else {
                LOG(ERROR) << "Required element angleOfYaw is missing";
            }
            
            // read element angleOfAttack
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
                m_angleOfAttack.ReadCPACS(tixiHandle, xpath + "/angleOfAttack");
            }
            else {
                LOG(ERROR) << "Required element angleOfAttack is missing";
            }
            
            // read element cfx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfx")) {
                m_cfx = boost::in_place();
                try {
                    m_cfx->ReadCPACS(tixiHandle, xpath + "/cfx");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cfx at xpath << " << xpath << ": " << e.what();
                    m_cfx = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cfx at xpath << " << xpath << ": " << e.getError();
                    m_cfx = boost::none;
                }
            }
            
            // read element cfy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfy")) {
                m_cfy = boost::in_place();
                try {
                    m_cfy->ReadCPACS(tixiHandle, xpath + "/cfy");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cfy at xpath << " << xpath << ": " << e.what();
                    m_cfy = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cfy at xpath << " << xpath << ": " << e.getError();
                    m_cfy = boost::none;
                }
            }
            
            // read element cfz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cfz")) {
                m_cfz = boost::in_place();
                try {
                    m_cfz->ReadCPACS(tixiHandle, xpath + "/cfz");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cfz at xpath << " << xpath << ": " << e.what();
                    m_cfz = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cfz at xpath << " << xpath << ": " << e.getError();
                    m_cfz = boost::none;
                }
            }
            
            // read element cmx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmx")) {
                m_cmx = boost::in_place();
                try {
                    m_cmx->ReadCPACS(tixiHandle, xpath + "/cmx");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cmx at xpath << " << xpath << ": " << e.what();
                    m_cmx = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cmx at xpath << " << xpath << ": " << e.getError();
                    m_cmx = boost::none;
                }
            }
            
            // read element cmy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmy")) {
                m_cmy = boost::in_place();
                try {
                    m_cmy->ReadCPACS(tixiHandle, xpath + "/cmy");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cmy at xpath << " << xpath << ": " << e.what();
                    m_cmy = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cmy at xpath << " << xpath << ": " << e.getError();
                    m_cmy = boost::none;
                }
            }
            
            // read element cmz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cmz")) {
                m_cmz = boost::in_place();
                try {
                    m_cmz->ReadCPACS(tixiHandle, xpath + "/cmz");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cmz at xpath << " << xpath << ": " << e.what();
                    m_cmz = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cmz at xpath << " << xpath << ": " << e.getError();
                    m_cmz = boost::none;
                }
            }
            
            // read element dampingDerivatives
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dampingDerivatives")) {
                m_dampingDerivatives = boost::in_place();
                try {
                    m_dampingDerivatives->ReadCPACS(tixiHandle, xpath + "/dampingDerivatives");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dampingDerivatives at xpath << " << xpath << ": " << e.what();
                    m_dampingDerivatives = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dampingDerivatives at xpath << " << xpath << ": " << e.getError();
                    m_dampingDerivatives = boost::none;
                }
            }
            
            // read element controlSurfaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaces")) {
                m_controlSurfaces = boost::in_place();
                try {
                    m_controlSurfaces->ReadCPACS(tixiHandle, xpath + "/controlSurfaces");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.what();
                    m_controlSurfaces = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfaces = boost::none;
                }
            }
            
            // read element landingGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGears")) {
                m_landingGears = boost::in_place();
                try {
                    m_landingGears->ReadCPACS(tixiHandle, xpath + "/landingGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGears at xpath << " << xpath << ": " << e.what();
                    m_landingGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGears at xpath << " << xpath << ": " << e.getError();
                    m_landingGears = boost::none;
                }
            }
            
        }
        
        void CPACSAeroPerformanceMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element machNumber
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/machNumber");
            m_machNumber.WriteCPACS(tixiHandle, xpath + "/machNumber");
            
            // write element reynoldsNumber
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reynoldsNumber");
            m_reynoldsNumber.WriteCPACS(tixiHandle, xpath + "/reynoldsNumber");
            
            // write element angleOfYaw
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfYaw");
            m_angleOfYaw.WriteCPACS(tixiHandle, xpath + "/angleOfYaw");
            
            // write element angleOfAttack
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfAttack");
            m_angleOfAttack.WriteCPACS(tixiHandle, xpath + "/angleOfAttack");
            
            // write element cfx
            if (m_cfx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfx");
                m_cfx->WriteCPACS(tixiHandle, xpath + "/cfx");
            }
            
            // write element cfy
            if (m_cfy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfy");
                m_cfy->WriteCPACS(tixiHandle, xpath + "/cfy");
            }
            
            // write element cfz
            if (m_cfz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cfz");
                m_cfz->WriteCPACS(tixiHandle, xpath + "/cfz");
            }
            
            // write element cmx
            if (m_cmx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmx");
                m_cmx->WriteCPACS(tixiHandle, xpath + "/cmx");
            }
            
            // write element cmy
            if (m_cmy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmy");
                m_cmy->WriteCPACS(tixiHandle, xpath + "/cmy");
            }
            
            // write element cmz
            if (m_cmz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cmz");
                m_cmz->WriteCPACS(tixiHandle, xpath + "/cmz");
            }
            
            // write element dampingDerivatives
            if (m_dampingDerivatives) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dampingDerivatives");
                m_dampingDerivatives->WriteCPACS(tixiHandle, xpath + "/dampingDerivatives");
            }
            
            // write element controlSurfaces
            if (m_controlSurfaces) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaces");
                m_controlSurfaces->WriteCPACS(tixiHandle, xpath + "/controlSurfaces");
            }
            
            // write element landingGears
            if (m_landingGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGears");
                m_landingGears->WriteCPACS(tixiHandle, xpath + "/landingGears");
            }
            
        }
        
        const CCPACSStringVector& CPACSAeroPerformanceMap::GetMachNumber() const
        {
            return m_machNumber;
        }
        
        CCPACSStringVector& CPACSAeroPerformanceMap::GetMachNumber()
        {
            return m_machNumber;
        }
        
        const CCPACSStringVector& CPACSAeroPerformanceMap::GetReynoldsNumber() const
        {
            return m_reynoldsNumber;
        }
        
        CCPACSStringVector& CPACSAeroPerformanceMap::GetReynoldsNumber()
        {
            return m_reynoldsNumber;
        }
        
        const CCPACSStringVector& CPACSAeroPerformanceMap::GetAngleOfYaw() const
        {
            return m_angleOfYaw;
        }
        
        CCPACSStringVector& CPACSAeroPerformanceMap::GetAngleOfYaw()
        {
            return m_angleOfYaw;
        }
        
        const CCPACSStringVector& CPACSAeroPerformanceMap::GetAngleOfAttack() const
        {
            return m_angleOfAttack;
        }
        
        CCPACSStringVector& CPACSAeroPerformanceMap::GetAngleOfAttack()
        {
            return m_angleOfAttack;
        }
        
        bool CPACSAeroPerformanceMap::HasCfx() const
        {
            return static_cast<bool>(m_cfx);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfx() const
        {
            return *m_cfx;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfx()
        {
            return *m_cfx;
        }
        
        bool CPACSAeroPerformanceMap::HasCfy() const
        {
            return static_cast<bool>(m_cfy);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfy() const
        {
            return *m_cfy;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfy()
        {
            return *m_cfy;
        }
        
        bool CPACSAeroPerformanceMap::HasCfz() const
        {
            return static_cast<bool>(m_cfz);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfz() const
        {
            return *m_cfz;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCfz()
        {
            return *m_cfz;
        }
        
        bool CPACSAeroPerformanceMap::HasCmx() const
        {
            return static_cast<bool>(m_cmx);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmx() const
        {
            return *m_cmx;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmx()
        {
            return *m_cmx;
        }
        
        bool CPACSAeroPerformanceMap::HasCmy() const
        {
            return static_cast<bool>(m_cmy);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmy() const
        {
            return *m_cmy;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmy()
        {
            return *m_cmy;
        }
        
        bool CPACSAeroPerformanceMap::HasCmz() const
        {
            return static_cast<bool>(m_cmz);
        }
        
        const CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmz() const
        {
            return *m_cmz;
        }
        
        CPACSStringArrayBase& CPACSAeroPerformanceMap::GetCmz()
        {
            return *m_cmz;
        }
        
        bool CPACSAeroPerformanceMap::HasDampingDerivatives() const
        {
            return static_cast<bool>(m_dampingDerivatives);
        }
        
        const CPACSDampingDerivativesRates& CPACSAeroPerformanceMap::GetDampingDerivatives() const
        {
            return *m_dampingDerivatives;
        }
        
        CPACSDampingDerivativesRates& CPACSAeroPerformanceMap::GetDampingDerivatives()
        {
            return *m_dampingDerivatives;
        }
        
        bool CPACSAeroPerformanceMap::HasControlSurfaces() const
        {
            return static_cast<bool>(m_controlSurfaces);
        }
        
        const CPACSControlSurfacePerformanceMaps& CPACSAeroPerformanceMap::GetControlSurfaces() const
        {
            return *m_controlSurfaces;
        }
        
        CPACSControlSurfacePerformanceMaps& CPACSAeroPerformanceMap::GetControlSurfaces()
        {
            return *m_controlSurfaces;
        }
        
        bool CPACSAeroPerformanceMap::HasLandingGears() const
        {
            return static_cast<bool>(m_landingGears);
        }
        
        const CPACSAeroLandingGears& CPACSAeroPerformanceMap::GetLandingGears() const
        {
            return *m_landingGears;
        }
        
        CPACSAeroLandingGears& CPACSAeroPerformanceMap::GetLandingGears()
        {
            return *m_landingGears;
        }
        
    }
}
