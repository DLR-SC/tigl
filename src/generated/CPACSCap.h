// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <CCPACSMaterialDefinition.h>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingRibCrossSection;

namespace generated
{
    class CPACSSparCell;
    class CPACSSparCrossSection;
    class CPACSStructuralWallElement;
    class CPACSWingRibCell;

    // This class is used in:
    // CPACSSparCell
    // CPACSSparCrossSection
    // CPACSStructuralWallElement
    // CPACSWingRibCell
    // CPACSWingRibCrossSection

    // generated from /xsd:schema/xsd:complexType[113]
    /// @brief capType
    /// 
    /// SparCap type, containing the cross section area of the
    /// spar cap and the material properties.
    /// Pleas find below a picture where all spar cross
    /// section parameters as well as the orientation refereneces for
    /// the material definition can be found:
    /// @see spars2
    /// 
    class CPACSCap
    {
    public:
        TIGL_EXPORT CPACSCap(CPACSSparCell* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSCap(CPACSSparCrossSection* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSCap(CPACSStructuralWallElement* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSCap(CPACSWingRibCell* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSCap(CCPACSWingRibCrossSection* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSCap();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CPACSSparCell>::value || std::is_same<P, CPACSSparCrossSection>::value || std::is_same<P, CPACSStructuralWallElement>::value || std::is_same<P, CPACSWingRibCell>::value || std::is_same<P, CCPACSWingRibCrossSection>::value, "template argument for P is not a parent class of CPACSCap");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CPACSSparCell>::value || std::is_same<P, CPACSSparCrossSection>::value || std::is_same<P, CPACSStructuralWallElement>::value || std::is_same<P, CPACSWingRibCell>::value || std::is_same<P, CCPACSWingRibCrossSection>::value, "template argument for P is not a parent class of CPACSCap");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetArea() const;
        TIGL_EXPORT virtual void SetArea(const double& value);

        TIGL_EXPORT virtual const CCPACSMaterialDefinition& GetMaterial() const;
        TIGL_EXPORT virtual CCPACSMaterialDefinition& GetMaterial();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// Area of the cap.
        double                   m_area;

        /// Material properties.
        CCPACSMaterialDefinition m_material;

    private:
        CPACSCap(const CPACSCap&) = delete;
        CPACSCap& operator=(const CPACSCap&) = delete;

        CPACSCap(CPACSCap&&) = delete;
        CPACSCap& operator=(CPACSCap&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSCap = generated::CPACSCap;
using CCPACSSparCell = generated::CPACSSparCell;
using CCPACSSparCrossSection = generated::CPACSSparCrossSection;
using CCPACSStructuralWallElement = generated::CPACSStructuralWallElement;
using CCPACSWingRibCell = generated::CPACSWingRibCell;
} // namespace tigl
