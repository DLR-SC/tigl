// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearExtensionFunction.h"
#include "CPACSLandingGearExtensionFunctionStep.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearExtensionFunctionStep::CPACSLandingGearExtensionFunctionStep(CPACSLandingGearExtensionFunction* parent)
        : m_controlParameter(0)
        , m_extensionAngle(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearExtensionFunctionStep::~CPACSLandingGearExtensionFunctionStep()
    {
    }

    const CPACSLandingGearExtensionFunction* CPACSLandingGearExtensionFunctionStep::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearExtensionFunction* CPACSLandingGearExtensionFunctionStep::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearExtensionFunctionStep::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSLandingGearExtensionFunctionStep::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSLandingGearExtensionFunctionStep::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element stepType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stepType")) {
            m_stepType = stringToCPACSLandingGearExtensionFunctionStep_stepType(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/stepType"));
        }
        else {
            LOG(ERROR) << "Required element stepType is missing at xpath " << xpath;
        }

        // read element controlParameter
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlParameter")) {
            m_controlParameter = tixi::TixiGetElement<double>(tixiHandle, xpath + "/controlParameter");
        }
        else {
            LOG(ERROR) << "Required element controlParameter is missing at xpath " << xpath;
        }

        // read element extensionAngle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/extensionAngle")) {
            m_extensionAngle = tixi::TixiGetElement<double>(tixiHandle, xpath + "/extensionAngle");
        }
        else {
            LOG(ERROR) << "Required element extensionAngle is missing at xpath " << xpath;
        }

    }

    void CPACSLandingGearExtensionFunctionStep::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element stepType
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stepType");
        tixi::TixiSaveElement(tixiHandle, xpath + "/stepType", CPACSLandingGearExtensionFunctionStep_stepTypeToString(m_stepType));

        // write element controlParameter
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlParameter");
        tixi::TixiSaveElement(tixiHandle, xpath + "/controlParameter", m_controlParameter);

        // write element extensionAngle
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/extensionAngle");
        tixi::TixiSaveElement(tixiHandle, xpath + "/extensionAngle", m_extensionAngle);

    }

    const CPACSLandingGearExtensionFunctionStep_stepType& CPACSLandingGearExtensionFunctionStep::GetStepType() const
    {
        return m_stepType;
    }

    void CPACSLandingGearExtensionFunctionStep::SetStepType(const CPACSLandingGearExtensionFunctionStep_stepType& value)
    {
        m_stepType = value;
    }

    const double& CPACSLandingGearExtensionFunctionStep::GetControlParameter() const
    {
        return m_controlParameter;
    }

    void CPACSLandingGearExtensionFunctionStep::SetControlParameter(const double& value)
    {
        m_controlParameter = value;
    }

    const double& CPACSLandingGearExtensionFunctionStep::GetExtensionAngle() const
    {
        return m_extensionAngle;
    }

    void CPACSLandingGearExtensionFunctionStep::SetExtensionAngle(const double& value)
    {
        m_extensionAngle = value;
    }

} // namespace generated
} // namespace tigl
