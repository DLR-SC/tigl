// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSRecurringCost.h"

namespace tigl
{
    namespace generated
    {
        CPACSRecurringCost::CPACSRecurringCost(){}
        CPACSRecurringCost::~CPACSRecurringCost() {}
        
        void CPACSRecurringCost::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element productionQuantity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/productionQuantity")) {
                m_productionQuantity = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/productionQuantity");
            }
            else {
                LOG(ERROR) << "Required element productionQuantity is missing";
            }
            
            // read element costDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/costDescription")) {
                m_costDescription.ReadCPACS(tixiHandle, xpath + "/costDescription");
            }
            else {
                LOG(ERROR) << "Required element costDescription is missing";
            }
            
            // read element components
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/components")) {
                m_components = boost::in_place();
                try {
                    m_components->ReadCPACS(tixiHandle, xpath + "/components");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read components at xpath << " << xpath << ": " << e.what();
                    m_components = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read components at xpath << " << xpath << ": " << e.getError();
                    m_components = boost::none;
                }
            }
            
            // read element powerUnits
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/powerUnits")) {
                m_powerUnits = boost::in_place();
                try {
                    m_powerUnits->ReadCPACS(tixiHandle, xpath + "/powerUnits");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read powerUnits at xpath << " << xpath << ": " << e.what();
                    m_powerUnits = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read powerUnits at xpath << " << xpath << ": " << e.getError();
                    m_powerUnits = boost::none;
                }
            }
            
            // read element systems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/systems")) {
                m_systems = boost::in_place();
                try {
                    m_systems->ReadCPACS(tixiHandle, xpath + "/systems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read systems at xpath << " << xpath << ": " << e.what();
                    m_systems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read systems at xpath << " << xpath << ": " << e.getError();
                    m_systems = boost::none;
                }
            }
            
            // read element furnishings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/furnishings")) {
                m_furnishings = boost::in_place();
                try {
                    m_furnishings->ReadCPACS(tixiHandle, xpath + "/furnishings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read furnishings at xpath << " << xpath << ": " << e.what();
                    m_furnishings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read furnishings at xpath << " << xpath << ": " << e.getError();
                    m_furnishings = boost::none;
                }
            }
            
            // read element operatorItems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/operatorItems")) {
                m_operatorItems = boost::in_place();
                try {
                    m_operatorItems->ReadCPACS(tixiHandle, xpath + "/operatorItems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read operatorItems at xpath << " << xpath << ": " << e.what();
                    m_operatorItems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read operatorItems at xpath << " << xpath << ": " << e.getError();
                    m_operatorItems = boost::none;
                }
            }
            
            // read element finalAssembly
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/finalAssembly")) {
                m_finalAssembly = boost::in_place();
                try {
                    m_finalAssembly->ReadCPACS(tixiHandle, xpath + "/finalAssembly");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read finalAssembly at xpath << " << xpath << ": " << e.what();
                    m_finalAssembly = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read finalAssembly at xpath << " << xpath << ": " << e.getError();
                    m_finalAssembly = boost::none;
                }
            }
            
        }
        
        void CPACSRecurringCost::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element productionQuantity
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/productionQuantity");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/productionQuantity", m_productionQuantity);
            
            // write element costDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/costDescription");
            m_costDescription.WriteCPACS(tixiHandle, xpath + "/costDescription");
            
            // write element components
            if (m_components) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/components");
                m_components->WriteCPACS(tixiHandle, xpath + "/components");
            }
            
            // write element powerUnits
            if (m_powerUnits) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/powerUnits");
                m_powerUnits->WriteCPACS(tixiHandle, xpath + "/powerUnits");
            }
            
            // write element systems
            if (m_systems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/systems");
                m_systems->WriteCPACS(tixiHandle, xpath + "/systems");
            }
            
            // write element furnishings
            if (m_furnishings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/furnishings");
                m_furnishings->WriteCPACS(tixiHandle, xpath + "/furnishings");
            }
            
            // write element operatorItems
            if (m_operatorItems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/operatorItems");
                m_operatorItems->WriteCPACS(tixiHandle, xpath + "/operatorItems");
            }
            
            // write element finalAssembly
            if (m_finalAssembly) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/finalAssembly");
                m_finalAssembly->WriteCPACS(tixiHandle, xpath + "/finalAssembly");
            }
            
        }
        
        const int& CPACSRecurringCost::GetProductionQuantity() const
        {
            return m_productionQuantity;
        }
        
        void CPACSRecurringCost::SetProductionQuantity(const int& value)
        {
            m_productionQuantity = value;
        }
        
        const CPACSGenericCost& CPACSRecurringCost::GetCostDescription() const
        {
            return m_costDescription;
        }
        
        CPACSGenericCost& CPACSRecurringCost::GetCostDescription()
        {
            return m_costDescription;
        }
        
        bool CPACSRecurringCost::HasComponents() const
        {
            return static_cast<bool>(m_components);
        }
        
        const CPACSCostComponents& CPACSRecurringCost::GetComponents() const
        {
            return *m_components;
        }
        
        CPACSCostComponents& CPACSRecurringCost::GetComponents()
        {
            return *m_components;
        }
        
        bool CPACSRecurringCost::HasPowerUnits() const
        {
            return static_cast<bool>(m_powerUnits);
        }
        
        const CPACSCostPowerUnits& CPACSRecurringCost::GetPowerUnits() const
        {
            return *m_powerUnits;
        }
        
        CPACSCostPowerUnits& CPACSRecurringCost::GetPowerUnits()
        {
            return *m_powerUnits;
        }
        
        bool CPACSRecurringCost::HasSystems() const
        {
            return static_cast<bool>(m_systems);
        }
        
        const CPACSCostSystems& CPACSRecurringCost::GetSystems() const
        {
            return *m_systems;
        }
        
        CPACSCostSystems& CPACSRecurringCost::GetSystems()
        {
            return *m_systems;
        }
        
        bool CPACSRecurringCost::HasFurnishings() const
        {
            return static_cast<bool>(m_furnishings);
        }
        
        const CPACSCostFurnishings& CPACSRecurringCost::GetFurnishings() const
        {
            return *m_furnishings;
        }
        
        CPACSCostFurnishings& CPACSRecurringCost::GetFurnishings()
        {
            return *m_furnishings;
        }
        
        bool CPACSRecurringCost::HasOperatorItems() const
        {
            return static_cast<bool>(m_operatorItems);
        }
        
        const CPACSGenericCost& CPACSRecurringCost::GetOperatorItems() const
        {
            return *m_operatorItems;
        }
        
        CPACSGenericCost& CPACSRecurringCost::GetOperatorItems()
        {
            return *m_operatorItems;
        }
        
        bool CPACSRecurringCost::HasFinalAssembly() const
        {
            return static_cast<bool>(m_finalAssembly);
        }
        
        const CPACSGenericCost& CPACSRecurringCost::GetFinalAssembly() const
        {
            return *m_finalAssembly;
        }
        
        CPACSGenericCost& CPACSRecurringCost::GetFinalAssembly()
        {
            return *m_finalAssembly;
        }
        
    }
}
