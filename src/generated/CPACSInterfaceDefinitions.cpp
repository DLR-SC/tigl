// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSInterfaceDefinitions.h"

namespace tigl
{
    namespace generated
    {
        CPACSInterfaceDefinitions::CPACSInterfaceDefinitions(){}
        CPACSInterfaceDefinitions::~CPACSInterfaceDefinitions() {}
        
        void CPACSInterfaceDefinitions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element automaticInterfaceGeneration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/automaticInterfaceGeneration")) {
                m_automaticInterfaceGeneration = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/automaticInterfaceGeneration");
            }
            
            // read element tiedInterfaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tiedInterfaces")) {
                m_tiedInterfaces = boost::in_place();
                try {
                    m_tiedInterfaces->ReadCPACS(tixiHandle, xpath + "/tiedInterfaces");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read tiedInterfaces at xpath << " << xpath << ": " << e.what();
                    m_tiedInterfaces = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read tiedInterfaces at xpath << " << xpath << ": " << e.getError();
                    m_tiedInterfaces = boost::none;
                }
            }
            
        }
        
        void CPACSInterfaceDefinitions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element automaticInterfaceGeneration
            if (m_automaticInterfaceGeneration) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/automaticInterfaceGeneration");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/automaticInterfaceGeneration", *m_automaticInterfaceGeneration);
            }
            
            // write element tiedInterfaces
            if (m_tiedInterfaces) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tiedInterfaces");
                m_tiedInterfaces->WriteCPACS(tixiHandle, xpath + "/tiedInterfaces");
            }
            
        }
        
        bool CPACSInterfaceDefinitions::HasAutomaticInterfaceGeneration() const
        {
            return static_cast<bool>(m_automaticInterfaceGeneration);
        }
        
        const bool& CPACSInterfaceDefinitions::GetAutomaticInterfaceGeneration() const
        {
            return *m_automaticInterfaceGeneration;
        }
        
        void CPACSInterfaceDefinitions::SetAutomaticInterfaceGeneration(const bool& value)
        {
            m_automaticInterfaceGeneration = value;
        }
        
        bool CPACSInterfaceDefinitions::HasTiedInterfaces() const
        {
            return static_cast<bool>(m_tiedInterfaces);
        }
        
        const CPACSTiedInterfaces& CPACSInterfaceDefinitions::GetTiedInterfaces() const
        {
            return *m_tiedInterfaces;
        }
        
        CPACSTiedInterfaces& CPACSInterfaceDefinitions::GetTiedInterfaces()
        {
            return *m_tiedInterfaces;
        }
        
    }
}
