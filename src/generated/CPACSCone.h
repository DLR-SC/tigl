// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSElementGeometry;

    // This class is used in:
    // CPACSElementGeometry

    /// @brief Cone
    /// 
    /// The component coordinate system of the cone is centered on the center of its geometrically defining variables,
    /// which is half the height and center of the lower and upper circular faces.
    /// The upper radius is optional.
    /// If not specified, it defaults to the lower radius, resulting in a cylinder.
    /// 
    class CPACSCone
    {
    public:
        TIGL_EXPORT CPACSCone(CPACSElementGeometry* parent);

        TIGL_EXPORT virtual ~CPACSCone();

        TIGL_EXPORT CPACSElementGeometry* GetParent();

        TIGL_EXPORT const CPACSElementGeometry* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetLowerRadius() const;
        TIGL_EXPORT virtual void SetLowerRadius(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperRadius() const;
        TIGL_EXPORT virtual void SetUpperRadius(const boost::optional<double>& value);

        TIGL_EXPORT virtual const double& GetHeight() const;
        TIGL_EXPORT virtual void SetHeight(const double& value);

    protected:
        CPACSElementGeometry* m_parent;

        /// Lower radius [m]
        double                  m_lowerRadius;

        /// Upper radius [m] (if not defined: equals 0)
        boost::optional<double> m_upperRadius;

        /// Height [m]
        double                  m_height;

    private:
        CPACSCone(const CPACSCone&) = delete;
        CPACSCone& operator=(const CPACSCone&) = delete;

        CPACSCone(CPACSCone&&) = delete;
        CPACSCone& operator=(CPACSCone&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSCone = generated::CPACSCone;
using CCPACSElementGeometry = generated::CPACSElementGeometry;
} // namespace tigl
