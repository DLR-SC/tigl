// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearStrutAttachment.h"
#include "CPACSWingAttachmentPositioning.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSWingAttachmentPositioning::CPACSWingAttachmentPositioning(CPACSLandingGearStrutAttachment* parent)
        : m_relHeight(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSWingAttachmentPositioning::~CPACSWingAttachmentPositioning()
    {
    }

    const CPACSLandingGearStrutAttachment* CPACSWingAttachmentPositioning::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearStrutAttachment* CPACSWingAttachmentPositioning::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSWingAttachmentPositioning::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSWingAttachmentPositioning::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSWingAttachmentPositioning::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element relHeight
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relHeight")) {
            m_relHeight = tixi::TixiGetElement<double>(tixiHandle, xpath + "/relHeight");
        }
        else {
            LOG(ERROR) << "Required element relHeight is missing at xpath " << xpath;
        }

        // read element eta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta")) {
            m_eta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/eta");
        }

        // read element xsi
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsi")) {
            m_xsi = tixi::TixiGetElement<double>(tixiHandle, xpath + "/xsi");
        }

    }

    void CPACSWingAttachmentPositioning::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element relHeight
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relHeight");
        tixi::TixiSaveElement(tixiHandle, xpath + "/relHeight", m_relHeight);

        // write element eta
        if (m_eta) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
            tixi::TixiSaveElement(tixiHandle, xpath + "/eta", *m_eta);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/eta");
            }
        }

        // write element xsi
        if (m_xsi) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsi");
            tixi::TixiSaveElement(tixiHandle, xpath + "/xsi", *m_xsi);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/xsi")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/xsi");
            }
        }

    }

    const double& CPACSWingAttachmentPositioning::GetRelHeight() const
    {
        return m_relHeight;
    }

    void CPACSWingAttachmentPositioning::SetRelHeight(const double& value)
    {
        m_relHeight = value;
    }

    const boost::optional<double>& CPACSWingAttachmentPositioning::GetEta() const
    {
        return m_eta;
    }

    void CPACSWingAttachmentPositioning::SetEta(const boost::optional<double>& value)
    {
        m_eta = value;
    }

    const boost::optional<double>& CPACSWingAttachmentPositioning::GetXsi() const
    {
        return m_xsi;
    }

    void CPACSWingAttachmentPositioning::SetXsi(const boost::optional<double>& value)
    {
        m_xsi = value;
    }

} // namespace generated
} // namespace tigl
