// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <vector>
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSFuselage;

namespace generated
{
    class CPACSCompartment;

    // This class is used in:
    // CPACSFuselage

    class CPACSCompartments
    {
    public:
        TIGL_EXPORT CPACSCompartments(CCPACSFuselage* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSCompartments();

        TIGL_EXPORT CCPACSFuselage* GetParent();

        TIGL_EXPORT const CCPACSFuselage* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CPACSCompartment>>& GetCompartments() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CPACSCompartment>>& GetCompartments();

        TIGL_EXPORT virtual size_t GetCompartmentCount() const;
        TIGL_EXPORT virtual size_t GetCompartmentIndex(const std::string& UID) const;

        TIGL_EXPORT virtual const CPACSCompartment& GetCompartment(size_t index) const;
        TIGL_EXPORT virtual CPACSCompartment& GetCompartment(size_t index);

        TIGL_EXPORT virtual const CPACSCompartment& GetCompartment(const std::string& UID) const;
        TIGL_EXPORT virtual CPACSCompartment& GetCompartment(const std::string& UID);

        TIGL_EXPORT virtual CPACSCompartment& AddCompartment();
        TIGL_EXPORT virtual void RemoveCompartment(CPACSCompartment& ref);

    protected:
        CCPACSFuselage* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// The compartment defines an enclosed volume within the fuselage. It is defined by a set of border geometries. This could be pressureBulkheads, walls or floors and they are referred by their uIDs. The volume is closed with the fuselage skin. The geometry tool has to check, if the compartment definition gives a closed geometry.
        std::vector<std::unique_ptr<CPACSCompartment>> m_compartments;

    private:
        CPACSCompartments(const CPACSCompartments&) = delete;
        CPACSCompartments& operator=(const CPACSCompartments&) = delete;

        CPACSCompartments(CPACSCompartments&&) = delete;
        CPACSCompartments& operator=(CPACSCompartments&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSCompartments = generated::CPACSCompartments;
using CCPACSCompartment = generated::CPACSCompartment;
} // namespace tigl
