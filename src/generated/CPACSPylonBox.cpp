// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPylonBox.h"

namespace tigl
{
    namespace generated
    {
        CPACSPylonBox::CPACSPylonBox(){}
        CPACSPylonBox::~CPACSPylonBox() {}
        
        void CPACSPylonBox::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element innerSideShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerSideShell")) {
                m_innerSideShell.ReadCPACS(tixiHandle, xpath + "/innerSideShell");
            }
            else {
                LOG(ERROR) << "Required element innerSideShell is missing";
            }
            
            // read element outerSideShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerSideShell")) {
                m_outerSideShell.ReadCPACS(tixiHandle, xpath + "/outerSideShell");
            }
            else {
                LOG(ERROR) << "Required element outerSideShell is missing";
            }
            
            // read element lowerShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lowerShell")) {
                m_lowerShell.ReadCPACS(tixiHandle, xpath + "/lowerShell");
            }
            else {
                LOG(ERROR) << "Required element lowerShell is missing";
            }
            
            // read element upperShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/upperShell")) {
                m_upperShell.ReadCPACS(tixiHandle, xpath + "/upperShell");
            }
            else {
                LOG(ERROR) << "Required element upperShell is missing";
            }
            
            // read element ribsDefinitions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribsDefinitions")) {
                m_ribsDefinitions = boost::in_place();
                try {
                    m_ribsDefinitions->ReadCPACS(tixiHandle, xpath + "/ribsDefinitions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read ribsDefinitions at xpath << " << xpath << ": " << e.what();
                    m_ribsDefinitions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read ribsDefinitions at xpath << " << xpath << ": " << e.getError();
                    m_ribsDefinitions = boost::none;
                }
            }
            
        }
        
        void CPACSPylonBox::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element innerSideShell
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerSideShell");
            m_innerSideShell.WriteCPACS(tixiHandle, xpath + "/innerSideShell");
            
            // write element outerSideShell
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerSideShell");
            m_outerSideShell.WriteCPACS(tixiHandle, xpath + "/outerSideShell");
            
            // write element lowerShell
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerShell");
            m_lowerShell.WriteCPACS(tixiHandle, xpath + "/lowerShell");
            
            // write element upperShell
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperShell");
            m_upperShell.WriteCPACS(tixiHandle, xpath + "/upperShell");
            
            // write element ribsDefinitions
            if (m_ribsDefinitions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribsDefinitions");
                m_ribsDefinitions->WriteCPACS(tixiHandle, xpath + "/ribsDefinitions");
            }
            
        }
        
        const std::string& CPACSPylonBox::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSPylonBox::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSPylonShell& CPACSPylonBox::GetInnerSideShell() const
        {
            return m_innerSideShell;
        }
        
        CPACSPylonShell& CPACSPylonBox::GetInnerSideShell()
        {
            return m_innerSideShell;
        }
        
        const CPACSPylonShell& CPACSPylonBox::GetOuterSideShell() const
        {
            return m_outerSideShell;
        }
        
        CPACSPylonShell& CPACSPylonBox::GetOuterSideShell()
        {
            return m_outerSideShell;
        }
        
        const CPACSPylonShell& CPACSPylonBox::GetLowerShell() const
        {
            return m_lowerShell;
        }
        
        CPACSPylonShell& CPACSPylonBox::GetLowerShell()
        {
            return m_lowerShell;
        }
        
        const CPACSPylonShell& CPACSPylonBox::GetUpperShell() const
        {
            return m_upperShell;
        }
        
        CPACSPylonShell& CPACSPylonBox::GetUpperShell()
        {
            return m_upperShell;
        }
        
        bool CPACSPylonBox::HasRibsDefinitions() const
        {
            return static_cast<bool>(m_ribsDefinitions);
        }
        
        const CPACSPylonRibsDefinitions& CPACSPylonBox::GetRibsDefinitions() const
        {
            return *m_ribsDefinitions;
        }
        
        CPACSPylonRibsDefinitions& CPACSPylonBox::GetRibsDefinitions()
        {
            return *m_ribsDefinitions;
        }
        
    }
}
