// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSInterconnectionStrut.h"

namespace tigl
{
    namespace generated
    {
        CPACSInterconnectionStrut::CPACSInterconnectionStrut(){}
        CPACSInterconnectionStrut::~CPACSInterconnectionStrut() {}
        
        void CPACSInterconnectionStrut::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element toControlSurfaceUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toControlSurfaceUID")) {
                m_toControlSurfaceUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toControlSurfaceUID");
            }
            else {
                LOG(ERROR) << "Required element toControlSurfaceUID is missing";
            }
            
            // read element material
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/material")) {
                m_material.ReadCPACS(tixiHandle, xpath + "/material");
            }
            else {
                LOG(ERROR) << "Required element material is missing";
            }
            
            // read element fromAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromAttachment")) {
                m_fromAttachment.ReadCPACS(tixiHandle, xpath + "/fromAttachment");
            }
            else {
                LOG(ERROR) << "Required element fromAttachment is missing";
            }
            
            // read element toAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toAttachment")) {
                m_toAttachment.ReadCPACS(tixiHandle, xpath + "/toAttachment");
            }
            else {
                LOG(ERROR) << "Required element toAttachment is missing";
            }
            
            // read element freePath
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/freePath")) {
                m_freePath = boost::in_place();
                try {
                    m_freePath->ReadCPACS(tixiHandle, xpath + "/freePath");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read freePath at xpath << " << xpath << ": " << e.what();
                    m_freePath = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read freePath at xpath << " << xpath << ": " << e.getError();
                    m_freePath = boost::none;
                }
            }
            
        }
        
        void CPACSInterconnectionStrut::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element toControlSurfaceUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toControlSurfaceUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toControlSurfaceUID", m_toControlSurfaceUID);
            
            // write element material
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/material");
            m_material.WriteCPACS(tixiHandle, xpath + "/material");
            
            // write element fromAttachment
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromAttachment");
            m_fromAttachment.WriteCPACS(tixiHandle, xpath + "/fromAttachment");
            
            // write element toAttachment
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toAttachment");
            m_toAttachment.WriteCPACS(tixiHandle, xpath + "/toAttachment");
            
            // write element freePath
            if (m_freePath) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/freePath");
                m_freePath->WriteCPACS(tixiHandle, xpath + "/freePath");
            }
            
        }
        
        const std::string& CPACSInterconnectionStrut::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSInterconnectionStrut::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSInterconnectionStrut::GetToControlSurfaceUID() const
        {
            return m_toControlSurfaceUID;
        }
        
        void CPACSInterconnectionStrut::SetToControlSurfaceUID(const std::string& value)
        {
            m_toControlSurfaceUID = value;
        }
        
        const CCPACSMaterial& CPACSInterconnectionStrut::GetMaterial() const
        {
            return m_material;
        }
        
        CCPACSMaterial& CPACSInterconnectionStrut::GetMaterial()
        {
            return m_material;
        }
        
        const CPACSInterConnectionStrutAttachment& CPACSInterconnectionStrut::GetFromAttachment() const
        {
            return m_fromAttachment;
        }
        
        CPACSInterConnectionStrutAttachment& CPACSInterconnectionStrut::GetFromAttachment()
        {
            return m_fromAttachment;
        }
        
        const CPACSInterConnectionStrutAttachment& CPACSInterconnectionStrut::GetToAttachment() const
        {
            return m_toAttachment;
        }
        
        CPACSInterConnectionStrutAttachment& CPACSInterconnectionStrut::GetToAttachment()
        {
            return m_toAttachment;
        }
        
        bool CPACSInterconnectionStrut::HasFreePath() const
        {
            return static_cast<bool>(m_freePath);
        }
        
        const CPACSFreePath& CPACSInterconnectionStrut::GetFreePath() const
        {
            return *m_freePath;
        }
        
        CPACSFreePath& CPACSInterconnectionStrut::GetFreePath()
        {
            return *m_freePath;
        }
        
    }
}
