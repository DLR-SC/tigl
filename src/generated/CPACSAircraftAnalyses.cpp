// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAircraftAnalyses.h"

namespace tigl
{
    namespace generated
    {
        CPACSAircraftAnalyses::CPACSAircraftAnalyses(){}
        CPACSAircraftAnalyses::~CPACSAircraftAnalyses() {}
        
        void CPACSAircraftAnalyses::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element aeroPerformanceMap
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aeroPerformanceMap")) {
                m_aeroPerformanceMap = boost::in_place();
                try {
                    m_aeroPerformanceMap->ReadCPACS(tixiHandle, xpath + "/aeroPerformanceMap");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aeroPerformanceMap at xpath << " << xpath << ": " << e.what();
                    m_aeroPerformanceMap = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aeroPerformanceMap at xpath << " << xpath << ": " << e.getError();
                    m_aeroPerformanceMap = boost::none;
                }
            }
            
            // read element aeroelastics
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aeroelastics")) {
                m_aeroelastics = boost::in_place();
                try {
                    m_aeroelastics->ReadCPACS(tixiHandle, xpath + "/aeroelastics");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read aeroelastics at xpath << " << xpath << ": " << e.what();
                    m_aeroelastics = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read aeroelastics at xpath << " << xpath << ": " << e.getError();
                    m_aeroelastics = boost::none;
                }
            }
            
            // read element dynamicAircraftModel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dynamicAircraftModel")) {
                m_dynamicAircraftModel = boost::in_place();
                try {
                    m_dynamicAircraftModel->ReadCPACS(tixiHandle, xpath + "/dynamicAircraftModel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModel at xpath << " << xpath << ": " << e.what();
                    m_dynamicAircraftModel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModel at xpath << " << xpath << ": " << e.getError();
                    m_dynamicAircraftModel = boost::none;
                }
            }
            
            // read element flightDynamics
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightDynamics")) {
                m_flightDynamics = boost::in_place();
                try {
                    m_flightDynamics->ReadCPACS(tixiHandle, xpath + "/flightDynamics");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightDynamics at xpath << " << xpath << ": " << e.what();
                    m_flightDynamics = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightDynamics at xpath << " << xpath << ": " << e.getError();
                    m_flightDynamics = boost::none;
                }
            }
            
            // read element flyingQualities
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flyingQualities")) {
                m_flyingQualities = boost::in_place();
                try {
                    m_flyingQualities->ReadCPACS(tixiHandle, xpath + "/flyingQualities");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flyingQualities at xpath << " << xpath << ": " << e.what();
                    m_flyingQualities = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flyingQualities at xpath << " << xpath << ": " << e.getError();
                    m_flyingQualities = boost::none;
                }
            }
            
            // read element flightPerformance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightPerformance")) {
                m_flightPerformance = boost::in_place();
                try {
                    m_flightPerformance->ReadCPACS(tixiHandle, xpath + "/flightPerformance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightPerformance at xpath << " << xpath << ": " << e.what();
                    m_flightPerformance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightPerformance at xpath << " << xpath << ": " << e.getError();
                    m_flightPerformance = boost::none;
                }
            }
            
            // read element flightSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightSystems")) {
                m_flightSystems = boost::in_place();
                try {
                    m_flightSystems->ReadCPACS(tixiHandle, xpath + "/flightSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightSystems at xpath << " << xpath << ": " << e.what();
                    m_flightSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightSystems at xpath << " << xpath << ": " << e.getError();
                    m_flightSystems = boost::none;
                }
            }
            
            // read element landingGearPositionSafetyMargins
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearPositionSafetyMargins")) {
                m_landingGearPositionSafetyMargins = boost::in_place();
                try {
                    m_landingGearPositionSafetyMargins->ReadCPACS(tixiHandle, xpath + "/landingGearPositionSafetyMargins");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read landingGearPositionSafetyMargins at xpath << " << xpath << ": " << e.what();
                    m_landingGearPositionSafetyMargins = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read landingGearPositionSafetyMargins at xpath << " << xpath << ": " << e.getError();
                    m_landingGearPositionSafetyMargins = boost::none;
                }
            }
            
            // read element loadAnalysis
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/loadAnalysis")) {
                m_loadAnalysis = boost::in_place();
                try {
                    m_loadAnalysis->ReadCPACS(tixiHandle, xpath + "/loadAnalysis");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read loadAnalysis at xpath << " << xpath << ": " << e.what();
                    m_loadAnalysis = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read loadAnalysis at xpath << " << xpath << ": " << e.getError();
                    m_loadAnalysis = boost::none;
                }
            }
            
            // read element massBreakdown
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massBreakdown")) {
                m_massBreakdown = boost::in_place();
                try {
                    m_massBreakdown->ReadCPACS(tixiHandle, xpath + "/massBreakdown");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read massBreakdown at xpath << " << xpath << ": " << e.what();
                    m_massBreakdown = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read massBreakdown at xpath << " << xpath << ": " << e.getError();
                    m_massBreakdown = boost::none;
                }
            }
            
            // read element monetaryValues
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/monetaryValues")) {
                m_monetaryValues = boost::in_place();
                try {
                    m_monetaryValues->ReadCPACS(tixiHandle, xpath + "/monetaryValues");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read monetaryValues at xpath << " << xpath << ": " << e.what();
                    m_monetaryValues = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read monetaryValues at xpath << " << xpath << ": " << e.getError();
                    m_monetaryValues = boost::none;
                }
            }
            
            // read element noise
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/noise")) {
                m_noise = boost::in_place();
                try {
                    m_noise->ReadCPACS(tixiHandle, xpath + "/noise");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read noise at xpath << " << xpath << ": " << e.what();
                    m_noise = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read noise at xpath << " << xpath << ": " << e.getError();
                    m_noise = boost::none;
                }
            }
            
            // read element trajectories
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trajectories")) {
                m_trajectories = boost::in_place();
                try {
                    m_trajectories->ReadCPACS(tixiHandle, xpath + "/trajectories");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trajectories at xpath << " << xpath << ": " << e.what();
                    m_trajectories = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trajectories at xpath << " << xpath << ": " << e.getError();
                    m_trajectories = boost::none;
                }
            }
            
            // read element weightAndBalance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/weightAndBalance")) {
                m_weightAndBalance = boost::in_place();
                try {
                    m_weightAndBalance->ReadCPACS(tixiHandle, xpath + "/weightAndBalance");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read weightAndBalance at xpath << " << xpath << ": " << e.what();
                    m_weightAndBalance = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read weightAndBalance at xpath << " << xpath << ": " << e.getError();
                    m_weightAndBalance = boost::none;
                }
            }
            
            // read element paxFlow
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxFlow")) {
                m_paxFlow = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/paxFlow");
            }
            
        }
        
        void CPACSAircraftAnalyses::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element aeroPerformanceMap
            if (m_aeroPerformanceMap) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aeroPerformanceMap");
                m_aeroPerformanceMap->WriteCPACS(tixiHandle, xpath + "/aeroPerformanceMap");
            }
            
            // write element aeroelastics
            if (m_aeroelastics) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aeroelastics");
                m_aeroelastics->WriteCPACS(tixiHandle, xpath + "/aeroelastics");
            }
            
            // write element dynamicAircraftModel
            if (m_dynamicAircraftModel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dynamicAircraftModel");
                m_dynamicAircraftModel->WriteCPACS(tixiHandle, xpath + "/dynamicAircraftModel");
            }
            
            // write element flightDynamics
            if (m_flightDynamics) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightDynamics");
                m_flightDynamics->WriteCPACS(tixiHandle, xpath + "/flightDynamics");
            }
            
            // write element flyingQualities
            if (m_flyingQualities) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flyingQualities");
                m_flyingQualities->WriteCPACS(tixiHandle, xpath + "/flyingQualities");
            }
            
            // write element flightPerformance
            if (m_flightPerformance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightPerformance");
                m_flightPerformance->WriteCPACS(tixiHandle, xpath + "/flightPerformance");
            }
            
            // write element flightSystems
            if (m_flightSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightSystems");
                m_flightSystems->WriteCPACS(tixiHandle, xpath + "/flightSystems");
            }
            
            // write element landingGearPositionSafetyMargins
            if (m_landingGearPositionSafetyMargins) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearPositionSafetyMargins");
                m_landingGearPositionSafetyMargins->WriteCPACS(tixiHandle, xpath + "/landingGearPositionSafetyMargins");
            }
            
            // write element loadAnalysis
            if (m_loadAnalysis) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/loadAnalysis");
                m_loadAnalysis->WriteCPACS(tixiHandle, xpath + "/loadAnalysis");
            }
            
            // write element massBreakdown
            if (m_massBreakdown) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massBreakdown");
                m_massBreakdown->WriteCPACS(tixiHandle, xpath + "/massBreakdown");
            }
            
            // write element monetaryValues
            if (m_monetaryValues) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/monetaryValues");
                m_monetaryValues->WriteCPACS(tixiHandle, xpath + "/monetaryValues");
            }
            
            // write element noise
            if (m_noise) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/noise");
                m_noise->WriteCPACS(tixiHandle, xpath + "/noise");
            }
            
            // write element trajectories
            if (m_trajectories) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trajectories");
                m_trajectories->WriteCPACS(tixiHandle, xpath + "/trajectories");
            }
            
            // write element weightAndBalance
            if (m_weightAndBalance) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/weightAndBalance");
                m_weightAndBalance->WriteCPACS(tixiHandle, xpath + "/weightAndBalance");
            }
            
            // write element paxFlow
            if (m_paxFlow) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxFlow");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/paxFlow", *m_paxFlow);
            }
            
        }
        
        bool CPACSAircraftAnalyses::HasAeroPerformanceMap() const
        {
            return static_cast<bool>(m_aeroPerformanceMap);
        }
        
        const CPACSAeroPerformanceMap& CPACSAircraftAnalyses::GetAeroPerformanceMap() const
        {
            return *m_aeroPerformanceMap;
        }
        
        CPACSAeroPerformanceMap& CPACSAircraftAnalyses::GetAeroPerformanceMap()
        {
            return *m_aeroPerformanceMap;
        }
        
        bool CPACSAircraftAnalyses::HasAeroelastics() const
        {
            return static_cast<bool>(m_aeroelastics);
        }
        
        const CPACSAeroelastics& CPACSAircraftAnalyses::GetAeroelastics() const
        {
            return *m_aeroelastics;
        }
        
        CPACSAeroelastics& CPACSAircraftAnalyses::GetAeroelastics()
        {
            return *m_aeroelastics;
        }
        
        bool CPACSAircraftAnalyses::HasDynamicAircraftModel() const
        {
            return static_cast<bool>(m_dynamicAircraftModel);
        }
        
        const CPACSDynamicAircraftModelAnalysis& CPACSAircraftAnalyses::GetDynamicAircraftModel() const
        {
            return *m_dynamicAircraftModel;
        }
        
        CPACSDynamicAircraftModelAnalysis& CPACSAircraftAnalyses::GetDynamicAircraftModel()
        {
            return *m_dynamicAircraftModel;
        }
        
        bool CPACSAircraftAnalyses::HasFlightDynamics() const
        {
            return static_cast<bool>(m_flightDynamics);
        }
        
        const CPACSFlightDynamicsAnalysis& CPACSAircraftAnalyses::GetFlightDynamics() const
        {
            return *m_flightDynamics;
        }
        
        CPACSFlightDynamicsAnalysis& CPACSAircraftAnalyses::GetFlightDynamics()
        {
            return *m_flightDynamics;
        }
        
        bool CPACSAircraftAnalyses::HasFlyingQualities() const
        {
            return static_cast<bool>(m_flyingQualities);
        }
        
        const CPACSFlyingQualities& CPACSAircraftAnalyses::GetFlyingQualities() const
        {
            return *m_flyingQualities;
        }
        
        CPACSFlyingQualities& CPACSAircraftAnalyses::GetFlyingQualities()
        {
            return *m_flyingQualities;
        }
        
        bool CPACSAircraftAnalyses::HasFlightPerformance() const
        {
            return static_cast<bool>(m_flightPerformance);
        }
        
        const CPACSFlightPerformance& CPACSAircraftAnalyses::GetFlightPerformance() const
        {
            return *m_flightPerformance;
        }
        
        CPACSFlightPerformance& CPACSAircraftAnalyses::GetFlightPerformance()
        {
            return *m_flightPerformance;
        }
        
        bool CPACSAircraftAnalyses::HasFlightSystems() const
        {
            return static_cast<bool>(m_flightSystems);
        }
        
        const CPACSFlightSystems& CPACSAircraftAnalyses::GetFlightSystems() const
        {
            return *m_flightSystems;
        }
        
        CPACSFlightSystems& CPACSAircraftAnalyses::GetFlightSystems()
        {
            return *m_flightSystems;
        }
        
        bool CPACSAircraftAnalyses::HasLandingGearPositionSafetyMargins() const
        {
            return static_cast<bool>(m_landingGearPositionSafetyMargins);
        }
        
        const CPACSLandingGearPositionSafetyMargins& CPACSAircraftAnalyses::GetLandingGearPositionSafetyMargins() const
        {
            return *m_landingGearPositionSafetyMargins;
        }
        
        CPACSLandingGearPositionSafetyMargins& CPACSAircraftAnalyses::GetLandingGearPositionSafetyMargins()
        {
            return *m_landingGearPositionSafetyMargins;
        }
        
        bool CPACSAircraftAnalyses::HasLoadAnalysis() const
        {
            return static_cast<bool>(m_loadAnalysis);
        }
        
        const CPACSLoadAnalysis& CPACSAircraftAnalyses::GetLoadAnalysis() const
        {
            return *m_loadAnalysis;
        }
        
        CPACSLoadAnalysis& CPACSAircraftAnalyses::GetLoadAnalysis()
        {
            return *m_loadAnalysis;
        }
        
        bool CPACSAircraftAnalyses::HasMassBreakdown() const
        {
            return static_cast<bool>(m_massBreakdown);
        }
        
        const CPACSMassBreakdown& CPACSAircraftAnalyses::GetMassBreakdown() const
        {
            return *m_massBreakdown;
        }
        
        CPACSMassBreakdown& CPACSAircraftAnalyses::GetMassBreakdown()
        {
            return *m_massBreakdown;
        }
        
        bool CPACSAircraftAnalyses::HasMonetaryValues() const
        {
            return static_cast<bool>(m_monetaryValues);
        }
        
        const CPACSMonetaryValuesAnalysis& CPACSAircraftAnalyses::GetMonetaryValues() const
        {
            return *m_monetaryValues;
        }
        
        CPACSMonetaryValuesAnalysis& CPACSAircraftAnalyses::GetMonetaryValues()
        {
            return *m_monetaryValues;
        }
        
        bool CPACSAircraftAnalyses::HasNoise() const
        {
            return static_cast<bool>(m_noise);
        }
        
        const CPACSNoiseAnalysis& CPACSAircraftAnalyses::GetNoise() const
        {
            return *m_noise;
        }
        
        CPACSNoiseAnalysis& CPACSAircraftAnalyses::GetNoise()
        {
            return *m_noise;
        }
        
        bool CPACSAircraftAnalyses::HasTrajectories() const
        {
            return static_cast<bool>(m_trajectories);
        }
        
        const CPACSTrajectories& CPACSAircraftAnalyses::GetTrajectories() const
        {
            return *m_trajectories;
        }
        
        CPACSTrajectories& CPACSAircraftAnalyses::GetTrajectories()
        {
            return *m_trajectories;
        }
        
        bool CPACSAircraftAnalyses::HasWeightAndBalance() const
        {
            return static_cast<bool>(m_weightAndBalance);
        }
        
        const CPACSWeightAndBalance& CPACSAircraftAnalyses::GetWeightAndBalance() const
        {
            return *m_weightAndBalance;
        }
        
        CPACSWeightAndBalance& CPACSAircraftAnalyses::GetWeightAndBalance()
        {
            return *m_weightAndBalance;
        }
        
        bool CPACSAircraftAnalyses::HasPaxFlow() const
        {
            return static_cast<bool>(m_paxFlow);
        }
        
        const std::string& CPACSAircraftAnalyses::GetPaxFlow() const
        {
            return *m_paxFlow;
        }
        
        void CPACSAircraftAnalyses::SetPaxFlow(const std::string& value)
        {
            m_paxFlow = value;
        }
        
    }
}
