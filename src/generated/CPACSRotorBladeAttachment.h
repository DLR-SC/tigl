// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSRotorHinges.h>
#include <CCPACSStringVector.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSRotorBladeAttachments;

namespace generated
{
    // This class is used in:
    // CPACSRotorBladeAttachments

    // generated from /xsd:schema/xsd:complexType[779]
    /// @brief rotorBladeAttachmentType
    /// 
    /// RotorBladeAttachment type, defining the elements used
    /// to attach one or more rotor blades to the rotor head.
    /// 
    class CPACSRotorBladeAttachment : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSRotorBladeAttachment(CCPACSRotorBladeAttachments* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSRotorBladeAttachment();

        TIGL_EXPORT CCPACSRotorBladeAttachments* GetParent();

        TIGL_EXPORT const CCPACSRotorBladeAttachments* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
        TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSStringVector>& GetAzimuthAngles_choice1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSStringVector>& GetAzimuthAngles_choice1();

        TIGL_EXPORT virtual const boost::optional<int>& GetNumberOfBlades_choice2() const;
        TIGL_EXPORT virtual void SetNumberOfBlades_choice2(const boost::optional<int>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSRotorHinges>& GetHinges() const;
        TIGL_EXPORT virtual boost::optional<CCPACSRotorHinges>& GetHinges();

        TIGL_EXPORT virtual const std::string& GetRotorBladeUID() const;
        TIGL_EXPORT virtual void SetRotorBladeUID(const std::string& value);

        TIGL_EXPORT virtual CCPACSStringVector& GetAzimuthAngles_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAzimuthAngles_choice1();

        TIGL_EXPORT virtual CCPACSRotorHinges& GetHinges(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveHinges();

    protected:
        CCPACSRotorBladeAttachments* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                         m_uID;

        /// Name of the blade attachment.
        boost::optional<std::string>        m_name;

        /// Description of the blade attachment.
        boost::optional<std::string>        m_description;

        /// The azimuthAngles element is used to specify
        /// a list of discrete azimuth angles (in deg) at which instances
        /// of attached blades are to be created. The number of blades will
        /// equal to the number of elements of the vector. E.g.
        /// <azimuthAngles>0;90;180;270</azimuthAngles> for a
        /// four blade rotor with equal equiangularly distributed blades.
        /// The transformation of the respective rotor blade corresponds to
        /// a rotation by azimuthAngle around the z axis of the rotor
        /// coordinate system in mathematically positive sense of rotation.
        boost::optional<CCPACSStringVector> m_azimuthAngles_choice1;

        /// If only the number of blades is specified,
        /// the attached blades will be distributed equiangularly and the
        /// first blade will be attached at azimuth angle 0. (Formula:
        /// azimuthAngle[i] = i*360deg/numberOfBlades,
        /// i=0..numberOfBlades-1)
        boost::optional<int>                m_numberOfBlades_choice2;

        /// Definition of all hinges used to attach the
        /// rotor blade.
        boost::optional<CCPACSRotorHinges>  m_hinges;

        /// UID of the rotorBlade which should be attached
        /// to the rotor hub.
        std::string                         m_rotorBladeUID;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSRotorBladeAttachment(const CPACSRotorBladeAttachment&) = delete;
        CPACSRotorBladeAttachment& operator=(const CPACSRotorBladeAttachment&) = delete;

        CPACSRotorBladeAttachment(CPACSRotorBladeAttachment&&) = delete;
        CPACSRotorBladeAttachment& operator=(CPACSRotorBladeAttachment&&) = delete;
    };
} // namespace generated

// CPACSRotorBladeAttachment is customized, use type CCPACSRotorBladeAttachment directly
} // namespace tigl
