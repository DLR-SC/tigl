// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMMoveableTrailingEdge.h"

namespace tigl
{
    namespace generated
    {
        CPACSMMoveableTrailingEdge::CPACSMMoveableTrailingEdge(){}
        CPACSMMoveableTrailingEdge::~CPACSMMoveableTrailingEdge() {}
        
        void CPACSMMoveableTrailingEdge::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mSpoilers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mSpoilers")) {
                m_mSpoilers = boost::in_place();
                try {
                    m_mSpoilers->ReadCPACS(tixiHandle, xpath + "/mSpoilers");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mSpoilers at xpath << " << xpath << ": " << e.what();
                    m_mSpoilers = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mSpoilers at xpath << " << xpath << ": " << e.getError();
                    m_mSpoilers = boost::none;
                }
            }
            
            // read element mTrailingEdgeDevices
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mTrailingEdgeDevices")) {
                m_mTrailingEdgeDevices = boost::in_place();
                try {
                    m_mTrailingEdgeDevices->ReadCPACS(tixiHandle, xpath + "/mTrailingEdgeDevices");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mTrailingEdgeDevices at xpath << " << xpath << ": " << e.what();
                    m_mTrailingEdgeDevices = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mTrailingEdgeDevices at xpath << " << xpath << ": " << e.getError();
                    m_mTrailingEdgeDevices = boost::none;
                }
            }
            
        }
        
        void CPACSMMoveableTrailingEdge::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mSpoilers
            if (m_mSpoilers) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mSpoilers");
                m_mSpoilers->WriteCPACS(tixiHandle, xpath + "/mSpoilers");
            }
            
            // write element mTrailingEdgeDevices
            if (m_mTrailingEdgeDevices) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mTrailingEdgeDevices");
                m_mTrailingEdgeDevices->WriteCPACS(tixiHandle, xpath + "/mTrailingEdgeDevices");
            }
            
        }
        
        const CPACSGenericMass& CPACSMMoveableTrailingEdge::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMMoveableTrailingEdge::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMMoveableTrailingEdge::HasMSpoilers() const
        {
            return static_cast<bool>(m_mSpoilers);
        }
        
        const CPACSMSpoilers& CPACSMMoveableTrailingEdge::GetMSpoilers() const
        {
            return *m_mSpoilers;
        }
        
        CPACSMSpoilers& CPACSMMoveableTrailingEdge::GetMSpoilers()
        {
            return *m_mSpoilers;
        }
        
        bool CPACSMMoveableTrailingEdge::HasMTrailingEdgeDevices() const
        {
            return static_cast<bool>(m_mTrailingEdgeDevices);
        }
        
        const CPACSMTrailingEdgeDevices& CPACSMMoveableTrailingEdge::GetMTrailingEdgeDevices() const
        {
            return *m_mTrailingEdgeDevices;
        }
        
        CPACSMTrailingEdgeDevices& CPACSMMoveableTrailingEdge::GetMTrailingEdgeDevices()
        {
            return *m_mTrailingEdgeDevices;
        }
        
    }
}
