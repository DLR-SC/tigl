// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSGenericMass.h"
#include "CPACSMPassengers.h"
#include "CPACSMCarryOns.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSMPayload
        
        // generated from /xsd:schema/xsd:complexType[585]
        class CPACSMPax
        {
        public:
            TIGL_EXPORT CPACSMPax();
            TIGL_EXPORT virtual ~CPACSMPax();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CPACSGenericMass& GetMassDescription() const;
            TIGL_EXPORT CPACSGenericMass& GetMassDescription();
            
            TIGL_EXPORT bool HasMPassengers() const;
            TIGL_EXPORT const CPACSMPassengers& GetMPassengers() const;
            TIGL_EXPORT CPACSMPassengers& GetMPassengers();
            
            TIGL_EXPORT bool HasMCarryOns() const;
            TIGL_EXPORT const CPACSMCarryOns& GetMCarryOns() const;
            TIGL_EXPORT CPACSMCarryOns& GetMCarryOns();
            
        protected:
            CPACSGenericMass                  m_massDescription;
            boost::optional<CPACSMPassengers> m_mPassengers;
            boost::optional<CPACSMCarryOns>   m_mCarryOns;
            
        private:
            #ifdef HAVE_CPP11
            CPACSMPax(const CPACSMPax&) = delete;
            CPACSMPax& operator=(const CPACSMPax&) = delete;
            
            CPACSMPax(CPACSMPax&&) = delete;
            CPACSMPax& operator=(CPACSMPax&&) = delete;
            #else
            CPACSMPax(const CPACSMPax&);
            CPACSMPax& operator=(const CPACSMPax&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSMPax = generated::CPACSMPax;
    #else
    typedef generated::CPACSMPax CCPACSMPax;
    #endif
}
