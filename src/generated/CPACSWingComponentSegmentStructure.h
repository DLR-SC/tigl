// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSWingShell.h>
#include <CCPACSWingShell.h>
#include "CPACSWingIntermediateStructureCells.h"
#include <CCPACSWingRibsDefinitions.h>
#include <CCPACSWingSpars.h>

namespace tigl
{
    class CCPACSWingComponentSegment;
    
    namespace generated
    {
        class CPACSLeadingEdgeDevice;
        class CPACSSpoiler;
        class CPACSTrailingEdgeDevice;
        
        // This class is used in:
        // CPACSComponentSegment
        // CPACSLeadingEdgeDevice
        // CPACSSpoiler
        // CPACSTrailingEdgeDevice
        
        // generated from /xsd:schema/xsd:complexType[895]
        class CPACSWingComponentSegmentStructure
        {
        public:
            TIGL_EXPORT CPACSWingComponentSegmentStructure(CCPACSWingComponentSegment* parent);
            TIGL_EXPORT CPACSWingComponentSegmentStructure(CPACSLeadingEdgeDevice* parent);
            TIGL_EXPORT CPACSWingComponentSegmentStructure(CPACSSpoiler* parent);
            TIGL_EXPORT CPACSWingComponentSegmentStructure(CPACSTrailingEdgeDevice* parent);
            
            TIGL_EXPORT virtual ~CPACSWingComponentSegmentStructure();
            
            template<typename P>
            TIGL_EXPORT bool IsParent() const
            {
                return m_parentType != nullptr && *m_parentType == typeid(P);
            }
            
            template<typename P>
            TIGL_EXPORT P* GetParent() const
            {
                #ifdef HAVE_CPP11
                static_assert(std::is_same<P, CCPACSWingComponentSegment>::value || std::is_same<P, CPACSLeadingEdgeDevice>::value || std::is_same<P, CPACSSpoiler>::value || std::is_same<P, CPACSTrailingEdgeDevice>::value, "template argument for P is not a parent class of CPACSWingComponentSegmentStructure");
                #endif
                if (!IsParent<P>()) {
                    throw CTiglError("bad parent");
                }
                return static_cast<P*>(m_parent);
            }
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CCPACSWingShell& GetUpperShell() const;
            TIGL_EXPORT CCPACSWingShell& GetUpperShell();
            
            TIGL_EXPORT const CCPACSWingShell& GetLowerShell() const;
            TIGL_EXPORT CCPACSWingShell& GetLowerShell();
            
            TIGL_EXPORT bool HasIntermediateStructure() const;
            TIGL_EXPORT const CPACSWingIntermediateStructureCells& GetIntermediateStructure() const;
            TIGL_EXPORT CPACSWingIntermediateStructureCells& GetIntermediateStructure();
            
            TIGL_EXPORT bool HasRibsDefinitions() const;
            TIGL_EXPORT const CCPACSWingRibsDefinitions& GetRibsDefinitions() const;
            TIGL_EXPORT CCPACSWingRibsDefinitions& GetRibsDefinitions();
            
            TIGL_EXPORT bool HasSpars() const;
            TIGL_EXPORT const CCPACSWingSpars& GetSpars() const;
            TIGL_EXPORT CCPACSWingSpars& GetSpars();
            
        protected:
            void* m_parent;
            const std::type_info* m_parentType;
            
            CCPACSWingShell                                      m_upperShell;
            CCPACSWingShell                                      m_lowerShell;
            boost::optional<CPACSWingIntermediateStructureCells> m_intermediateStructure;
            boost::optional<CCPACSWingRibsDefinitions>           m_ribsDefinitions;
            boost::optional<CCPACSWingSpars>                     m_spars;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWingComponentSegmentStructure(const CPACSWingComponentSegmentStructure&) = delete;
            CPACSWingComponentSegmentStructure& operator=(const CPACSWingComponentSegmentStructure&) = delete;
            
            CPACSWingComponentSegmentStructure(CPACSWingComponentSegmentStructure&&) = delete;
            CPACSWingComponentSegmentStructure& operator=(CPACSWingComponentSegmentStructure&&) = delete;
            #else
            CPACSWingComponentSegmentStructure(const CPACSWingComponentSegmentStructure&);
            CPACSWingComponentSegmentStructure& operator=(const CPACSWingComponentSegmentStructure&);
            #endif
        };
    }
    
    // This type is customized, use type CCPACSWingCSStructure
    
    using generated::CPACSLeadingEdgeDevice;
    using generated::CPACSSpoiler;
    using generated::CPACSTrailingEdgeDevice;
}
