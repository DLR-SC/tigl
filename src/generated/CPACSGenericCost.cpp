// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGenericCost.h"

namespace tigl
{
    namespace generated
    {
        CPACSGenericCost::CPACSGenericCost(){}
        CPACSGenericCost::~CPACSGenericCost() {}
        
        void CPACSGenericCost::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element cost
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cost")) {
                m_cost = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cost");
            }
            else {
                LOG(ERROR) << "Required element cost is missing";
            }
            
        }
        
        void CPACSGenericCost::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element cost
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cost");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/cost", m_cost);
            
        }
        
        bool CPACSGenericCost::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSGenericCost::GetName() const
        {
            return *m_name;
        }
        
        void CPACSGenericCost::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSGenericCost::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSGenericCost::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSGenericCost::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const double& CPACSGenericCost::GetCost() const
        {
            return m_cost;
        }
        
        void CPACSGenericCost::SetCost(const double& value)
        {
            m_cost = value;
        }
        
    }
}
