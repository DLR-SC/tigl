// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGlobalBeamProperties.h"

namespace tigl
{
    namespace generated
    {
        CPACSGlobalBeamProperties::CPACSGlobalBeamProperties(){}
        CPACSGlobalBeamProperties::~CPACSGlobalBeamProperties() {}
        
        void CPACSGlobalBeamProperties::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element source
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/source")) {
                m_source = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/source");
            }
            else {
                LOG(ERROR) << "Required element source is missing";
            }
            
            // read element consistancy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/consistancy")) {
                m_consistancy = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/consistancy");
            }
            else {
                LOG(ERROR) << "Required element consistancy is missing";
            }
            
            // read element beamCrossSection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/beamCrossSection")) {
                m_beamCrossSection.ReadCPACS(tixiHandle, xpath + "/beamCrossSection");
            }
            else {
                LOG(ERROR) << "Required element beamCrossSection is missing";
            }
            
            // read element beamCOG
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/beamCOG")) {
                m_beamCOG.ReadCPACS(tixiHandle, xpath + "/beamCOG");
            }
            else {
                LOG(ERROR) << "Required element beamCOG is missing";
            }
            
            // read element beamShearCenter
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/beamShearCenter")) {
                m_beamShearCenter = boost::in_place();
                try {
                    m_beamShearCenter->ReadCPACS(tixiHandle, xpath + "/beamShearCenter");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read beamShearCenter at xpath << " << xpath << ": " << e.what();
                    m_beamShearCenter = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read beamShearCenter at xpath << " << xpath << ": " << e.getError();
                    m_beamShearCenter = boost::none;
                }
            }
            
            // read element beamStiffness
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/beamStiffness")) {
                m_beamStiffness = boost::in_place();
                try {
                    m_beamStiffness->ReadCPACS(tixiHandle, xpath + "/beamStiffness");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read beamStiffness at xpath << " << xpath << ": " << e.what();
                    m_beamStiffness = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read beamStiffness at xpath << " << xpath << ": " << e.getError();
                    m_beamStiffness = boost::none;
                }
            }
            
            // read element beamSpecificMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/beamSpecificMass")) {
                m_beamSpecificMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/beamSpecificMass");
            }
            
        }
        
        void CPACSGlobalBeamProperties::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element source
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/source");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/source", m_source);
            
            // write element consistancy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/consistancy");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/consistancy", m_consistancy);
            
            // write element beamCrossSection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beamCrossSection");
            m_beamCrossSection.WriteCPACS(tixiHandle, xpath + "/beamCrossSection");
            
            // write element beamCOG
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beamCOG");
            m_beamCOG.WriteCPACS(tixiHandle, xpath + "/beamCOG");
            
            // write element beamShearCenter
            if (m_beamShearCenter) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beamShearCenter");
                m_beamShearCenter->WriteCPACS(tixiHandle, xpath + "/beamShearCenter");
            }
            
            // write element beamStiffness
            if (m_beamStiffness) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beamStiffness");
                m_beamStiffness->WriteCPACS(tixiHandle, xpath + "/beamStiffness");
            }
            
            // write element beamSpecificMass
            if (m_beamSpecificMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/beamSpecificMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/beamSpecificMass", *m_beamSpecificMass);
            }
            
        }
        
        bool CPACSGlobalBeamProperties::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSGlobalBeamProperties::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSGlobalBeamProperties::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSGlobalBeamProperties::GetSource() const
        {
            return m_source;
        }
        
        void CPACSGlobalBeamProperties::SetSource(const std::string& value)
        {
            m_source = value;
        }
        
        const bool& CPACSGlobalBeamProperties::GetConsistancy() const
        {
            return m_consistancy;
        }
        
        void CPACSGlobalBeamProperties::SetConsistancy(const bool& value)
        {
            m_consistancy = value;
        }
        
        const CPACSBeamCrossSection& CPACSGlobalBeamProperties::GetBeamCrossSection() const
        {
            return m_beamCrossSection;
        }
        
        CPACSBeamCrossSection& CPACSGlobalBeamProperties::GetBeamCrossSection()
        {
            return m_beamCrossSection;
        }
        
        const CPACSPointXY& CPACSGlobalBeamProperties::GetBeamCOG() const
        {
            return m_beamCOG;
        }
        
        CPACSPointXY& CPACSGlobalBeamProperties::GetBeamCOG()
        {
            return m_beamCOG;
        }
        
        bool CPACSGlobalBeamProperties::HasBeamShearCenter() const
        {
            return static_cast<bool>(m_beamShearCenter);
        }
        
        const CPACSPointXY& CPACSGlobalBeamProperties::GetBeamShearCenter() const
        {
            return *m_beamShearCenter;
        }
        
        CPACSPointXY& CPACSGlobalBeamProperties::GetBeamShearCenter()
        {
            return *m_beamShearCenter;
        }
        
        bool CPACSGlobalBeamProperties::HasBeamStiffness() const
        {
            return static_cast<bool>(m_beamStiffness);
        }
        
        const CPACSBeamStiffness& CPACSGlobalBeamProperties::GetBeamStiffness() const
        {
            return *m_beamStiffness;
        }
        
        CPACSBeamStiffness& CPACSGlobalBeamProperties::GetBeamStiffness()
        {
            return *m_beamStiffness;
        }
        
        bool CPACSGlobalBeamProperties::HasBeamSpecificMass() const
        {
            return static_cast<bool>(m_beamSpecificMass);
        }
        
        const double& CPACSGlobalBeamProperties::GetBeamSpecificMass() const
        {
            return *m_beamSpecificMass;
        }
        
        void CPACSGlobalBeamProperties::SetBeamSpecificMass(const double& value)
        {
            m_beamSpecificMass = value;
        }
        
    }
}
