// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSProfileBasedStructuralElement.h"
#include "CPACSGlobalBeamProperties.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSGlobalBeamProperties::CPACSGlobalBeamProperties(CCPACSProfileBasedStructuralElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_consistancy(0)
        , m_beamCrossSection(this, m_uidMgr)
        , m_beamCOG(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSGlobalBeamProperties::~CPACSGlobalBeamProperties()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_materialUID.empty()) m_uidMgr->TryUnregisterReference(m_materialUID, *this);
        }
    }

    const CCPACSProfileBasedStructuralElement* CPACSGlobalBeamProperties::GetParent() const
    {
        return m_parent;
    }

    CCPACSProfileBasedStructuralElement* CPACSGlobalBeamProperties::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSGlobalBeamProperties::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSGlobalBeamProperties::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSGlobalBeamProperties::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSGlobalBeamProperties::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSGlobalBeamProperties::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element materialUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/materialUID")) {
            m_materialUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/materialUID");
            if (m_materialUID.empty()) {
                LOG(WARNING) << "Required element materialUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_materialUID.empty()) m_uidMgr->RegisterReference(m_materialUID, *this);
        }
        else {
            LOG(ERROR) << "Required element materialUID is missing at xpath " << xpath;
        }

        // read element source
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/source")) {
            m_source = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/source");
            if (m_source.empty()) {
                LOG(WARNING) << "Required element source is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element source is missing at xpath " << xpath;
        }

        // read element consistancy
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/consistancy")) {
            m_consistancy = tixi::TixiGetElement<bool>(tixiHandle, xpath + "/consistancy");
        }
        else {
            LOG(ERROR) << "Required element consistancy is missing at xpath " << xpath;
        }

        // read element beamCrossSection
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamCrossSection")) {
            m_beamCrossSection.ReadCPACS(tixiHandle, xpath + "/beamCrossSection");
        }
        else {
            LOG(ERROR) << "Required element beamCrossSection is missing at xpath " << xpath;
        }

        // read element beamCOG
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamCOG")) {
            m_beamCOG.ReadCPACS(tixiHandle, xpath + "/beamCOG");
        }
        else {
            LOG(ERROR) << "Required element beamCOG is missing at xpath " << xpath;
        }

        // read element beamShearCenter
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamShearCenter")) {
            m_beamShearCenter = boost::in_place(this, m_uidMgr);
            try {
                m_beamShearCenter->ReadCPACS(tixiHandle, xpath + "/beamShearCenter");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read beamShearCenter at xpath " << xpath << ": " << e.what();
                m_beamShearCenter = boost::none;
            }
        }

        // read element beamStiffness
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamStiffness")) {
            m_beamStiffness = boost::in_place(this, m_uidMgr);
            try {
                m_beamStiffness->ReadCPACS(tixiHandle, xpath + "/beamStiffness");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read beamStiffness at xpath " << xpath << ": " << e.what();
                m_beamStiffness = boost::none;
            }
        }

        // read element beamSpecificMass
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamSpecificMass")) {
            m_beamSpecificMass = tixi::TixiGetElement<double>(tixiHandle, xpath + "/beamSpecificMass");
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSGlobalBeamProperties::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "materialUID", "source", "consistancy", "beamCrossSection", "beamCOG", "beamShearCenter", "beamStiffness", "beamSpecificMass" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element materialUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/materialUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/materialUID", m_materialUID);

        // write element source
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/source", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/source", m_source);

        // write element consistancy
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/consistancy", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/consistancy", m_consistancy);

        // write element beamCrossSection
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/beamCrossSection", childElemOrder);
        m_beamCrossSection.WriteCPACS(tixiHandle, xpath + "/beamCrossSection");

        // write element beamCOG
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/beamCOG", childElemOrder);
        m_beamCOG.WriteCPACS(tixiHandle, xpath + "/beamCOG");

        // write element beamShearCenter
        if (m_beamShearCenter) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/beamShearCenter", childElemOrder);
            m_beamShearCenter->WriteCPACS(tixiHandle, xpath + "/beamShearCenter");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamShearCenter")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/beamShearCenter");
            }
        }

        // write element beamStiffness
        if (m_beamStiffness) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/beamStiffness", childElemOrder);
            m_beamStiffness->WriteCPACS(tixiHandle, xpath + "/beamStiffness");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamStiffness")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/beamStiffness");
            }
        }

        // write element beamSpecificMass
        if (m_beamSpecificMass) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/beamSpecificMass", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/beamSpecificMass", *m_beamSpecificMass);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/beamSpecificMass")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/beamSpecificMass");
            }
        }

    }

    const std::string& CPACSGlobalBeamProperties::GetUID() const
    {
        return m_uID;
    }

    void CPACSGlobalBeamProperties::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSGlobalBeamProperties::GetMaterialUID() const
    {
        return m_materialUID;
    }

    void CPACSGlobalBeamProperties::SetMaterialUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_materialUID.empty()) m_uidMgr->TryUnregisterReference(m_materialUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_materialUID = value;
    }

    const std::string& CPACSGlobalBeamProperties::GetSource() const
    {
        return m_source;
    }

    void CPACSGlobalBeamProperties::SetSource(const std::string& value)
    {
        m_source = value;
    }

    const bool& CPACSGlobalBeamProperties::GetConsistancy() const
    {
        return m_consistancy;
    }

    void CPACSGlobalBeamProperties::SetConsistancy(const bool& value)
    {
        m_consistancy = value;
    }

    const CPACSBeamCrossSection& CPACSGlobalBeamProperties::GetBeamCrossSection() const
    {
        return m_beamCrossSection;
    }

    CPACSBeamCrossSection& CPACSGlobalBeamProperties::GetBeamCrossSection()
    {
        return m_beamCrossSection;
    }

    const CCPACSPointXY& CPACSGlobalBeamProperties::GetBeamCOG() const
    {
        return m_beamCOG;
    }

    CCPACSPointXY& CPACSGlobalBeamProperties::GetBeamCOG()
    {
        return m_beamCOG;
    }

    const boost::optional<CCPACSPointXY>& CPACSGlobalBeamProperties::GetBeamShearCenter() const
    {
        return m_beamShearCenter;
    }

    boost::optional<CCPACSPointXY>& CPACSGlobalBeamProperties::GetBeamShearCenter()
    {
        return m_beamShearCenter;
    }

    const boost::optional<CPACSBeamStiffness>& CPACSGlobalBeamProperties::GetBeamStiffness() const
    {
        return m_beamStiffness;
    }

    boost::optional<CPACSBeamStiffness>& CPACSGlobalBeamProperties::GetBeamStiffness()
    {
        return m_beamStiffness;
    }

    const boost::optional<double>& CPACSGlobalBeamProperties::GetBeamSpecificMass() const
    {
        return m_beamSpecificMass;
    }

    void CPACSGlobalBeamProperties::SetBeamSpecificMass(const boost::optional<double>& value)
    {
        m_beamSpecificMass = value;
    }

    CCPACSPointXY& CPACSGlobalBeamProperties::GetBeamShearCenter(CreateIfNotExistsTag)
    {
        if (!m_beamShearCenter)
            m_beamShearCenter = boost::in_place(this, m_uidMgr);
        return *m_beamShearCenter;
    }

    void CPACSGlobalBeamProperties::RemoveBeamShearCenter()
    {
        m_beamShearCenter = boost::none;
    }

    CPACSBeamStiffness& CPACSGlobalBeamProperties::GetBeamStiffness(CreateIfNotExistsTag)
    {
        if (!m_beamStiffness)
            m_beamStiffness = boost::in_place(this, m_uidMgr);
        return *m_beamStiffness;
    }

    void CPACSGlobalBeamProperties::RemoveBeamStiffness()
    {
        m_beamStiffness = boost::none;
    }

    const CTiglUIDObject* CPACSGlobalBeamProperties::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSGlobalBeamProperties::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_materialUID == oldUid) {
            m_materialUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
