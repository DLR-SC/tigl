// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSProfileGeometry.h"
#include "CPACSProfiles.h"
#include "CPACSRotorAirfoils.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRotorAirfoils::CPACSRotorAirfoils(CPACSProfiles* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSRotorAirfoils::~CPACSRotorAirfoils()
    {
    }

    const CPACSProfiles* CPACSRotorAirfoils::GetParent() const
    {
        return m_parent;
    }

    CPACSProfiles* CPACSRotorAirfoils::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSRotorAirfoils::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSRotorAirfoils::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSRotorAirfoils::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSRotorAirfoils::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSRotorAirfoils::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element rotorAirfoil
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rotorAirfoil")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/rotorAirfoil", m_rotorAirfoils, 1, tixi::xsdUnbounded, reinterpret_cast<CCPACSRotorProfiles*>(this), m_uidMgr);
        }

    }

    void CPACSRotorAirfoils::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element rotorAirfoil
        tixi::TixiSaveElements(tixiHandle, xpath + "/rotorAirfoil", m_rotorAirfoils);

    }

    const std::vector<std::unique_ptr<CPACSProfileGeometry>>& CPACSRotorAirfoils::GetRotorAirfoils() const
    {
        return m_rotorAirfoils;
    }

    std::vector<std::unique_ptr<CPACSProfileGeometry>>& CPACSRotorAirfoils::GetRotorAirfoils()
    {
        return m_rotorAirfoils;
    }

    size_t CPACSRotorAirfoils::GetRotorAirfoilCount() const
    {
        return m_rotorAirfoils.size();
    }

    size_t CPACSRotorAirfoils::GetRotorAirfoilIndex(const std::string& UID) const
    {
        for (size_t i=0; i < GetRotorAirfoilCount(); i++) {
            const std::string tmpUID(m_rotorAirfoils[i]->GetUID());
            if (tmpUID == UID) {
                return i+1;
            }
        }
    }

    CPACSProfileGeometry& CPACSRotorAirfoils::GetRotorAirfoil(size_t index)
    {
        if (index < 1 || index > GetRotorAirfoilCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSProfileGeometry>>::GetRotorAirfoil", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_rotorAirfoils[index];
    }

    const CPACSProfileGeometry& CPACSRotorAirfoils::GetRotorAirfoil(size_t index) const
    {
        if (index < 1 || index > GetRotorAirfoilCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSProfileGeometry>>::GetRotorAirfoil", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_rotorAirfoils[index];
    }

    CPACSProfileGeometry& CPACSRotorAirfoils::GetRotorAirfoil(const std::string& UID)
    {
        for (auto& elem : m_rotorAirfoils ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSRotorAirfoils::GetRotorAirfoil. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }

    const CPACSProfileGeometry& CPACSRotorAirfoils::GetRotorAirfoil(const std::string& UID) const
    {
        for (auto& elem : m_rotorAirfoils ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSRotorAirfoils::GetRotorAirfoil. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }


    CPACSProfileGeometry& CPACSRotorAirfoils::AddRotorAirfoil()
    {
        m_rotorAirfoils.push_back(make_unique<CPACSProfileGeometry>(reinterpret_cast<CCPACSRotorProfiles*>(this), m_uidMgr));
        return *m_rotorAirfoils.back();
    }

    void CPACSRotorAirfoils::RemoveRotorAirfoil(CPACSProfileGeometry& ref)
    {
        for (std::size_t i = 0; i < m_rotorAirfoils.size(); i++) {
            if (m_rotorAirfoils[i].get() == &ref) {
                m_rotorAirfoils.erase(m_rotorAirfoils.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
