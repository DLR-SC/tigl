// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSEmissivityMap.h"
#include "CPACSMaterial.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSEmissivityMap::CPACSEmissivityMap(CPACSMaterial* parent)
        : m_waveLength(this)
        , m_diffuseEmissivity(this)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSEmissivityMap::~CPACSEmissivityMap()
    {
    }

    const CPACSMaterial* CPACSEmissivityMap::GetParent() const
    {
        return m_parent;
    }

    CPACSMaterial* CPACSEmissivityMap::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSEmissivityMap::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSEmissivityMap::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSEmissivityMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element waveLength
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/waveLength")) {
            m_waveLength.ReadCPACS(tixiHandle, xpath + "/waveLength");
        }
        else {
            LOG(ERROR) << "Required element waveLength is missing at xpath " << xpath;
        }

        // read element diffuseEmissivity
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/diffuseEmissivity")) {
            m_diffuseEmissivity.ReadCPACS(tixiHandle, xpath + "/diffuseEmissivity");
        }
        else {
            LOG(ERROR) << "Required element diffuseEmissivity is missing at xpath " << xpath;
        }

    }

    void CPACSEmissivityMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element waveLength
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/waveLength");
        m_waveLength.WriteCPACS(tixiHandle, xpath + "/waveLength");

        // write element diffuseEmissivity
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/diffuseEmissivity");
        m_diffuseEmissivity.WriteCPACS(tixiHandle, xpath + "/diffuseEmissivity");

    }

    const CCPACSStringVector& CPACSEmissivityMap::GetWaveLength() const
    {
        return m_waveLength;
    }

    CCPACSStringVector& CPACSEmissivityMap::GetWaveLength()
    {
        return m_waveLength;
    }

    const CCPACSStringVector& CPACSEmissivityMap::GetDiffuseEmissivity() const
    {
        return m_diffuseEmissivity;
    }

    CCPACSStringVector& CPACSEmissivityMap::GetDiffuseEmissivity()
    {
        return m_diffuseEmissivity;
    }

} // namespace generated
} // namespace tigl
