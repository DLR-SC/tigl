// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPoint.h>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSMassInertia.h"
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSBattery;
    class CPACSElectricMotor;
    class CPACSGasTurbine;
    class CPACSGearBox;
    class CPACSGenerator;
    class CPACSHeatExchanger;
    class CPACSTurboGenerator;
    class CPACSVehicleElementBase;

    // This class is used in:
    // CPACSBattery
    // CPACSElectricMotor
    // CPACSGasTurbine
    // CPACSGearBox
    // CPACSGenerator
    // CPACSHeatExchanger
    // CPACSTurboGenerator
    // CPACSVehicleElementBase

    /// @brief Mass
    /// 
    /// Description of mass, center of gravity and inertia. Density should only be specified in combination with a valid geometry.
    /// 
    class CPACSElementMass : public CTiglOptUIDObject
    {
    public:
        TIGL_EXPORT CPACSElementMass(CPACSBattery* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSElectricMotor* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSGasTurbine* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSGearBox* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSGenerator* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSHeatExchanger* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSTurboGenerator* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSElementMass(CPACSVehicleElementBase* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSElementMass();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSBattery>::value || std::is_same<P, CPACSElectricMotor>::value || std::is_same<P, CPACSGasTurbine>::value || std::is_same<P, CPACSGearBox>::value || std::is_same<P, CPACSGenerator>::value || std::is_same<P, CPACSHeatExchanger>::value || std::is_same<P, CPACSTurboGenerator>::value || std::is_same<P, CPACSVehicleElementBase>::value, "template argument for P is not a parent class of CPACSElementMass");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSBattery>::value || std::is_same<P, CPACSElectricMotor>::value || std::is_same<P, CPACSGasTurbine>::value || std::is_same<P, CPACSGearBox>::value || std::is_same<P, CPACSGenerator>::value || std::is_same<P, CPACSHeatExchanger>::value || std::is_same<P, CPACSTurboGenerator>::value || std::is_same<P, CPACSVehicleElementBase>::value, "template argument for P is not a parent class of CPACSElementMass");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetDensity_choice1() const;
        TIGL_EXPORT virtual void SetDensity_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetMass_choice2() const;
        TIGL_EXPORT virtual void SetMass_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPoint>& GetLocation() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPoint>& GetLocation();

        TIGL_EXPORT virtual const boost::optional<CPACSMassInertia>& GetMassInertia() const;
        TIGL_EXPORT virtual boost::optional<CPACSMassInertia>& GetMassInertia();

        TIGL_EXPORT virtual CCPACSPoint& GetLocation(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveLocation();

        TIGL_EXPORT virtual CPACSMassInertia& GetMassInertia(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveMassInertia();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        boost::optional<std::string>      m_uID;

        /// Density
        boost::optional<double>           m_density_choice1;

        /// Mass
        boost::optional<double>           m_mass_choice2;

        /// Center of gravity (x,y,z)
        boost::optional<CCPACSPoint>      m_location;

        boost::optional<CPACSMassInertia> m_massInertia;

    private:
        CPACSElementMass(const CPACSElementMass&) = delete;
        CPACSElementMass& operator=(const CPACSElementMass&) = delete;

        CPACSElementMass(CPACSElementMass&&) = delete;
        CPACSElementMass& operator=(CPACSElementMass&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSElementMass = generated::CPACSElementMass;
using CCPACSBattery = generated::CPACSBattery;
using CCPACSElectricMotor = generated::CPACSElectricMotor;
using CCPACSGasTurbine = generated::CPACSGasTurbine;
using CCPACSGearBox = generated::CPACSGearBox;
using CCPACSGenerator = generated::CPACSGenerator;
using CCPACSHeatExchanger = generated::CPACSHeatExchanger;
using CCPACSTurboGenerator = generated::CPACSTurboGenerator;
using CCPACSVehicleElementBase = generated::CPACSVehicleElementBase;
} // namespace tigl
