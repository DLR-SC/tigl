// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSLandingGearControlFunctions.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSLandingGearBase;

    // This class is used in:
    // CPACSLandingGearBase

    /// @brief Landing gear control parameters
    /// 
    /// Parameters of a landing gear control such as extraction or steering.
    /// 
    class CPACSLandingGearControl
    {
    public:
        TIGL_EXPORT CPACSLandingGearControl(CPACSLandingGearBase* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSLandingGearControl();

        TIGL_EXPORT CPACSLandingGearBase* GetParent();

        TIGL_EXPORT const CPACSLandingGearBase* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<double>& GetRetractAngle() const;
        TIGL_EXPORT virtual void SetRetractAngle(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSLandingGearControlFunctions>& GetControlFunctions() const;
        TIGL_EXPORT virtual boost::optional<CPACSLandingGearControlFunctions>& GetControlFunctions();

        TIGL_EXPORT virtual const boost::optional<double>& GetOffset() const;
        TIGL_EXPORT virtual void SetOffset(const boost::optional<double>& value);

        TIGL_EXPORT virtual CPACSLandingGearControlFunctions& GetControlFunctions(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveControlFunctions();

    protected:
        CPACSLandingGearBase* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Retraction angle of the main landing
        /// gear. Equals a rotation around the
        /// global z-axis in degrees. 0 = retraction
        /// to the front; 90 = retraction to the
        /// left; 180 = retraction to the rear; 270
        /// = retraction to the right.
        boost::optional<double>                           m_retractAngle;

        boost::optional<CPACSLandingGearControlFunctions> m_controlFunctions;

        /// Distance of the center of rotation to the top of the main strut
        /// for retracting and extending the landing gear. I.e., a value of
        /// 0 means that the landing gear will rotate around the upper end
        /// of the main strut during retraction. If this value is greater
        /// than 0, the center of rotation is shifted by this value above
        /// the main strut end point (translation along the main strut axis).
        boost::optional<double>                           m_offset;

    private:
        CPACSLandingGearControl(const CPACSLandingGearControl&) = delete;
        CPACSLandingGearControl& operator=(const CPACSLandingGearControl&) = delete;

        CPACSLandingGearControl(CPACSLandingGearControl&&) = delete;
        CPACSLandingGearControl& operator=(CPACSLandingGearControl&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSLandingGearControl = generated::CPACSLandingGearControl;
using CCPACSLandingGearBase = generated::CPACSLandingGearBase;
} // namespace tigl
