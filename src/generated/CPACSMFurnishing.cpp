// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMFurnishing.h"

namespace tigl
{
    namespace generated
    {
        CPACSMFurnishing::CPACSMFurnishing(){}
        CPACSMFurnishing::~CPACSMFurnishing() {}
        
        void CPACSMFurnishing::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mInsulations
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mInsulations")) {
                m_mInsulations = boost::in_place();
                try {
                    m_mInsulations->ReadCPACS(tixiHandle, xpath + "/mInsulations");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mInsulations at xpath << " << xpath << ": " << e.what();
                    m_mInsulations = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mInsulations at xpath << " << xpath << ": " << e.getError();
                    m_mInsulations = boost::none;
                }
            }
            
            // read element mLinings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mLinings")) {
                m_mLinings = boost::in_place();
                try {
                    m_mLinings->ReadCPACS(tixiHandle, xpath + "/mLinings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mLinings at xpath << " << xpath << ": " << e.what();
                    m_mLinings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mLinings at xpath << " << xpath << ": " << e.getError();
                    m_mLinings = boost::none;
                }
            }
            
            // read element mCrewSeats
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCrewSeats")) {
                m_mCrewSeats = boost::in_place();
                try {
                    m_mCrewSeats->ReadCPACS(tixiHandle, xpath + "/mCrewSeats");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCrewSeats at xpath << " << xpath << ": " << e.what();
                    m_mCrewSeats = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCrewSeats at xpath << " << xpath << ": " << e.getError();
                    m_mCrewSeats = boost::none;
                }
            }
            
            // read element mPartStowDoors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPartStowDoors")) {
                m_mPartStowDoors = boost::in_place();
                try {
                    m_mPartStowDoors->ReadCPACS(tixiHandle, xpath + "/mPartStowDoors");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mPartStowDoors at xpath << " << xpath << ": " << e.what();
                    m_mPartStowDoors = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mPartStowDoors at xpath << " << xpath << ": " << e.getError();
                    m_mPartStowDoors = boost::none;
                }
            }
            
            // read element mLavatories
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mLavatories")) {
                m_mLavatories = boost::in_place();
                try {
                    m_mLavatories->ReadCPACS(tixiHandle, xpath + "/mLavatories");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mLavatories at xpath << " << xpath << ": " << e.what();
                    m_mLavatories = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mLavatories at xpath << " << xpath << ": " << e.getError();
                    m_mLavatories = boost::none;
                }
            }
            
            // read element mOverheadBins
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mOverheadBins")) {
                m_mOverheadBins = boost::in_place();
                try {
                    m_mOverheadBins->ReadCPACS(tixiHandle, xpath + "/mOverheadBins");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mOverheadBins at xpath << " << xpath << ": " << e.what();
                    m_mOverheadBins = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mOverheadBins at xpath << " << xpath << ": " << e.getError();
                    m_mOverheadBins = boost::none;
                }
            }
            
            // read element mFloorCoverings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFloorCoverings")) {
                m_mFloorCoverings = boost::in_place();
                try {
                    m_mFloorCoverings->ReadCPACS(tixiHandle, xpath + "/mFloorCoverings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFloorCoverings at xpath << " << xpath << ": " << e.what();
                    m_mFloorCoverings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFloorCoverings at xpath << " << xpath << ": " << e.getError();
                    m_mFloorCoverings = boost::none;
                }
            }
            
            // read element mCargoLinings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCargoLinings")) {
                m_mCargoLinings = boost::in_place();
                try {
                    m_mCargoLinings->ReadCPACS(tixiHandle, xpath + "/mCargoLinings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCargoLinings at xpath << " << xpath << ": " << e.what();
                    m_mCargoLinings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCargoLinings at xpath << " << xpath << ": " << e.getError();
                    m_mCargoLinings = boost::none;
                }
            }
            
            // read element mCargoLoadings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCargoLoadings")) {
                m_mCargoLoadings = boost::in_place();
                try {
                    m_mCargoLoadings->ReadCPACS(tixiHandle, xpath + "/mCargoLoadings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCargoLoadings at xpath << " << xpath << ": " << e.what();
                    m_mCargoLoadings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCargoLoadings at xpath << " << xpath << ": " << e.getError();
                    m_mCargoLoadings = boost::none;
                }
            }
            
            // read element mEmergencyOxygenSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEmergencyOxygenSystems")) {
                m_mEmergencyOxygenSystems = boost::in_place();
                try {
                    m_mEmergencyOxygenSystems->ReadCPACS(tixiHandle, xpath + "/mEmergencyOxygenSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEmergencyOxygenSystems at xpath << " << xpath << ": " << e.what();
                    m_mEmergencyOxygenSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEmergencyOxygenSystems at xpath << " << xpath << ": " << e.getError();
                    m_mEmergencyOxygenSystems = boost::none;
                }
            }
            
            // read element mCockpitLightings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCockpitLightings")) {
                m_mCockpitLightings = boost::in_place();
                try {
                    m_mCockpitLightings->ReadCPACS(tixiHandle, xpath + "/mCockpitLightings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCockpitLightings at xpath << " << xpath << ": " << e.what();
                    m_mCockpitLightings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCockpitLightings at xpath << " << xpath << ": " << e.getError();
                    m_mCockpitLightings = boost::none;
                }
            }
            
            // read element mCabinLightings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCabinLightings")) {
                m_mCabinLightings = boost::in_place();
                try {
                    m_mCabinLightings->ReadCPACS(tixiHandle, xpath + "/mCabinLightings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCabinLightings at xpath << " << xpath << ": " << e.what();
                    m_mCabinLightings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCabinLightings at xpath << " << xpath << ": " << e.getError();
                    m_mCabinLightings = boost::none;
                }
            }
            
            // read element mExtLightings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mExtLightings")) {
                m_mExtLightings = boost::in_place();
                try {
                    m_mExtLightings->ReadCPACS(tixiHandle, xpath + "/mExtLightings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mExtLightings at xpath << " << xpath << ": " << e.what();
                    m_mExtLightings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mExtLightings at xpath << " << xpath << ": " << e.getError();
                    m_mExtLightings = boost::none;
                }
            }
            
            // read element mWasteWaterSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mWasteWaterSystems")) {
                m_mWasteWaterSystems = boost::in_place();
                try {
                    m_mWasteWaterSystems->ReadCPACS(tixiHandle, xpath + "/mWasteWaterSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mWasteWaterSystems at xpath << " << xpath << ": " << e.what();
                    m_mWasteWaterSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mWasteWaterSystems at xpath << " << xpath << ": " << e.getError();
                    m_mWasteWaterSystems = boost::none;
                }
            }
            
            // read element mFreshWaterSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFreshWaterSystems")) {
                m_mFreshWaterSystems = boost::in_place();
                try {
                    m_mFreshWaterSystems->ReadCPACS(tixiHandle, xpath + "/mFreshWaterSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFreshWaterSystems at xpath << " << xpath << ": " << e.what();
                    m_mFreshWaterSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFreshWaterSystems at xpath << " << xpath << ": " << e.getError();
                    m_mFreshWaterSystems = boost::none;
                }
            }
            
            // read element mVacuumWasteSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mVacuumWasteSystems")) {
                m_mVacuumWasteSystems = boost::in_place();
                try {
                    m_mVacuumWasteSystems->ReadCPACS(tixiHandle, xpath + "/mVacuumWasteSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mVacuumWasteSystems at xpath << " << xpath << ": " << e.what();
                    m_mVacuumWasteSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mVacuumWasteSystems at xpath << " << xpath << ": " << e.getError();
                    m_mVacuumWasteSystems = boost::none;
                }
            }
            
        }
        
        void CPACSMFurnishing::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mInsulations
            if (m_mInsulations) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mInsulations");
                m_mInsulations->WriteCPACS(tixiHandle, xpath + "/mInsulations");
            }
            
            // write element mLinings
            if (m_mLinings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mLinings");
                m_mLinings->WriteCPACS(tixiHandle, xpath + "/mLinings");
            }
            
            // write element mCrewSeats
            if (m_mCrewSeats) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCrewSeats");
                m_mCrewSeats->WriteCPACS(tixiHandle, xpath + "/mCrewSeats");
            }
            
            // write element mPartStowDoors
            if (m_mPartStowDoors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mPartStowDoors");
                m_mPartStowDoors->WriteCPACS(tixiHandle, xpath + "/mPartStowDoors");
            }
            
            // write element mLavatories
            if (m_mLavatories) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mLavatories");
                m_mLavatories->WriteCPACS(tixiHandle, xpath + "/mLavatories");
            }
            
            // write element mOverheadBins
            if (m_mOverheadBins) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mOverheadBins");
                m_mOverheadBins->WriteCPACS(tixiHandle, xpath + "/mOverheadBins");
            }
            
            // write element mFloorCoverings
            if (m_mFloorCoverings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFloorCoverings");
                m_mFloorCoverings->WriteCPACS(tixiHandle, xpath + "/mFloorCoverings");
            }
            
            // write element mCargoLinings
            if (m_mCargoLinings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCargoLinings");
                m_mCargoLinings->WriteCPACS(tixiHandle, xpath + "/mCargoLinings");
            }
            
            // write element mCargoLoadings
            if (m_mCargoLoadings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCargoLoadings");
                m_mCargoLoadings->WriteCPACS(tixiHandle, xpath + "/mCargoLoadings");
            }
            
            // write element mEmergencyOxygenSystems
            if (m_mEmergencyOxygenSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEmergencyOxygenSystems");
                m_mEmergencyOxygenSystems->WriteCPACS(tixiHandle, xpath + "/mEmergencyOxygenSystems");
            }
            
            // write element mCockpitLightings
            if (m_mCockpitLightings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCockpitLightings");
                m_mCockpitLightings->WriteCPACS(tixiHandle, xpath + "/mCockpitLightings");
            }
            
            // write element mCabinLightings
            if (m_mCabinLightings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCabinLightings");
                m_mCabinLightings->WriteCPACS(tixiHandle, xpath + "/mCabinLightings");
            }
            
            // write element mExtLightings
            if (m_mExtLightings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mExtLightings");
                m_mExtLightings->WriteCPACS(tixiHandle, xpath + "/mExtLightings");
            }
            
            // write element mWasteWaterSystems
            if (m_mWasteWaterSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mWasteWaterSystems");
                m_mWasteWaterSystems->WriteCPACS(tixiHandle, xpath + "/mWasteWaterSystems");
            }
            
            // write element mFreshWaterSystems
            if (m_mFreshWaterSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFreshWaterSystems");
                m_mFreshWaterSystems->WriteCPACS(tixiHandle, xpath + "/mFreshWaterSystems");
            }
            
            // write element mVacuumWasteSystems
            if (m_mVacuumWasteSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mVacuumWasteSystems");
                m_mVacuumWasteSystems->WriteCPACS(tixiHandle, xpath + "/mVacuumWasteSystems");
            }
            
        }
        
        const CPACSGenericMass& CPACSMFurnishing::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMFurnishing::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMFurnishing::HasMInsulations() const
        {
            return static_cast<bool>(m_mInsulations);
        }
        
        const CPACSMInsulations& CPACSMFurnishing::GetMInsulations() const
        {
            return *m_mInsulations;
        }
        
        CPACSMInsulations& CPACSMFurnishing::GetMInsulations()
        {
            return *m_mInsulations;
        }
        
        bool CPACSMFurnishing::HasMLinings() const
        {
            return static_cast<bool>(m_mLinings);
        }
        
        const CPACSMLinings& CPACSMFurnishing::GetMLinings() const
        {
            return *m_mLinings;
        }
        
        CPACSMLinings& CPACSMFurnishing::GetMLinings()
        {
            return *m_mLinings;
        }
        
        bool CPACSMFurnishing::HasMCrewSeats() const
        {
            return static_cast<bool>(m_mCrewSeats);
        }
        
        const CPACSMCrewSeats& CPACSMFurnishing::GetMCrewSeats() const
        {
            return *m_mCrewSeats;
        }
        
        CPACSMCrewSeats& CPACSMFurnishing::GetMCrewSeats()
        {
            return *m_mCrewSeats;
        }
        
        bool CPACSMFurnishing::HasMPartStowDoors() const
        {
            return static_cast<bool>(m_mPartStowDoors);
        }
        
        const CPACSMPartStowDoors& CPACSMFurnishing::GetMPartStowDoors() const
        {
            return *m_mPartStowDoors;
        }
        
        CPACSMPartStowDoors& CPACSMFurnishing::GetMPartStowDoors()
        {
            return *m_mPartStowDoors;
        }
        
        bool CPACSMFurnishing::HasMLavatories() const
        {
            return static_cast<bool>(m_mLavatories);
        }
        
        const CPACSMLavatories& CPACSMFurnishing::GetMLavatories() const
        {
            return *m_mLavatories;
        }
        
        CPACSMLavatories& CPACSMFurnishing::GetMLavatories()
        {
            return *m_mLavatories;
        }
        
        bool CPACSMFurnishing::HasMOverheadBins() const
        {
            return static_cast<bool>(m_mOverheadBins);
        }
        
        const CPACSMOverheadBins& CPACSMFurnishing::GetMOverheadBins() const
        {
            return *m_mOverheadBins;
        }
        
        CPACSMOverheadBins& CPACSMFurnishing::GetMOverheadBins()
        {
            return *m_mOverheadBins;
        }
        
        bool CPACSMFurnishing::HasMFloorCoverings() const
        {
            return static_cast<bool>(m_mFloorCoverings);
        }
        
        const CPACSMFloorCoverings& CPACSMFurnishing::GetMFloorCoverings() const
        {
            return *m_mFloorCoverings;
        }
        
        CPACSMFloorCoverings& CPACSMFurnishing::GetMFloorCoverings()
        {
            return *m_mFloorCoverings;
        }
        
        bool CPACSMFurnishing::HasMCargoLinings() const
        {
            return static_cast<bool>(m_mCargoLinings);
        }
        
        const CPACSMCargoLinings& CPACSMFurnishing::GetMCargoLinings() const
        {
            return *m_mCargoLinings;
        }
        
        CPACSMCargoLinings& CPACSMFurnishing::GetMCargoLinings()
        {
            return *m_mCargoLinings;
        }
        
        bool CPACSMFurnishing::HasMCargoLoadings() const
        {
            return static_cast<bool>(m_mCargoLoadings);
        }
        
        const CPACSMCargoLoadings& CPACSMFurnishing::GetMCargoLoadings() const
        {
            return *m_mCargoLoadings;
        }
        
        CPACSMCargoLoadings& CPACSMFurnishing::GetMCargoLoadings()
        {
            return *m_mCargoLoadings;
        }
        
        bool CPACSMFurnishing::HasMEmergencyOxygenSystems() const
        {
            return static_cast<bool>(m_mEmergencyOxygenSystems);
        }
        
        const CPACSMEmergencyOxygenSystems& CPACSMFurnishing::GetMEmergencyOxygenSystems() const
        {
            return *m_mEmergencyOxygenSystems;
        }
        
        CPACSMEmergencyOxygenSystems& CPACSMFurnishing::GetMEmergencyOxygenSystems()
        {
            return *m_mEmergencyOxygenSystems;
        }
        
        bool CPACSMFurnishing::HasMCockpitLightings() const
        {
            return static_cast<bool>(m_mCockpitLightings);
        }
        
        const CPACSMCockpitLightings& CPACSMFurnishing::GetMCockpitLightings() const
        {
            return *m_mCockpitLightings;
        }
        
        CPACSMCockpitLightings& CPACSMFurnishing::GetMCockpitLightings()
        {
            return *m_mCockpitLightings;
        }
        
        bool CPACSMFurnishing::HasMCabinLightings() const
        {
            return static_cast<bool>(m_mCabinLightings);
        }
        
        const CPACSMCabinLightings& CPACSMFurnishing::GetMCabinLightings() const
        {
            return *m_mCabinLightings;
        }
        
        CPACSMCabinLightings& CPACSMFurnishing::GetMCabinLightings()
        {
            return *m_mCabinLightings;
        }
        
        bool CPACSMFurnishing::HasMExtLightings() const
        {
            return static_cast<bool>(m_mExtLightings);
        }
        
        const CPACSMExtLightings& CPACSMFurnishing::GetMExtLightings() const
        {
            return *m_mExtLightings;
        }
        
        CPACSMExtLightings& CPACSMFurnishing::GetMExtLightings()
        {
            return *m_mExtLightings;
        }
        
        bool CPACSMFurnishing::HasMWasteWaterSystems() const
        {
            return static_cast<bool>(m_mWasteWaterSystems);
        }
        
        const CPACSMWasteWaterSystems& CPACSMFurnishing::GetMWasteWaterSystems() const
        {
            return *m_mWasteWaterSystems;
        }
        
        CPACSMWasteWaterSystems& CPACSMFurnishing::GetMWasteWaterSystems()
        {
            return *m_mWasteWaterSystems;
        }
        
        bool CPACSMFurnishing::HasMFreshWaterSystems() const
        {
            return static_cast<bool>(m_mFreshWaterSystems);
        }
        
        const CPACSMFreshWaterSystems& CPACSMFurnishing::GetMFreshWaterSystems() const
        {
            return *m_mFreshWaterSystems;
        }
        
        CPACSMFreshWaterSystems& CPACSMFurnishing::GetMFreshWaterSystems()
        {
            return *m_mFreshWaterSystems;
        }
        
        bool CPACSMFurnishing::HasMVacuumWasteSystems() const
        {
            return static_cast<bool>(m_mVacuumWasteSystems);
        }
        
        const CPACSMVacuumWasteSystems& CPACSMFurnishing::GetMVacuumWasteSystems() const
        {
            return *m_mVacuumWasteSystems;
        }
        
        CPACSMVacuumWasteSystems& CPACSMFurnishing::GetMVacuumWasteSystems()
        {
            return *m_mVacuumWasteSystems;
        }
        
    }
}
