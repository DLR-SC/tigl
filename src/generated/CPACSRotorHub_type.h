// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
namespace generated
{
    // This enum is used in:
    // CPACSRotorHub

    // generated from /xsd:schema/xsd:complexType[782]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[3]/xsd:simpleType
    enum CPACSRotorHub_type
    {
        semiRigid,
        rigid,
        articulated,
        hingeless
    };

    inline std::string TiglRotorHubTypeToString(const CPACSRotorHub_type& value)
    {
        switch(value) {
        case semiRigid: return "semiRigid";
        case rigid: return "rigid";
        case articulated: return "articulated";
        case hingeless: return "hingeless";
        default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSRotorHub_type");
        }
    }
    inline CPACSRotorHub_type stringToTiglRotorHubType(const std::string& value)
    {
        auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
        if (toLower(value) == "semirigid") { return semiRigid; }
        if (toLower(value) == "rigid") { return rigid; }
        if (toLower(value) == "articulated") { return articulated; }
        if (toLower(value) == "hingeless") { return hingeless; }
        throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSRotorHub_type");
    }
} // namespace generated

// CPACSRotorHub_type is customized, use type TiglRotorHubType directly
} // namespace tigl
