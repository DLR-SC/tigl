// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSGearComponents.h"

namespace tigl
{
    namespace generated
    {
        CPACSGearComponents::CPACSGearComponents(){}
        CPACSGearComponents::~CPACSGearComponents() {}
        
        void CPACSGearComponents::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element mainStrut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mainStrut")) {
                m_mainStrut.ReadCPACS(tixiHandle, xpath + "/mainStrut");
            }
            else {
                LOG(ERROR) << "Required element mainStrut is missing";
            }
            
            // read element piston
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/piston")) {
                m_piston.ReadCPACS(tixiHandle, xpath + "/piston");
            }
            else {
                LOG(ERROR) << "Required element piston is missing";
            }
            
            // read element dragStrut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dragStrut")) {
                m_dragStrut.ReadCPACS(tixiHandle, xpath + "/dragStrut");
            }
            else {
                LOG(ERROR) << "Required element dragStrut is missing";
            }
            
            // read element pintleStrut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pintleStrut")) {
                m_pintleStrut.ReadCPACS(tixiHandle, xpath + "/pintleStrut");
            }
            else {
                LOG(ERROR) << "Required element pintleStrut is missing";
            }
            
            // read element sideStruts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sideStruts")) {
                m_sideStruts.ReadCPACS(tixiHandle, xpath + "/sideStruts");
            }
            else {
                LOG(ERROR) << "Required element sideStruts is missing";
            }
            
            // read element mainActuator
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mainActuator")) {
                m_mainActuator.ReadCPACS(tixiHandle, xpath + "/mainActuator");
            }
            else {
                LOG(ERROR) << "Required element mainActuator is missing";
            }
            
            // read element bogie
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bogie")) {
                m_bogie = boost::in_place();
                try {
                    m_bogie->ReadCPACS(tixiHandle, xpath + "/bogie");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read bogie at xpath << " << xpath << ": " << e.what();
                    m_bogie = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read bogie at xpath << " << xpath << ": " << e.getError();
                    m_bogie = boost::none;
                }
            }
            
            // read element axles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/axles")) {
                m_axles.ReadCPACS(tixiHandle, xpath + "/axles");
            }
            else {
                LOG(ERROR) << "Required element axles is missing";
            }
            
            // read element wheels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wheels")) {
                m_wheels.ReadCPACS(tixiHandle, xpath + "/wheels");
            }
            else {
                LOG(ERROR) << "Required element wheels is missing";
            }
            
        }
        
        void CPACSGearComponents::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element mainStrut
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mainStrut");
            m_mainStrut.WriteCPACS(tixiHandle, xpath + "/mainStrut");
            
            // write element piston
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/piston");
            m_piston.WriteCPACS(tixiHandle, xpath + "/piston");
            
            // write element dragStrut
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dragStrut");
            m_dragStrut.WriteCPACS(tixiHandle, xpath + "/dragStrut");
            
            // write element pintleStrut
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pintleStrut");
            m_pintleStrut.WriteCPACS(tixiHandle, xpath + "/pintleStrut");
            
            // write element sideStruts
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sideStruts");
            m_sideStruts.WriteCPACS(tixiHandle, xpath + "/sideStruts");
            
            // write element mainActuator
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mainActuator");
            m_mainActuator.WriteCPACS(tixiHandle, xpath + "/mainActuator");
            
            // write element bogie
            if (m_bogie) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bogie");
                m_bogie->WriteCPACS(tixiHandle, xpath + "/bogie");
            }
            
            // write element axles
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/axles");
            m_axles.WriteCPACS(tixiHandle, xpath + "/axles");
            
            // write element wheels
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wheels");
            m_wheels.WriteCPACS(tixiHandle, xpath + "/wheels");
            
        }
        
        const CPACSStrut& CPACSGearComponents::GetMainStrut() const
        {
            return m_mainStrut;
        }
        
        CPACSStrut& CPACSGearComponents::GetMainStrut()
        {
            return m_mainStrut;
        }
        
        const CPACSPiston& CPACSGearComponents::GetPiston() const
        {
            return m_piston;
        }
        
        CPACSPiston& CPACSGearComponents::GetPiston()
        {
            return m_piston;
        }
        
        const CPACSStrutWithActuator& CPACSGearComponents::GetDragStrut() const
        {
            return m_dragStrut;
        }
        
        CPACSStrutWithActuator& CPACSGearComponents::GetDragStrut()
        {
            return m_dragStrut;
        }
        
        const CPACSStrut& CPACSGearComponents::GetPintleStrut() const
        {
            return m_pintleStrut;
        }
        
        CPACSStrut& CPACSGearComponents::GetPintleStrut()
        {
            return m_pintleStrut;
        }
        
        const CPACSSideStruts& CPACSGearComponents::GetSideStruts() const
        {
            return m_sideStruts;
        }
        
        CPACSSideStruts& CPACSGearComponents::GetSideStruts()
        {
            return m_sideStruts;
        }
        
        const CPACSMainActuator& CPACSGearComponents::GetMainActuator() const
        {
            return m_mainActuator;
        }
        
        CPACSMainActuator& CPACSGearComponents::GetMainActuator()
        {
            return m_mainActuator;
        }
        
        bool CPACSGearComponents::HasBogie() const
        {
            return static_cast<bool>(m_bogie);
        }
        
        const CPACSBogie& CPACSGearComponents::GetBogie() const
        {
            return *m_bogie;
        }
        
        CPACSBogie& CPACSGearComponents::GetBogie()
        {
            return *m_bogie;
        }
        
        const CPACSAxles& CPACSGearComponents::GetAxles() const
        {
            return m_axles;
        }
        
        CPACSAxles& CPACSGearComponents::GetAxles()
        {
            return m_axles;
        }
        
        const CPACSWheels& CPACSGearComponents::GetWheels() const
        {
            return m_wheels;
        }
        
        CPACSWheels& CPACSGearComponents::GetWheels()
        {
            return m_wheels;
        }
        
    }
}
