// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDoorAssemblyPosition.h"

namespace tigl
{
    namespace generated
    {
        CPACSDoorAssemblyPosition::CPACSDoorAssemblyPosition(){}
        CPACSDoorAssemblyPosition::~CPACSDoorAssemblyPosition() {}
        
        void CPACSDoorAssemblyPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element doorType
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/doorType")) {
                m_doorType = boost::in_place();
                try {
                    m_doorType->ReadCPACS(tixiHandle, xpath + "/doorType");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read doorType at xpath << " << xpath << ": " << e.what();
                    m_doorType = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read doorType at xpath << " << xpath << ": " << e.getError();
                    m_doorType = boost::none;
                }
            }
            
            // read element doorElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/doorElementUID")) {
                m_doorElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/doorElementUID");
            }
            else {
                LOG(ERROR) << "Required element doorElementUID is missing";
            }
            
            // read element startFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startFrameUID")) {
                m_startFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startFrameUID");
            }
            else {
                LOG(ERROR) << "Required element startFrameUID is missing";
            }
            
            // read element endFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endFrameUID")) {
                m_endFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endFrameUID");
            }
            else {
                LOG(ERROR) << "Required element endFrameUID is missing";
            }
            
            // read element startStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startStringerUID")) {
                m_startStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startStringerUID");
            }
            else {
                LOG(ERROR) << "Required element startStringerUID is missing";
            }
            
            // read element endStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endStringerUID")) {
                m_endStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endStringerUID");
            }
            else {
                LOG(ERROR) << "Required element endStringerUID is missing";
            }
            
            // read element zBase
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/zBase")) {
                m_zBase = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/zBase");
            }
            
            // read element minWidth
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/minWidth")) {
                m_minWidth = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/minWidth");
            }
            
            // read element minHeight
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/minHeight")) {
                m_minHeight = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/minHeight");
            }
            
            // read element ySign
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ySign")) {
                m_ySign = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/ySign");
            }
            
        }
        
        void CPACSDoorAssemblyPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element doorType
            if (m_doorType) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doorType");
                m_doorType->WriteCPACS(tixiHandle, xpath + "/doorType");
            }
            
            // write element doorElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doorElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/doorElementUID", m_doorElementUID);
            
            // write element startFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startFrameUID", m_startFrameUID);
            
            // write element endFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endFrameUID", m_endFrameUID);
            
            // write element startStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startStringerUID", m_startStringerUID);
            
            // write element endStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endStringerUID", m_endStringerUID);
            
            // write element zBase
            if (m_zBase) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/zBase");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/zBase", *m_zBase);
            }
            
            // write element minWidth
            if (m_minWidth) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/minWidth");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/minWidth", *m_minWidth);
            }
            
            // write element minHeight
            if (m_minHeight) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/minHeight");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/minHeight", *m_minHeight);
            }
            
            // write element ySign
            if (m_ySign) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ySign");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ySign", *m_ySign);
            }
            
        }
        
        bool CPACSDoorAssemblyPosition::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSDoorAssemblyPosition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetName() const
        {
            return *m_name;
        }
        
        void CPACSDoorAssemblyPosition::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSDoorAssemblyPosition::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasDoorType() const
        {
            return static_cast<bool>(m_doorType);
        }
        
        const CPACSDoorAssemblyPosition_doorType& CPACSDoorAssemblyPosition::GetDoorType() const
        {
            return *m_doorType;
        }
        
        CPACSDoorAssemblyPosition_doorType& CPACSDoorAssemblyPosition::GetDoorType()
        {
            return *m_doorType;
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetDoorElementUID() const
        {
            return m_doorElementUID;
        }
        
        void CPACSDoorAssemblyPosition::SetDoorElementUID(const std::string& value)
        {
            m_doorElementUID = value;
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetStartFrameUID() const
        {
            return m_startFrameUID;
        }
        
        void CPACSDoorAssemblyPosition::SetStartFrameUID(const std::string& value)
        {
            m_startFrameUID = value;
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetEndFrameUID() const
        {
            return m_endFrameUID;
        }
        
        void CPACSDoorAssemblyPosition::SetEndFrameUID(const std::string& value)
        {
            m_endFrameUID = value;
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetStartStringerUID() const
        {
            return m_startStringerUID;
        }
        
        void CPACSDoorAssemblyPosition::SetStartStringerUID(const std::string& value)
        {
            m_startStringerUID = value;
        }
        
        const std::string& CPACSDoorAssemblyPosition::GetEndStringerUID() const
        {
            return m_endStringerUID;
        }
        
        void CPACSDoorAssemblyPosition::SetEndStringerUID(const std::string& value)
        {
            m_endStringerUID = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasZBase() const
        {
            return static_cast<bool>(m_zBase);
        }
        
        const double& CPACSDoorAssemblyPosition::GetZBase() const
        {
            return *m_zBase;
        }
        
        void CPACSDoorAssemblyPosition::SetZBase(const double& value)
        {
            m_zBase = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasMinWidth() const
        {
            return static_cast<bool>(m_minWidth);
        }
        
        const double& CPACSDoorAssemblyPosition::GetMinWidth() const
        {
            return *m_minWidth;
        }
        
        void CPACSDoorAssemblyPosition::SetMinWidth(const double& value)
        {
            m_minWidth = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasMinHeight() const
        {
            return static_cast<bool>(m_minHeight);
        }
        
        const double& CPACSDoorAssemblyPosition::GetMinHeight() const
        {
            return *m_minHeight;
        }
        
        void CPACSDoorAssemblyPosition::SetMinHeight(const double& value)
        {
            m_minHeight = value;
        }
        
        bool CPACSDoorAssemblyPosition::HasYSign() const
        {
            return static_cast<bool>(m_ySign);
        }
        
        const int& CPACSDoorAssemblyPosition::GetYSign() const
        {
            return *m_ySign;
        }
        
        void CPACSDoorAssemblyPosition::SetYSign(const int& value)
        {
            m_ySign = value;
        }
        
    }
}
