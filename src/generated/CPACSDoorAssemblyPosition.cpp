// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCargoDoorsAssembly.h"
#include "CPACSDoorAssemblyPosition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDoorAssemblyPosition::CPACSDoorAssemblyPosition(CPACSCargoDoorsAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSDoorAssemblyPosition::~CPACSDoorAssemblyPosition()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_doorElementUID.empty()) m_uidMgr->TryUnregisterReference(m_doorElementUID, *this);
            if (!m_startFrameUID.empty()) m_uidMgr->TryUnregisterReference(m_startFrameUID, *this);
            if (!m_endFrameUID.empty()) m_uidMgr->TryUnregisterReference(m_endFrameUID, *this);
            if (!m_startStringerUID.empty()) m_uidMgr->TryUnregisterReference(m_startStringerUID, *this);
            if (!m_endStringerUID.empty()) m_uidMgr->TryUnregisterReference(m_endStringerUID, *this);
        }
    }

    const CPACSCargoDoorsAssembly* CPACSDoorAssemblyPosition::GetParent() const
    {
        return m_parent;
    }

    CPACSCargoDoorsAssembly* CPACSDoorAssemblyPosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSDoorAssemblyPosition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSDoorAssemblyPosition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSDoorAssemblyPosition::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDoorAssemblyPosition::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSDoorAssemblyPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element doorType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/doorType")) {
            m_doorType = stringToCPACSDoorAssemblyPosition_doorType(tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/doorType"));
        }

        // read element doorElementUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/doorElementUID")) {
            m_doorElementUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/doorElementUID");
            if (m_doorElementUID.empty()) {
                LOG(WARNING) << "Required element doorElementUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_doorElementUID.empty()) m_uidMgr->RegisterReference(m_doorElementUID, *this);
        }
        else {
            LOG(ERROR) << "Required element doorElementUID is missing at xpath " << xpath;
        }

        // read element startFrameUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/startFrameUID")) {
            m_startFrameUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/startFrameUID");
            if (m_startFrameUID.empty()) {
                LOG(WARNING) << "Required element startFrameUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_startFrameUID.empty()) m_uidMgr->RegisterReference(m_startFrameUID, *this);
        }
        else {
            LOG(ERROR) << "Required element startFrameUID is missing at xpath " << xpath;
        }

        // read element endFrameUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/endFrameUID")) {
            m_endFrameUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/endFrameUID");
            if (m_endFrameUID.empty()) {
                LOG(WARNING) << "Required element endFrameUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_endFrameUID.empty()) m_uidMgr->RegisterReference(m_endFrameUID, *this);
        }
        else {
            LOG(ERROR) << "Required element endFrameUID is missing at xpath " << xpath;
        }

        // read element startStringerUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/startStringerUID")) {
            m_startStringerUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/startStringerUID");
            if (m_startStringerUID.empty()) {
                LOG(WARNING) << "Required element startStringerUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_startStringerUID.empty()) m_uidMgr->RegisterReference(m_startStringerUID, *this);
        }
        else {
            LOG(ERROR) << "Required element startStringerUID is missing at xpath " << xpath;
        }

        // read element endStringerUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/endStringerUID")) {
            m_endStringerUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/endStringerUID");
            if (m_endStringerUID.empty()) {
                LOG(WARNING) << "Required element endStringerUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_endStringerUID.empty()) m_uidMgr->RegisterReference(m_endStringerUID, *this);
        }
        else {
            LOG(ERROR) << "Required element endStringerUID is missing at xpath " << xpath;
        }

        // read element zBase
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/zBase")) {
            m_zBase = tixi::TixiGetElement<double>(tixiHandle, xpath + "/zBase");
        }

        // read element minWidth
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/minWidth")) {
            m_minWidth = tixi::TixiGetElement<double>(tixiHandle, xpath + "/minWidth");
        }

        // read element minHeight
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/minHeight")) {
            m_minHeight = tixi::TixiGetElement<double>(tixiHandle, xpath + "/minHeight");
        }

        // read element ySign
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ySign")) {
            m_ySign = tixi::TixiGetElement<int>(tixiHandle, xpath + "/ySign");
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSDoorAssemblyPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        if (m_name) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element doorType
        if (m_doorType) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doorType");
            tixi::TixiSaveElement(tixiHandle, xpath + "/doorType", CPACSDoorAssemblyPosition_doorTypeToString(*m_doorType));
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/doorType")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/doorType");
            }
        }

        // write element doorElementUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/doorElementUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/doorElementUID", m_doorElementUID);

        // write element startFrameUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startFrameUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/startFrameUID", m_startFrameUID);

        // write element endFrameUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endFrameUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/endFrameUID", m_endFrameUID);

        // write element startStringerUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startStringerUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/startStringerUID", m_startStringerUID);

        // write element endStringerUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endStringerUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/endStringerUID", m_endStringerUID);

        // write element zBase
        if (m_zBase) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/zBase");
            tixi::TixiSaveElement(tixiHandle, xpath + "/zBase", *m_zBase);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/zBase")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/zBase");
            }
        }

        // write element minWidth
        if (m_minWidth) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/minWidth");
            tixi::TixiSaveElement(tixiHandle, xpath + "/minWidth", *m_minWidth);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/minWidth")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/minWidth");
            }
        }

        // write element minHeight
        if (m_minHeight) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/minHeight");
            tixi::TixiSaveElement(tixiHandle, xpath + "/minHeight", *m_minHeight);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/minHeight")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/minHeight");
            }
        }

        // write element ySign
        if (m_ySign) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ySign");
            tixi::TixiSaveElement(tixiHandle, xpath + "/ySign", *m_ySign);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ySign")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ySign");
            }
        }

    }

    const std::string& CPACSDoorAssemblyPosition::GetUID() const
    {
        return m_uID;
    }

    void CPACSDoorAssemblyPosition::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSDoorAssemblyPosition::GetName() const
    {
        return m_name;
    }

    void CPACSDoorAssemblyPosition::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSDoorAssemblyPosition::GetDescription() const
    {
        return m_description;
    }

    void CPACSDoorAssemblyPosition::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<CPACSDoorAssemblyPosition_doorType>& CPACSDoorAssemblyPosition::GetDoorType() const
    {
        return m_doorType;
    }

    void CPACSDoorAssemblyPosition::SetDoorType(const boost::optional<CPACSDoorAssemblyPosition_doorType>& value)
    {
        m_doorType = value;
    }

    const std::string& CPACSDoorAssemblyPosition::GetDoorElementUID() const
    {
        return m_doorElementUID;
    }

    void CPACSDoorAssemblyPosition::SetDoorElementUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_doorElementUID.empty()) m_uidMgr->TryUnregisterReference(m_doorElementUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_doorElementUID = value;
    }

    const std::string& CPACSDoorAssemblyPosition::GetStartFrameUID() const
    {
        return m_startFrameUID;
    }

    void CPACSDoorAssemblyPosition::SetStartFrameUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_startFrameUID.empty()) m_uidMgr->TryUnregisterReference(m_startFrameUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_startFrameUID = value;
    }

    const std::string& CPACSDoorAssemblyPosition::GetEndFrameUID() const
    {
        return m_endFrameUID;
    }

    void CPACSDoorAssemblyPosition::SetEndFrameUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_endFrameUID.empty()) m_uidMgr->TryUnregisterReference(m_endFrameUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_endFrameUID = value;
    }

    const std::string& CPACSDoorAssemblyPosition::GetStartStringerUID() const
    {
        return m_startStringerUID;
    }

    void CPACSDoorAssemblyPosition::SetStartStringerUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_startStringerUID.empty()) m_uidMgr->TryUnregisterReference(m_startStringerUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_startStringerUID = value;
    }

    const std::string& CPACSDoorAssemblyPosition::GetEndStringerUID() const
    {
        return m_endStringerUID;
    }

    void CPACSDoorAssemblyPosition::SetEndStringerUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_endStringerUID.empty()) m_uidMgr->TryUnregisterReference(m_endStringerUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_endStringerUID = value;
    }

    const boost::optional<double>& CPACSDoorAssemblyPosition::GetZBase() const
    {
        return m_zBase;
    }

    void CPACSDoorAssemblyPosition::SetZBase(const boost::optional<double>& value)
    {
        m_zBase = value;
    }

    const boost::optional<double>& CPACSDoorAssemblyPosition::GetMinWidth() const
    {
        return m_minWidth;
    }

    void CPACSDoorAssemblyPosition::SetMinWidth(const boost::optional<double>& value)
    {
        m_minWidth = value;
    }

    const boost::optional<double>& CPACSDoorAssemblyPosition::GetMinHeight() const
    {
        return m_minHeight;
    }

    void CPACSDoorAssemblyPosition::SetMinHeight(const boost::optional<double>& value)
    {
        m_minHeight = value;
    }

    const boost::optional<int>& CPACSDoorAssemblyPosition::GetYSign() const
    {
        return m_ySign;
    }

    void CPACSDoorAssemblyPosition::SetYSign(const boost::optional<int>& value)
    {
        m_ySign = value;
    }

    const CTiglUIDObject* CPACSDoorAssemblyPosition::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSDoorAssemblyPosition::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_doorElementUID == oldUid) {
            m_doorElementUID = newUid;
        }
        if (m_startFrameUID == oldUid) {
            m_startFrameUID = newUid;
        }
        if (m_endFrameUID == oldUid) {
            m_endFrameUID = newUid;
        }
        if (m_startStringerUID == oldUid) {
            m_startStringerUID = newUid;
        }
        if (m_endStringerUID == oldUid) {
            m_endStringerUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
