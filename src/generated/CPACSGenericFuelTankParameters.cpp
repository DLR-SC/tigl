// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSGenericFuelTank.h"
#include "CPACSGenericFuelTankParameters.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSGenericFuelTankParameters::CPACSGenericFuelTankParameters(CCPACSGenericFuelTank* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_cylinderRadius(0)
        , m_cylinderLength(0)
        , m_domeType(this)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSGenericFuelTankParameters::~CPACSGenericFuelTankParameters()
    {
    }

    const CCPACSGenericFuelTank* CPACSGenericFuelTankParameters::GetParent() const
    {
        return m_parent;
    }

    CCPACSGenericFuelTank* CPACSGenericFuelTankParameters::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSGenericFuelTankParameters::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSGenericFuelTankParameters::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSGenericFuelTankParameters::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSGenericFuelTankParameters::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSGenericFuelTankParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element cylinderRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cylinderRadius")) {
            m_cylinderRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/cylinderRadius");
        }
        else {
            LOG(ERROR) << "Required element cylinderRadius is missing at xpath " << xpath;
        }

        // read element cylinderLength
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cylinderLength")) {
            m_cylinderLength = tixi::TixiGetElement<double>(tixiHandle, xpath + "/cylinderLength");
        }
        else {
            LOG(ERROR) << "Required element cylinderLength is missing at xpath " << xpath;
        }

        // read element domeType
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/domeType")) {
            m_domeType.ReadCPACS(tixiHandle, xpath + "/domeType");
        }
        else {
            LOG(ERROR) << "Required element domeType is missing at xpath " << xpath;
        }

        // read element material
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/material")) {
            m_material.ReadCPACS(tixiHandle, xpath + "/material");
        }
        else {
            LOG(ERROR) << "Required element material is missing at xpath " << xpath;
        }

    }

    void CPACSGenericFuelTankParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element cylinderRadius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cylinderRadius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/cylinderRadius", m_cylinderRadius);

        // write element cylinderLength
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cylinderLength");
        tixi::TixiSaveElement(tixiHandle, xpath + "/cylinderLength", m_cylinderLength);

        // write element domeType
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/domeType");
        m_domeType.WriteCPACS(tixiHandle, xpath + "/domeType");

        // write element material
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/material");
        m_material.WriteCPACS(tixiHandle, xpath + "/material");

    }

    const double& CPACSGenericFuelTankParameters::GetCylinderRadius() const
    {
        return m_cylinderRadius;
    }

    void CPACSGenericFuelTankParameters::SetCylinderRadius(const double& value)
    {
        m_cylinderRadius = value;
    }

    const double& CPACSGenericFuelTankParameters::GetCylinderLength() const
    {
        return m_cylinderLength;
    }

    void CPACSGenericFuelTankParameters::SetCylinderLength(const double& value)
    {
        m_cylinderLength = value;
    }

    const CPACSDomeType& CPACSGenericFuelTankParameters::GetDomeType() const
    {
        return m_domeType;
    }

    CPACSDomeType& CPACSGenericFuelTankParameters::GetDomeType()
    {
        return m_domeType;
    }

    const CCPACSMaterialDefinition& CPACSGenericFuelTankParameters::GetMaterial() const
    {
        return m_material;
    }

    CCPACSMaterialDefinition& CPACSGenericFuelTankParameters::GetMaterial()
    {
        return m_material;
    }

} // namespace generated
} // namespace tigl
