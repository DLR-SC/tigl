// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMSkins.h"

namespace tigl
{
    namespace generated
    {
        CPACSMSkins::CPACSMSkins(){}
        CPACSMSkins::~CPACSMSkins() {}
        
        void CPACSMSkins::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mUpperShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mUpperShell")) {
                m_mUpperShell = boost::in_place();
                try {
                    m_mUpperShell->ReadCPACS(tixiHandle, xpath + "/mUpperShell");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mUpperShell at xpath << " << xpath << ": " << e.what();
                    m_mUpperShell = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mUpperShell at xpath << " << xpath << ": " << e.getError();
                    m_mUpperShell = boost::none;
                }
            }
            
            // read element mLowerShell
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mLowerShell")) {
                m_mLowerShell = boost::in_place();
                try {
                    m_mLowerShell->ReadCPACS(tixiHandle, xpath + "/mLowerShell");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mLowerShell at xpath << " << xpath << ": " << e.what();
                    m_mLowerShell = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mLowerShell at xpath << " << xpath << ": " << e.getError();
                    m_mLowerShell = boost::none;
                }
            }
            
        }
        
        void CPACSMSkins::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mUpperShell
            if (m_mUpperShell) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mUpperShell");
                m_mUpperShell->WriteCPACS(tixiHandle, xpath + "/mUpperShell");
            }
            
            // write element mLowerShell
            if (m_mLowerShell) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mLowerShell");
                m_mLowerShell->WriteCPACS(tixiHandle, xpath + "/mLowerShell");
            }
            
        }
        
        const CPACSGenericMass& CPACSMSkins::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMSkins::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMSkins::HasMUpperShell() const
        {
            return static_cast<bool>(m_mUpperShell);
        }
        
        const CPACSMShell& CPACSMSkins::GetMUpperShell() const
        {
            return *m_mUpperShell;
        }
        
        CPACSMShell& CPACSMSkins::GetMUpperShell()
        {
            return *m_mUpperShell;
        }
        
        bool CPACSMSkins::HasMLowerShell() const
        {
            return static_cast<bool>(m_mLowerShell);
        }
        
        const CPACSMShell& CPACSMSkins::GetMLowerShell() const
        {
            return *m_mLowerShell;
        }
        
        CPACSMShell& CPACSMSkins::GetMLowerShell()
        {
            return *m_mLowerShell;
        }
        
    }
}
