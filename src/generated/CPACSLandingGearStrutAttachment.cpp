// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearStrutAttachment.h"
#include "CPACSStrutAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearStrutAttachment::CPACSLandingGearStrutAttachment(CPACSStrutAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearStrutAttachment::~CPACSLandingGearStrutAttachment()
    {
        if (m_uidMgr) {
            if (m_sparSegmentUID_choice1 && !m_sparSegmentUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_sparSegmentUID_choice1, *this);
            if (m_ribDefinitionUID_choice5 && !m_ribDefinitionUID_choice5->empty()) m_uidMgr->TryUnregisterReference(*m_ribDefinitionUID_choice5, *this);
        }
    }

    const CPACSStrutAssembly* CPACSLandingGearStrutAttachment::GetParent() const
    {
        return m_parent;
    }

    CPACSStrutAssembly* CPACSLandingGearStrutAttachment::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearStrutAttachment::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSLandingGearStrutAttachment::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSLandingGearStrutAttachment::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearStrutAttachment::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearStrutAttachment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element sparSegmentUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparSegmentUID")) {
            m_sparSegmentUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/sparSegmentUID");
            if (m_sparSegmentUID_choice1->empty()) {
                LOG(WARNING) << "Optional element sparSegmentUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_sparSegmentUID_choice1->empty()) m_uidMgr->RegisterReference(*m_sparSegmentUID_choice1, *this);
        }

        // read element supportBeam
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/supportBeam")) {
            m_supportBeam_choice2 = boost::in_place(this, m_uidMgr);
            try {
                m_supportBeam_choice2->ReadCPACS(tixiHandle, xpath + "/supportBeam");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read supportBeam at xpath " << xpath << ": " << e.what();
                m_supportBeam_choice2 = boost::none;
            }
        }

        // read element stringerFramePositionUIDs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringerFramePositionUIDs")) {
            m_stringerFramePositionUIDs_choice3 = boost::in_place(this, m_uidMgr);
            try {
                m_stringerFramePositionUIDs_choice3->ReadCPACS(tixiHandle, xpath + "/stringerFramePositionUIDs");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read stringerFramePositionUIDs at xpath " << xpath << ": " << e.what();
                m_stringerFramePositionUIDs_choice3 = boost::none;
            }
        }

        // read element structuralMountUIDs
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralMountUIDs")) {
            m_structuralMountUIDs_choice4 = boost::in_place(this, m_uidMgr);
            try {
                m_structuralMountUIDs_choice4->ReadCPACS(tixiHandle, xpath + "/structuralMountUIDs");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read structuralMountUIDs at xpath " << xpath << ": " << e.what();
                m_structuralMountUIDs_choice4 = boost::none;
            }
        }

        // read element ribDefinitionUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
            m_ribDefinitionUID_choice5 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/ribDefinitionUID");
            if (m_ribDefinitionUID_choice5->empty()) {
                LOG(WARNING) << "Optional element ribDefinitionUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_ribDefinitionUID_choice5->empty()) m_uidMgr->RegisterReference(*m_ribDefinitionUID_choice5, *this);
        }

        // read element ribNumber
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
            m_ribNumber_choice5 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/ribNumber");
        }

        // read element positioning
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/positioning")) {
            m_positioning = boost::in_place(this);
            try {
                m_positioning->ReadCPACS(tixiHandle, xpath + "/positioning");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read positioning at xpath " << xpath << ": " << e.what();
                m_positioning = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSLandingGearStrutAttachment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "sparSegmentUID", "supportBeam", "stringerFramePositionUIDs", "structuralMountUIDs", "ribDefinitionUID", "ribNumber", "positioning" };

        // write element sparSegmentUID
        if (m_sparSegmentUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/sparSegmentUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/sparSegmentUID", *m_sparSegmentUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/sparSegmentUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/sparSegmentUID");
            }
        }

        // write element supportBeam
        if (m_supportBeam_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/supportBeam", childElemOrder);
            m_supportBeam_choice2->WriteCPACS(tixiHandle, xpath + "/supportBeam");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/supportBeam")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/supportBeam");
            }
        }

        // write element stringerFramePositionUIDs
        if (m_stringerFramePositionUIDs_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/stringerFramePositionUIDs", childElemOrder);
            m_stringerFramePositionUIDs_choice3->WriteCPACS(tixiHandle, xpath + "/stringerFramePositionUIDs");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringerFramePositionUIDs")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/stringerFramePositionUIDs");
            }
        }

        // write element structuralMountUIDs
        if (m_structuralMountUIDs_choice4) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/structuralMountUIDs", childElemOrder);
            m_structuralMountUIDs_choice4->WriteCPACS(tixiHandle, xpath + "/structuralMountUIDs");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralMountUIDs")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralMountUIDs");
            }
        }

        // write element ribDefinitionUID
        if (m_ribDefinitionUID_choice5) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/ribDefinitionUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribDefinitionUID", *m_ribDefinitionUID_choice5);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribDefinitionUID");
            }
        }

        // write element ribNumber
        if (m_ribNumber_choice5) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/ribNumber", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribNumber", *m_ribNumber_choice5);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribNumber");
            }
        }

        // write element positioning
        if (m_positioning) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/positioning", childElemOrder);
            m_positioning->WriteCPACS(tixiHandle, xpath + "/positioning");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/positioning")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/positioning");
            }
        }

    }

    bool CPACSLandingGearStrutAttachment::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_sparSegmentUID_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_supportBeam_choice2.is_initialized()
                        ||
                        m_stringerFramePositionUIDs_choice3.is_initialized()
                        ||
                        m_structuralMountUIDs_choice4.is_initialized()
                        ||
                        m_ribDefinitionUID_choice5.is_initialized()
                        ||
                        m_ribNumber_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_supportBeam_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparSegmentUID_choice1.is_initialized()
                        ||
                        m_stringerFramePositionUIDs_choice3.is_initialized()
                        ||
                        m_structuralMountUIDs_choice4.is_initialized()
                        ||
                        m_ribDefinitionUID_choice5.is_initialized()
                        ||
                        m_ribNumber_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_stringerFramePositionUIDs_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparSegmentUID_choice1.is_initialized()
                        ||
                        m_supportBeam_choice2.is_initialized()
                        ||
                        m_structuralMountUIDs_choice4.is_initialized()
                        ||
                        m_ribDefinitionUID_choice5.is_initialized()
                        ||
                        m_ribNumber_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_structuralMountUIDs_choice4.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparSegmentUID_choice1.is_initialized()
                        ||
                        m_supportBeam_choice2.is_initialized()
                        ||
                        m_stringerFramePositionUIDs_choice3.is_initialized()
                        ||
                        m_ribDefinitionUID_choice5.is_initialized()
                        ||
                        m_ribNumber_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_ribDefinitionUID_choice5.is_initialized()
                    &&
                    m_ribNumber_choice5.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_sparSegmentUID_choice1.is_initialized()
                        ||
                        m_supportBeam_choice2.is_initialized()
                        ||
                        m_stringerFramePositionUIDs_choice3.is_initialized()
                        ||
                        m_structuralMountUIDs_choice4.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<std::string>& CPACSLandingGearStrutAttachment::GetSparSegmentUID_choice1() const
    {
        return m_sparSegmentUID_choice1;
    }

    void CPACSLandingGearStrutAttachment::SetSparSegmentUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_sparSegmentUID_choice1 && !m_sparSegmentUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_sparSegmentUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_sparSegmentUID_choice1 = value;
    }

    const boost::optional<CPACSSupportBeam>& CPACSLandingGearStrutAttachment::GetSupportBeam_choice2() const
    {
        return m_supportBeam_choice2;
    }

    boost::optional<CPACSSupportBeam>& CPACSLandingGearStrutAttachment::GetSupportBeam_choice2()
    {
        return m_supportBeam_choice2;
    }

    const boost::optional<CPACSStringerFramePositionUIDs>& CPACSLandingGearStrutAttachment::GetStringerFramePositionUIDs_choice3() const
    {
        return m_stringerFramePositionUIDs_choice3;
    }

    boost::optional<CPACSStringerFramePositionUIDs>& CPACSLandingGearStrutAttachment::GetStringerFramePositionUIDs_choice3()
    {
        return m_stringerFramePositionUIDs_choice3;
    }

    const boost::optional<CPACSUIDSequence>& CPACSLandingGearStrutAttachment::GetStructuralMountUIDs_choice4() const
    {
        return m_structuralMountUIDs_choice4;
    }

    boost::optional<CPACSUIDSequence>& CPACSLandingGearStrutAttachment::GetStructuralMountUIDs_choice4()
    {
        return m_structuralMountUIDs_choice4;
    }

    const boost::optional<std::string>& CPACSLandingGearStrutAttachment::GetRibDefinitionUID_choice5() const
    {
        return m_ribDefinitionUID_choice5;
    }

    void CPACSLandingGearStrutAttachment::SetRibDefinitionUID_choice5(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_ribDefinitionUID_choice5 && !m_ribDefinitionUID_choice5->empty()) m_uidMgr->TryUnregisterReference(*m_ribDefinitionUID_choice5, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_ribDefinitionUID_choice5 = value;
    }

    const boost::optional<int>& CPACSLandingGearStrutAttachment::GetRibNumber_choice5() const
    {
        return m_ribNumber_choice5;
    }

    void CPACSLandingGearStrutAttachment::SetRibNumber_choice5(const boost::optional<int>& value)
    {
        m_ribNumber_choice5 = value;
    }

    const boost::optional<CPACSWingAttachmentPositioning>& CPACSLandingGearStrutAttachment::GetPositioning() const
    {
        return m_positioning;
    }

    boost::optional<CPACSWingAttachmentPositioning>& CPACSLandingGearStrutAttachment::GetPositioning()
    {
        return m_positioning;
    }

    CPACSSupportBeam& CPACSLandingGearStrutAttachment::GetSupportBeam_choice2(CreateIfNotExistsTag)
    {
        if (!m_supportBeam_choice2)
            m_supportBeam_choice2 = boost::in_place(this, m_uidMgr);
        return *m_supportBeam_choice2;
    }

    void CPACSLandingGearStrutAttachment::RemoveSupportBeam_choice2()
    {
        m_supportBeam_choice2 = boost::none;
    }

    CPACSStringerFramePositionUIDs& CPACSLandingGearStrutAttachment::GetStringerFramePositionUIDs_choice3(CreateIfNotExistsTag)
    {
        if (!m_stringerFramePositionUIDs_choice3)
            m_stringerFramePositionUIDs_choice3 = boost::in_place(this, m_uidMgr);
        return *m_stringerFramePositionUIDs_choice3;
    }

    void CPACSLandingGearStrutAttachment::RemoveStringerFramePositionUIDs_choice3()
    {
        m_stringerFramePositionUIDs_choice3 = boost::none;
    }

    CPACSUIDSequence& CPACSLandingGearStrutAttachment::GetStructuralMountUIDs_choice4(CreateIfNotExistsTag)
    {
        if (!m_structuralMountUIDs_choice4)
            m_structuralMountUIDs_choice4 = boost::in_place(this, m_uidMgr);
        return *m_structuralMountUIDs_choice4;
    }

    void CPACSLandingGearStrutAttachment::RemoveStructuralMountUIDs_choice4()
    {
        m_structuralMountUIDs_choice4 = boost::none;
    }

    CPACSWingAttachmentPositioning& CPACSLandingGearStrutAttachment::GetPositioning(CreateIfNotExistsTag)
    {
        if (!m_positioning)
            m_positioning = boost::in_place(this);
        return *m_positioning;
    }

    void CPACSLandingGearStrutAttachment::RemovePositioning()
    {
        m_positioning = boost::none;
    }

    const CTiglUIDObject* CPACSLandingGearStrutAttachment::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSLandingGearStrutAttachment::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_sparSegmentUID_choice1 && *m_sparSegmentUID_choice1 == oldUid) {
            m_sparSegmentUID_choice1 = newUid;
        }
        if (m_ribDefinitionUID_choice5 && *m_ribDefinitionUID_choice5 == oldUid) {
            m_ribDefinitionUID_choice5 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
