// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSDeckElementGeometry.h"
#include "CPACSDeckElementMass.h"
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSCeilingPanelElements;
    class CPACSClassDividerElements;
    class CPACSGenericFloorElements;
    class CPACSLavatoryElements;
    class CPACSLuggageCompartmentElements;
    class CPACSSidewallPanelElements;

    // This class is used in:
    // CPACSCeilingPanelElements
    // CPACSClassDividerElements
    // CPACSGenericFloorElements
    // CPACSLavatoryElements
    // CPACSLuggageCompartmentElements
    // CPACSSidewallPanelElements

    /// @brief Deck element
    /// 
    /// 
    class CPACSDeckElementBase : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSDeckElementBase(CPACSCeilingPanelElements* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSDeckElementBase(CPACSClassDividerElements* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSDeckElementBase(CPACSGenericFloorElements* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSDeckElementBase(CPACSLavatoryElements* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSDeckElementBase(CPACSLuggageCompartmentElements* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSDeckElementBase(CPACSSidewallPanelElements* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSDeckElementBase();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSCeilingPanelElements>::value || std::is_same<P, CPACSClassDividerElements>::value || std::is_same<P, CPACSGenericFloorElements>::value || std::is_same<P, CPACSLavatoryElements>::value || std::is_same<P, CPACSLuggageCompartmentElements>::value || std::is_same<P, CPACSSidewallPanelElements>::value, "template argument for P is not a parent class of CPACSDeckElementBase");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSCeilingPanelElements>::value || std::is_same<P, CPACSClassDividerElements>::value || std::is_same<P, CPACSGenericFloorElements>::value || std::is_same<P, CPACSLavatoryElements>::value || std::is_same<P, CPACSLuggageCompartmentElements>::value || std::is_same<P, CPACSSidewallPanelElements>::value, "template argument for P is not a parent class of CPACSDeckElementBase");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const CPACSDeckElementGeometry& GetGeometry() const;
        TIGL_EXPORT virtual CPACSDeckElementGeometry& GetGeometry();

        TIGL_EXPORT virtual const boost::optional<CPACSDeckElementMass>& GetMass() const;
        TIGL_EXPORT virtual boost::optional<CPACSDeckElementMass>& GetMass();

        TIGL_EXPORT virtual CPACSDeckElementMass& GetMass(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveMass();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                           m_uID;

        /// Description
        boost::optional<std::string>          m_description;

        CPACSDeckElementGeometry              m_geometry;

        boost::optional<CPACSDeckElementMass> m_mass;

    private:
        CPACSDeckElementBase(const CPACSDeckElementBase&) = delete;
        CPACSDeckElementBase& operator=(const CPACSDeckElementBase&) = delete;

        CPACSDeckElementBase(CPACSDeckElementBase&&) = delete;
        CPACSDeckElementBase& operator=(CPACSDeckElementBase&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSDeckElementBase = generated::CPACSDeckElementBase;
using CCPACSCeilingPanelElements = generated::CPACSCeilingPanelElements;
using CCPACSClassDividerElements = generated::CPACSClassDividerElements;
using CCPACSGenericFloorElements = generated::CPACSGenericFloorElements;
using CCPACSLavatoryElements = generated::CPACSLavatoryElements;
using CCPACSLuggageCompartmentElements = generated::CPACSLuggageCompartmentElements;
using CCPACSSidewallPanelElements = generated::CPACSSidewallPanelElements;
} // namespace tigl
