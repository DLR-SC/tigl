// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSSheet_continuityAtP1.h"
#include "CPACSPointXY.h"
#include "CPACSSheet_continuityAtP2.h"
#include "CPACSPointXY.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSSheetList
        
        // generated from /xsd:schema/xsd:complexType[776]
        class CPACSSheet
        {
        public:
            TIGL_EXPORT CPACSSheet();
            TIGL_EXPORT virtual ~CPACSSheet();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const std::string& GetFromPointUID() const;
            TIGL_EXPORT void SetFromPointUID(const std::string& value);
            
            TIGL_EXPORT bool HasContinuityAtP1() const;
            TIGL_EXPORT const CPACSSheet_continuityAtP1& GetContinuityAtP1() const;
            TIGL_EXPORT CPACSSheet_continuityAtP1& GetContinuityAtP1();
            
            TIGL_EXPORT bool HasOrientationAtP1() const;
            TIGL_EXPORT const CPACSPointXY& GetOrientationAtP1() const;
            TIGL_EXPORT CPACSPointXY& GetOrientationAtP1();
            
            TIGL_EXPORT const std::string& GetToPointUID() const;
            TIGL_EXPORT void SetToPointUID(const std::string& value);
            
            TIGL_EXPORT bool HasContinuityAtP2() const;
            TIGL_EXPORT const CPACSSheet_continuityAtP2& GetContinuityAtP2() const;
            TIGL_EXPORT CPACSSheet_continuityAtP2& GetContinuityAtP2();
            
            TIGL_EXPORT bool HasOrientationAtP2() const;
            TIGL_EXPORT const CPACSPointXY& GetOrientationAtP2() const;
            TIGL_EXPORT CPACSPointXY& GetOrientationAtP2();
            
        protected:
            boost::optional<std::string>               m_uID;
            boost::optional<std::string>               m_name;
            boost::optional<std::string>               m_description;
            std::string                                m_fromPointUID;
            boost::optional<CPACSSheet_continuityAtP1> m_continuityAtP1;
            boost::optional<CPACSPointXY>              m_orientationAtP1;
            std::string                                m_toPointUID;
            boost::optional<CPACSSheet_continuityAtP2> m_continuityAtP2;
            boost::optional<CPACSPointXY>              m_orientationAtP2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSSheet(const CPACSSheet&) = delete;
            CPACSSheet& operator=(const CPACSSheet&) = delete;
            
            CPACSSheet(CPACSSheet&&) = delete;
            CPACSSheet& operator=(CPACSSheet&&) = delete;
            #else
            CPACSSheet(const CPACSSheet&);
            CPACSSheet& operator=(const CPACSSheet&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSSheet = generated::CPACSSheet;
    #else
    typedef generated::CPACSSheet CCPACSSheet;
    #endif
}
