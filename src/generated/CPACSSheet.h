// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPointXY.h>
#include <string>
#include <tixi.h>
#include "CPACSContinuityAtP.h"
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSSheetList;

namespace generated
{
    // This class is used in:
    // CPACSSheetList

    /// @brief sheetType
    /// 
    /// Sheet type, containing connection data of a sheet
    /// 
    class CPACSSheet : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSSheet(CCPACSSheetList* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSSheet();

        TIGL_EXPORT CCPACSSheetList* GetParent();

        TIGL_EXPORT const CCPACSSheetList* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
        TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetFromPointUID() const;
        TIGL_EXPORT virtual void SetFromPointUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<CPACSContinuityAtP>& GetContinuityAtP1() const;
        TIGL_EXPORT virtual void SetContinuityAtP1(const boost::optional<CPACSContinuityAtP>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPointXY>& GetOrientationAtP1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPointXY>& GetOrientationAtP1();

        TIGL_EXPORT virtual const std::string& GetToPointUID() const;
        TIGL_EXPORT virtual void SetToPointUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<CPACSContinuityAtP>& GetContinuityAtP2() const;
        TIGL_EXPORT virtual void SetContinuityAtP2(const boost::optional<CPACSContinuityAtP>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPointXY>& GetOrientationAtP2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPointXY>& GetOrientationAtP2();

        TIGL_EXPORT virtual CCPACSPointXY& GetOrientationAtP1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveOrientationAtP1();

        TIGL_EXPORT virtual CCPACSPointXY& GetOrientationAtP2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveOrientationAtP2();

    protected:
        CCPACSSheetList* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                         m_uID;

        /// Name of sheet within the profile definition
        boost::optional<std::string>        m_name;

        /// Description of sheet within the profile
        /// definition
        boost::optional<std::string>        m_description;

        /// Point from which the sheet definition starts
        /// start
        std::string                         m_fromPointUID;

        /// Continuity definition for profile geometry
        /// generation. 0= C0 (allows sharp edges, deafault), 1= C1 (defines
        /// tangential continuity), 2= C2 (defines curvature continuity)
        /// 2=all
        boost::optional<CPACSContinuityAtP> m_continuityAtP1;

        /// Definition of an orientation vector at P1
        boost::optional<CCPACSPointXY>      m_orientationAtP1;

        /// Point at which the sheet definition ends
        std::string                         m_toPointUID;

        /// Continuity definition for profile geometry
        /// generation. 0= C0 (allows sharp edges, deafault), 1= C1 (defines
        /// tangential continuity), 2= C2 (defines curvature continuity)
        /// 2=all
        boost::optional<CPACSContinuityAtP> m_continuityAtP2;

        /// Definition of an orientation vector at P2
        boost::optional<CCPACSPointXY>      m_orientationAtP2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSSheet(const CPACSSheet&) = delete;
        CPACSSheet& operator=(const CPACSSheet&) = delete;

        CPACSSheet(CPACSSheet&&) = delete;
        CPACSSheet& operator=(CPACSSheet&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSSheet = generated::CPACSSheet;
} // namespace tigl
