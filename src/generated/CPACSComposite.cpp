// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSComposite.h"
#include "CPACSCompositeLayer.h"
#include "CPACSComposites.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSComposite::CPACSComposite(CPACSComposites* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSComposite::~CPACSComposite()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSComposites* CPACSComposite::GetParent() const
    {
        return m_parent;
    }

    CPACSComposites* CPACSComposite::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSComposite::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSComposite::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSComposite::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSComposite::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSComposite::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element offset
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/offset")) {
            m_offset = tixi::TixiGetElement<double>(tixiHandle, xpath + "/offset");
        }

        // read element compositeLayer
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/compositeLayer")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/compositeLayer", m_compositeLayers, 0, tixi::xsdUnbounded, this, m_uidMgr);
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSComposite::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "offset", "compositeLayer" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element offset
        if (m_offset) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/offset", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/offset", *m_offset);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/offset")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/offset");
            }
        }

        // write element compositeLayer
        tixi::TixiSaveElements(tixiHandle, xpath + "/compositeLayer", m_compositeLayers);

    }

    const std::string& CPACSComposite::GetUID() const
    {
        return m_uID;
    }

    void CPACSComposite::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSComposite::GetName() const
    {
        return m_name;
    }

    void CPACSComposite::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSComposite::GetDescription() const
    {
        return m_description;
    }

    void CPACSComposite::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<double>& CPACSComposite::GetOffset() const
    {
        return m_offset;
    }

    void CPACSComposite::SetOffset(const boost::optional<double>& value)
    {
        m_offset = value;
    }

    const std::vector<std::unique_ptr<CPACSCompositeLayer>>& CPACSComposite::GetCompositeLayers() const
    {
        return m_compositeLayers;
    }

    std::vector<std::unique_ptr<CPACSCompositeLayer>>& CPACSComposite::GetCompositeLayers()
    {
        return m_compositeLayers;
    }

    CPACSCompositeLayer& CPACSComposite::AddCompositeLayer()
    {
        m_compositeLayers.push_back(make_unique<CPACSCompositeLayer>(this, m_uidMgr));
        return *m_compositeLayers.back();
    }

    void CPACSComposite::RemoveCompositeLayer(CPACSCompositeLayer& ref)
    {
        for (std::size_t i = 0; i < m_compositeLayers.size(); i++) {
            if (m_compositeLayers[i].get() == &ref) {
                m_compositeLayers.erase(m_compositeLayers.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
