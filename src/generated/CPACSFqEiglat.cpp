// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqEiglat.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqEiglat::CPACSFqEiglat(){}
        CPACSFqEiglat::~CPACSFqEiglat() {}
        
        void CPACSFqEiglat::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element dutchRollFrequency
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dutchRollFrequency")) {
                m_dutchRollFrequency = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/dutchRollFrequency");
            }
            
            // read element dutchRollDamping
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dutchRollDamping")) {
                m_dutchRollDamping = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/dutchRollDamping");
            }
            
            // read element rollTimeConstant
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollTimeConstant")) {
                m_rollTimeConstant = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollTimeConstant");
            }
            
            // read element spiralDoublingTime
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spiralDoublingTime")) {
                m_spiralDoublingTime = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/spiralDoublingTime");
            }
            
            // read element ratioPhiBeta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ratioPhiBeta")) {
                m_ratioPhiBeta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/ratioPhiBeta");
            }
            
            // read element rollFrequency
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollFrequency")) {
                m_rollFrequency = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollFrequency");
            }
            
            // read element rollSpiralDamping
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollSpiralDamping")) {
                m_rollSpiralDamping = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollSpiralDamping");
            }
            
            // read element rollSpiralProduct
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollSpiralProduct")) {
                m_rollSpiralProduct = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollSpiralProduct");
            }
            
            // read element durchroll
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/durchroll")) {
                m_durchroll = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/durchroll");
            }
            
            // read element roll
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/roll")) {
                m_roll = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/roll");
            }
            
        }
        
        void CPACSFqEiglat::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element dutchRollFrequency
            if (m_dutchRollFrequency) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dutchRollFrequency");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/dutchRollFrequency", *m_dutchRollFrequency);
            }
            
            // write element dutchRollDamping
            if (m_dutchRollDamping) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dutchRollDamping");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/dutchRollDamping", *m_dutchRollDamping);
            }
            
            // write element rollTimeConstant
            if (m_rollTimeConstant) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollTimeConstant");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollTimeConstant", *m_rollTimeConstant);
            }
            
            // write element spiralDoublingTime
            if (m_spiralDoublingTime) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spiralDoublingTime");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/spiralDoublingTime", *m_spiralDoublingTime);
            }
            
            // write element ratioPhiBeta
            if (m_ratioPhiBeta) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ratioPhiBeta");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ratioPhiBeta", *m_ratioPhiBeta);
            }
            
            // write element rollFrequency
            if (m_rollFrequency) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollFrequency");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollFrequency", *m_rollFrequency);
            }
            
            // write element rollSpiralDamping
            if (m_rollSpiralDamping) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollSpiralDamping");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollSpiralDamping", *m_rollSpiralDamping);
            }
            
            // write element rollSpiralProduct
            if (m_rollSpiralProduct) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollSpiralProduct");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollSpiralProduct", *m_rollSpiralProduct);
            }
            
            // write element durchroll
            if (m_durchroll) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/durchroll");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/durchroll", *m_durchroll);
            }
            
            // write element roll
            if (m_roll) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/roll");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/roll", *m_roll);
            }
            
        }
        
        bool CPACSFqEiglat::HasDutchRollFrequency() const
        {
            return static_cast<bool>(m_dutchRollFrequency);
        }
        
        const double& CPACSFqEiglat::GetDutchRollFrequency() const
        {
            return *m_dutchRollFrequency;
        }
        
        void CPACSFqEiglat::SetDutchRollFrequency(const double& value)
        {
            m_dutchRollFrequency = value;
        }
        
        bool CPACSFqEiglat::HasDutchRollDamping() const
        {
            return static_cast<bool>(m_dutchRollDamping);
        }
        
        const double& CPACSFqEiglat::GetDutchRollDamping() const
        {
            return *m_dutchRollDamping;
        }
        
        void CPACSFqEiglat::SetDutchRollDamping(const double& value)
        {
            m_dutchRollDamping = value;
        }
        
        bool CPACSFqEiglat::HasRollTimeConstant() const
        {
            return static_cast<bool>(m_rollTimeConstant);
        }
        
        const double& CPACSFqEiglat::GetRollTimeConstant() const
        {
            return *m_rollTimeConstant;
        }
        
        void CPACSFqEiglat::SetRollTimeConstant(const double& value)
        {
            m_rollTimeConstant = value;
        }
        
        bool CPACSFqEiglat::HasSpiralDoublingTime() const
        {
            return static_cast<bool>(m_spiralDoublingTime);
        }
        
        const double& CPACSFqEiglat::GetSpiralDoublingTime() const
        {
            return *m_spiralDoublingTime;
        }
        
        void CPACSFqEiglat::SetSpiralDoublingTime(const double& value)
        {
            m_spiralDoublingTime = value;
        }
        
        bool CPACSFqEiglat::HasRatioPhiBeta() const
        {
            return static_cast<bool>(m_ratioPhiBeta);
        }
        
        const double& CPACSFqEiglat::GetRatioPhiBeta() const
        {
            return *m_ratioPhiBeta;
        }
        
        void CPACSFqEiglat::SetRatioPhiBeta(const double& value)
        {
            m_ratioPhiBeta = value;
        }
        
        bool CPACSFqEiglat::HasRollFrequency() const
        {
            return static_cast<bool>(m_rollFrequency);
        }
        
        const double& CPACSFqEiglat::GetRollFrequency() const
        {
            return *m_rollFrequency;
        }
        
        void CPACSFqEiglat::SetRollFrequency(const double& value)
        {
            m_rollFrequency = value;
        }
        
        bool CPACSFqEiglat::HasRollSpiralDamping() const
        {
            return static_cast<bool>(m_rollSpiralDamping);
        }
        
        const double& CPACSFqEiglat::GetRollSpiralDamping() const
        {
            return *m_rollSpiralDamping;
        }
        
        void CPACSFqEiglat::SetRollSpiralDamping(const double& value)
        {
            m_rollSpiralDamping = value;
        }
        
        bool CPACSFqEiglat::HasRollSpiralProduct() const
        {
            return static_cast<bool>(m_rollSpiralProduct);
        }
        
        const double& CPACSFqEiglat::GetRollSpiralProduct() const
        {
            return *m_rollSpiralProduct;
        }
        
        void CPACSFqEiglat::SetRollSpiralProduct(const double& value)
        {
            m_rollSpiralProduct = value;
        }
        
        bool CPACSFqEiglat::HasDurchroll() const
        {
            return static_cast<bool>(m_durchroll);
        }
        
        const double& CPACSFqEiglat::GetDurchroll() const
        {
            return *m_durchroll;
        }
        
        void CPACSFqEiglat::SetDurchroll(const double& value)
        {
            m_durchroll = value;
        }
        
        bool CPACSFqEiglat::HasRoll() const
        {
            return static_cast<bool>(m_roll);
        }
        
        const double& CPACSFqEiglat::GetRoll() const
        {
            return *m_roll;
        }
        
        void CPACSFqEiglat::SetRoll(const double& value)
        {
            m_roll = value;
        }
        
    }
}
