// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSVtpFrameDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSVtpFrameDef::CPACSVtpFrameDef(){}
        CPACSVtpFrameDef::~CPACSVtpFrameDef() {}
        
        void CPACSVtpFrameDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element vtpFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFrameUID")) {
                m_vtpFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vtpFrameUID");
            }
            else {
                LOG(ERROR) << "Required element vtpFrameUID is missing";
            }
            
            // read element vtpFramePlus1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFramePlus1")) {
                m_vtpFramePlus1 = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/vtpFramePlus1");
            }
            
            // read element vtpFrameSheetElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFrameSheetElemUID")) {
                m_vtpFrameSheetElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vtpFrameSheetElemUID");
            }
            else {
                LOG(ERROR) << "Required element vtpFrameSheetElemUID is missing";
            }
            
            // read element vtpFrameReinfBaseStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFrameReinfBaseStructElemUID")) {
                m_vtpFrameReinfBaseStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vtpFrameReinfBaseStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element vtpFrameReinfBaseStructElemUID is missing";
            }
            
            // read element vtpFrameReinfHorizStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFrameReinfHorizStructElemUID")) {
                m_vtpFrameReinfHorizStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vtpFrameReinfHorizStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element vtpFrameReinfHorizStructElemUID is missing";
            }
            
            // read element vtpFrameReinfRadialStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vtpFrameReinfRadialStructElemUID")) {
                m_vtpFrameReinfRadialStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/vtpFrameReinfRadialStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element vtpFrameReinfRadialStructElemUID is missing";
            }
            
        }
        
        void CPACSVtpFrameDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element vtpFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFrameUID", m_vtpFrameUID);
            
            // write element vtpFramePlus1
            if (m_vtpFramePlus1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFramePlus1");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFramePlus1", *m_vtpFramePlus1);
            }
            
            // write element vtpFrameSheetElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFrameSheetElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFrameSheetElemUID", m_vtpFrameSheetElemUID);
            
            // write element vtpFrameReinfBaseStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFrameReinfBaseStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFrameReinfBaseStructElemUID", m_vtpFrameReinfBaseStructElemUID);
            
            // write element vtpFrameReinfHorizStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFrameReinfHorizStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFrameReinfHorizStructElemUID", m_vtpFrameReinfHorizStructElemUID);
            
            // write element vtpFrameReinfRadialStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vtpFrameReinfRadialStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vtpFrameReinfRadialStructElemUID", m_vtpFrameReinfRadialStructElemUID);
            
        }
        
        bool CPACSVtpFrameDef::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSVtpFrameDef::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSVtpFrameDef::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSVtpFrameDef::GetVtpFrameUID() const
        {
            return m_vtpFrameUID;
        }
        
        void CPACSVtpFrameDef::SetVtpFrameUID(const std::string& value)
        {
            m_vtpFrameUID = value;
        }
        
        bool CPACSVtpFrameDef::HasVtpFramePlus1() const
        {
            return static_cast<bool>(m_vtpFramePlus1);
        }
        
        const bool& CPACSVtpFrameDef::GetVtpFramePlus1() const
        {
            return *m_vtpFramePlus1;
        }
        
        void CPACSVtpFrameDef::SetVtpFramePlus1(const bool& value)
        {
            m_vtpFramePlus1 = value;
        }
        
        const std::string& CPACSVtpFrameDef::GetVtpFrameSheetElemUID() const
        {
            return m_vtpFrameSheetElemUID;
        }
        
        void CPACSVtpFrameDef::SetVtpFrameSheetElemUID(const std::string& value)
        {
            m_vtpFrameSheetElemUID = value;
        }
        
        const std::string& CPACSVtpFrameDef::GetVtpFrameReinfBaseStructElemUID() const
        {
            return m_vtpFrameReinfBaseStructElemUID;
        }
        
        void CPACSVtpFrameDef::SetVtpFrameReinfBaseStructElemUID(const std::string& value)
        {
            m_vtpFrameReinfBaseStructElemUID = value;
        }
        
        const std::string& CPACSVtpFrameDef::GetVtpFrameReinfHorizStructElemUID() const
        {
            return m_vtpFrameReinfHorizStructElemUID;
        }
        
        void CPACSVtpFrameDef::SetVtpFrameReinfHorizStructElemUID(const std::string& value)
        {
            m_vtpFrameReinfHorizStructElemUID = value;
        }
        
        const std::string& CPACSVtpFrameDef::GetVtpFrameReinfRadialStructElemUID() const
        {
            return m_vtpFrameReinfRadialStructElemUID;
        }
        
        void CPACSVtpFrameDef::SetVtpFrameReinfRadialStructElemUID(const std::string& value)
        {
            m_vtpFrameReinfRadialStructElemUID = value;
        }
        
    }
}
