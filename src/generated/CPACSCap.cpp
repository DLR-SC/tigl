// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingRibCrossSection.h"
#include "CPACSCap.h"
#include "CPACSSparCell.h"
#include "CPACSSparCrossSection.h"
#include "CPACSStructuralWallElement.h"
#include "CPACSWingRibCell.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCap::CPACSCap(CPACSSparCell* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_area(0)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSparCell);
    }

    CPACSCap::CPACSCap(CPACSSparCrossSection* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_area(0)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSparCrossSection);
    }

    CPACSCap::CPACSCap(CPACSStructuralWallElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_area(0)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSStructuralWallElement);
    }

    CPACSCap::CPACSCap(CPACSWingRibCell* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_area(0)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSWingRibCell);
    }

    CPACSCap::CPACSCap(CCPACSWingRibCrossSection* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_area(0)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSWingRibCrossSection);
    }

    CPACSCap::~CPACSCap()
    {
    }

    const CTiglUIDObject* CPACSCap::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSSparCell>()) {
                return GetParent<CPACSSparCell>();
            }
            if (IsParent<CPACSSparCrossSection>()) {
                return GetParent<CPACSSparCrossSection>()->GetNextUIDParent();
            }
            if (IsParent<CPACSStructuralWallElement>()) {
                if (GetParent<CPACSStructuralWallElement>()->GetUID())
                    return GetParent<CPACSStructuralWallElement>();
                else
                    return GetParent<CPACSStructuralWallElement>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingRibCell>()) {
                return GetParent<CPACSWingRibCell>();
            }
            if (IsParent<CCPACSWingRibCrossSection>()) {
                return GetParent<CCPACSWingRibCrossSection>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCap::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSSparCell>()) {
                return GetParent<CPACSSparCell>();
            }
            if (IsParent<CPACSSparCrossSection>()) {
                return GetParent<CPACSSparCrossSection>()->GetNextUIDParent();
            }
            if (IsParent<CPACSStructuralWallElement>()) {
                if (GetParent<CPACSStructuralWallElement>()->GetUID())
                    return GetParent<CPACSStructuralWallElement>();
                else
                    return GetParent<CPACSStructuralWallElement>()->GetNextUIDParent();
            }
            if (IsParent<CPACSWingRibCell>()) {
                return GetParent<CPACSWingRibCell>();
            }
            if (IsParent<CCPACSWingRibCrossSection>()) {
                return GetParent<CCPACSWingRibCrossSection>()->GetNextUIDParent();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSCap::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCap::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSCap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element area
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/area")) {
            m_area = tixi::TixiGetElement<double>(tixiHandle, xpath + "/area");
        }
        else {
            LOG(ERROR) << "Required element area is missing at xpath " << xpath;
        }

        // read element material
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/material")) {
            m_material.ReadCPACS(tixiHandle, xpath + "/material");
        }
        else {
            LOG(ERROR) << "Required element material is missing at xpath " << xpath;
        }

    }

    void CPACSCap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "area", "material" };

        // write element area
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/area", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/area", m_area);

        // write element material
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/material", childElemOrder);
        m_material.WriteCPACS(tixiHandle, xpath + "/material");

    }

    const double& CPACSCap::GetArea() const
    {
        return m_area;
    }

    void CPACSCap::SetArea(const double& value)
    {
        m_area = value;
    }

    const CCPACSMaterialDefinition& CPACSCap::GetMaterial() const
    {
        return m_material;
    }

    CCPACSMaterialDefinition& CPACSCap::GetMaterial()
    {
        return m_material;
    }

} // namespace generated
} // namespace tigl
