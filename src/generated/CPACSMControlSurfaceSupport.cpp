// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMControlSurfaceSupport.h"

namespace tigl
{
    namespace generated
    {
        CPACSMControlSurfaceSupport::CPACSMControlSurfaceSupport(){}
        CPACSMControlSurfaceSupport::~CPACSMControlSurfaceSupport() {}
        
        void CPACSMControlSurfaceSupport::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mStructure")) {
                m_mStructure = boost::in_place();
                try {
                    m_mStructure->ReadCPACS(tixiHandle, xpath + "/mStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mStructure at xpath << " << xpath << ": " << e.what();
                    m_mStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mStructure at xpath << " << xpath << ": " << e.getError();
                    m_mStructure = boost::none;
                }
            }
            
            // read element mFairing
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFairing")) {
                m_mFairing = boost::in_place();
                try {
                    m_mFairing->ReadCPACS(tixiHandle, xpath + "/mFairing");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFairing at xpath << " << xpath << ": " << e.what();
                    m_mFairing = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFairing at xpath << " << xpath << ": " << e.getError();
                    m_mFairing = boost::none;
                }
            }
            
            // read element mParentAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mParentAttachment")) {
                m_mParentAttachment = boost::in_place();
                try {
                    m_mParentAttachment->ReadCPACS(tixiHandle, xpath + "/mParentAttachment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mParentAttachment at xpath << " << xpath << ": " << e.what();
                    m_mParentAttachment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mParentAttachment at xpath << " << xpath << ": " << e.getError();
                    m_mParentAttachment = boost::none;
                }
            }
            
        }
        
        void CPACSMControlSurfaceSupport::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mStructure
            if (m_mStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mStructure");
                m_mStructure->WriteCPACS(tixiHandle, xpath + "/mStructure");
            }
            
            // write element mFairing
            if (m_mFairing) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFairing");
                m_mFairing->WriteCPACS(tixiHandle, xpath + "/mFairing");
            }
            
            // write element mParentAttachment
            if (m_mParentAttachment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mParentAttachment");
                m_mParentAttachment->WriteCPACS(tixiHandle, xpath + "/mParentAttachment");
            }
            
        }
        
        const CPACSGenericMass& CPACSMControlSurfaceSupport::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMControlSurfaceSupport::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMControlSurfaceSupport::HasMStructure() const
        {
            return static_cast<bool>(m_mStructure);
        }
        
        const CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMStructure() const
        {
            return *m_mStructure;
        }
        
        CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMStructure()
        {
            return *m_mStructure;
        }
        
        bool CPACSMControlSurfaceSupport::HasMFairing() const
        {
            return static_cast<bool>(m_mFairing);
        }
        
        const CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMFairing() const
        {
            return *m_mFairing;
        }
        
        CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMFairing()
        {
            return *m_mFairing;
        }
        
        bool CPACSMControlSurfaceSupport::HasMParentAttachment() const
        {
            return static_cast<bool>(m_mParentAttachment);
        }
        
        const CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMParentAttachment() const
        {
            return *m_mParentAttachment;
        }
        
        CPACSSingleGenericMass& CPACSMControlSurfaceSupport::GetMParentAttachment()
        {
            return *m_mParentAttachment;
        }
        
    }
}
