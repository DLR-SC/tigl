// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearBase.h"
#include "CPACSLandingGears.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearBase::CPACSLandingGearBase(CPACSLandingGears* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_transformation(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearBase::~CPACSLandingGearBase()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (m_parentUID && !m_parentUID->empty()) m_uidMgr->TryUnregisterReference(*m_parentUID, *this);
        }
    }

    const CPACSLandingGears* CPACSLandingGearBase::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGears* CPACSLandingGearBase::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearBase::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSLandingGearBase::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSLandingGearBase::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearBase::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearBase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read attribute symmetry
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
            m_symmetry = stringToTiglSymmetryAxis(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "symmetry"));
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element parentUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
            m_parentUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            if (m_parentUID->empty()) {
                LOG(WARNING) << "Optional element parentUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_parentUID->empty()) m_uidMgr->RegisterReference(*m_parentUID, *this);
        }

        // read element control
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/control")) {
            m_control = boost::in_place(this, m_uidMgr);
            try {
                m_control->ReadCPACS(tixiHandle, xpath + "/control");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read control at xpath " << xpath << ": " << e.what();
                m_control = boost::none;
            }
        }

        // read element componentAssembly
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/componentAssembly")) {
            m_componentAssembly_choice1 = boost::in_place(this, m_uidMgr);
            try {
                m_componentAssembly_choice1->ReadCPACS(tixiHandle, xpath + "/componentAssembly");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read componentAssembly at xpath " << xpath << ": " << e.what();
                m_componentAssembly_choice1 = boost::none;
            }
        }

        // read element totalLength
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/totalLength")) {
            m_totalLength_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/totalLength");
        }

        // read element staticSuspensionTravel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/staticSuspensionTravel")) {
            m_staticSuspensionTravel_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/staticSuspensionTravel");
        }

        // read element compressedSuspensionTravel
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/compressedSuspensionTravel")) {
            m_compressedSuspensionTravel_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/compressedSuspensionTravel");
        }

        // read element transformation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
            m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
        }
        else {
            LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSLandingGearBase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "parentUID", "control", "componentAssembly", "totalLength", "staticSuspensionTravel", "compressedSuspensionTravel", "transformation" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write attribute symmetry
        if (m_symmetry) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "symmetry", TiglSymmetryAxisToString(*m_symmetry));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "symmetry");
            }
        }

        // write element name
        if (m_name) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element parentUID
        if (m_parentUID) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/parentUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/parentUID", *m_parentUID);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/parentUID");
            }
        }

        // write element control
        if (m_control) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/control", childElemOrder);
            m_control->WriteCPACS(tixiHandle, xpath + "/control");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/control")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/control");
            }
        }

        // write element componentAssembly
        if (m_componentAssembly_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/componentAssembly", childElemOrder);
            m_componentAssembly_choice1->WriteCPACS(tixiHandle, xpath + "/componentAssembly");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/componentAssembly")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/componentAssembly");
            }
        }

        // write element totalLength
        if (m_totalLength_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/totalLength", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/totalLength", *m_totalLength_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/totalLength")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/totalLength");
            }
        }

        // write element staticSuspensionTravel
        if (m_staticSuspensionTravel_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/staticSuspensionTravel", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/staticSuspensionTravel", *m_staticSuspensionTravel_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/staticSuspensionTravel")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/staticSuspensionTravel");
            }
        }

        // write element compressedSuspensionTravel
        if (m_compressedSuspensionTravel_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/compressedSuspensionTravel", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/compressedSuspensionTravel", *m_compressedSuspensionTravel_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/compressedSuspensionTravel")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/compressedSuspensionTravel");
            }
        }

        // write element transformation
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/transformation", childElemOrder);
        m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");

    }

    bool CPACSLandingGearBase::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_componentAssembly_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_totalLength_choice2.is_initialized()
                        ||
                        m_staticSuspensionTravel_choice2.is_initialized()
                        ||
                        m_compressedSuspensionTravel_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_totalLength_choice2.is_initialized()
                    &&
                    true // m_staticSuspensionTravel_choice2 is optional in choice
                    &&
                    true // m_compressedSuspensionTravel_choice2 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_componentAssembly_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSLandingGearBase::GetUID() const
    {
        return m_uID;
    }

    void CPACSLandingGearBase::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<TiglSymmetryAxis>& CPACSLandingGearBase::GetSymmetry() const
    {
        return m_symmetry;
    }

    void CPACSLandingGearBase::SetSymmetry(const boost::optional<TiglSymmetryAxis>& value)
    {
        m_symmetry = value;
    }

    const boost::optional<std::string>& CPACSLandingGearBase::GetName() const
    {
        return m_name;
    }

    void CPACSLandingGearBase::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSLandingGearBase::GetDescription() const
    {
        return m_description;
    }

    void CPACSLandingGearBase::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<std::string>& CPACSLandingGearBase::GetParentUID() const
    {
        return m_parentUID;
    }

    void CPACSLandingGearBase::SetParentUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_parentUID && !m_parentUID->empty()) m_uidMgr->TryUnregisterReference(*m_parentUID, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_parentUID = value;
    }

    const boost::optional<CPACSLandingGearControl>& CPACSLandingGearBase::GetControl() const
    {
        return m_control;
    }

    boost::optional<CPACSLandingGearControl>& CPACSLandingGearBase::GetControl()
    {
        return m_control;
    }

    const boost::optional<CPACSLandingGearComponentAssembly>& CPACSLandingGearBase::GetComponentAssembly_choice1() const
    {
        return m_componentAssembly_choice1;
    }

    boost::optional<CPACSLandingGearComponentAssembly>& CPACSLandingGearBase::GetComponentAssembly_choice1()
    {
        return m_componentAssembly_choice1;
    }

    const boost::optional<double>& CPACSLandingGearBase::GetTotalLength_choice2() const
    {
        return m_totalLength_choice2;
    }

    void CPACSLandingGearBase::SetTotalLength_choice2(const boost::optional<double>& value)
    {
        m_totalLength_choice2 = value;
    }

    const boost::optional<double>& CPACSLandingGearBase::GetStaticSuspensionTravel_choice2() const
    {
        return m_staticSuspensionTravel_choice2;
    }

    void CPACSLandingGearBase::SetStaticSuspensionTravel_choice2(const boost::optional<double>& value)
    {
        m_staticSuspensionTravel_choice2 = value;
    }

    const boost::optional<double>& CPACSLandingGearBase::GetCompressedSuspensionTravel_choice2() const
    {
        return m_compressedSuspensionTravel_choice2;
    }

    void CPACSLandingGearBase::SetCompressedSuspensionTravel_choice2(const boost::optional<double>& value)
    {
        m_compressedSuspensionTravel_choice2 = value;
    }

    const CCPACSTransformation& CPACSLandingGearBase::GetTransformation() const
    {
        return m_transformation;
    }

    CCPACSTransformation& CPACSLandingGearBase::GetTransformation()
    {
        return m_transformation;
    }

    CPACSLandingGearControl& CPACSLandingGearBase::GetControl(CreateIfNotExistsTag)
    {
        if (!m_control)
            m_control = boost::in_place(this, m_uidMgr);
        return *m_control;
    }

    void CPACSLandingGearBase::RemoveControl()
    {
        m_control = boost::none;
    }

    CPACSLandingGearComponentAssembly& CPACSLandingGearBase::GetComponentAssembly_choice1(CreateIfNotExistsTag)
    {
        if (!m_componentAssembly_choice1)
            m_componentAssembly_choice1 = boost::in_place(this, m_uidMgr);
        return *m_componentAssembly_choice1;
    }

    void CPACSLandingGearBase::RemoveComponentAssembly_choice1()
    {
        m_componentAssembly_choice1 = boost::none;
    }

    const CTiglUIDObject* CPACSLandingGearBase::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSLandingGearBase::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_parentUID && *m_parentUID == oldUid) {
            m_parentUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
