// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseRotation.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseRotation::CPACSLoadCaseRotation(){}
        CPACSLoadCaseRotation::~CPACSLoadCaseRotation() {}
        
        void CPACSLoadCaseRotation::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element orientation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientation")) {
                m_orientation = boost::in_place();
                try {
                    m_orientation->ReadCPACS(tixiHandle, xpath + "/orientation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientation at xpath << " << xpath << ": " << e.what();
                    m_orientation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientation at xpath << " << xpath << ": " << e.getError();
                    m_orientation = boost::none;
                }
            }
            
            // read element angularVelocity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angularVelocity")) {
                m_angularVelocity = boost::in_place();
                try {
                    m_angularVelocity->ReadCPACS(tixiHandle, xpath + "/angularVelocity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read angularVelocity at xpath << " << xpath << ": " << e.what();
                    m_angularVelocity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read angularVelocity at xpath << " << xpath << ": " << e.getError();
                    m_angularVelocity = boost::none;
                }
            }
            
            // read element angularAcceleration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angularAcceleration")) {
                m_angularAcceleration = boost::in_place();
                try {
                    m_angularAcceleration->ReadCPACS(tixiHandle, xpath + "/angularAcceleration");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read angularAcceleration at xpath << " << xpath << ": " << e.what();
                    m_angularAcceleration = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read angularAcceleration at xpath << " << xpath << ": " << e.getError();
                    m_angularAcceleration = boost::none;
                }
            }
            
        }
        
        void CPACSLoadCaseRotation::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element orientation
            if (m_orientation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientation");
                m_orientation->WriteCPACS(tixiHandle, xpath + "/orientation");
            }
            
            // write element angularVelocity
            if (m_angularVelocity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angularVelocity");
                m_angularVelocity->WriteCPACS(tixiHandle, xpath + "/angularVelocity");
            }
            
            // write element angularAcceleration
            if (m_angularAcceleration) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angularAcceleration");
                m_angularAcceleration->WriteCPACS(tixiHandle, xpath + "/angularAcceleration");
            }
            
        }
        
        bool CPACSLoadCaseRotation::HasOrientation() const
        {
            return static_cast<bool>(m_orientation);
        }
        
        const CPACSAngleDisplacement& CPACSLoadCaseRotation::GetOrientation() const
        {
            return *m_orientation;
        }
        
        CPACSAngleDisplacement& CPACSLoadCaseRotation::GetOrientation()
        {
            return *m_orientation;
        }
        
        bool CPACSLoadCaseRotation::HasAngularVelocity() const
        {
            return static_cast<bool>(m_angularVelocity);
        }
        
        const CPACSLoadCaseRotationVelocity& CPACSLoadCaseRotation::GetAngularVelocity() const
        {
            return *m_angularVelocity;
        }
        
        CPACSLoadCaseRotationVelocity& CPACSLoadCaseRotation::GetAngularVelocity()
        {
            return *m_angularVelocity;
        }
        
        bool CPACSLoadCaseRotation::HasAngularAcceleration() const
        {
            return static_cast<bool>(m_angularAcceleration);
        }
        
        const CPACSAngleAcceleration& CPACSLoadCaseRotation::GetAngularAcceleration() const
        {
            return *m_angularAcceleration;
        }
        
        CPACSAngleAcceleration& CPACSLoadCaseRotation::GetAngularAcceleration()
        {
            return *m_angularAcceleration;
        }
        
    }
}
