// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAtmosphericConditions.h"

namespace tigl
{
    namespace generated
    {
        CPACSAtmosphericConditions::CPACSAtmosphericConditions(){}
        CPACSAtmosphericConditions::~CPACSAtmosphericConditions() {}
        
        void CPACSAtmosphericConditions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element staticPressure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/staticPressure")) {
                m_staticPressure = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/staticPressure");
            }
            
            // read element density
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/density")) {
                m_density = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/density");
            }
            
            // read element temperature
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/temperature")) {
                m_temperature = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/temperature");
            }
            
            // read element speedOfSound
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/speedOfSound")) {
                m_speedOfSound = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/speedOfSound");
            }
            
            // read element dynamicViscosity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dynamicViscosity")) {
                m_dynamicViscosity = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/dynamicViscosity");
            }
            
            // read element kinematicViscosity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kinematicViscosity")) {
                m_kinematicViscosity = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kinematicViscosity");
            }
            
            // read element model
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/model")) {
                m_model.ReadCPACS(tixiHandle, xpath + "/model");
            }
            else {
                LOG(ERROR) << "Required element model is missing";
            }
            
            // read element altitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
                m_altitude = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/altitude");
            }
            else {
                LOG(ERROR) << "Required element altitude is missing";
            }
            
            // read element deltaTemperature
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/deltaTemperature")) {
                m_deltaTemperature = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/deltaTemperature");
            }
            
        }
        
        void CPACSAtmosphericConditions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element staticPressure
            if (m_staticPressure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/staticPressure");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/staticPressure", *m_staticPressure);
            }
            
            // write element density
            if (m_density) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/density");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/density", *m_density);
            }
            
            // write element temperature
            if (m_temperature) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/temperature");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/temperature", *m_temperature);
            }
            
            // write element speedOfSound
            if (m_speedOfSound) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/speedOfSound");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/speedOfSound", *m_speedOfSound);
            }
            
            // write element dynamicViscosity
            if (m_dynamicViscosity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dynamicViscosity");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/dynamicViscosity", *m_dynamicViscosity);
            }
            
            // write element kinematicViscosity
            if (m_kinematicViscosity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kinematicViscosity");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/kinematicViscosity", *m_kinematicViscosity);
            }
            
            // write element model
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/model");
            m_model.WriteCPACS(tixiHandle, xpath + "/model");
            
            // write element altitude
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/altitude");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/altitude", m_altitude);
            
            // write element deltaTemperature
            if (m_deltaTemperature) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaTemperature");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/deltaTemperature", *m_deltaTemperature);
            }
            
        }
        
        bool CPACSAtmosphericConditions::HasStaticPressure() const
        {
            return static_cast<bool>(m_staticPressure);
        }
        
        const double& CPACSAtmosphericConditions::GetStaticPressure() const
        {
            return *m_staticPressure;
        }
        
        void CPACSAtmosphericConditions::SetStaticPressure(const double& value)
        {
            m_staticPressure = value;
        }
        
        bool CPACSAtmosphericConditions::HasDensity() const
        {
            return static_cast<bool>(m_density);
        }
        
        const double& CPACSAtmosphericConditions::GetDensity() const
        {
            return *m_density;
        }
        
        void CPACSAtmosphericConditions::SetDensity(const double& value)
        {
            m_density = value;
        }
        
        bool CPACSAtmosphericConditions::HasTemperature() const
        {
            return static_cast<bool>(m_temperature);
        }
        
        const double& CPACSAtmosphericConditions::GetTemperature() const
        {
            return *m_temperature;
        }
        
        void CPACSAtmosphericConditions::SetTemperature(const double& value)
        {
            m_temperature = value;
        }
        
        bool CPACSAtmosphericConditions::HasSpeedOfSound() const
        {
            return static_cast<bool>(m_speedOfSound);
        }
        
        const double& CPACSAtmosphericConditions::GetSpeedOfSound() const
        {
            return *m_speedOfSound;
        }
        
        void CPACSAtmosphericConditions::SetSpeedOfSound(const double& value)
        {
            m_speedOfSound = value;
        }
        
        bool CPACSAtmosphericConditions::HasDynamicViscosity() const
        {
            return static_cast<bool>(m_dynamicViscosity);
        }
        
        const double& CPACSAtmosphericConditions::GetDynamicViscosity() const
        {
            return *m_dynamicViscosity;
        }
        
        void CPACSAtmosphericConditions::SetDynamicViscosity(const double& value)
        {
            m_dynamicViscosity = value;
        }
        
        bool CPACSAtmosphericConditions::HasKinematicViscosity() const
        {
            return static_cast<bool>(m_kinematicViscosity);
        }
        
        const double& CPACSAtmosphericConditions::GetKinematicViscosity() const
        {
            return *m_kinematicViscosity;
        }
        
        void CPACSAtmosphericConditions::SetKinematicViscosity(const double& value)
        {
            m_kinematicViscosity = value;
        }
        
        const CPACSAtmosphericConditions_model& CPACSAtmosphericConditions::GetModel() const
        {
            return m_model;
        }
        
        CPACSAtmosphericConditions_model& CPACSAtmosphericConditions::GetModel()
        {
            return m_model;
        }
        
        const double& CPACSAtmosphericConditions::GetAltitude() const
        {
            return m_altitude;
        }
        
        void CPACSAtmosphericConditions::SetAltitude(const double& value)
        {
            m_altitude = value;
        }
        
        bool CPACSAtmosphericConditions::HasDeltaTemperature() const
        {
            return static_cast<bool>(m_deltaTemperature);
        }
        
        const double& CPACSAtmosphericConditions::GetDeltaTemperature() const
        {
            return *m_deltaTemperature;
        }
        
        void CPACSAtmosphericConditions::SetDeltaTemperature(const double& value)
        {
            m_deltaTemperature = value;
        }
        
    }
}
