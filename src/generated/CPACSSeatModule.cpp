// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSeatModule.h"

namespace tigl
{
    namespace generated
    {
        CPACSSeatModule::CPACSSeatModule(){}
        CPACSSeatModule::~CPACSSeatModule() {}
        
        void CPACSSeatModule::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element numberOfSeats
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfSeats")) {
                m_numberOfSeats = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfSeats");
            }
            else {
                LOG(ERROR) << "Required element numberOfSeats is missing";
            }
            
            // read element widthOfSeatModule
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/widthOfSeatModule")) {
                m_widthOfSeatModule = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/widthOfSeatModule");
            }
            else {
                LOG(ERROR) << "Required element widthOfSeatModule is missing";
            }
            
            // read element moduleMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/moduleMass")) {
                m_moduleMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/moduleMass");
            }
            
            // read element moduleCoG
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/moduleCoG")) {
                m_moduleCoG = boost::in_place();
                try {
                    m_moduleCoG->ReadCPACS(tixiHandle, xpath + "/moduleCoG");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read moduleCoG at xpath << " << xpath << ": " << e.what();
                    m_moduleCoG = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read moduleCoG at xpath << " << xpath << ": " << e.getError();
                    m_moduleCoG = boost::none;
                }
            }
            
        }
        
        void CPACSSeatModule::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element numberOfSeats
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfSeats");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfSeats", m_numberOfSeats);
            
            // write element widthOfSeatModule
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/widthOfSeatModule");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/widthOfSeatModule", m_widthOfSeatModule);
            
            // write element moduleMass
            if (m_moduleMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/moduleMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/moduleMass", *m_moduleMass);
            }
            
            // write element moduleCoG
            if (m_moduleCoG) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/moduleCoG");
                m_moduleCoG->WriteCPACS(tixiHandle, xpath + "/moduleCoG");
            }
            
        }
        
        const std::string& CPACSSeatModule::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSSeatModule::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSSeatModule::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSSeatModule::GetName() const
        {
            return *m_name;
        }
        
        void CPACSSeatModule::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSSeatModule::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSSeatModule::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSSeatModule::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const int& CPACSSeatModule::GetNumberOfSeats() const
        {
            return m_numberOfSeats;
        }
        
        void CPACSSeatModule::SetNumberOfSeats(const int& value)
        {
            m_numberOfSeats = value;
        }
        
        const double& CPACSSeatModule::GetWidthOfSeatModule() const
        {
            return m_widthOfSeatModule;
        }
        
        void CPACSSeatModule::SetWidthOfSeatModule(const double& value)
        {
            m_widthOfSeatModule = value;
        }
        
        bool CPACSSeatModule::HasModuleMass() const
        {
            return static_cast<bool>(m_moduleMass);
        }
        
        const double& CPACSSeatModule::GetModuleMass() const
        {
            return *m_moduleMass;
        }
        
        void CPACSSeatModule::SetModuleMass(const double& value)
        {
            m_moduleMass = value;
        }
        
        bool CPACSSeatModule::HasModuleCoG() const
        {
            return static_cast<bool>(m_moduleCoG);
        }
        
        const CCPACSPoint& CPACSSeatModule::GetModuleCoG() const
        {
            return *m_moduleCoG;
        }
        
        CCPACSPoint& CPACSSeatModule::GetModuleCoG()
        {
            return *m_moduleCoG;
        }
        
    }
}
