// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSPressureBulkheads.h"
#include "CPACSPressureBulkhead.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPressureBulkhead::CPACSPressureBulkhead(CCPACSPressureBulkheads* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPressureBulkhead::~CPACSPressureBulkhead()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_sheetElementUID.empty()) m_uidMgr->TryUnregisterReference(m_sheetElementUID, *this);
            if (m_structuralElementVerticalUID_choice1 && !m_structuralElementVerticalUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementVerticalUID_choice1, *this);
            if (m_structuralElementHorizontalUID_choice1 && !m_structuralElementHorizontalUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementHorizontalUID_choice1, *this);
            if (m_structuralElementRadialUID_choice2 && !m_structuralElementRadialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementRadialUID_choice2, *this);
        }
    }

    const CCPACSPressureBulkheads* CPACSPressureBulkhead::GetParent() const
    {
        return m_parent;
    }

    CCPACSPressureBulkheads* CPACSPressureBulkhead::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPressureBulkhead::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSPressureBulkhead::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSPressureBulkhead::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSPressureBulkhead::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSPressureBulkhead::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name->empty()) {
                LOG(WARNING) << "Optional element name is present but empty at xpath " << xpath;
            }
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element sheetElementUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
            m_sheetElementUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            if (m_sheetElementUID.empty()) {
                LOG(WARNING) << "Required element sheetElementUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_sheetElementUID.empty()) m_uidMgr->RegisterReference(m_sheetElementUID, *this);
        }
        else {
            LOG(ERROR) << "Required element sheetElementUID is missing at xpath " << xpath;
        }

        // read element reinforcementNumberVertical
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberVertical")) {
            m_reinforcementNumberVertical_choice1 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberVertical");
        }

        // read element structuralElementVerticalUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementVerticalUID")) {
            m_structuralElementVerticalUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementVerticalUID");
            if (m_structuralElementVerticalUID_choice1->empty()) {
                LOG(WARNING) << "Optional element structuralElementVerticalUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_structuralElementVerticalUID_choice1->empty()) m_uidMgr->RegisterReference(*m_structuralElementVerticalUID_choice1, *this);
        }

        // read element reinforcementNumberHorizontal
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberHorizontal")) {
            m_reinforcementNumberHorizontal_choice1 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberHorizontal");
        }

        // read element structuralElementHorizontalUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementHorizontalUID")) {
            m_structuralElementHorizontalUID_choice1 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementHorizontalUID");
            if (m_structuralElementHorizontalUID_choice1->empty()) {
                LOG(WARNING) << "Optional element structuralElementHorizontalUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_structuralElementHorizontalUID_choice1->empty()) m_uidMgr->RegisterReference(*m_structuralElementHorizontalUID_choice1, *this);
        }

        // read element bulkheadCalotteRadiusAtFrame
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame")) {
            m_bulkheadCalotteRadiusAtFrame_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame");
        }

        // read element maxFlectionDepth
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/maxFlectionDepth")) {
            m_maxFlectionDepth_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/maxFlectionDepth");
        }

        // read element reinforcementNumberRadial
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberRadial")) {
            m_reinforcementNumberRadial_choice2 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberRadial");
        }

        // read element structuralElementRadialUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementRadialUID")) {
            m_structuralElementRadialUID_choice2 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementRadialUID");
            if (m_structuralElementRadialUID_choice2->empty()) {
                LOG(WARNING) << "Optional element structuralElementRadialUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_structuralElementRadialUID_choice2->empty()) m_uidMgr->RegisterReference(*m_structuralElementRadialUID_choice2, *this);
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSPressureBulkhead::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "sheetElementUID", "reinforcementNumberVertical", "structuralElementVerticalUID", "reinforcementNumberHorizontal", "structuralElementHorizontalUID", "bulkheadCalotteRadiusAtFrame", "maxFlectionDepth", "reinforcementNumberRadial", "structuralElementRadialUID" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element name
        if (m_name) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/name");
            }
        }

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element sheetElementUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/sheetElementUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);

        // write element reinforcementNumberVertical
        if (m_reinforcementNumberVertical_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberVertical", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberVertical", *m_reinforcementNumberVertical_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberVertical")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/reinforcementNumberVertical");
            }
        }

        // write element structuralElementVerticalUID
        if (m_structuralElementVerticalUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/structuralElementVerticalUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/structuralElementVerticalUID", *m_structuralElementVerticalUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementVerticalUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralElementVerticalUID");
            }
        }

        // write element reinforcementNumberHorizontal
        if (m_reinforcementNumberHorizontal_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberHorizontal", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberHorizontal", *m_reinforcementNumberHorizontal_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberHorizontal")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/reinforcementNumberHorizontal");
            }
        }

        // write element structuralElementHorizontalUID
        if (m_structuralElementHorizontalUID_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/structuralElementHorizontalUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/structuralElementHorizontalUID", *m_structuralElementHorizontalUID_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementHorizontalUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralElementHorizontalUID");
            }
        }

        // write element bulkheadCalotteRadiusAtFrame
        if (m_bulkheadCalotteRadiusAtFrame_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame", *m_bulkheadCalotteRadiusAtFrame_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame");
            }
        }

        // write element maxFlectionDepth
        if (m_maxFlectionDepth_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/maxFlectionDepth", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/maxFlectionDepth", *m_maxFlectionDepth_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/maxFlectionDepth")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/maxFlectionDepth");
            }
        }

        // write element reinforcementNumberRadial
        if (m_reinforcementNumberRadial_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberRadial", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberRadial", *m_reinforcementNumberRadial_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberRadial")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/reinforcementNumberRadial");
            }
        }

        // write element structuralElementRadialUID
        if (m_structuralElementRadialUID_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/structuralElementRadialUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/structuralElementRadialUID", *m_structuralElementRadialUID_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementRadialUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/structuralElementRadialUID");
            }
        }

    }

    bool CPACSPressureBulkhead::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    true // m_reinforcementNumberVertical_choice1 is optional in choice
                    &&
                    true // m_structuralElementVerticalUID_choice1 is optional in choice
                    &&
                    true // m_reinforcementNumberHorizontal_choice1 is optional in choice
                    &&
                    true // m_structuralElementHorizontalUID_choice1 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_bulkheadCalotteRadiusAtFrame_choice2.is_initialized()
                        ||
                        m_maxFlectionDepth_choice2.is_initialized()
                        ||
                        m_reinforcementNumberRadial_choice2.is_initialized()
                        ||
                        m_structuralElementRadialUID_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_bulkheadCalotteRadiusAtFrame_choice2.is_initialized()
                    &&
                    m_maxFlectionDepth_choice2.is_initialized()
                    &&
                    true // m_reinforcementNumberRadial_choice2 is optional in choice
                    &&
                    true // m_structuralElementRadialUID_choice2 is optional in choice
                    &&
                    // elements of other choices must not be there
                    !(
                        m_reinforcementNumberVertical_choice1.is_initialized()
                        ||
                        m_structuralElementVerticalUID_choice1.is_initialized()
                        ||
                        m_reinforcementNumberHorizontal_choice1.is_initialized()
                        ||
                        m_structuralElementHorizontalUID_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const std::string& CPACSPressureBulkhead::GetUID() const
    {
        return m_uID;
    }

    void CPACSPressureBulkhead::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<std::string>& CPACSPressureBulkhead::GetName() const
    {
        return m_name;
    }

    void CPACSPressureBulkhead::SetName(const boost::optional<std::string>& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSPressureBulkhead::GetDescription() const
    {
        return m_description;
    }

    void CPACSPressureBulkhead::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const std::string& CPACSPressureBulkhead::GetSheetElementUID() const
    {
        return m_sheetElementUID;
    }

    void CPACSPressureBulkhead::SetSheetElementUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_sheetElementUID.empty()) m_uidMgr->TryUnregisterReference(m_sheetElementUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_sheetElementUID = value;
    }

    const boost::optional<int>& CPACSPressureBulkhead::GetReinforcementNumberVertical_choice1() const
    {
        return m_reinforcementNumberVertical_choice1;
    }

    void CPACSPressureBulkhead::SetReinforcementNumberVertical_choice1(const boost::optional<int>& value)
    {
        m_reinforcementNumberVertical_choice1 = value;
    }

    const boost::optional<std::string>& CPACSPressureBulkhead::GetStructuralElementVerticalUID_choice1() const
    {
        return m_structuralElementVerticalUID_choice1;
    }

    void CPACSPressureBulkhead::SetStructuralElementVerticalUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_structuralElementVerticalUID_choice1 && !m_structuralElementVerticalUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementVerticalUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_structuralElementVerticalUID_choice1 = value;
    }

    const boost::optional<int>& CPACSPressureBulkhead::GetReinforcementNumberHorizontal_choice1() const
    {
        return m_reinforcementNumberHorizontal_choice1;
    }

    void CPACSPressureBulkhead::SetReinforcementNumberHorizontal_choice1(const boost::optional<int>& value)
    {
        m_reinforcementNumberHorizontal_choice1 = value;
    }

    const boost::optional<std::string>& CPACSPressureBulkhead::GetStructuralElementHorizontalUID_choice1() const
    {
        return m_structuralElementHorizontalUID_choice1;
    }

    void CPACSPressureBulkhead::SetStructuralElementHorizontalUID_choice1(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_structuralElementHorizontalUID_choice1 && !m_structuralElementHorizontalUID_choice1->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementHorizontalUID_choice1, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_structuralElementHorizontalUID_choice1 = value;
    }

    const boost::optional<double>& CPACSPressureBulkhead::GetBulkheadCalotteRadiusAtFrame_choice2() const
    {
        return m_bulkheadCalotteRadiusAtFrame_choice2;
    }

    void CPACSPressureBulkhead::SetBulkheadCalotteRadiusAtFrame_choice2(const boost::optional<double>& value)
    {
        m_bulkheadCalotteRadiusAtFrame_choice2 = value;
    }

    const boost::optional<double>& CPACSPressureBulkhead::GetMaxFlectionDepth_choice2() const
    {
        return m_maxFlectionDepth_choice2;
    }

    void CPACSPressureBulkhead::SetMaxFlectionDepth_choice2(const boost::optional<double>& value)
    {
        m_maxFlectionDepth_choice2 = value;
    }

    const boost::optional<int>& CPACSPressureBulkhead::GetReinforcementNumberRadial_choice2() const
    {
        return m_reinforcementNumberRadial_choice2;
    }

    void CPACSPressureBulkhead::SetReinforcementNumberRadial_choice2(const boost::optional<int>& value)
    {
        m_reinforcementNumberRadial_choice2 = value;
    }

    const boost::optional<std::string>& CPACSPressureBulkhead::GetStructuralElementRadialUID_choice2() const
    {
        return m_structuralElementRadialUID_choice2;
    }

    void CPACSPressureBulkhead::SetStructuralElementRadialUID_choice2(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_structuralElementRadialUID_choice2 && !m_structuralElementRadialUID_choice2->empty()) m_uidMgr->TryUnregisterReference(*m_structuralElementRadialUID_choice2, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_structuralElementRadialUID_choice2 = value;
    }

    const CTiglUIDObject* CPACSPressureBulkhead::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSPressureBulkhead::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_sheetElementUID == oldUid) {
            m_sheetElementUID = newUid;
        }
        if (m_structuralElementVerticalUID_choice1 && *m_structuralElementVerticalUID_choice1 == oldUid) {
            m_structuralElementVerticalUID_choice1 = newUid;
        }
        if (m_structuralElementHorizontalUID_choice1 && *m_structuralElementHorizontalUID_choice1 == oldUid) {
            m_structuralElementHorizontalUID_choice1 = newUid;
        }
        if (m_structuralElementRadialUID_choice2 && *m_structuralElementRadialUID_choice2 == oldUid) {
            m_structuralElementRadialUID_choice2 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
