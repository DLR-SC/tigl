// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPressureBulkhead.h"

namespace tigl
{
    namespace generated
    {
        CPACSPressureBulkhead::CPACSPressureBulkhead(){}
        CPACSPressureBulkhead::~CPACSPressureBulkhead() {}
        
        void CPACSPressureBulkhead::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element sheetElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sheetElementUID")) {
                m_sheetElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sheetElementUID");
            }
            else {
                LOG(ERROR) << "Required element sheetElementUID is missing";
            }
            
            // read element reinforcementNumberVertical
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberVertical")) {
                m_reinforcementNumberVertical_choice1 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberVertical");
            }
            
            // read element structuralElementVerticalUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementVerticalUID")) {
                m_structuralElementVerticalUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementVerticalUID");
            }
            
            // read element reinforcementNumberHorizontal
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberHorizontal")) {
                m_reinforcementNumberHorizontal_choice1 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberHorizontal");
            }
            
            // read element structuralElementHorizontalUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementHorizontalUID")) {
                m_structuralElementHorizontalUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementHorizontalUID");
            }
            
            // read element bulkheadCalotteRadiusAtFrame
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame")) {
                m_bulkheadCalotteRadiusAtFrame_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame");
            }
            
            // read element maxFlectionDepth
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/maxFlectionDepth")) {
                m_maxFlectionDepth_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/maxFlectionDepth");
            }
            
            // read element reinforcementNumberRadial
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reinforcementNumberRadial")) {
                m_reinforcementNumberRadial_choice2 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/reinforcementNumberRadial");
            }
            
            // read element structuralElementRadialUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementRadialUID")) {
                m_structuralElementRadialUID_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementRadialUID");
            }
            
        }
        
        void CPACSPressureBulkhead::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element sheetElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sheetElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/sheetElementUID", m_sheetElementUID);
            
            // write element reinforcementNumberVertical
            if (m_reinforcementNumberVertical_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberVertical");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberVertical", *m_reinforcementNumberVertical_choice1);
            }
            
            // write element structuralElementVerticalUID
            if (m_structuralElementVerticalUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementVerticalUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementVerticalUID", *m_structuralElementVerticalUID_choice1);
            }
            
            // write element reinforcementNumberHorizontal
            if (m_reinforcementNumberHorizontal_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberHorizontal");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberHorizontal", *m_reinforcementNumberHorizontal_choice1);
            }
            
            // write element structuralElementHorizontalUID
            if (m_structuralElementHorizontalUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementHorizontalUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementHorizontalUID", *m_structuralElementHorizontalUID_choice1);
            }
            
            // write element bulkheadCalotteRadiusAtFrame
            if (m_bulkheadCalotteRadiusAtFrame_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/bulkheadCalotteRadiusAtFrame", *m_bulkheadCalotteRadiusAtFrame_choice2);
            }
            
            // write element maxFlectionDepth
            if (m_maxFlectionDepth_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/maxFlectionDepth");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/maxFlectionDepth", *m_maxFlectionDepth_choice2);
            }
            
            // write element reinforcementNumberRadial
            if (m_reinforcementNumberRadial_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reinforcementNumberRadial");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/reinforcementNumberRadial", *m_reinforcementNumberRadial_choice2);
            }
            
            // write element structuralElementRadialUID
            if (m_structuralElementRadialUID_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementRadialUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementRadialUID", *m_structuralElementRadialUID_choice2);
            }
            
        }
        
        const std::string& CPACSPressureBulkhead::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSPressureBulkhead::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSPressureBulkhead::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSPressureBulkhead::GetName() const
        {
            return *m_name;
        }
        
        void CPACSPressureBulkhead::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSPressureBulkhead::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSPressureBulkhead::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSPressureBulkhead::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSPressureBulkhead::GetSheetElementUID() const
        {
            return m_sheetElementUID;
        }
        
        void CPACSPressureBulkhead::SetSheetElementUID(const std::string& value)
        {
            m_sheetElementUID = value;
        }
        
        bool CPACSPressureBulkhead::HasReinforcementNumberVertical_choice1() const
        {
            return static_cast<bool>(m_reinforcementNumberVertical_choice1);
        }
        
        const int& CPACSPressureBulkhead::GetReinforcementNumberVertical_choice1() const
        {
            return *m_reinforcementNumberVertical_choice1;
        }
        
        void CPACSPressureBulkhead::SetReinforcementNumberVertical_choice1(const int& value)
        {
            m_reinforcementNumberVertical_choice1 = value;
        }
        
        bool CPACSPressureBulkhead::HasStructuralElementVerticalUID_choice1() const
        {
            return static_cast<bool>(m_structuralElementVerticalUID_choice1);
        }
        
        const std::string& CPACSPressureBulkhead::GetStructuralElementVerticalUID_choice1() const
        {
            return *m_structuralElementVerticalUID_choice1;
        }
        
        void CPACSPressureBulkhead::SetStructuralElementVerticalUID_choice1(const std::string& value)
        {
            m_structuralElementVerticalUID_choice1 = value;
        }
        
        bool CPACSPressureBulkhead::HasReinforcementNumberHorizontal_choice1() const
        {
            return static_cast<bool>(m_reinforcementNumberHorizontal_choice1);
        }
        
        const int& CPACSPressureBulkhead::GetReinforcementNumberHorizontal_choice1() const
        {
            return *m_reinforcementNumberHorizontal_choice1;
        }
        
        void CPACSPressureBulkhead::SetReinforcementNumberHorizontal_choice1(const int& value)
        {
            m_reinforcementNumberHorizontal_choice1 = value;
        }
        
        bool CPACSPressureBulkhead::HasStructuralElementHorizontalUID_choice1() const
        {
            return static_cast<bool>(m_structuralElementHorizontalUID_choice1);
        }
        
        const std::string& CPACSPressureBulkhead::GetStructuralElementHorizontalUID_choice1() const
        {
            return *m_structuralElementHorizontalUID_choice1;
        }
        
        void CPACSPressureBulkhead::SetStructuralElementHorizontalUID_choice1(const std::string& value)
        {
            m_structuralElementHorizontalUID_choice1 = value;
        }
        
        bool CPACSPressureBulkhead::HasBulkheadCalotteRadiusAtFrame_choice2() const
        {
            return static_cast<bool>(m_bulkheadCalotteRadiusAtFrame_choice2);
        }
        
        const double& CPACSPressureBulkhead::GetBulkheadCalotteRadiusAtFrame_choice2() const
        {
            return *m_bulkheadCalotteRadiusAtFrame_choice2;
        }
        
        void CPACSPressureBulkhead::SetBulkheadCalotteRadiusAtFrame_choice2(const double& value)
        {
            m_bulkheadCalotteRadiusAtFrame_choice2 = value;
        }
        
        bool CPACSPressureBulkhead::HasMaxFlectionDepth_choice2() const
        {
            return static_cast<bool>(m_maxFlectionDepth_choice2);
        }
        
        const double& CPACSPressureBulkhead::GetMaxFlectionDepth_choice2() const
        {
            return *m_maxFlectionDepth_choice2;
        }
        
        void CPACSPressureBulkhead::SetMaxFlectionDepth_choice2(const double& value)
        {
            m_maxFlectionDepth_choice2 = value;
        }
        
        bool CPACSPressureBulkhead::HasReinforcementNumberRadial_choice2() const
        {
            return static_cast<bool>(m_reinforcementNumberRadial_choice2);
        }
        
        const int& CPACSPressureBulkhead::GetReinforcementNumberRadial_choice2() const
        {
            return *m_reinforcementNumberRadial_choice2;
        }
        
        void CPACSPressureBulkhead::SetReinforcementNumberRadial_choice2(const int& value)
        {
            m_reinforcementNumberRadial_choice2 = value;
        }
        
        bool CPACSPressureBulkhead::HasStructuralElementRadialUID_choice2() const
        {
            return static_cast<bool>(m_structuralElementRadialUID_choice2);
        }
        
        const std::string& CPACSPressureBulkhead::GetStructuralElementRadialUID_choice2() const
        {
            return *m_structuralElementRadialUID_choice2;
        }
        
        void CPACSPressureBulkhead::SetStructuralElementRadialUID_choice2(const std::string& value)
        {
            m_structuralElementRadialUID_choice2 = value;
        }
        
    }
}
