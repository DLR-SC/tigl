// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSWingCell
        // CPACSWingShell
        
        // generated from /xsd:schema/xsd:complexType[927]
        class CPACSWingStringer
        {
        public:
            TIGL_EXPORT CPACSWingStringer();
            TIGL_EXPORT virtual ~CPACSWingStringer();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetStringerStructureUID() const;
            TIGL_EXPORT void SetStringerStructureUID(const std::string& value);
            
            TIGL_EXPORT bool HasPitch_choice1() const;
            TIGL_EXPORT const double& GetPitch_choice1() const;
            TIGL_EXPORT void SetPitch_choice1(const double& value);
            
            TIGL_EXPORT bool HasXsi_choice1() const;
            TIGL_EXPORT const double& GetXsi_choice1() const;
            TIGL_EXPORT void SetXsi_choice1(const double& value);
            
            TIGL_EXPORT bool HasEta_choice1() const;
            TIGL_EXPORT const double& GetEta_choice1() const;
            TIGL_EXPORT void SetEta_choice1(const double& value);
            
            TIGL_EXPORT bool HasAngle_choice1() const;
            TIGL_EXPORT const double& GetAngle_choice1() const;
            TIGL_EXPORT void SetAngle_choice1(const double& value);
            
            TIGL_EXPORT bool HasAngleReference_choice1() const;
            TIGL_EXPORT const std::string& GetAngleReference_choice1() const;
            TIGL_EXPORT void SetAngleReference_choice1(const std::string& value);
            
            TIGL_EXPORT bool HasNumberOfStringers_choice2() const;
            TIGL_EXPORT const int& GetNumberOfStringers_choice2() const;
            TIGL_EXPORT void SetNumberOfStringers_choice2(const int& value);
            
            TIGL_EXPORT bool HasAngle_choice2() const;
            TIGL_EXPORT const double& GetAngle_choice2() const;
            TIGL_EXPORT void SetAngle_choice2(const double& value);
            
            TIGL_EXPORT bool HasAngleReference_choice2() const;
            TIGL_EXPORT const std::string& GetAngleReference_choice2() const;
            TIGL_EXPORT void SetAngleReference_choice2(const std::string& value);
            
            TIGL_EXPORT bool HasInnerBorderXsiLE_choice2() const;
            TIGL_EXPORT const double& GetInnerBorderXsiLE_choice2() const;
            TIGL_EXPORT void SetInnerBorderXsiLE_choice2(const double& value);
            
            TIGL_EXPORT bool HasOuterBorderXsiLE_choice2() const;
            TIGL_EXPORT const double& GetOuterBorderXsiLE_choice2() const;
            TIGL_EXPORT void SetOuterBorderXsiLE_choice2(const double& value);
            
            TIGL_EXPORT bool HasInnerBorderXsiTE_choice2() const;
            TIGL_EXPORT const double& GetInnerBorderXsiTE_choice2() const;
            TIGL_EXPORT void SetInnerBorderXsiTE_choice2(const double& value);
            
            TIGL_EXPORT bool HasOuterBorderXsiTE_choice2() const;
            TIGL_EXPORT const double& GetOuterBorderXsiTE_choice2() const;
            TIGL_EXPORT void SetOuterBorderXsiTE_choice2(const double& value);
            
        protected:
            std::string                  m_stringerStructureUID;
            boost::optional<double>      m_pitch_choice1;
            boost::optional<double>      m_xsi_choice1;
            boost::optional<double>      m_eta_choice1;
            boost::optional<double>      m_angle_choice1;
            boost::optional<std::string> m_angleReference_choice1;
            boost::optional<int>         m_numberOfStringers_choice2;
            boost::optional<double>      m_angle_choice2;
            boost::optional<std::string> m_angleReference_choice2;
            boost::optional<double>      m_innerBorderXsiLE_choice2;
            boost::optional<double>      m_outerBorderXsiLE_choice2;
            boost::optional<double>      m_innerBorderXsiTE_choice2;
            boost::optional<double>      m_outerBorderXsiTE_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSWingStringer(const CPACSWingStringer&) = delete;
            CPACSWingStringer& operator=(const CPACSWingStringer&) = delete;
            
            CPACSWingStringer(CPACSWingStringer&&) = delete;
            CPACSWingStringer& operator=(CPACSWingStringer&&) = delete;
            #else
            CPACSWingStringer(const CPACSWingStringer&);
            CPACSWingStringer& operator=(const CPACSWingStringer&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSWingStringer = generated::CPACSWingStringer;
    #else
    typedef generated::CPACSWingStringer CCPACSWingStringer;
    #endif
}
