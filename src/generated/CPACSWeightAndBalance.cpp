// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWeightAndBalance.h"

namespace tigl
{
    namespace generated
    {
        CPACSWeightAndBalance::CPACSWeightAndBalance(){}
        CPACSWeightAndBalance::~CPACSWeightAndBalance() {}
        
        void CPACSWeightAndBalance::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element operationalCases
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/operationalCases")) {
                m_operationalCases = boost::in_place();
                try {
                    m_operationalCases->ReadCPACS(tixiHandle, xpath + "/operationalCases");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read operationalCases at xpath << " << xpath << ": " << e.what();
                    m_operationalCases = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read operationalCases at xpath << " << xpath << ": " << e.getError();
                    m_operationalCases = boost::none;
                }
            }
            
            // read element certificationCases
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/certificationCases")) {
                m_certificationCases = boost::in_place();
                try {
                    m_certificationCases->ReadCPACS(tixiHandle, xpath + "/certificationCases");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read certificationCases at xpath << " << xpath << ": " << e.what();
                    m_certificationCases = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read certificationCases at xpath << " << xpath << ": " << e.getError();
                    m_certificationCases = boost::none;
                }
            }
            
        }
        
        void CPACSWeightAndBalance::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element operationalCases
            if (m_operationalCases) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/operationalCases");
                m_operationalCases->WriteCPACS(tixiHandle, xpath + "/operationalCases");
            }
            
            // write element certificationCases
            if (m_certificationCases) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/certificationCases");
                m_certificationCases->WriteCPACS(tixiHandle, xpath + "/certificationCases");
            }
            
        }
        
        bool CPACSWeightAndBalance::HasOperationalCases() const
        {
            return static_cast<bool>(m_operationalCases);
        }
        
        const CPACSOperationalCases& CPACSWeightAndBalance::GetOperationalCases() const
        {
            return *m_operationalCases;
        }
        
        CPACSOperationalCases& CPACSWeightAndBalance::GetOperationalCases()
        {
            return *m_operationalCases;
        }
        
        bool CPACSWeightAndBalance::HasCertificationCases() const
        {
            return static_cast<bool>(m_certificationCases);
        }
        
        const CPACSCertificationCases& CPACSWeightAndBalance::GetCertificationCases() const
        {
            return *m_certificationCases;
        }
        
        CPACSCertificationCases& CPACSWeightAndBalance::GetCertificationCases()
        {
            return *m_certificationCases;
        }
        
    }
}
