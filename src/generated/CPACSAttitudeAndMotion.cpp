// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAttitudeAndMotion.h"

namespace tigl
{
    namespace generated
    {
        CPACSAttitudeAndMotion::CPACSAttitudeAndMotion(){}
        CPACSAttitudeAndMotion::~CPACSAttitudeAndMotion() {}
        
        void CPACSAttitudeAndMotion::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element refPointUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/refPointUID")) {
                m_refPointUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/refPointUID");
            }
            else {
                LOG(ERROR) << "Required element refPointUID is missing";
            }
            
            // read element refRotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/refRotation")) {
                m_refRotation = boost::in_place();
                try {
                    m_refRotation->ReadCPACS(tixiHandle, xpath + "/refRotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read refRotation at xpath << " << xpath << ": " << e.what();
                    m_refRotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read refRotation at xpath << " << xpath << ": " << e.getError();
                    m_refRotation = boost::none;
                }
            }
            
            // read element translation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/translation")) {
                m_translation = boost::in_place();
                try {
                    m_translation->ReadCPACS(tixiHandle, xpath + "/translation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read translation at xpath << " << xpath << ": " << e.what();
                    m_translation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read translation at xpath << " << xpath << ": " << e.getError();
                    m_translation = boost::none;
                }
            }
            
            // read element rotation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rotation")) {
                m_rotation = boost::in_place();
                try {
                    m_rotation->ReadCPACS(tixiHandle, xpath + "/rotation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read rotation at xpath << " << xpath << ": " << e.what();
                    m_rotation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read rotation at xpath << " << xpath << ": " << e.getError();
                    m_rotation = boost::none;
                }
            }
            
        }
        
        void CPACSAttitudeAndMotion::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element refPointUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/refPointUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/refPointUID", m_refPointUID);
            
            // write element refRotation
            if (m_refRotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/refRotation");
                m_refRotation->WriteCPACS(tixiHandle, xpath + "/refRotation");
            }
            
            // write element translation
            if (m_translation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/translation");
                m_translation->WriteCPACS(tixiHandle, xpath + "/translation");
            }
            
            // write element rotation
            if (m_rotation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rotation");
                m_rotation->WriteCPACS(tixiHandle, xpath + "/rotation");
            }
            
        }
        
        const std::string& CPACSAttitudeAndMotion::GetRefPointUID() const
        {
            return m_refPointUID;
        }
        
        void CPACSAttitudeAndMotion::SetRefPointUID(const std::string& value)
        {
            m_refPointUID = value;
        }
        
        bool CPACSAttitudeAndMotion::HasRefRotation() const
        {
            return static_cast<bool>(m_refRotation);
        }
        
        const CPACSPointXYZ& CPACSAttitudeAndMotion::GetRefRotation() const
        {
            return *m_refRotation;
        }
        
        CPACSPointXYZ& CPACSAttitudeAndMotion::GetRefRotation()
        {
            return *m_refRotation;
        }
        
        bool CPACSAttitudeAndMotion::HasTranslation() const
        {
            return static_cast<bool>(m_translation);
        }
        
        const CPACSLoadCaseTranslation& CPACSAttitudeAndMotion::GetTranslation() const
        {
            return *m_translation;
        }
        
        CPACSLoadCaseTranslation& CPACSAttitudeAndMotion::GetTranslation()
        {
            return *m_translation;
        }
        
        bool CPACSAttitudeAndMotion::HasRotation() const
        {
            return static_cast<bool>(m_rotation);
        }
        
        const CPACSLoadCaseRotation& CPACSAttitudeAndMotion::GetRotation() const
        {
            return *m_rotation;
        }
        
        CPACSLoadCaseRotation& CPACSAttitudeAndMotion::GetRotation()
        {
            return *m_rotation;
        }
        
    }
}
