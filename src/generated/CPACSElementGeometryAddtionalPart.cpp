// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSElementGeometryAddtionalPart.h"
#include "CPACSElementGeometryAddtionalParts.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSElementGeometryAddtionalPart::CPACSElementGeometryAddtionalPart(CPACSElementGeometryAddtionalParts* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_transformation(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSElementGeometryAddtionalPart::~CPACSElementGeometryAddtionalPart()
    {
    }

    const CPACSElementGeometryAddtionalParts* CPACSElementGeometryAddtionalPart::GetParent() const
    {
        return m_parent;
    }

    CPACSElementGeometryAddtionalParts* CPACSElementGeometryAddtionalPart::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSElementGeometryAddtionalPart::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSElementGeometryAddtionalPart::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSElementGeometryAddtionalPart::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSElementGeometryAddtionalPart::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSElementGeometryAddtionalPart::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element cuboid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/cuboid")) {
            m_cuboid_choice1 = boost::in_place(this);
            try {
                m_cuboid_choice1->ReadCPACS(tixiHandle, xpath + "/cuboid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read cuboid at xpath " << xpath << ": " << e.what();
                m_cuboid_choice1 = boost::none;
            }
        }

        // read element frustum
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/frustum")) {
            m_frustum_choice2 = boost::in_place(this);
            try {
                m_frustum_choice2->ReadCPACS(tixiHandle, xpath + "/frustum");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read frustum at xpath " << xpath << ": " << e.what();
                m_frustum_choice2 = boost::none;
            }
        }

        // read element ellipsoid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
            m_ellipsoid_choice3 = boost::in_place(this);
            try {
                m_ellipsoid_choice3->ReadCPACS(tixiHandle, xpath + "/ellipsoid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read ellipsoid at xpath " << xpath << ": " << e.what();
                m_ellipsoid_choice3 = boost::none;
            }
        }

        // read element multiSegmentShape
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/multiSegmentShape")) {
            m_multiSegmentShape_choice4 = boost::in_place(this, m_uidMgr);
            try {
                m_multiSegmentShape_choice4->ReadCPACS(tixiHandle, xpath + "/multiSegmentShape");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read multiSegmentShape at xpath " << xpath << ": " << e.what();
                m_multiSegmentShape_choice4 = boost::none;
            }
        }

        // read element external
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/external")) {
            m_external_choice5 = boost::in_place(this, m_uidMgr);
            try {
                m_external_choice5->ReadCPACS(tixiHandle, xpath + "/external");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read external at xpath " << xpath << ": " << e.what();
                m_external_choice5 = boost::none;
            }
        }

        // read element transformation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
            m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
        }
        else {
            LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSElementGeometryAddtionalPart::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "cuboid", "frustum", "ellipsoid", "multiSegmentShape", "external", "transformation" };

        // write element cuboid
        if (m_cuboid_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/cuboid", childElemOrder);
            m_cuboid_choice1->WriteCPACS(tixiHandle, xpath + "/cuboid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/cuboid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/cuboid");
            }
        }

        // write element frustum
        if (m_frustum_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/frustum", childElemOrder);
            m_frustum_choice2->WriteCPACS(tixiHandle, xpath + "/frustum");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/frustum")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/frustum");
            }
        }

        // write element ellipsoid
        if (m_ellipsoid_choice3) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/ellipsoid", childElemOrder);
            m_ellipsoid_choice3->WriteCPACS(tixiHandle, xpath + "/ellipsoid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ellipsoid");
            }
        }

        // write element multiSegmentShape
        if (m_multiSegmentShape_choice4) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/multiSegmentShape", childElemOrder);
            m_multiSegmentShape_choice4->WriteCPACS(tixiHandle, xpath + "/multiSegmentShape");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/multiSegmentShape")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/multiSegmentShape");
            }
        }

        // write element external
        if (m_external_choice5) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/external", childElemOrder);
            m_external_choice5->WriteCPACS(tixiHandle, xpath + "/external");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/external")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/external");
            }
        }

        // write element transformation
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/transformation", childElemOrder);
        m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");

    }

    bool CPACSElementGeometryAddtionalPart::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_cuboid_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_frustum_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_frustum_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_ellipsoid_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_frustum_choice2.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_multiSegmentShape_choice4.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_frustum_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_external_choice5.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_external_choice5.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_cuboid_choice1.is_initialized()
                        ||
                        m_frustum_choice2.is_initialized()
                        ||
                        m_ellipsoid_choice3.is_initialized()
                        ||
                        m_multiSegmentShape_choice4.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<CCPACSCuboid>& CPACSElementGeometryAddtionalPart::GetCuboid_choice1() const
    {
        return m_cuboid_choice1;
    }

    boost::optional<CCPACSCuboid>& CPACSElementGeometryAddtionalPart::GetCuboid_choice1()
    {
        return m_cuboid_choice1;
    }

    const boost::optional<CCPACSFrustum>& CPACSElementGeometryAddtionalPart::GetFrustum_choice2() const
    {
        return m_frustum_choice2;
    }

    boost::optional<CCPACSFrustum>& CPACSElementGeometryAddtionalPart::GetFrustum_choice2()
    {
        return m_frustum_choice2;
    }

    const boost::optional<CCPACSEllipsoid>& CPACSElementGeometryAddtionalPart::GetEllipsoid_choice3() const
    {
        return m_ellipsoid_choice3;
    }

    boost::optional<CCPACSEllipsoid>& CPACSElementGeometryAddtionalPart::GetEllipsoid_choice3()
    {
        return m_ellipsoid_choice3;
    }

    const boost::optional<CPACSMultiSegmentShape>& CPACSElementGeometryAddtionalPart::GetMultiSegmentShape_choice4() const
    {
        return m_multiSegmentShape_choice4;
    }

    boost::optional<CPACSMultiSegmentShape>& CPACSElementGeometryAddtionalPart::GetMultiSegmentShape_choice4()
    {
        return m_multiSegmentShape_choice4;
    }

    const boost::optional<CPACSExternalGeometry>& CPACSElementGeometryAddtionalPart::GetExternal_choice5() const
    {
        return m_external_choice5;
    }

    boost::optional<CPACSExternalGeometry>& CPACSElementGeometryAddtionalPart::GetExternal_choice5()
    {
        return m_external_choice5;
    }

    const CCPACSTransformationSE3& CPACSElementGeometryAddtionalPart::GetTransformation() const
    {
        return m_transformation;
    }

    CCPACSTransformationSE3& CPACSElementGeometryAddtionalPart::GetTransformation()
    {
        return m_transformation;
    }

    CCPACSCuboid& CPACSElementGeometryAddtionalPart::GetCuboid_choice1(CreateIfNotExistsTag)
    {
        if (!m_cuboid_choice1)
            m_cuboid_choice1 = boost::in_place(this);
        return *m_cuboid_choice1;
    }

    void CPACSElementGeometryAddtionalPart::RemoveCuboid_choice1()
    {
        m_cuboid_choice1 = boost::none;
    }

    CCPACSFrustum& CPACSElementGeometryAddtionalPart::GetFrustum_choice2(CreateIfNotExistsTag)
    {
        if (!m_frustum_choice2)
            m_frustum_choice2 = boost::in_place(this);
        return *m_frustum_choice2;
    }

    void CPACSElementGeometryAddtionalPart::RemoveFrustum_choice2()
    {
        m_frustum_choice2 = boost::none;
    }

    CCPACSEllipsoid& CPACSElementGeometryAddtionalPart::GetEllipsoid_choice3(CreateIfNotExistsTag)
    {
        if (!m_ellipsoid_choice3)
            m_ellipsoid_choice3 = boost::in_place(this);
        return *m_ellipsoid_choice3;
    }

    void CPACSElementGeometryAddtionalPart::RemoveEllipsoid_choice3()
    {
        m_ellipsoid_choice3 = boost::none;
    }

    CPACSMultiSegmentShape& CPACSElementGeometryAddtionalPart::GetMultiSegmentShape_choice4(CreateIfNotExistsTag)
    {
        if (!m_multiSegmentShape_choice4)
            m_multiSegmentShape_choice4 = boost::in_place(this, m_uidMgr);
        return *m_multiSegmentShape_choice4;
    }

    void CPACSElementGeometryAddtionalPart::RemoveMultiSegmentShape_choice4()
    {
        m_multiSegmentShape_choice4 = boost::none;
    }

    CPACSExternalGeometry& CPACSElementGeometryAddtionalPart::GetExternal_choice5(CreateIfNotExistsTag)
    {
        if (!m_external_choice5)
            m_external_choice5 = boost::in_place(this, m_uidMgr);
        return *m_external_choice5;
    }

    void CPACSElementGeometryAddtionalPart::RemoveExternal_choice5()
    {
        m_external_choice5 = boost::none;
    }

} // namespace generated
} // namespace tigl
