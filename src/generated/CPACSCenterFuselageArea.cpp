// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCenterFuselageArea.h"

namespace tigl
{
    namespace generated
    {
        CPACSCenterFuselageArea::CPACSCenterFuselageArea(){}
        CPACSCenterFuselageArea::~CPACSCenterFuselageArea() {}
        
        void CPACSCenterFuselageArea::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element startFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startFrameUID")) {
                m_startFrameUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startFrameUID");
            }
            
            // read element endFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endFrameUID")) {
                m_endFrameUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endFrameUID");
            }
            
            // read element startStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startStringerUID")) {
                m_startStringerUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startStringerUID");
            }
            
            // read element endStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endStringerUID")) {
                m_endStringerUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endStringerUID");
            }
            
            // read element centerFuselageLowWingConfiguration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageLowWingConfiguration")) {
                m_centerFuselageLowWingConfiguration_choice2 = boost::in_place();
                try {
                    m_centerFuselageLowWingConfiguration_choice2->ReadCPACS(tixiHandle, xpath + "/centerFuselageLowWingConfiguration");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read centerFuselageLowWingConfiguration at xpath << " << xpath << ": " << e.what();
                    m_centerFuselageLowWingConfiguration_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read centerFuselageLowWingConfiguration at xpath << " << xpath << ": " << e.getError();
                    m_centerFuselageLowWingConfiguration_choice2 = boost::none;
                }
            }
            
            // read element centerFuselageHighWingConfiguration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/centerFuselageHighWingConfiguration")) {
                m_centerFuselageHighWingConfiguration_choice3 = boost::in_place();
                try {
                    m_centerFuselageHighWingConfiguration_choice3->ReadCPACS(tixiHandle, xpath + "/centerFuselageHighWingConfiguration");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read centerFuselageHighWingConfiguration at xpath << " << xpath << ": " << e.what();
                    m_centerFuselageHighWingConfiguration_choice3 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read centerFuselageHighWingConfiguration at xpath << " << xpath << ": " << e.getError();
                    m_centerFuselageHighWingConfiguration_choice3 = boost::none;
                }
            }
            
        }
        
        void CPACSCenterFuselageArea::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element startFrameUID
            if (m_startFrameUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/startFrameUID", *m_startFrameUID_choice1);
            }
            
            // write element endFrameUID
            if (m_endFrameUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endFrameUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/endFrameUID", *m_endFrameUID_choice1);
            }
            
            // write element startStringerUID
            if (m_startStringerUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/startStringerUID", *m_startStringerUID_choice1);
            }
            
            // write element endStringerUID
            if (m_endStringerUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endStringerUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/endStringerUID", *m_endStringerUID_choice1);
            }
            
            // write element centerFuselageLowWingConfiguration
            if (m_centerFuselageLowWingConfiguration_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageLowWingConfiguration");
                m_centerFuselageLowWingConfiguration_choice2->WriteCPACS(tixiHandle, xpath + "/centerFuselageLowWingConfiguration");
            }
            
            // write element centerFuselageHighWingConfiguration
            if (m_centerFuselageHighWingConfiguration_choice3) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/centerFuselageHighWingConfiguration");
                m_centerFuselageHighWingConfiguration_choice3->WriteCPACS(tixiHandle, xpath + "/centerFuselageHighWingConfiguration");
            }
            
        }
        
        bool CPACSCenterFuselageArea::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSCenterFuselageArea::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSCenterFuselageArea::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSCenterFuselageArea::HasStartFrameUID_choice1() const
        {
            return static_cast<bool>(m_startFrameUID_choice1);
        }
        
        const std::string& CPACSCenterFuselageArea::GetStartFrameUID_choice1() const
        {
            return *m_startFrameUID_choice1;
        }
        
        void CPACSCenterFuselageArea::SetStartFrameUID_choice1(const std::string& value)
        {
            m_startFrameUID_choice1 = value;
        }
        
        bool CPACSCenterFuselageArea::HasEndFrameUID_choice1() const
        {
            return static_cast<bool>(m_endFrameUID_choice1);
        }
        
        const std::string& CPACSCenterFuselageArea::GetEndFrameUID_choice1() const
        {
            return *m_endFrameUID_choice1;
        }
        
        void CPACSCenterFuselageArea::SetEndFrameUID_choice1(const std::string& value)
        {
            m_endFrameUID_choice1 = value;
        }
        
        bool CPACSCenterFuselageArea::HasStartStringerUID_choice1() const
        {
            return static_cast<bool>(m_startStringerUID_choice1);
        }
        
        const std::string& CPACSCenterFuselageArea::GetStartStringerUID_choice1() const
        {
            return *m_startStringerUID_choice1;
        }
        
        void CPACSCenterFuselageArea::SetStartStringerUID_choice1(const std::string& value)
        {
            m_startStringerUID_choice1 = value;
        }
        
        bool CPACSCenterFuselageArea::HasEndStringerUID_choice1() const
        {
            return static_cast<bool>(m_endStringerUID_choice1);
        }
        
        const std::string& CPACSCenterFuselageArea::GetEndStringerUID_choice1() const
        {
            return *m_endStringerUID_choice1;
        }
        
        void CPACSCenterFuselageArea::SetEndStringerUID_choice1(const std::string& value)
        {
            m_endStringerUID_choice1 = value;
        }
        
        bool CPACSCenterFuselageArea::HasCenterFuselageLowWingConfiguration_choice2() const
        {
            return static_cast<bool>(m_centerFuselageLowWingConfiguration_choice2);
        }
        
        const CPACSCenterFuselageLowWingConfiguration& CPACSCenterFuselageArea::GetCenterFuselageLowWingConfiguration_choice2() const
        {
            return *m_centerFuselageLowWingConfiguration_choice2;
        }
        
        CPACSCenterFuselageLowWingConfiguration& CPACSCenterFuselageArea::GetCenterFuselageLowWingConfiguration_choice2()
        {
            return *m_centerFuselageLowWingConfiguration_choice2;
        }
        
        bool CPACSCenterFuselageArea::HasCenterFuselageHighWingConfiguration_choice3() const
        {
            return static_cast<bool>(m_centerFuselageHighWingConfiguration_choice3);
        }
        
        const CPACSCenterFuselageHighWingConfiguration& CPACSCenterFuselageArea::GetCenterFuselageHighWingConfiguration_choice3() const
        {
            return *m_centerFuselageHighWingConfiguration_choice3;
        }
        
        CPACSCenterFuselageHighWingConfiguration& CPACSCenterFuselageArea::GetCenterFuselageHighWingConfiguration_choice3()
        {
            return *m_centerFuselageHighWingConfiguration_choice3;
        }
        
    }
}
