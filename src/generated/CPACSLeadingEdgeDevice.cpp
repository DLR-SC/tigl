// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLeadingEdgeDevice.h"

namespace tigl
{
    namespace generated
    {
        CPACSLeadingEdgeDevice::CPACSLeadingEdgeDevice(){}
        CPACSLeadingEdgeDevice::~CPACSLeadingEdgeDevice() {}
        
        void CPACSLeadingEdgeDevice::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element parentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                m_parentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            }
            else {
                LOG(ERROR) << "Required element parentUID is missing";
            }
            
            // read element outerShape
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerShape")) {
                m_outerShape.ReadCPACS(tixiHandle, xpath + "/outerShape");
            }
            else {
                LOG(ERROR) << "Required element outerShape is missing";
            }
            
            // read element wingCutOut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingCutOut")) {
                m_wingCutOut = boost::in_place();
                try {
                    m_wingCutOut->ReadCPACS(tixiHandle, xpath + "/wingCutOut");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingCutOut at xpath << " << xpath << ": " << e.what();
                    m_wingCutOut = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingCutOut at xpath << " << xpath << ": " << e.getError();
                    m_wingCutOut = boost::none;
                }
            }
            
            // read element structure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structure")) {
                m_structure = boost::in_place(this);
                try {
                    m_structure->ReadCPACS(tixiHandle, xpath + "/structure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read structure at xpath << " << xpath << ": " << e.what();
                    m_structure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read structure at xpath << " << xpath << ": " << e.getError();
                    m_structure = boost::none;
                }
            }
            
            // read element path
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/path")) {
                m_path.ReadCPACS(tixiHandle, xpath + "/path");
            }
            else {
                LOG(ERROR) << "Required element path is missing";
            }
            
            // read element tracks
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tracks")) {
                m_tracks = boost::in_place();
                try {
                    m_tracks->ReadCPACS(tixiHandle, xpath + "/tracks");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read tracks at xpath << " << xpath << ": " << e.what();
                    m_tracks = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read tracks at xpath << " << xpath << ": " << e.getError();
                    m_tracks = boost::none;
                }
            }
            
            // read element actuators
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/actuators")) {
                m_actuators = boost::in_place();
                try {
                    m_actuators->ReadCPACS(tixiHandle, xpath + "/actuators");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read actuators at xpath << " << xpath << ": " << e.what();
                    m_actuators = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read actuators at xpath << " << xpath << ": " << e.getError();
                    m_actuators = boost::none;
                }
            }
            
        }
        
        void CPACSLeadingEdgeDevice::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element parentUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/parentUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/parentUID", m_parentUID);
            
            // write element outerShape
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerShape");
            m_outerShape.WriteCPACS(tixiHandle, xpath + "/outerShape");
            
            // write element wingCutOut
            if (m_wingCutOut) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingCutOut");
                m_wingCutOut->WriteCPACS(tixiHandle, xpath + "/wingCutOut");
            }
            
            // write element structure
            if (m_structure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structure");
                m_structure->WriteCPACS(tixiHandle, xpath + "/structure");
            }
            
            // write element path
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/path");
            m_path.WriteCPACS(tixiHandle, xpath + "/path");
            
            // write element tracks
            if (m_tracks) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tracks");
                m_tracks->WriteCPACS(tixiHandle, xpath + "/tracks");
            }
            
            // write element actuators
            if (m_actuators) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/actuators");
                m_actuators->WriteCPACS(tixiHandle, xpath + "/actuators");
            }
            
        }
        
        const std::string& CPACSLeadingEdgeDevice::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSLeadingEdgeDevice::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSLeadingEdgeDevice::GetName() const
        {
            return m_name;
        }
        
        void CPACSLeadingEdgeDevice::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSLeadingEdgeDevice::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSLeadingEdgeDevice::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSLeadingEdgeDevice::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSLeadingEdgeDevice::GetParentUID() const
        {
            return m_parentUID;
        }
        
        void CPACSLeadingEdgeDevice::SetParentUID(const std::string& value)
        {
            m_parentUID = value;
        }
        
        const CPACSControlSurfaceOuterShapeLeadingEdge& CPACSLeadingEdgeDevice::GetOuterShape() const
        {
            return m_outerShape;
        }
        
        CPACSControlSurfaceOuterShapeLeadingEdge& CPACSLeadingEdgeDevice::GetOuterShape()
        {
            return m_outerShape;
        }
        
        bool CPACSLeadingEdgeDevice::HasWingCutOut() const
        {
            return static_cast<bool>(m_wingCutOut);
        }
        
        const CPACSControlSurfaceWingCutOut& CPACSLeadingEdgeDevice::GetWingCutOut() const
        {
            return *m_wingCutOut;
        }
        
        CPACSControlSurfaceWingCutOut& CPACSLeadingEdgeDevice::GetWingCutOut()
        {
            return *m_wingCutOut;
        }
        
        bool CPACSLeadingEdgeDevice::HasStructure() const
        {
            return static_cast<bool>(m_structure);
        }
        
        const CCPACSWingCSStructure& CPACSLeadingEdgeDevice::GetStructure() const
        {
            return *m_structure;
        }
        
        CCPACSWingCSStructure& CPACSLeadingEdgeDevice::GetStructure()
        {
            return *m_structure;
        }
        
        const CPACSControlSurfacePath& CPACSLeadingEdgeDevice::GetPath() const
        {
            return m_path;
        }
        
        CPACSControlSurfacePath& CPACSLeadingEdgeDevice::GetPath()
        {
            return m_path;
        }
        
        bool CPACSLeadingEdgeDevice::HasTracks() const
        {
            return static_cast<bool>(m_tracks);
        }
        
        const CPACSControlSurfaceTracks& CPACSLeadingEdgeDevice::GetTracks() const
        {
            return *m_tracks;
        }
        
        CPACSControlSurfaceTracks& CPACSLeadingEdgeDevice::GetTracks()
        {
            return *m_tracks;
        }
        
        bool CPACSLeadingEdgeDevice::HasActuators() const
        {
            return static_cast<bool>(m_actuators);
        }
        
        const CPACSControlSurfaceActuators& CPACSLeadingEdgeDevice::GetActuators() const
        {
            return *m_actuators;
        }
        
        CPACSControlSurfaceActuators& CPACSLeadingEdgeDevice::GetActuators()
        {
            return *m_actuators;
        }
        
    }
}
