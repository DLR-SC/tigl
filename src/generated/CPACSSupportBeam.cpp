// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearStrutAttachment.h"
#include "CPACSSupportBeam.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSupportBeam::CPACSSupportBeam(CPACSLandingGearStrutAttachment* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_position(this, m_uidMgr)
        , m_structure(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSupportBeam::~CPACSSupportBeam()
    {
    }

    const CPACSLandingGearStrutAttachment* CPACSSupportBeam::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearStrutAttachment* CPACSSupportBeam::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSupportBeam::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSupportBeam::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSupportBeam::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSupportBeam::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSSupportBeam::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element position
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/position")) {
            m_position.ReadCPACS(tixiHandle, xpath + "/position");
        }
        else {
            LOG(ERROR) << "Required element position is missing at xpath " << xpath;
        }

        // read element structure
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structure")) {
            m_structure.ReadCPACS(tixiHandle, xpath + "/structure");
        }
        else {
            LOG(ERROR) << "Required element structure is missing at xpath " << xpath;
        }

    }

    void CPACSSupportBeam::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "position", "structure" };

        // write element position
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/position", childElemOrder);
        m_position.WriteCPACS(tixiHandle, xpath + "/position");

        // write element structure
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/structure", childElemOrder);
        m_structure.WriteCPACS(tixiHandle, xpath + "/structure");

    }

    const CPACSLandingGearSupportBeamPosition& CPACSSupportBeam::GetPosition() const
    {
        return m_position;
    }

    CPACSLandingGearSupportBeamPosition& CPACSSupportBeam::GetPosition()
    {
        return m_position;
    }

    const CPACSSparCrossSection& CPACSSupportBeam::GetStructure() const
    {
        return m_structure;
    }

    CPACSSparCrossSection& CPACSSupportBeam::GetStructure()
    {
        return m_structure;
    }

} // namespace generated
} // namespace tigl
