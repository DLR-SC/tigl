// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSAeroelastics.h"

namespace tigl
{
    namespace generated
    {
        CPACSAeroelastics::CPACSAeroelastics(){}
        CPACSAeroelastics::~CPACSAeroelastics() {}
        
        void CPACSAeroelastics::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element divergence
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/divergence")) {
                m_divergence = boost::in_place();
                try {
                    m_divergence->ReadCPACS(tixiHandle, xpath + "/divergence");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read divergence at xpath << " << xpath << ": " << e.what();
                    m_divergence = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read divergence at xpath << " << xpath << ": " << e.getError();
                    m_divergence = boost::none;
                }
            }
            
            // read element staticMaxDisplacement
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/staticMaxDisplacement")) {
                m_staticMaxDisplacement = boost::in_place();
                try {
                    m_staticMaxDisplacement->ReadCPACS(tixiHandle, xpath + "/staticMaxDisplacement");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read staticMaxDisplacement at xpath << " << xpath << ": " << e.what();
                    m_staticMaxDisplacement = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read staticMaxDisplacement at xpath << " << xpath << ": " << e.getError();
                    m_staticMaxDisplacement = boost::none;
                }
            }
            
        }
        
        void CPACSAeroelastics::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element divergence
            if (m_divergence) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/divergence");
                m_divergence->WriteCPACS(tixiHandle, xpath + "/divergence");
            }
            
            // write element staticMaxDisplacement
            if (m_staticMaxDisplacement) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/staticMaxDisplacement");
                m_staticMaxDisplacement->WriteCPACS(tixiHandle, xpath + "/staticMaxDisplacement");
            }
            
        }
        
        bool CPACSAeroelastics::HasDivergence() const
        {
            return static_cast<bool>(m_divergence);
        }
        
        const CPACSAeroelasticDivergence& CPACSAeroelastics::GetDivergence() const
        {
            return *m_divergence;
        }
        
        CPACSAeroelasticDivergence& CPACSAeroelastics::GetDivergence()
        {
            return *m_divergence;
        }
        
        bool CPACSAeroelastics::HasStaticMaxDisplacement() const
        {
            return static_cast<bool>(m_staticMaxDisplacement);
        }
        
        const CPACSAeroelasticStaticMaxDisplacement& CPACSAeroelastics::GetStaticMaxDisplacement() const
        {
            return *m_staticMaxDisplacement;
        }
        
        CPACSAeroelasticStaticMaxDisplacement& CPACSAeroelastics::GetStaticMaxDisplacement()
        {
            return *m_staticMaxDisplacement;
        }
        
    }
}
