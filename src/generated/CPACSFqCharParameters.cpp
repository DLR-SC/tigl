// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqCharParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqCharParameters::CPACSFqCharParameters(){}
        CPACSFqCharParameters::~CPACSFqCharParameters() {}
        
        void CPACSFqCharParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element staticMargin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/staticMargin")) {
                m_staticMargin = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/staticMargin");
            }
            else {
                LOG(ERROR) << "Required element staticMargin is missing";
            }
            
            // read element phugoid
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/phugoid")) {
                m_phugoid.ReadCPACS(tixiHandle, xpath + "/phugoid");
            }
            else {
                LOG(ERROR) << "Required element phugoid is missing";
            }
            
            // read element shortPeriod
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shortPeriod")) {
                m_shortPeriod.ReadCPACS(tixiHandle, xpath + "/shortPeriod");
            }
            else {
                LOG(ERROR) << "Required element shortPeriod is missing";
            }
            
            // read element rolosc
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rolosc")) {
                m_rolosc.ReadCPACS(tixiHandle, xpath + "/rolosc");
            }
            else {
                LOG(ERROR) << "Required element rolosc is missing";
            }
            
            // read element rollSpiral
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollSpiral")) {
                m_rollSpiral = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/rollSpiral");
            }
            else {
                LOG(ERROR) << "Required element rollSpiral is missing";
            }
            
            // read element eiglat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eiglat")) {
                m_eiglat.ReadCPACS(tixiHandle, xpath + "/eiglat");
            }
            else {
                LOG(ERROR) << "Required element eiglat is missing";
            }
            
            // read element treff
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/treff")) {
                m_treff.ReadCPACS(tixiHandle, xpath + "/treff");
            }
            else {
                LOG(ERROR) << "Required element treff is missing";
            }
            
            // read element rollPerf
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollPerf")) {
                m_rollPerf.ReadCPACS(tixiHandle, xpath + "/rollPerf");
            }
            else {
                LOG(ERROR) << "Required element rollPerf is missing";
            }
            
        }
        
        void CPACSFqCharParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element staticMargin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/staticMargin");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/staticMargin", m_staticMargin);
            
            // write element phugoid
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phugoid");
            m_phugoid.WriteCPACS(tixiHandle, xpath + "/phugoid");
            
            // write element shortPeriod
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shortPeriod");
            m_shortPeriod.WriteCPACS(tixiHandle, xpath + "/shortPeriod");
            
            // write element rolosc
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rolosc");
            m_rolosc.WriteCPACS(tixiHandle, xpath + "/rolosc");
            
            // write element rollSpiral
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollSpiral");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollSpiral", m_rollSpiral);
            
            // write element eiglat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eiglat");
            m_eiglat.WriteCPACS(tixiHandle, xpath + "/eiglat");
            
            // write element treff
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/treff");
            m_treff.WriteCPACS(tixiHandle, xpath + "/treff");
            
            // write element rollPerf
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollPerf");
            m_rollPerf.WriteCPACS(tixiHandle, xpath + "/rollPerf");
            
        }
        
        const std::string& CPACSFqCharParameters::GetStaticMargin() const
        {
            return m_staticMargin;
        }
        
        void CPACSFqCharParameters::SetStaticMargin(const std::string& value)
        {
            m_staticMargin = value;
        }
        
        const CPACSFqPhugoid& CPACSFqCharParameters::GetPhugoid() const
        {
            return m_phugoid;
        }
        
        CPACSFqPhugoid& CPACSFqCharParameters::GetPhugoid()
        {
            return m_phugoid;
        }
        
        const CPACSFqShortPeriod& CPACSFqCharParameters::GetShortPeriod() const
        {
            return m_shortPeriod;
        }
        
        CPACSFqShortPeriod& CPACSFqCharParameters::GetShortPeriod()
        {
            return m_shortPeriod;
        }
        
        const CPACSFqRolosc& CPACSFqCharParameters::GetRolosc() const
        {
            return m_rolosc;
        }
        
        CPACSFqRolosc& CPACSFqCharParameters::GetRolosc()
        {
            return m_rolosc;
        }
        
        const std::string& CPACSFqCharParameters::GetRollSpiral() const
        {
            return m_rollSpiral;
        }
        
        void CPACSFqCharParameters::SetRollSpiral(const std::string& value)
        {
            m_rollSpiral = value;
        }
        
        const CPACSFqEiglat& CPACSFqCharParameters::GetEiglat() const
        {
            return m_eiglat;
        }
        
        CPACSFqEiglat& CPACSFqCharParameters::GetEiglat()
        {
            return m_eiglat;
        }
        
        const CPACSFqTreff& CPACSFqCharParameters::GetTreff() const
        {
            return m_treff;
        }
        
        CPACSFqTreff& CPACSFqCharParameters::GetTreff()
        {
            return m_treff;
        }
        
        const CPACSFqRollPerf& CPACSFqCharParameters::GetRollPerf() const
        {
            return m_rollPerf;
        }
        
        CPACSFqRollPerf& CPACSFqCharParameters::GetRollPerf()
        {
            return m_rollPerf;
        }
        
    }
}
