// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSProfileGeometry.h"
#include "CPACSStandardProfile.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSStandardProfile::CPACSStandardProfile(CPACSProfileGeometry* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSStandardProfile::~CPACSStandardProfile()
    {
    }

    const CPACSProfileGeometry* CPACSStandardProfile::GetParent() const
    {
        return m_parent;
    }

    CPACSProfileGeometry* CPACSStandardProfile::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSStandardProfile::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSStandardProfile::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSStandardProfile::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element rectangle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rectangle")) {
            m_rectangle_choice1 = boost::in_place(this);
            try {
                m_rectangle_choice1->ReadCPACS(tixiHandle, xpath + "/rectangle");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read rectangle at xpath " << xpath << ": " << e.what();
                m_rectangle_choice1 = boost::none;
            }
        }

        // read element superEllipse
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/superEllipse")) {
            m_superEllipse_choice2 = boost::in_place(this);
            try {
                m_superEllipse_choice2->ReadCPACS(tixiHandle, xpath + "/superEllipse");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read superEllipse at xpath " << xpath << ": " << e.what();
                m_superEllipse_choice2 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSStandardProfile::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element rectangle
        if (m_rectangle_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rectangle");
            m_rectangle_choice1->WriteCPACS(tixiHandle, xpath + "/rectangle");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rectangle")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rectangle");
            }
        }

        // write element superEllipse
        if (m_superEllipse_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/superEllipse");
            m_superEllipse_choice2->WriteCPACS(tixiHandle, xpath + "/superEllipse");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/superEllipse")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/superEllipse");
            }
        }

    }

    bool CPACSStandardProfile::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_rectangle_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_superEllipse_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_superEllipse_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_rectangle_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<CPACSRectangleProfile>& CPACSStandardProfile::GetRectangle_choice1() const
    {
        return m_rectangle_choice1;
    }

    boost::optional<CPACSRectangleProfile>& CPACSStandardProfile::GetRectangle_choice1()
    {
        return m_rectangle_choice1;
    }

    const boost::optional<CPACSSuperEllipseProfile>& CPACSStandardProfile::GetSuperEllipse_choice2() const
    {
        return m_superEllipse_choice2;
    }

    boost::optional<CPACSSuperEllipseProfile>& CPACSStandardProfile::GetSuperEllipse_choice2()
    {
        return m_superEllipse_choice2;
    }

    CPACSRectangleProfile& CPACSStandardProfile::GetRectangle_choice1(CreateIfNotExistsTag)
    {
        if (!m_rectangle_choice1)
            m_rectangle_choice1 = boost::in_place(this);
        return *m_rectangle_choice1;
    }

    void CPACSStandardProfile::RemoveRectangle_choice1()
    {
        m_rectangle_choice1 = boost::none;
    }

    CPACSSuperEllipseProfile& CPACSStandardProfile::GetSuperEllipse_choice2(CreateIfNotExistsTag)
    {
        if (!m_superEllipse_choice2)
            m_superEllipse_choice2 = boost::in_place(this);
        return *m_superEllipse_choice2;
    }

    void CPACSStandardProfile::RemoveSuperEllipse_choice2()
    {
        m_superEllipse_choice2 = boost::none;
    }

} // namespace generated
} // namespace tigl
