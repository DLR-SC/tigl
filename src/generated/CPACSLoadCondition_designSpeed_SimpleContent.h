// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSLoadCondition_designSpeed
        
        // generated from /xsd:schema/xsd:complexType[500]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[4]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSLoadCondition_designSpeed_SimpleContent
        #else
        enum CPACSLoadCondition_designSpeed_SimpleContent
        #endif
        {
            VA,
            VB,
            VC,
            VD,
            VF,
            Vs0,
            Vs1,
            VMC,
            other
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSLoadCondition_designSpeed_SimpleContentToString(const CPACSLoadCondition_designSpeed_SimpleContent& value)
        {
            switch(value) {
            case CPACSLoadCondition_designSpeed_SimpleContent::VA: return "VA";
            case CPACSLoadCondition_designSpeed_SimpleContent::VB: return "VB";
            case CPACSLoadCondition_designSpeed_SimpleContent::VC: return "VC";
            case CPACSLoadCondition_designSpeed_SimpleContent::VD: return "VD";
            case CPACSLoadCondition_designSpeed_SimpleContent::VF: return "VF";
            case CPACSLoadCondition_designSpeed_SimpleContent::Vs0: return "Vs0";
            case CPACSLoadCondition_designSpeed_SimpleContent::Vs1: return "Vs1";
            case CPACSLoadCondition_designSpeed_SimpleContent::VMC: return "VMC";
            case CPACSLoadCondition_designSpeed_SimpleContent::other: return "other";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSLoadCondition_designSpeed_SimpleContent");
            }
        }
        inline CPACSLoadCondition_designSpeed_SimpleContent stringToCPACSLoadCondition_designSpeed_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "va") { return CPACSLoadCondition_designSpeed_SimpleContent::VA; }
            if (toLower(value) == "vb") { return CPACSLoadCondition_designSpeed_SimpleContent::VB; }
            if (toLower(value) == "vc") { return CPACSLoadCondition_designSpeed_SimpleContent::VC; }
            if (toLower(value) == "vd") { return CPACSLoadCondition_designSpeed_SimpleContent::VD; }
            if (toLower(value) == "vf") { return CPACSLoadCondition_designSpeed_SimpleContent::VF; }
            if (toLower(value) == "vs0") { return CPACSLoadCondition_designSpeed_SimpleContent::Vs0; }
            if (toLower(value) == "vs1") { return CPACSLoadCondition_designSpeed_SimpleContent::Vs1; }
            if (toLower(value) == "vmc") { return CPACSLoadCondition_designSpeed_SimpleContent::VMC; }
            if (toLower(value) == "other") { return CPACSLoadCondition_designSpeed_SimpleContent::other; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSLoadCondition_designSpeed_SimpleContent");
        }
        #else
        inline std::string CPACSLoadCondition_designSpeed_SimpleContentToString(const CPACSLoadCondition_designSpeed_SimpleContent& value)
        {
            switch(value) {
            case VA: return "VA";
            case VB: return "VB";
            case VC: return "VC";
            case VD: return "VD";
            case VF: return "VF";
            case Vs0: return "Vs0";
            case Vs1: return "Vs1";
            case VMC: return "VMC";
            case other: return "other";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSLoadCondition_designSpeed_SimpleContent");
            }
        }
        inline CPACSLoadCondition_designSpeed_SimpleContent stringToCPACSLoadCondition_designSpeed_SimpleContent(const std::string& value)
        {
            struct ToLower { std::string operator()(std::string str) { for (char& c : str) { c = std::tolower(c); } return str; } } toLower;
            if (toLower(value) == "va") { return VA; }
            if (toLower(value) == "vb") { return VB; }
            if (toLower(value) == "vc") { return VC; }
            if (toLower(value) == "vd") { return VD; }
            if (toLower(value) == "vf") { return VF; }
            if (toLower(value) == "vs0") { return Vs0; }
            if (toLower(value) == "vs1") { return Vs1; }
            if (toLower(value) == "vmc") { return VMC; }
            if (toLower(value) == "other") { return other; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSLoadCondition_designSpeed_SimpleContent");
        }
        #endif
    }
}
