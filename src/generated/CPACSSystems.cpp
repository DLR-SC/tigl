// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSAircraftModel.h"
#include "CCPACSRotorcraftModel.h"
#include "CPACSSystems.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSystems::CPACSSystems(CCPACSAircraftModel* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_genericSystems(reinterpret_cast<CCPACSACSystems*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSAircraftModel);
    }

    CPACSSystems::CPACSSystems(CCPACSRotorcraftModel* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_genericSystems(reinterpret_cast<CCPACSACSystems*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSRotorcraftModel);
    }

    CPACSSystems::~CPACSSystems()
    {
    }

    CTiglUIDManager& CPACSSystems::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSystems::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSSystems::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element genericSystems
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericSystems")) {
            m_genericSystems.ReadCPACS(tixiHandle, xpath + "/genericSystems");
        }
        else {
            LOG(ERROR) << "Required element genericSystems is missing at xpath " << xpath;
        }

    }

    void CPACSSystems::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element genericSystems
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericSystems");
        m_genericSystems.WriteCPACS(tixiHandle, xpath + "/genericSystems");

    }

    const CCPACSGenericSystems& CPACSSystems::GetGenericSystems() const
    {
        return m_genericSystems;
    }

    CCPACSGenericSystems& CPACSSystems::GetGenericSystems()
    {
        return m_genericSystems;
    }

} // namespace generated
} // namespace tigl
