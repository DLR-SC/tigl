// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCabinDoor.h"

namespace tigl
{
    namespace generated
    {
        CPACSCabinDoor::CPACSCabinDoor(){}
        CPACSCabinDoor::~CPACSCabinDoor() {}
        
        void CPACSCabinDoor::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            else {
                LOG(ERROR) << "Required element description is missing";
            }
            
            // read element structuralUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralUID")) {
                m_structuralUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralUID");
            }
            else {
                LOG(ERROR) << "Required element structuralUID is missing";
            }
            
            // read element paxCapacity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxCapacity")) {
                m_paxCapacity = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/paxCapacity");
            }
            else {
                LOG(ERROR) << "Required element paxCapacity is missing";
            }
            
            // read element x
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/x")) {
                m_x = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/x");
            }
            else {
                LOG(ERROR) << "Required element x is missing";
            }
            
            // read element z
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/z")) {
                m_z = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/z");
            }
            else {
                LOG(ERROR) << "Required element z is missing";
            }
            
            // read element width
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/width")) {
                m_width = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/width");
            }
            else {
                LOG(ERROR) << "Required element width is missing";
            }
            
            // read element height
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/height")) {
                m_height = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/height");
            }
            else {
                LOG(ERROR) << "Required element height is missing";
            }
            
            // read element side
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/side")) {
                m_side.ReadCPACS(tixiHandle, xpath + "/side");
            }
            else {
                LOG(ERROR) << "Required element side is missing";
            }
            
            // read element type
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/type")) {
                m_type = boost::in_place();
                try {
                    m_type->ReadCPACS(tixiHandle, xpath + "/type");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read type at xpath << " << xpath << ": " << e.what();
                    m_type = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read type at xpath << " << xpath << ": " << e.getError();
                    m_type = boost::none;
                }
            }
            
        }
        
        void CPACSCabinDoor::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", m_description);
            
            // write element structuralUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralUID", m_structuralUID);
            
            // write element paxCapacity
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxCapacity");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/paxCapacity", m_paxCapacity);
            
            // write element x
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/x");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/x", m_x);
            
            // write element z
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/z", m_z);
            
            // write element width
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/width");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/width", m_width);
            
            // write element height
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/height");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/height", m_height);
            
            // write element side
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/side");
            m_side.WriteCPACS(tixiHandle, xpath + "/side");
            
            // write element type
            if (m_type) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/type");
                m_type->WriteCPACS(tixiHandle, xpath + "/type");
            }
            
        }
        
        const std::string& CPACSCabinDoor::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSCabinDoor::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSCabinDoor::GetName() const
        {
            return m_name;
        }
        
        void CPACSCabinDoor::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        const std::string& CPACSCabinDoor::GetDescription() const
        {
            return m_description;
        }
        
        void CPACSCabinDoor::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSCabinDoor::GetStructuralUID() const
        {
            return m_structuralUID;
        }
        
        void CPACSCabinDoor::SetStructuralUID(const std::string& value)
        {
            m_structuralUID = value;
        }
        
        const int& CPACSCabinDoor::GetPaxCapacity() const
        {
            return m_paxCapacity;
        }
        
        void CPACSCabinDoor::SetPaxCapacity(const int& value)
        {
            m_paxCapacity = value;
        }
        
        const double& CPACSCabinDoor::GetX() const
        {
            return m_x;
        }
        
        void CPACSCabinDoor::SetX(const double& value)
        {
            m_x = value;
        }
        
        const double& CPACSCabinDoor::GetZ() const
        {
            return m_z;
        }
        
        void CPACSCabinDoor::SetZ(const double& value)
        {
            m_z = value;
        }
        
        const double& CPACSCabinDoor::GetWidth() const
        {
            return m_width;
        }
        
        void CPACSCabinDoor::SetWidth(const double& value)
        {
            m_width = value;
        }
        
        const double& CPACSCabinDoor::GetHeight() const
        {
            return m_height;
        }
        
        void CPACSCabinDoor::SetHeight(const double& value)
        {
            m_height = value;
        }
        
        const CPACSCabinDoor_side& CPACSCabinDoor::GetSide() const
        {
            return m_side;
        }
        
        CPACSCabinDoor_side& CPACSCabinDoor::GetSide()
        {
            return m_side;
        }
        
        bool CPACSCabinDoor::HasType() const
        {
            return static_cast<bool>(m_type);
        }
        
        const CPACSCabinDoor_type& CPACSCabinDoor::GetType() const
        {
            return *m_type;
        }
        
        CPACSCabinDoor_type& CPACSCabinDoor::GetType()
        {
            return *m_type;
        }
        
    }
}
