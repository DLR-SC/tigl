// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSLoadCondition.h"
#include "CPACSLoadCaseState.h"
#include "CPACSLoadCaseSettings.h"
#include "CPACSLoadCaseMass.h"
#include "CPACSNodalLoads.h"
#include "CPACSCutLoads.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSGroundLoadCases
        
        // generated from /xsd:schema/xsd:complexType[417]
        class CPACSGroundLoadCase
        {
        public:
            TIGL_EXPORT CPACSGroundLoadCase();
            TIGL_EXPORT virtual ~CPACSGroundLoadCase();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT bool HasAeroDataSetUID() const;
            TIGL_EXPORT const std::string& GetAeroDataSetUID() const;
            TIGL_EXPORT void SetAeroDataSetUID(const std::string& value);
            
            TIGL_EXPORT bool HasLoadCondition() const;
            TIGL_EXPORT const CPACSLoadCondition& GetLoadCondition() const;
            TIGL_EXPORT CPACSLoadCondition& GetLoadCondition();
            
            TIGL_EXPORT const CPACSLoadCaseState& GetState() const;
            TIGL_EXPORT CPACSLoadCaseState& GetState();
            
            TIGL_EXPORT bool HasAircraftSettings() const;
            TIGL_EXPORT const CPACSLoadCaseSettings& GetAircraftSettings() const;
            TIGL_EXPORT CPACSLoadCaseSettings& GetAircraftSettings();
            
            TIGL_EXPORT bool HasMass() const;
            TIGL_EXPORT const CPACSLoadCaseMass& GetMass() const;
            TIGL_EXPORT CPACSLoadCaseMass& GetMass();
            
            TIGL_EXPORT bool HasExternalAmifFile() const;
            TIGL_EXPORT const std::string& GetExternalAmifFile() const;
            TIGL_EXPORT void SetExternalAmifFile(const std::string& value);
            
            TIGL_EXPORT bool HasNodalLoads_choice1() const;
            TIGL_EXPORT const CPACSNodalLoads& GetNodalLoads_choice1() const;
            TIGL_EXPORT CPACSNodalLoads& GetNodalLoads_choice1();
            
            TIGL_EXPORT bool HasCutLoads_choice2() const;
            TIGL_EXPORT const CPACSCutLoads& GetCutLoads_choice2() const;
            TIGL_EXPORT CPACSCutLoads& GetCutLoads_choice2();
            
        protected:
            std::string                            m_uID;
            std::string                            m_name;
            boost::optional<std::string>           m_description;
            boost::optional<std::string>           m_aeroDataSetUID;
            boost::optional<CPACSLoadCondition>    m_loadCondition;
            CPACSLoadCaseState                     m_state;
            boost::optional<CPACSLoadCaseSettings> m_aircraftSettings;
            boost::optional<CPACSLoadCaseMass>     m_mass;
            boost::optional<std::string>           m_externalAmifFile;
            boost::optional<CPACSNodalLoads>       m_nodalLoads_choice1;
            boost::optional<CPACSCutLoads>         m_cutLoads_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSGroundLoadCase(const CPACSGroundLoadCase&) = delete;
            CPACSGroundLoadCase& operator=(const CPACSGroundLoadCase&) = delete;
            
            CPACSGroundLoadCase(CPACSGroundLoadCase&&) = delete;
            CPACSGroundLoadCase& operator=(CPACSGroundLoadCase&&) = delete;
            #else
            CPACSGroundLoadCase(const CPACSGroundLoadCase&);
            CPACSGroundLoadCase& operator=(const CPACSGroundLoadCase&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSGroundLoadCase = generated::CPACSGroundLoadCase;
    #else
    typedef generated::CPACSGroundLoadCase CCPACSGroundLoadCase;
    #endif
}
