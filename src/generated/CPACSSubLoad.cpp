// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSubLoad.h"

namespace tigl
{
    namespace generated
    {
        CPACSSubLoad::CPACSSubLoad(){}
        CPACSSubLoad::~CPACSSubLoad() {}
        
        void CPACSSubLoad::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element fx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fx")) {
                m_fx.ReadCPACS(tixiHandle, xpath + "/fx");
            }
            else {
                LOG(ERROR) << "Required element fx is missing";
            }
            
            // read element fy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fy")) {
                m_fy.ReadCPACS(tixiHandle, xpath + "/fy");
            }
            else {
                LOG(ERROR) << "Required element fy is missing";
            }
            
            // read element fz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fz")) {
                m_fz.ReadCPACS(tixiHandle, xpath + "/fz");
            }
            else {
                LOG(ERROR) << "Required element fz is missing";
            }
            
            // read element mx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mx")) {
                m_mx.ReadCPACS(tixiHandle, xpath + "/mx");
            }
            else {
                LOG(ERROR) << "Required element mx is missing";
            }
            
            // read element my
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/my")) {
                m_my.ReadCPACS(tixiHandle, xpath + "/my");
            }
            else {
                LOG(ERROR) << "Required element my is missing";
            }
            
            // read element mz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mz")) {
                m_mz.ReadCPACS(tixiHandle, xpath + "/mz");
            }
            else {
                LOG(ERROR) << "Required element mz is missing";
            }
            
        }
        
        void CPACSSubLoad::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element fx
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fx");
            m_fx.WriteCPACS(tixiHandle, xpath + "/fx");
            
            // write element fy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fy");
            m_fy.WriteCPACS(tixiHandle, xpath + "/fy");
            
            // write element fz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fz");
            m_fz.WriteCPACS(tixiHandle, xpath + "/fz");
            
            // write element mx
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mx");
            m_mx.WriteCPACS(tixiHandle, xpath + "/mx");
            
            // write element my
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/my");
            m_my.WriteCPACS(tixiHandle, xpath + "/my");
            
            // write element mz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mz");
            m_mz.WriteCPACS(tixiHandle, xpath + "/mz");
            
        }
        
        const std::string& CPACSSubLoad::GetName() const
        {
            return m_name;
        }
        
        void CPACSSubLoad::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSSubLoad::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSSubLoad::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSSubLoad::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetFx() const
        {
            return m_fx;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetFx()
        {
            return m_fx;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetFy() const
        {
            return m_fy;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetFy()
        {
            return m_fy;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetFz() const
        {
            return m_fz;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetFz()
        {
            return m_fz;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetMx() const
        {
            return m_mx;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetMx()
        {
            return m_mx;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetMy() const
        {
            return m_my;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetMy()
        {
            return m_my;
        }
        
        const CCPACSStringVector& CPACSSubLoad::GetMz() const
        {
            return m_mz;
        }
        
        CCPACSStringVector& CPACSSubLoad::GetMz()
        {
            return m_mz;
        }
        
    }
}
