// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include "CPACSGearDeflectionVectors.h"
#include "CPACSControlSurfaceDeflectionVectors.h"
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSPointListXYZ.h>
#include <CCPACSPointListXYZ.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSTrajectory
        
        // generated from /xsd:schema/xsd:complexType[334]
        class CPACSFlightPoint
        {
        public:
            TIGL_EXPORT CPACSFlightPoint();
            TIGL_EXPORT virtual ~CPACSFlightPoint();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const CCPACSStringVector& GetIndex() const;
            TIGL_EXPORT CCPACSStringVector& GetIndex();
            
            TIGL_EXPORT const CCPACSStringVector& GetSegmentUID() const;
            TIGL_EXPORT CCPACSStringVector& GetSegmentUID();
            
            TIGL_EXPORT bool HasFlightTime() const;
            TIGL_EXPORT const CCPACSStringVector& GetFlightTime() const;
            TIGL_EXPORT CCPACSStringVector& GetFlightTime();
            
            TIGL_EXPORT bool HasFlightDistance() const;
            TIGL_EXPORT const CCPACSStringVector& GetFlightDistance() const;
            TIGL_EXPORT CCPACSStringVector& GetFlightDistance();
            
            TIGL_EXPORT bool HasGroundDistance() const;
            TIGL_EXPORT const CCPACSStringVector& GetGroundDistance() const;
            TIGL_EXPORT CCPACSStringVector& GetGroundDistance();
            
            TIGL_EXPORT bool HasStaticPressure() const;
            TIGL_EXPORT const CCPACSStringVector& GetStaticPressure() const;
            TIGL_EXPORT CCPACSStringVector& GetStaticPressure();
            
            TIGL_EXPORT bool HasTAS() const;
            TIGL_EXPORT const CCPACSStringVector& GetTAS() const;
            TIGL_EXPORT CCPACSStringVector& GetTAS();
            
            TIGL_EXPORT bool HasCAS() const;
            TIGL_EXPORT const CCPACSStringVector& GetCAS() const;
            TIGL_EXPORT CCPACSStringVector& GetCAS();
            
            TIGL_EXPORT bool HasAngleOfAttack() const;
            TIGL_EXPORT const CCPACSStringVector& GetAngleOfAttack() const;
            TIGL_EXPORT CCPACSStringVector& GetAngleOfAttack();
            
            TIGL_EXPORT bool HasAngleOfYaw() const;
            TIGL_EXPORT const CCPACSStringVector& GetAngleOfYaw() const;
            TIGL_EXPORT CCPACSStringVector& GetAngleOfYaw();
            
            TIGL_EXPORT bool HasAngleOfRoll() const;
            TIGL_EXPORT const CCPACSStringVector& GetAngleOfRoll() const;
            TIGL_EXPORT CCPACSStringVector& GetAngleOfRoll();
            
            TIGL_EXPORT bool HasMass() const;
            TIGL_EXPORT const CCPACSStringVector& GetMass() const;
            TIGL_EXPORT CCPACSStringVector& GetMass();
            
            TIGL_EXPORT bool HasFuelFlow() const;
            TIGL_EXPORT const CCPACSStringVector& GetFuelFlow() const;
            TIGL_EXPORT CCPACSStringVector& GetFuelFlow();
            
            TIGL_EXPORT bool HasCOFlow() const;
            TIGL_EXPORT const CCPACSStringVector& GetCOFlow() const;
            TIGL_EXPORT CCPACSStringVector& GetCOFlow();
            
            TIGL_EXPORT bool HasCO2Flow() const;
            TIGL_EXPORT const CCPACSStringVector& GetCO2Flow() const;
            TIGL_EXPORT CCPACSStringVector& GetCO2Flow();
            
            TIGL_EXPORT bool HasNOXFlow() const;
            TIGL_EXPORT const CCPACSStringVector& GetNOXFlow() const;
            TIGL_EXPORT CCPACSStringVector& GetNOXFlow();
            
            TIGL_EXPORT bool HasSootFlow() const;
            TIGL_EXPORT const CCPACSStringVector& GetSootFlow() const;
            TIGL_EXPORT CCPACSStringVector& GetSootFlow();
            
            TIGL_EXPORT bool HasHCFlow() const;
            TIGL_EXPORT const CCPACSStringVector& GetHCFlow() const;
            TIGL_EXPORT CCPACSStringVector& GetHCFlow();
            
            TIGL_EXPORT bool HasSO2Flow() const;
            TIGL_EXPORT const CCPACSStringVector& GetSO2Flow() const;
            TIGL_EXPORT CCPACSStringVector& GetSO2Flow();
            
            TIGL_EXPORT bool HasGearDeflections() const;
            TIGL_EXPORT const CPACSGearDeflectionVectors& GetGearDeflections() const;
            TIGL_EXPORT CPACSGearDeflectionVectors& GetGearDeflections();
            
            TIGL_EXPORT bool HasControlSurfaceDeflections() const;
            TIGL_EXPORT const CPACSControlSurfaceDeflectionVectors& GetControlSurfaceDeflections() const;
            TIGL_EXPORT CPACSControlSurfaceDeflectionVectors& GetControlSurfaceDeflections();
            
            TIGL_EXPORT bool HasThrust_choice1() const;
            TIGL_EXPORT const CCPACSStringVector& GetThrust_choice1() const;
            TIGL_EXPORT CCPACSStringVector& GetThrust_choice1();
            
            TIGL_EXPORT bool HasN1_choice2() const;
            TIGL_EXPORT const CCPACSStringVector& GetN1_choice2() const;
            TIGL_EXPORT CCPACSStringVector& GetN1_choice2();
            
            TIGL_EXPORT bool HasRefLocation_choice1() const;
            TIGL_EXPORT const CCPACSPointListXYZ& GetRefLocation_choice1() const;
            TIGL_EXPORT CCPACSPointListXYZ& GetRefLocation_choice1();
            
            TIGL_EXPORT bool HasCurrentLocation_choice1() const;
            TIGL_EXPORT const CCPACSPointListXYZ& GetCurrentLocation_choice1() const;
            TIGL_EXPORT CCPACSPointListXYZ& GetCurrentLocation_choice1();
            
            TIGL_EXPORT bool HasLatitude_choice2() const;
            TIGL_EXPORT const CCPACSStringVector& GetLatitude_choice2() const;
            TIGL_EXPORT CCPACSStringVector& GetLatitude_choice2();
            
            TIGL_EXPORT bool HasLongitude_choice2() const;
            TIGL_EXPORT const CCPACSStringVector& GetLongitude_choice2() const;
            TIGL_EXPORT CCPACSStringVector& GetLongitude_choice2();
            
            TIGL_EXPORT bool HasAltitude_choice2() const;
            TIGL_EXPORT const CCPACSStringVector& GetAltitude_choice2() const;
            TIGL_EXPORT CCPACSStringVector& GetAltitude_choice2();
            
        protected:
            CCPACSStringVector                                    m_index;
            CCPACSStringVector                                    m_segmentUID;
            boost::optional<CCPACSStringVector>                   m_flightTime;
            boost::optional<CCPACSStringVector>                   m_flightDistance;
            boost::optional<CCPACSStringVector>                   m_groundDistance;
            boost::optional<CCPACSStringVector>                   m_staticPressure;
            boost::optional<CCPACSStringVector>                   m_tAS;
            boost::optional<CCPACSStringVector>                   m_cAS;
            boost::optional<CCPACSStringVector>                   m_angleOfAttack;
            boost::optional<CCPACSStringVector>                   m_angleOfYaw;
            boost::optional<CCPACSStringVector>                   m_angleOfRoll;
            boost::optional<CCPACSStringVector>                   m_mass;
            boost::optional<CCPACSStringVector>                   m_fuelFlow;
            boost::optional<CCPACSStringVector>                   m_cOFlow;
            boost::optional<CCPACSStringVector>                   m_cO2Flow;
            boost::optional<CCPACSStringVector>                   m_nOXFlow;
            boost::optional<CCPACSStringVector>                   m_sootFlow;
            boost::optional<CCPACSStringVector>                   m_hCFlow;
            boost::optional<CCPACSStringVector>                   m_sO2Flow;
            boost::optional<CPACSGearDeflectionVectors>           m_gearDeflections;
            boost::optional<CPACSControlSurfaceDeflectionVectors> m_controlSurfaceDeflections;
            boost::optional<CCPACSStringVector>                   m_thrust_choice1;
            boost::optional<CCPACSStringVector>                   m_n1_choice2;
            boost::optional<CCPACSPointListXYZ>                   m_refLocation_choice1;
            boost::optional<CCPACSPointListXYZ>                   m_currentLocation_choice1;
            boost::optional<CCPACSStringVector>                   m_latitude_choice2;
            boost::optional<CCPACSStringVector>                   m_longitude_choice2;
            boost::optional<CCPACSStringVector>                   m_altitude_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSFlightPoint(const CPACSFlightPoint&) = delete;
            CPACSFlightPoint& operator=(const CPACSFlightPoint&) = delete;
            
            CPACSFlightPoint(CPACSFlightPoint&&) = delete;
            CPACSFlightPoint& operator=(CPACSFlightPoint&&) = delete;
            #else
            CPACSFlightPoint(const CPACSFlightPoint&);
            CPACSFlightPoint& operator=(const CPACSFlightPoint&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSFlightPoint = generated::CPACSFlightPoint;
    #else
    typedef generated::CPACSFlightPoint CCPACSFlightPoint;
    #endif
}
