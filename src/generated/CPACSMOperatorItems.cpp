// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMOperatorItems.h"

namespace tigl
{
    namespace generated
    {
        CPACSMOperatorItems::CPACSMOperatorItems(){}
        CPACSMOperatorItems::~CPACSMOperatorItems() {}
        
        void CPACSMOperatorItems::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mDocumentsTools
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mDocumentsTools")) {
                m_mDocumentsTools = boost::in_place();
                try {
                    m_mDocumentsTools->ReadCPACS(tixiHandle, xpath + "/mDocumentsTools");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mDocumentsTools at xpath << " << xpath << ": " << e.what();
                    m_mDocumentsTools = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mDocumentsTools at xpath << " << xpath << ": " << e.getError();
                    m_mDocumentsTools = boost::none;
                }
            }
            
            // read element mFixedGalleys
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFixedGalleys")) {
                m_mFixedGalleys = boost::in_place();
                try {
                    m_mFixedGalleys->ReadCPACS(tixiHandle, xpath + "/mFixedGalleys");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFixedGalleys at xpath << " << xpath << ": " << e.what();
                    m_mFixedGalleys = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFixedGalleys at xpath << " << xpath << ": " << e.getError();
                    m_mFixedGalleys = boost::none;
                }
            }
            
            // read element mSeats
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mSeats")) {
                m_mSeats = boost::in_place();
                try {
                    m_mSeats->ReadCPACS(tixiHandle, xpath + "/mSeats");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mSeats at xpath << " << xpath << ": " << e.what();
                    m_mSeats = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mSeats at xpath << " << xpath << ": " << e.getError();
                    m_mSeats = boost::none;
                }
            }
            
            // read element mIFEs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mIFEs")) {
                m_mIFEs = boost::in_place();
                try {
                    m_mIFEs->ReadCPACS(tixiHandle, xpath + "/mIFEs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mIFEs at xpath << " << xpath << ": " << e.what();
                    m_mIFEs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mIFEs at xpath << " << xpath << ": " << e.getError();
                    m_mIFEs = boost::none;
                }
            }
            
            // read element mEmergencyEquipments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEmergencyEquipments")) {
                m_mEmergencyEquipments = boost::in_place();
                try {
                    m_mEmergencyEquipments->ReadCPACS(tixiHandle, xpath + "/mEmergencyEquipments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEmergencyEquipments at xpath << " << xpath << ": " << e.what();
                    m_mEmergencyEquipments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEmergencyEquipments at xpath << " << xpath << ": " << e.getError();
                    m_mEmergencyEquipments = boost::none;
                }
            }
            
            // read element mCaterings
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCaterings")) {
                m_mCaterings = boost::in_place();
                try {
                    m_mCaterings->ReadCPACS(tixiHandle, xpath + "/mCaterings");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCaterings at xpath << " << xpath << ": " << e.what();
                    m_mCaterings = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCaterings at xpath << " << xpath << ": " << e.getError();
                    m_mCaterings = boost::none;
                }
            }
            
            // read element mCrewMembers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mCrewMembers")) {
                m_mCrewMembers = boost::in_place();
                try {
                    m_mCrewMembers->ReadCPACS(tixiHandle, xpath + "/mCrewMembers");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mCrewMembers at xpath << " << xpath << ": " << e.what();
                    m_mCrewMembers = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mCrewMembers at xpath << " << xpath << ": " << e.getError();
                    m_mCrewMembers = boost::none;
                }
            }
            
        }
        
        void CPACSMOperatorItems::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mDocumentsTools
            if (m_mDocumentsTools) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mDocumentsTools");
                m_mDocumentsTools->WriteCPACS(tixiHandle, xpath + "/mDocumentsTools");
            }
            
            // write element mFixedGalleys
            if (m_mFixedGalleys) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFixedGalleys");
                m_mFixedGalleys->WriteCPACS(tixiHandle, xpath + "/mFixedGalleys");
            }
            
            // write element mSeats
            if (m_mSeats) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mSeats");
                m_mSeats->WriteCPACS(tixiHandle, xpath + "/mSeats");
            }
            
            // write element mIFEs
            if (m_mIFEs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mIFEs");
                m_mIFEs->WriteCPACS(tixiHandle, xpath + "/mIFEs");
            }
            
            // write element mEmergencyEquipments
            if (m_mEmergencyEquipments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEmergencyEquipments");
                m_mEmergencyEquipments->WriteCPACS(tixiHandle, xpath + "/mEmergencyEquipments");
            }
            
            // write element mCaterings
            if (m_mCaterings) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCaterings");
                m_mCaterings->WriteCPACS(tixiHandle, xpath + "/mCaterings");
            }
            
            // write element mCrewMembers
            if (m_mCrewMembers) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mCrewMembers");
                m_mCrewMembers->WriteCPACS(tixiHandle, xpath + "/mCrewMembers");
            }
            
        }
        
        const CPACSGenericMass& CPACSMOperatorItems::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMOperatorItems::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMOperatorItems::HasMDocumentsTools() const
        {
            return static_cast<bool>(m_mDocumentsTools);
        }
        
        const CPACSMDocumentsTools& CPACSMOperatorItems::GetMDocumentsTools() const
        {
            return *m_mDocumentsTools;
        }
        
        CPACSMDocumentsTools& CPACSMOperatorItems::GetMDocumentsTools()
        {
            return *m_mDocumentsTools;
        }
        
        bool CPACSMOperatorItems::HasMFixedGalleys() const
        {
            return static_cast<bool>(m_mFixedGalleys);
        }
        
        const CPACSMFixedGalleys& CPACSMOperatorItems::GetMFixedGalleys() const
        {
            return *m_mFixedGalleys;
        }
        
        CPACSMFixedGalleys& CPACSMOperatorItems::GetMFixedGalleys()
        {
            return *m_mFixedGalleys;
        }
        
        bool CPACSMOperatorItems::HasMSeats() const
        {
            return static_cast<bool>(m_mSeats);
        }
        
        const CPACSMSeats& CPACSMOperatorItems::GetMSeats() const
        {
            return *m_mSeats;
        }
        
        CPACSMSeats& CPACSMOperatorItems::GetMSeats()
        {
            return *m_mSeats;
        }
        
        bool CPACSMOperatorItems::HasMIFEs() const
        {
            return static_cast<bool>(m_mIFEs);
        }
        
        const CPACSMIFESystems& CPACSMOperatorItems::GetMIFEs() const
        {
            return *m_mIFEs;
        }
        
        CPACSMIFESystems& CPACSMOperatorItems::GetMIFEs()
        {
            return *m_mIFEs;
        }
        
        bool CPACSMOperatorItems::HasMEmergencyEquipments() const
        {
            return static_cast<bool>(m_mEmergencyEquipments);
        }
        
        const CPACSMEmergencyEquipments& CPACSMOperatorItems::GetMEmergencyEquipments() const
        {
            return *m_mEmergencyEquipments;
        }
        
        CPACSMEmergencyEquipments& CPACSMOperatorItems::GetMEmergencyEquipments()
        {
            return *m_mEmergencyEquipments;
        }
        
        bool CPACSMOperatorItems::HasMCaterings() const
        {
            return static_cast<bool>(m_mCaterings);
        }
        
        const CPACSMCaterings& CPACSMOperatorItems::GetMCaterings() const
        {
            return *m_mCaterings;
        }
        
        CPACSMCaterings& CPACSMOperatorItems::GetMCaterings()
        {
            return *m_mCaterings;
        }
        
        bool CPACSMOperatorItems::HasMCrewMembers() const
        {
            return static_cast<bool>(m_mCrewMembers);
        }
        
        const CPACSMCrewMembers& CPACSMOperatorItems::GetMCrewMembers() const
        {
            return *m_mCrewMembers;
        }
        
        CPACSMCrewMembers& CPACSMOperatorItems::GetMCrewMembers()
        {
            return *m_mCrewMembers;
        }
        
    }
}
