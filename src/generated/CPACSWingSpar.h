// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <CCPACSWingSparPositions.h>
#include <CCPACSWingSparSegments.h>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCSStructure;

namespace generated
{
    // This class is used in:
    // CPACSWingComponentSegmentStructure

    // generated from /xsd:schema/xsd:complexType[978]
    /// @brief Definition of the spars of the wing.
    /// 
    /// Spars type, a spar is defined by sparSegments that
    /// stretch between multiple sparPositions. The spar definition is
    /// very flexible in CPACS. Spars can start and end at any position
    /// of the wing, spars can have kinks at any position of the wing
    /// and spars can cross each other or merge.
    /// At first the spar points (->sparPositions) have to
    /// be defined. Spar points are defined using the relative
    /// coordinates eta and xsi. Spar points do lay on wing middle
    /// plane.
    /// Two or more spar points are connected to on spar
    /// segment (->sparSegments). Each spar segment can be seen as
    /// one spar. The spar geometry between two spar points is defined 
    /// as a direct/straight connection in global coordinate system 
    /// and not in eta xsi coordinates of the component segment. 
    /// One spar point can be used by more than one spar, if
    /// e.g. two spars are merging. The detailed cross section of the
    /// spar is also defined with sparSegments.
    /// Pleas find below a picture for an example definition
    /// of 3 spars in one wing, by using spar position points and spar
    /// segments:
    /// @see spars1
    /// 
    class CPACSWingSpar
    {
    public:
        TIGL_EXPORT CPACSWingSpar(CCPACSWingCSStructure* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWingSpar();

        TIGL_EXPORT CCPACSWingCSStructure* GetParent();

        TIGL_EXPORT const CCPACSWingCSStructure* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CCPACSWingSparPositions& GetSparPositions() const;
        TIGL_EXPORT virtual CCPACSWingSparPositions& GetSparPositions();

        TIGL_EXPORT virtual const CCPACSWingSparSegments& GetSparSegments() const;
        TIGL_EXPORT virtual CCPACSWingSparSegments& GetSparSegments();

    protected:
        CCPACSWingCSStructure* m_parent;

        CTiglUIDManager* m_uidMgr;

        CCPACSWingSparPositions m_sparPositions;
        CCPACSWingSparSegments  m_sparSegments;

    private:
        CPACSWingSpar(const CPACSWingSpar&) = delete;
        CPACSWingSpar& operator=(const CPACSWingSpar&) = delete;

        CPACSWingSpar(CPACSWingSpar&&) = delete;
        CPACSWingSpar& operator=(CPACSWingSpar&&) = delete;
    };
} // namespace generated

// CPACSWingSpar is customized, use type CCPACSWingSpars directly
} // namespace tigl
