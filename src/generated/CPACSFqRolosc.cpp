// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqRolosc.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqRolosc::CPACSFqRolosc(){}
        CPACSFqRolosc::~CPACSFqRolosc() {}
        
        void CPACSFqRolosc::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element ratioPoscPav
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ratioPoscPav")) {
                m_ratioPoscPav = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/ratioPoscPav");
            }
            
            // read element phasePsiBeta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/phasePsiBeta")) {
                m_phasePsiBeta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/phasePsiBeta");
            }
            
            // read element pasePBeta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pasePBeta")) {
                m_pasePBeta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/pasePBeta");
            }
            
            // read element ratioP2P1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ratioP2P1")) {
                m_ratioP2P1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/ratioP2P1");
            }
            
            // read element rollRateOsc
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/rollRateOsc")) {
                m_rollRateOsc = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/rollRateOsc");
            }
            
        }
        
        void CPACSFqRolosc::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element ratioPoscPav
            if (m_ratioPoscPav) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ratioPoscPav");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ratioPoscPav", *m_ratioPoscPav);
            }
            
            // write element phasePsiBeta
            if (m_phasePsiBeta) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/phasePsiBeta");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/phasePsiBeta", *m_phasePsiBeta);
            }
            
            // write element pasePBeta
            if (m_pasePBeta) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pasePBeta");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/pasePBeta", *m_pasePBeta);
            }
            
            // write element ratioP2P1
            if (m_ratioP2P1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ratioP2P1");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ratioP2P1", *m_ratioP2P1);
            }
            
            // write element rollRateOsc
            if (m_rollRateOsc) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rollRateOsc");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/rollRateOsc", *m_rollRateOsc);
            }
            
        }
        
        bool CPACSFqRolosc::HasRatioPoscPav() const
        {
            return static_cast<bool>(m_ratioPoscPav);
        }
        
        const double& CPACSFqRolosc::GetRatioPoscPav() const
        {
            return *m_ratioPoscPav;
        }
        
        void CPACSFqRolosc::SetRatioPoscPav(const double& value)
        {
            m_ratioPoscPav = value;
        }
        
        bool CPACSFqRolosc::HasPhasePsiBeta() const
        {
            return static_cast<bool>(m_phasePsiBeta);
        }
        
        const double& CPACSFqRolosc::GetPhasePsiBeta() const
        {
            return *m_phasePsiBeta;
        }
        
        void CPACSFqRolosc::SetPhasePsiBeta(const double& value)
        {
            m_phasePsiBeta = value;
        }
        
        bool CPACSFqRolosc::HasPasePBeta() const
        {
            return static_cast<bool>(m_pasePBeta);
        }
        
        const double& CPACSFqRolosc::GetPasePBeta() const
        {
            return *m_pasePBeta;
        }
        
        void CPACSFqRolosc::SetPasePBeta(const double& value)
        {
            m_pasePBeta = value;
        }
        
        bool CPACSFqRolosc::HasRatioP2P1() const
        {
            return static_cast<bool>(m_ratioP2P1);
        }
        
        const double& CPACSFqRolosc::GetRatioP2P1() const
        {
            return *m_ratioP2P1;
        }
        
        void CPACSFqRolosc::SetRatioP2P1(const double& value)
        {
            m_ratioP2P1 = value;
        }
        
        bool CPACSFqRolosc::HasRollRateOsc() const
        {
            return static_cast<bool>(m_rollRateOsc);
        }
        
        const double& CPACSFqRolosc::GetRollRateOsc() const
        {
            return *m_rollRateOsc;
        }
        
        void CPACSFqRolosc::SetRollRateOsc(const double& value)
        {
            m_rollRateOsc = value;
        }
        
    }
}
