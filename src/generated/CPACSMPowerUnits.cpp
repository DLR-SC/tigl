// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMPowerUnits.h"

namespace tigl
{
    namespace generated
    {
        CPACSMPowerUnits::CPACSMPowerUnits(){}
        CPACSMPowerUnits::~CPACSMPowerUnits() {}
        
        void CPACSMPowerUnits::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mEngines
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEngines")) {
                m_mEngines = boost::in_place();
                try {
                    m_mEngines->ReadCPACS(tixiHandle, xpath + "/mEngines");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEngines at xpath << " << xpath << ": " << e.what();
                    m_mEngines = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEngines at xpath << " << xpath << ": " << e.getError();
                    m_mEngines = boost::none;
                }
            }
            
            // read element mBleedAirSystem
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mBleedAirSystem")) {
                m_mBleedAirSystem = boost::in_place();
                try {
                    m_mBleedAirSystem->ReadCPACS(tixiHandle, xpath + "/mBleedAirSystem");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mBleedAirSystem at xpath << " << xpath << ": " << e.what();
                    m_mBleedAirSystem = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mBleedAirSystem at xpath << " << xpath << ": " << e.getError();
                    m_mBleedAirSystem = boost::none;
                }
            }
            
            // read element mEngineControl
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEngineControl")) {
                m_mEngineControl = boost::in_place();
                try {
                    m_mEngineControl->ReadCPACS(tixiHandle, xpath + "/mEngineControl");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEngineControl at xpath << " << xpath << ": " << e.what();
                    m_mEngineControl = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEngineControl at xpath << " << xpath << ": " << e.getError();
                    m_mEngineControl = boost::none;
                }
            }
            
            // read element mFuelSystem
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mFuelSystem")) {
                m_mFuelSystem = boost::in_place();
                try {
                    m_mFuelSystem->ReadCPACS(tixiHandle, xpath + "/mFuelSystem");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mFuelSystem at xpath << " << xpath << ": " << e.what();
                    m_mFuelSystem = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mFuelSystem at xpath << " << xpath << ": " << e.getError();
                    m_mFuelSystem = boost::none;
                }
            }
            
            // read element mInterGasSystem
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mInterGasSystem")) {
                m_mInterGasSystem = boost::in_place();
                try {
                    m_mInterGasSystem->ReadCPACS(tixiHandle, xpath + "/mInterGasSystem");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mInterGasSystem at xpath << " << xpath << ": " << e.what();
                    m_mInterGasSystem = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mInterGasSystem at xpath << " << xpath << ": " << e.getError();
                    m_mInterGasSystem = boost::none;
                }
            }
            
        }
        
        void CPACSMPowerUnits::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mEngines
            if (m_mEngines) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEngines");
                m_mEngines->WriteCPACS(tixiHandle, xpath + "/mEngines");
            }
            
            // write element mBleedAirSystem
            if (m_mBleedAirSystem) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mBleedAirSystem");
                m_mBleedAirSystem->WriteCPACS(tixiHandle, xpath + "/mBleedAirSystem");
            }
            
            // write element mEngineControl
            if (m_mEngineControl) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEngineControl");
                m_mEngineControl->WriteCPACS(tixiHandle, xpath + "/mEngineControl");
            }
            
            // write element mFuelSystem
            if (m_mFuelSystem) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mFuelSystem");
                m_mFuelSystem->WriteCPACS(tixiHandle, xpath + "/mFuelSystem");
            }
            
            // write element mInterGasSystem
            if (m_mInterGasSystem) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mInterGasSystem");
                m_mInterGasSystem->WriteCPACS(tixiHandle, xpath + "/mInterGasSystem");
            }
            
        }
        
        const CPACSGenericMass& CPACSMPowerUnits::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMPowerUnits::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMPowerUnits::HasMEngines() const
        {
            return static_cast<bool>(m_mEngines);
        }
        
        const CPACSMEquippedEngines& CPACSMPowerUnits::GetMEngines() const
        {
            return *m_mEngines;
        }
        
        CPACSMEquippedEngines& CPACSMPowerUnits::GetMEngines()
        {
            return *m_mEngines;
        }
        
        bool CPACSMPowerUnits::HasMBleedAirSystem() const
        {
            return static_cast<bool>(m_mBleedAirSystem);
        }
        
        const CPACSMBleedAirSystem& CPACSMPowerUnits::GetMBleedAirSystem() const
        {
            return *m_mBleedAirSystem;
        }
        
        CPACSMBleedAirSystem& CPACSMPowerUnits::GetMBleedAirSystem()
        {
            return *m_mBleedAirSystem;
        }
        
        bool CPACSMPowerUnits::HasMEngineControl() const
        {
            return static_cast<bool>(m_mEngineControl);
        }
        
        const CPACSMEngineControl& CPACSMPowerUnits::GetMEngineControl() const
        {
            return *m_mEngineControl;
        }
        
        CPACSMEngineControl& CPACSMPowerUnits::GetMEngineControl()
        {
            return *m_mEngineControl;
        }
        
        bool CPACSMPowerUnits::HasMFuelSystem() const
        {
            return static_cast<bool>(m_mFuelSystem);
        }
        
        const CPACSMFuelSystem& CPACSMPowerUnits::GetMFuelSystem() const
        {
            return *m_mFuelSystem;
        }
        
        CPACSMFuelSystem& CPACSMPowerUnits::GetMFuelSystem()
        {
            return *m_mFuelSystem;
        }
        
        bool CPACSMPowerUnits::HasMInterGasSystem() const
        {
            return static_cast<bool>(m_mInterGasSystem);
        }
        
        const CPACSMInterGasSystem& CPACSMPowerUnits::GetMInterGasSystem() const
        {
            return *m_mInterGasSystem;
        }
        
        CPACSMInterGasSystem& CPACSMPowerUnits::GetMInterGasSystem()
        {
            return *m_mInterGasSystem;
        }
        
    }
}
