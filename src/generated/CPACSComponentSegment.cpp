// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingComponentSegments.h"
#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSComponentSegment.h"

namespace tigl
{
    namespace generated
    {
        CPACSComponentSegment::CPACSComponentSegment(CCPACSWingComponentSegments* parent)
        {
            //assert(parent != nullptr);
            m_parent = parent;
        }
        
        CPACSComponentSegment::~CPACSComponentSegment() {}
        
        CCPACSWingComponentSegments* CPACSComponentSegment::GetParent() const
        {
            return m_parent;
        }
        
        void CPACSComponentSegment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element fromElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fromElementUID")) {
                m_fromElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fromElementUID");
            }
            else {
                LOG(ERROR) << "Required element fromElementUID is missing";
            }
            
            // read element toElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toElementUID")) {
                m_toElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toElementUID");
            }
            else {
                LOG(ERROR) << "Required element toElementUID is missing";
            }
            
            // read element structure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structure")) {
                m_structure = boost::in_place(reinterpret_cast<CCPACSWingComponentSegment*>(this));
                try {
                    m_structure->ReadCPACS(tixiHandle, xpath + "/structure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read structure at xpath << " << xpath << ": " << e.what();
                    m_structure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read structure at xpath << " << xpath << ": " << e.getError();
                    m_structure = boost::none;
                }
            }
            
            // read element controlSurfaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaces")) {
                m_controlSurfaces = boost::in_place();
                try {
                    m_controlSurfaces->ReadCPACS(tixiHandle, xpath + "/controlSurfaces");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.what();
                    m_controlSurfaces = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read controlSurfaces at xpath << " << xpath << ": " << e.getError();
                    m_controlSurfaces = boost::none;
                }
            }
            
            // read element path
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/path")) {
                m_path = boost::in_place();
                try {
                    m_path->ReadCPACS(tixiHandle, xpath + "/path");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read path at xpath << " << xpath << ": " << e.what();
                    m_path = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read path at xpath << " << xpath << ": " << e.getError();
                    m_path = boost::none;
                }
            }
            
            // read element wingFuselageAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingFuselageAttachments")) {
                m_wingFuselageAttachments = boost::in_place();
                try {
                    m_wingFuselageAttachments->ReadCPACS(tixiHandle, xpath + "/wingFuselageAttachments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingFuselageAttachments at xpath << " << xpath << ": " << e.what();
                    m_wingFuselageAttachments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingFuselageAttachments at xpath << " << xpath << ": " << e.getError();
                    m_wingFuselageAttachments = boost::none;
                }
            }
            
            // read element wingWingAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingWingAttachments")) {
                m_wingWingAttachments = boost::in_place();
                try {
                    m_wingWingAttachments->ReadCPACS(tixiHandle, xpath + "/wingWingAttachments");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingWingAttachments at xpath << " << xpath << ": " << e.what();
                    m_wingWingAttachments = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingWingAttachments at xpath << " << xpath << ": " << e.getError();
                    m_wingWingAttachments = boost::none;
                }
            }
            
            // read element wingFuelTanks
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingFuelTanks")) {
                m_wingFuelTanks = boost::in_place();
                try {
                    m_wingFuelTanks->ReadCPACS(tixiHandle, xpath + "/wingFuelTanks");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingFuelTanks at xpath << " << xpath << ": " << e.what();
                    m_wingFuelTanks = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingFuelTanks at xpath << " << xpath << ": " << e.getError();
                    m_wingFuelTanks = boost::none;
                }
            }
            
            // read element wingStructuralMounts
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wingStructuralMounts")) {
                m_wingStructuralMounts = boost::in_place();
                try {
                    m_wingStructuralMounts->ReadCPACS(tixiHandle, xpath + "/wingStructuralMounts");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wingStructuralMounts at xpath << " << xpath << ": " << e.what();
                    m_wingStructuralMounts = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wingStructuralMounts at xpath << " << xpath << ": " << e.getError();
                    m_wingStructuralMounts = boost::none;
                }
            }
            
        }
        
        void CPACSComponentSegment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element fromElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fromElementUID", m_fromElementUID);
            
            // write element toElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toElementUID", m_toElementUID);
            
            // write element structure
            if (m_structure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structure");
                m_structure->WriteCPACS(tixiHandle, xpath + "/structure");
            }
            
            // write element controlSurfaces
            if (m_controlSurfaces) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaces");
                m_controlSurfaces->WriteCPACS(tixiHandle, xpath + "/controlSurfaces");
            }
            
            // write element path
            if (m_path) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/path");
                m_path->WriteCPACS(tixiHandle, xpath + "/path");
            }
            
            // write element wingFuselageAttachments
            if (m_wingFuselageAttachments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingFuselageAttachments");
                m_wingFuselageAttachments->WriteCPACS(tixiHandle, xpath + "/wingFuselageAttachments");
            }
            
            // write element wingWingAttachments
            if (m_wingWingAttachments) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingWingAttachments");
                m_wingWingAttachments->WriteCPACS(tixiHandle, xpath + "/wingWingAttachments");
            }
            
            // write element wingFuelTanks
            if (m_wingFuelTanks) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingFuelTanks");
                m_wingFuelTanks->WriteCPACS(tixiHandle, xpath + "/wingFuelTanks");
            }
            
            // write element wingStructuralMounts
            if (m_wingStructuralMounts) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wingStructuralMounts");
                m_wingStructuralMounts->WriteCPACS(tixiHandle, xpath + "/wingStructuralMounts");
            }
            
        }
        
        const std::string& CPACSComponentSegment::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSComponentSegment::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSComponentSegment::GetName() const
        {
            return m_name;
        }
        
        void CPACSComponentSegment::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSComponentSegment::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSComponentSegment::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSComponentSegment::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSComponentSegment::GetFromElementUID() const
        {
            return m_fromElementUID;
        }
        
        void CPACSComponentSegment::SetFromElementUID(const std::string& value)
        {
            m_fromElementUID = value;
        }
        
        const std::string& CPACSComponentSegment::GetToElementUID() const
        {
            return m_toElementUID;
        }
        
        void CPACSComponentSegment::SetToElementUID(const std::string& value)
        {
            m_toElementUID = value;
        }
        
        bool CPACSComponentSegment::HasStructure() const
        {
            return static_cast<bool>(m_structure);
        }
        
        const CCPACSWingCSStructure& CPACSComponentSegment::GetStructure() const
        {
            return *m_structure;
        }
        
        CCPACSWingCSStructure& CPACSComponentSegment::GetStructure()
        {
            return *m_structure;
        }
        
        bool CPACSComponentSegment::HasControlSurfaces() const
        {
            return static_cast<bool>(m_controlSurfaces);
        }
        
        const CPACSControlSurfaces& CPACSComponentSegment::GetControlSurfaces() const
        {
            return *m_controlSurfaces;
        }
        
        CPACSControlSurfaces& CPACSComponentSegment::GetControlSurfaces()
        {
            return *m_controlSurfaces;
        }
        
        bool CPACSComponentSegment::HasPath() const
        {
            return static_cast<bool>(m_path);
        }
        
        const CPACSComponentSegmentPath& CPACSComponentSegment::GetPath() const
        {
            return *m_path;
        }
        
        CPACSComponentSegmentPath& CPACSComponentSegment::GetPath()
        {
            return *m_path;
        }
        
        bool CPACSComponentSegment::HasWingFuselageAttachments() const
        {
            return static_cast<bool>(m_wingFuselageAttachments);
        }
        
        const CPACSWingFuselageAttachments& CPACSComponentSegment::GetWingFuselageAttachments() const
        {
            return *m_wingFuselageAttachments;
        }
        
        CPACSWingFuselageAttachments& CPACSComponentSegment::GetWingFuselageAttachments()
        {
            return *m_wingFuselageAttachments;
        }
        
        bool CPACSComponentSegment::HasWingWingAttachments() const
        {
            return static_cast<bool>(m_wingWingAttachments);
        }
        
        const CPACSWingWingAttachments& CPACSComponentSegment::GetWingWingAttachments() const
        {
            return *m_wingWingAttachments;
        }
        
        CPACSWingWingAttachments& CPACSComponentSegment::GetWingWingAttachments()
        {
            return *m_wingWingAttachments;
        }
        
        bool CPACSComponentSegment::HasWingFuelTanks() const
        {
            return static_cast<bool>(m_wingFuelTanks);
        }
        
        const CPACSWingFuelTanks& CPACSComponentSegment::GetWingFuelTanks() const
        {
            return *m_wingFuelTanks;
        }
        
        CPACSWingFuelTanks& CPACSComponentSegment::GetWingFuelTanks()
        {
            return *m_wingFuelTanks;
        }
        
        bool CPACSComponentSegment::HasWingStructuralMounts() const
        {
            return static_cast<bool>(m_wingStructuralMounts);
        }
        
        const CPACSWingStructuralMounts& CPACSComponentSegment::GetWingStructuralMounts() const
        {
            return *m_wingStructuralMounts;
        }
        
        CPACSWingStructuralMounts& CPACSComponentSegment::GetWingStructuralMounts()
        {
            return *m_wingStructuralMounts;
        }
        
    }
}
