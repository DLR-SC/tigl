// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashDetailedRegion.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashDetailedRegion::CPACSCrashDetailedRegion(){}
        CPACSCrashDetailedRegion::~CPACSCrashDetailedRegion() {}
        
        void CPACSCrashDetailedRegion::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element startFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startFrameUID")) {
                m_startFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startFrameUID");
            }
            else {
                LOG(ERROR) << "Required element startFrameUID is missing";
            }
            
            // read element endFrameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endFrameUID")) {
                m_endFrameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endFrameUID");
            }
            else {
                LOG(ERROR) << "Required element endFrameUID is missing";
            }
            
            // read element startStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/startStringerUID")) {
                m_startStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/startStringerUID");
            }
            else {
                LOG(ERROR) << "Required element startStringerUID is missing";
            }
            
            // read element endStringerUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/endStringerUID")) {
                m_endStringerUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/endStringerUID");
            }
            else {
                LOG(ERROR) << "Required element endStringerUID is missing";
            }
            
            // read element individualCrashModelElementSizesUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/individualCrashModelElementSizesUID")) {
                m_individualCrashModelElementSizesUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/individualCrashModelElementSizesUID");
            }
            else {
                LOG(ERROR) << "Required element individualCrashModelElementSizesUID is missing";
            }
            
        }
        
        void CPACSCrashDetailedRegion::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element startFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startFrameUID", m_startFrameUID);
            
            // write element endFrameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endFrameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endFrameUID", m_endFrameUID);
            
            // write element startStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/startStringerUID", m_startStringerUID);
            
            // write element endStringerUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/endStringerUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/endStringerUID", m_endStringerUID);
            
            // write element individualCrashModelElementSizesUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/individualCrashModelElementSizesUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/individualCrashModelElementSizesUID", m_individualCrashModelElementSizesUID);
            
        }
        
        const std::string& CPACSCrashDetailedRegion::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSCrashDetailedRegion::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetName() const
        {
            return m_name;
        }
        
        void CPACSCrashDetailedRegion::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetStartFrameUID() const
        {
            return m_startFrameUID;
        }
        
        void CPACSCrashDetailedRegion::SetStartFrameUID(const std::string& value)
        {
            m_startFrameUID = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetEndFrameUID() const
        {
            return m_endFrameUID;
        }
        
        void CPACSCrashDetailedRegion::SetEndFrameUID(const std::string& value)
        {
            m_endFrameUID = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetStartStringerUID() const
        {
            return m_startStringerUID;
        }
        
        void CPACSCrashDetailedRegion::SetStartStringerUID(const std::string& value)
        {
            m_startStringerUID = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetEndStringerUID() const
        {
            return m_endStringerUID;
        }
        
        void CPACSCrashDetailedRegion::SetEndStringerUID(const std::string& value)
        {
            m_endStringerUID = value;
        }
        
        const std::string& CPACSCrashDetailedRegion::GetIndividualCrashModelElementSizesUID() const
        {
            return m_individualCrashModelElementSizesUID;
        }
        
        void CPACSCrashDetailedRegion::SetIndividualCrashModelElementSizesUID(const std::string& value)
        {
            m_individualCrashModelElementSizesUID = value;
        }
        
    }
}
