// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfaceWingCutOut.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfaceWingCutOut::CPACSControlSurfaceWingCutOut(){}
        CPACSControlSurfaceWingCutOut::~CPACSControlSurfaceWingCutOut() {}
        
        void CPACSControlSurfaceWingCutOut::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element upperSkin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/upperSkin")) {
                m_upperSkin.ReadCPACS(tixiHandle, xpath + "/upperSkin");
            }
            else {
                LOG(ERROR) << "Required element upperSkin is missing";
            }
            
            // read element lowerSkin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lowerSkin")) {
                m_lowerSkin.ReadCPACS(tixiHandle, xpath + "/lowerSkin");
            }
            else {
                LOG(ERROR) << "Required element lowerSkin is missing";
            }
            
            // read element cutOutProfileControlPoint
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutOutProfileControlPoint")) {
                m_cutOutProfileControlPoint = boost::in_place();
                try {
                    m_cutOutProfileControlPoint->ReadCPACS(tixiHandle, xpath + "/cutOutProfileControlPoint");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cutOutProfileControlPoint at xpath << " << xpath << ": " << e.what();
                    m_cutOutProfileControlPoint = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cutOutProfileControlPoint at xpath << " << xpath << ": " << e.getError();
                    m_cutOutProfileControlPoint = boost::none;
                }
            }
            
            // read element cutOutProfiles
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutOutProfiles")) {
                m_cutOutProfiles = boost::in_place();
                try {
                    m_cutOutProfiles->ReadCPACS(tixiHandle, xpath + "/cutOutProfiles");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cutOutProfiles at xpath << " << xpath << ": " << e.what();
                    m_cutOutProfiles = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cutOutProfiles at xpath << " << xpath << ": " << e.getError();
                    m_cutOutProfiles = boost::none;
                }
            }
            
            // read element innerBorder
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerBorder")) {
                m_innerBorder = boost::in_place();
                try {
                    m_innerBorder->ReadCPACS(tixiHandle, xpath + "/innerBorder");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read innerBorder at xpath << " << xpath << ": " << e.what();
                    m_innerBorder = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read innerBorder at xpath << " << xpath << ": " << e.getError();
                    m_innerBorder = boost::none;
                }
            }
            
            // read element outerBorder
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerBorder")) {
                m_outerBorder = boost::in_place();
                try {
                    m_outerBorder->ReadCPACS(tixiHandle, xpath + "/outerBorder");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read outerBorder at xpath << " << xpath << ": " << e.what();
                    m_outerBorder = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read outerBorder at xpath << " << xpath << ": " << e.getError();
                    m_outerBorder = boost::none;
                }
            }
            
        }
        
        void CPACSControlSurfaceWingCutOut::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element upperSkin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperSkin");
            m_upperSkin.WriteCPACS(tixiHandle, xpath + "/upperSkin");
            
            // write element lowerSkin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerSkin");
            m_lowerSkin.WriteCPACS(tixiHandle, xpath + "/lowerSkin");
            
            // write element cutOutProfileControlPoint
            if (m_cutOutProfileControlPoint) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutOutProfileControlPoint");
                m_cutOutProfileControlPoint->WriteCPACS(tixiHandle, xpath + "/cutOutProfileControlPoint");
            }
            
            // write element cutOutProfiles
            if (m_cutOutProfiles) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutOutProfiles");
                m_cutOutProfiles->WriteCPACS(tixiHandle, xpath + "/cutOutProfiles");
            }
            
            // write element innerBorder
            if (m_innerBorder) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerBorder");
                m_innerBorder->WriteCPACS(tixiHandle, xpath + "/innerBorder");
            }
            
            // write element outerBorder
            if (m_outerBorder) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerBorder");
                m_outerBorder->WriteCPACS(tixiHandle, xpath + "/outerBorder");
            }
            
        }
        
        const CPACSControlSurfaceSkinCutOut& CPACSControlSurfaceWingCutOut::GetUpperSkin() const
        {
            return m_upperSkin;
        }
        
        CPACSControlSurfaceSkinCutOut& CPACSControlSurfaceWingCutOut::GetUpperSkin()
        {
            return m_upperSkin;
        }
        
        const CPACSControlSurfaceSkinCutOut& CPACSControlSurfaceWingCutOut::GetLowerSkin() const
        {
            return m_lowerSkin;
        }
        
        CPACSControlSurfaceSkinCutOut& CPACSControlSurfaceWingCutOut::GetLowerSkin()
        {
            return m_lowerSkin;
        }
        
        bool CPACSControlSurfaceWingCutOut::HasCutOutProfileControlPoint() const
        {
            return static_cast<bool>(m_cutOutProfileControlPoint);
        }
        
        const CPACSCutOutControlPoints& CPACSControlSurfaceWingCutOut::GetCutOutProfileControlPoint() const
        {
            return *m_cutOutProfileControlPoint;
        }
        
        CPACSCutOutControlPoints& CPACSControlSurfaceWingCutOut::GetCutOutProfileControlPoint()
        {
            return *m_cutOutProfileControlPoint;
        }
        
        bool CPACSControlSurfaceWingCutOut::HasCutOutProfiles() const
        {
            return static_cast<bool>(m_cutOutProfiles);
        }
        
        const CPACSCutOutProfiles& CPACSControlSurfaceWingCutOut::GetCutOutProfiles() const
        {
            return *m_cutOutProfiles;
        }
        
        CPACSCutOutProfiles& CPACSControlSurfaceWingCutOut::GetCutOutProfiles()
        {
            return *m_cutOutProfiles;
        }
        
        bool CPACSControlSurfaceWingCutOut::HasInnerBorder() const
        {
            return static_cast<bool>(m_innerBorder);
        }
        
        const CPACSControlSurfaceSkinCutOutBorder& CPACSControlSurfaceWingCutOut::GetInnerBorder() const
        {
            return *m_innerBorder;
        }
        
        CPACSControlSurfaceSkinCutOutBorder& CPACSControlSurfaceWingCutOut::GetInnerBorder()
        {
            return *m_innerBorder;
        }
        
        bool CPACSControlSurfaceWingCutOut::HasOuterBorder() const
        {
            return static_cast<bool>(m_outerBorder);
        }
        
        const CPACSControlSurfaceSkinCutOutBorder& CPACSControlSurfaceWingCutOut::GetOuterBorder() const
        {
            return *m_outerBorder;
        }
        
        CPACSControlSurfaceSkinCutOutBorder& CPACSControlSurfaceWingCutOut::GetOuterBorder()
        {
            return *m_outerBorder;
        }
        
    }
}
