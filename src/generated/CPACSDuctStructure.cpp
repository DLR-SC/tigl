// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSDuct.h"
#include "CPACSDuctStructure.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDuctStructure::CPACSDuctStructure(CCPACSDuct* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSDuctStructure::~CPACSDuctStructure()
    {
    }

    const CCPACSDuct* CPACSDuctStructure::GetParent() const
    {
        return m_parent;
    }

    CCPACSDuct* CPACSDuctStructure::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSDuctStructure::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSDuctStructure::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSDuctStructure::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDuctStructure::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSDuctStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element skin
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/skin")) {
            m_skin = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
            try {
                m_skin->ReadCPACS(tixiHandle, xpath + "/skin");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read skin at xpath " << xpath << ": " << e.what();
                m_skin = boost::none;
            }
        }

        // read element stringers
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringers")) {
            m_stringers = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
            try {
                m_stringers->ReadCPACS(tixiHandle, xpath + "/stringers");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read stringers at xpath " << xpath << ": " << e.what();
                m_stringers = boost::none;
            }
        }

        // read element frames
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/frames")) {
            m_frames = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
            try {
                m_frames->ReadCPACS(tixiHandle, xpath + "/frames");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read frames at xpath " << xpath << ": " << e.what();
                m_frames = boost::none;
            }
        }

    }

    void CPACSDuctStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element skin
        if (m_skin) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skin");
            m_skin->WriteCPACS(tixiHandle, xpath + "/skin");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/skin")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/skin");
            }
        }

        // write element stringers
        if (m_stringers) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringers");
            m_stringers->WriteCPACS(tixiHandle, xpath + "/stringers");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringers")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/stringers");
            }
        }

        // write element frames
        if (m_frames) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frames");
            m_frames->WriteCPACS(tixiHandle, xpath + "/frames");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/frames")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/frames");
            }
        }

    }

    const boost::optional<CCPACSSkin>& CPACSDuctStructure::GetSkin() const
    {
        return m_skin;
    }

    boost::optional<CCPACSSkin>& CPACSDuctStructure::GetSkin()
    {
        return m_skin;
    }

    const boost::optional<CCPACSStringersAssembly>& CPACSDuctStructure::GetStringers() const
    {
        return m_stringers;
    }

    boost::optional<CCPACSStringersAssembly>& CPACSDuctStructure::GetStringers()
    {
        return m_stringers;
    }

    const boost::optional<CCPACSFramesAssembly>& CPACSDuctStructure::GetFrames() const
    {
        return m_frames;
    }

    boost::optional<CCPACSFramesAssembly>& CPACSDuctStructure::GetFrames()
    {
        return m_frames;
    }

    CCPACSSkin& CPACSDuctStructure::GetSkin(CreateIfNotExistsTag)
    {
        if (!m_skin)
            m_skin = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
        return *m_skin;
    }

    void CPACSDuctStructure::RemoveSkin()
    {
        m_skin = boost::none;
    }

    CCPACSStringersAssembly& CPACSDuctStructure::GetStringers(CreateIfNotExistsTag)
    {
        if (!m_stringers)
            m_stringers = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
        return *m_stringers;
    }

    void CPACSDuctStructure::RemoveStringers()
    {
        m_stringers = boost::none;
    }

    CCPACSFramesAssembly& CPACSDuctStructure::GetFrames(CreateIfNotExistsTag)
    {
        if (!m_frames)
            m_frames = boost::in_place(reinterpret_cast<CCPACSDuctStructure*>(this), m_uidMgr);
        return *m_frames;
    }

    void CPACSDuctStructure::RemoveFrames()
    {
        m_frames = boost::none;
    }

} // namespace generated
} // namespace tigl
