// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSReference.h"

namespace tigl
{
    namespace generated
    {
        CPACSReference::CPACSReference(){}
        CPACSReference::~CPACSReference() {}
        
        void CPACSReference::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element area
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/area")) {
                m_area = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/area");
            }
            else {
                LOG(ERROR) << "Required element area is missing";
            }
            
            // read element length
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/length")) {
                m_length = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/length");
            }
            else {
                LOG(ERROR) << "Required element length is missing";
            }
            
            // read element point
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/point")) {
                m_point.ReadCPACS(tixiHandle, xpath + "/point");
            }
            else {
                LOG(ERROR) << "Required element point is missing";
            }
            
        }
        
        void CPACSReference::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element area
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/area");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/area", m_area);
            
            // write element length
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/length");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/length", m_length);
            
            // write element point
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/point");
            m_point.WriteCPACS(tixiHandle, xpath + "/point");
            
        }
        
        const double& CPACSReference::GetArea() const
        {
            return m_area;
        }
        
        void CPACSReference::SetArea(const double& value)
        {
            m_area = value;
        }
        
        const double& CPACSReference::GetLength() const
        {
            return m_length;
        }
        
        void CPACSReference::SetLength(const double& value)
        {
            m_length = value;
        }
        
        const CCPACSPoint& CPACSReference::GetPoint() const
        {
            return m_point;
        }
        
        CCPACSPoint& CPACSReference::GetPoint()
        {
            return m_point;
        }
        
    }
}
