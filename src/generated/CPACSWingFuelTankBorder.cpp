// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingFuelTankBorder.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingFuelTankBorder::CPACSWingFuelTankBorder(){}
        CPACSWingFuelTankBorder::~CPACSWingFuelTankBorder() {}
        
        void CPACSWingFuelTankBorder::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element sparUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sparUID")) {
                m_sparUID_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/sparUID");
            }
            
            // read element ribDefinitionUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
                m_ribDefinitionUID_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/ribDefinitionUID");
            }
            
            // read element ribNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
                m_ribNumber_choice2 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/ribNumber");
            }
            
        }
        
        void CPACSWingFuelTankBorder::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element sparUID
            if (m_sparUID_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sparUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/sparUID", *m_sparUID_choice1);
            }
            
            // write element ribDefinitionUID
            if (m_ribDefinitionUID_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribDefinitionUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ribDefinitionUID", *m_ribDefinitionUID_choice2);
            }
            
            // write element ribNumber
            if (m_ribNumber_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribNumber");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/ribNumber", *m_ribNumber_choice2);
            }
            
        }
        
        bool CPACSWingFuelTankBorder::HasSparUID_choice1() const
        {
            return static_cast<bool>(m_sparUID_choice1);
        }
        
        const std::string& CPACSWingFuelTankBorder::GetSparUID_choice1() const
        {
            return *m_sparUID_choice1;
        }
        
        void CPACSWingFuelTankBorder::SetSparUID_choice1(const std::string& value)
        {
            m_sparUID_choice1 = value;
        }
        
        bool CPACSWingFuelTankBorder::HasRibDefinitionUID_choice2() const
        {
            return static_cast<bool>(m_ribDefinitionUID_choice2);
        }
        
        const std::string& CPACSWingFuelTankBorder::GetRibDefinitionUID_choice2() const
        {
            return *m_ribDefinitionUID_choice2;
        }
        
        void CPACSWingFuelTankBorder::SetRibDefinitionUID_choice2(const std::string& value)
        {
            m_ribDefinitionUID_choice2 = value;
        }
        
        bool CPACSWingFuelTankBorder::HasRibNumber_choice2() const
        {
            return static_cast<bool>(m_ribNumber_choice2);
        }
        
        const int& CPACSWingFuelTankBorder::GetRibNumber_choice2() const
        {
            return *m_ribNumber_choice2;
        }
        
        void CPACSWingFuelTankBorder::SetRibNumber_choice2(const int& value)
        {
            m_ribNumber_choice2 = value;
        }
        
    }
}
