// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSAxle_sideOfFirstWheel.h"
#include "CPACSStrutProperties.h"
#include "CPACSWheel.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSAxleAssembly;
    class CPACSLandingGearComponentAssembly;

    // This class is used in:
    // CPACSAxleAssembly
    // CPACSLandingGearComponentAssembly

    /// @brief Axle
    /// 
    /// Geometric description and material properties of the
    /// landing gear axle
    /// 
    class CPACSAxle : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSAxle(CPACSAxleAssembly* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSAxle(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSAxle();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSAxleAssembly>::value || std::is_same<P, CPACSLandingGearComponentAssembly>::value, "template argument for P is not a parent class of CPACSAxle");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSAxleAssembly>::value || std::is_same<P, CPACSLandingGearComponentAssembly>::value, "template argument for P is not a parent class of CPACSAxle");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetLength() const;
        TIGL_EXPORT virtual void SetLength(const double& value);

        TIGL_EXPORT virtual const CPACSStrutProperties& GetShaftProperties() const;
        TIGL_EXPORT virtual CPACSStrutProperties& GetShaftProperties();

        TIGL_EXPORT virtual const int& GetNumberOfWheels() const;
        TIGL_EXPORT virtual void SetNumberOfWheels(const int& value);

        TIGL_EXPORT virtual const CPACSAxle_sideOfFirstWheel& GetSideOfFirstWheel() const;
        TIGL_EXPORT virtual void SetSideOfFirstWheel(const CPACSAxle_sideOfFirstWheel& value);

        TIGL_EXPORT virtual const CPACSWheel& GetWheel() const;
        TIGL_EXPORT virtual CPACSWheel& GetWheel();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                m_uID;

        /// Length of the axle. For a single wheel, the length is equal to the distance between the center of the piston and the center of the wheel. For two wheels, the length is equal to the distance between the centers of the wheels with the axis being centered w.r.t. to the Piston.
        double                     m_length;

        /// Axle shaft properties
        CPACSStrutProperties       m_shaftProperties;

        /// Number of wheels attached to this axle
        int                        m_numberOfWheels;

        /// Defines the side of the first wheel (inboard or outboard; inboard corresponds to the negative y-direction or in flight direction left) for odd number of wheels on this axis. Each additional wheel is the added on the opposite site of the previous wheel.
        CPACSAxle_sideOfFirstWheel m_sideOfFirstWheel;

        /// Properties of the wheel(s) attached to this axle. If more than one wheel is attached, all wheels on a single axis have the same properties.
        CPACSWheel                 m_wheel;

    private:
        CPACSAxle(const CPACSAxle&) = delete;
        CPACSAxle& operator=(const CPACSAxle&) = delete;

        CPACSAxle(CPACSAxle&&) = delete;
        CPACSAxle& operator=(CPACSAxle&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSAxle = generated::CPACSAxle;
using CCPACSAxleAssembly = generated::CPACSAxleAssembly;
using CCPACSLandingGearComponentAssembly = generated::CPACSLandingGearComponentAssembly;
} // namespace tigl
