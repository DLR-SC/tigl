// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSAlignmentStringFrame.h"
#include "CPACSStringerFramePosition_continuity.h"
#include "CPACSStringerFramePosition_interpolation.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSFrame
        // CPACSStringer
        
        // generated from /xsd:schema/xsd:complexType[808]
        class CPACSStringerFramePosition
        {
        public:
            TIGL_EXPORT CPACSStringerFramePosition();
            TIGL_EXPORT virtual ~CPACSStringerFramePosition();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetStructuralElementUID() const;
            TIGL_EXPORT void SetStructuralElementUID(const std::string& value);
            
            TIGL_EXPORT const double& GetPositionX() const;
            TIGL_EXPORT void SetPositionX(const double& value);
            
            TIGL_EXPORT const double& GetReferenceY() const;
            TIGL_EXPORT void SetReferenceY(const double& value);
            
            TIGL_EXPORT const double& GetReferenceZ() const;
            TIGL_EXPORT void SetReferenceZ(const double& value);
            
            TIGL_EXPORT const double& GetReferenceAngle() const;
            TIGL_EXPORT void SetReferenceAngle(const double& value);
            
            TIGL_EXPORT bool HasAlignment() const;
            TIGL_EXPORT const CPACSAlignmentStringFrame& GetAlignment() const;
            TIGL_EXPORT CPACSAlignmentStringFrame& GetAlignment();
            
            TIGL_EXPORT bool HasContinuity() const;
            TIGL_EXPORT const CPACSStringerFramePosition_continuity& GetContinuity() const;
            TIGL_EXPORT CPACSStringerFramePosition_continuity& GetContinuity();
            
            TIGL_EXPORT bool HasInterpolation() const;
            TIGL_EXPORT const CPACSStringerFramePosition_interpolation& GetInterpolation() const;
            TIGL_EXPORT CPACSStringerFramePosition_interpolation& GetInterpolation();
            
        protected:
            boost::optional<std::string>                              m_uID;
            std::string                                               m_structuralElementUID;
            double                                                    m_positionX;
            double                                                    m_referenceY;
            double                                                    m_referenceZ;
            double                                                    m_referenceAngle;
            boost::optional<CPACSAlignmentStringFrame>                m_alignment;
            boost::optional<CPACSStringerFramePosition_continuity>    m_continuity;
            boost::optional<CPACSStringerFramePosition_interpolation> m_interpolation;
            
        private:
            #ifdef HAVE_CPP11
            CPACSStringerFramePosition(const CPACSStringerFramePosition&) = delete;
            CPACSStringerFramePosition& operator=(const CPACSStringerFramePosition&) = delete;
            
            CPACSStringerFramePosition(CPACSStringerFramePosition&&) = delete;
            CPACSStringerFramePosition& operator=(CPACSStringerFramePosition&&) = delete;
            #else
            CPACSStringerFramePosition(const CPACSStringerFramePosition&);
            CPACSStringerFramePosition& operator=(const CPACSStringerFramePosition&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSStringerFramePosition = generated::CPACSStringerFramePosition;
    #else
    typedef generated::CPACSStringerFramePosition CCPACSStringerFramePosition;
    #endif
}
