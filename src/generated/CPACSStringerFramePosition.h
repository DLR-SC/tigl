// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSAlignmentStringFrame.h"
#include "CPACSContinuity.h"
#include "CPACSInterpolation.h"
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSFrame;
class CCPACSFuselageStringer;

namespace generated
{
    // This class is used in:
    // CPACSFrame
    // CPACSStringer

    /// @brief stringerFramePositionType
    /// 
    /// Description of individual stringer / frame postions
    /// @see stringerFramePositioning
    /// 
    class CPACSStringerFramePosition : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSStringerFramePosition(CCPACSFrame* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStringerFramePosition(CCPACSFuselageStringer* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSStringerFramePosition();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CCPACSFrame>::value || std::is_same<P, CCPACSFuselageStringer>::value, "template argument for P is not a parent class of CPACSStringerFramePosition");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CCPACSFrame>::value || std::is_same<P, CCPACSFuselageStringer>::value, "template argument for P is not a parent class of CPACSStringerFramePosition");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetStructuralElementUID() const;
        TIGL_EXPORT virtual void SetStructuralElementUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetPositionX_choice1() const;
        TIGL_EXPORT virtual void SetPositionX_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetSectionElementUID_choice2() const;
        TIGL_EXPORT virtual void SetSectionElementUID_choice2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const double& GetReferenceY() const;
        TIGL_EXPORT virtual void SetReferenceY(const double& value);

        TIGL_EXPORT virtual const double& GetReferenceZ() const;
        TIGL_EXPORT virtual void SetReferenceZ(const double& value);

        TIGL_EXPORT virtual const double& GetReferenceAngle() const;
        TIGL_EXPORT virtual void SetReferenceAngle(const double& value);

        TIGL_EXPORT virtual const boost::optional<CPACSAlignmentStringFrame>& GetAlignment() const;
        TIGL_EXPORT virtual boost::optional<CPACSAlignmentStringFrame>& GetAlignment();

        TIGL_EXPORT virtual const boost::optional<CPACSContinuity>& GetContinuity() const;
        TIGL_EXPORT virtual void SetContinuity(const boost::optional<CPACSContinuity>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSInterpolation>& GetInterpolation() const;
        TIGL_EXPORT virtual void SetInterpolation(const boost::optional<CPACSInterpolation>& value);

        TIGL_EXPORT virtual CPACSAlignmentStringFrame& GetAlignment(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAlignment();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                                m_uID;

        /// UID of profile based structural element
        std::string                                m_structuralElementUID;

        /// x position in absolute value
        boost::optional<double>                    m_positionX_choice1;

        /// UID reference to a fuselageSectionElement
        boost::optional<std::string>               m_sectionElementUID_choice2;

        /// y coordinate of reference system
        double                                     m_referenceY;

        /// z coordinate of reference system
        double                                     m_referenceZ;

        /// angle definition to calculate intersection
        /// with loft
        double                                     m_referenceAngle;

        boost::optional<CPACSAlignmentStringFrame> m_alignment;

        /// Continuity definition for profile extrusion:
        /// 0= C0 (allows sharp edges, default), 2= C2 (defines curvature
        /// continuity)
        boost::optional<CPACSContinuity>           m_continuity;

        /// Definition of interpolation between different
        /// profiles: 0= no interpolation 1= interpolation of strcutural
        /// profile
        boost::optional<CPACSInterpolation>        m_interpolation;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSStringerFramePosition(const CPACSStringerFramePosition&) = delete;
        CPACSStringerFramePosition& operator=(const CPACSStringerFramePosition&) = delete;

        CPACSStringerFramePosition(CPACSStringerFramePosition&&) = delete;
        CPACSStringerFramePosition& operator=(CPACSStringerFramePosition&&) = delete;
    };
} // namespace generated

// CPACSStringerFramePosition is customized, use type CCPACSFuselageStringerFramePosition directly
} // namespace tigl
