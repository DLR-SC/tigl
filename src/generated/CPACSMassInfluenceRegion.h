// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <vector>
#include "UniquePtr.h"
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        class CPACSMassInfluenceRegion_structuralComponent;
        
        // This class is used in:
        // CPACSMassAndCoG
        
        // generated from /xsd:schema/xsd:complexType[637]
        class CPACSMassInfluenceRegion
        {
        public:
            TIGL_EXPORT CPACSMassInfluenceRegion();
            TIGL_EXPORT virtual ~CPACSMassInfluenceRegion();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::vector<unique_ptr<CPACSMassInfluenceRegion_structuralComponent>>& GetStructuralComponent() const;
            TIGL_EXPORT std::vector<unique_ptr<CPACSMassInfluenceRegion_structuralComponent>>& GetStructuralComponent();
            
            TIGL_EXPORT bool HasMassInfluenceRadius_choice1() const;
            TIGL_EXPORT const double& GetMassInfluenceRadius_choice1() const;
            TIGL_EXPORT void SetMassInfluenceRadius_choice1(const double& value);
            
            TIGL_EXPORT bool HasDelta_x1_choice2() const;
            TIGL_EXPORT const double& GetDelta_x1_choice2() const;
            TIGL_EXPORT void SetDelta_x1_choice2(const double& value);
            
            TIGL_EXPORT bool HasDelta_x2_choice2() const;
            TIGL_EXPORT const double& GetDelta_x2_choice2() const;
            TIGL_EXPORT void SetDelta_x2_choice2(const double& value);
            
            TIGL_EXPORT bool HasDelta_y1_choice2() const;
            TIGL_EXPORT const double& GetDelta_y1_choice2() const;
            TIGL_EXPORT void SetDelta_y1_choice2(const double& value);
            
            TIGL_EXPORT bool HasDelta_y2_choice2() const;
            TIGL_EXPORT const double& GetDelta_y2_choice2() const;
            TIGL_EXPORT void SetDelta_y2_choice2(const double& value);
            
            TIGL_EXPORT bool HasDelta_z1_choice2() const;
            TIGL_EXPORT const double& GetDelta_z1_choice2() const;
            TIGL_EXPORT void SetDelta_z1_choice2(const double& value);
            
            TIGL_EXPORT bool HasDelta_z2_choice2() const;
            TIGL_EXPORT const double& GetDelta_z2_choice2() const;
            TIGL_EXPORT void SetDelta_z2_choice2(const double& value);
            
        protected:
            std::vector<unique_ptr<CPACSMassInfluenceRegion_structuralComponent>> m_structuralComponent;
            boost::optional<double>                                               m_massInfluenceRadius_choice1;
            boost::optional<double>                                               m_delta_x1_choice2;
            boost::optional<double>                                               m_delta_x2_choice2;
            boost::optional<double>                                               m_delta_y1_choice2;
            boost::optional<double>                                               m_delta_y2_choice2;
            boost::optional<double>                                               m_delta_z1_choice2;
            boost::optional<double>                                               m_delta_z2_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSMassInfluenceRegion(const CPACSMassInfluenceRegion&) = delete;
            CPACSMassInfluenceRegion& operator=(const CPACSMassInfluenceRegion&) = delete;
            
            CPACSMassInfluenceRegion(CPACSMassInfluenceRegion&&) = delete;
            CPACSMassInfluenceRegion& operator=(CPACSMassInfluenceRegion&&) = delete;
            #else
            CPACSMassInfluenceRegion(const CPACSMassInfluenceRegion&);
            CPACSMassInfluenceRegion& operator=(const CPACSMassInfluenceRegion&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSMassInfluenceRegion = generated::CPACSMassInfluenceRegion;
    #else
    typedef generated::CPACSMassInfluenceRegion CCPACSMassInfluenceRegion;
    #endif
    
    using generated::CPACSMassInfluenceRegion_structuralComponent;
}
