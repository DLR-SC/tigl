// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSVtpInterfaceDef
        
        // generated from /xsd:schema/xsd:complexType[873]
        class CPACSVtpFrameDef
        {
        public:
            TIGL_EXPORT CPACSVtpFrameDef();
            TIGL_EXPORT virtual ~CPACSVtpFrameDef();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetVtpFrameUID() const;
            TIGL_EXPORT void SetVtpFrameUID(const std::string& value);
            
            TIGL_EXPORT bool HasVtpFramePlus1() const;
            TIGL_EXPORT const bool& GetVtpFramePlus1() const;
            TIGL_EXPORT void SetVtpFramePlus1(const bool& value);
            
            TIGL_EXPORT const std::string& GetVtpFrameSheetElemUID() const;
            TIGL_EXPORT void SetVtpFrameSheetElemUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetVtpFrameReinfBaseStructElemUID() const;
            TIGL_EXPORT void SetVtpFrameReinfBaseStructElemUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetVtpFrameReinfHorizStructElemUID() const;
            TIGL_EXPORT void SetVtpFrameReinfHorizStructElemUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetVtpFrameReinfRadialStructElemUID() const;
            TIGL_EXPORT void SetVtpFrameReinfRadialStructElemUID(const std::string& value);
            
        protected:
            boost::optional<std::string> m_uID;
            std::string                  m_vtpFrameUID;
            boost::optional<bool>        m_vtpFramePlus1;
            std::string                  m_vtpFrameSheetElemUID;
            std::string                  m_vtpFrameReinfBaseStructElemUID;
            std::string                  m_vtpFrameReinfHorizStructElemUID;
            std::string                  m_vtpFrameReinfRadialStructElemUID;
            
        private:
            #ifdef HAVE_CPP11
            CPACSVtpFrameDef(const CPACSVtpFrameDef&) = delete;
            CPACSVtpFrameDef& operator=(const CPACSVtpFrameDef&) = delete;
            
            CPACSVtpFrameDef(CPACSVtpFrameDef&&) = delete;
            CPACSVtpFrameDef& operator=(CPACSVtpFrameDef&&) = delete;
            #else
            CPACSVtpFrameDef(const CPACSVtpFrameDef&);
            CPACSVtpFrameDef& operator=(const CPACSVtpFrameDef&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSVtpFrameDef = generated::CPACSVtpFrameDef;
    #else
    typedef generated::CPACSVtpFrameDef CCPACSVtpFrameDef;
    #endif
}
