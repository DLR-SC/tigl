// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightDynamicsTrimResult.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightDynamicsTrimResult::CPACSFlightDynamicsTrimResult(){}
        CPACSFlightDynamicsTrimResult::~CPACSFlightDynamicsTrimResult() {}
        
        void CPACSFlightDynamicsTrimResult::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element mach
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mach")) {
                m_mach = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/mach");
            }
            else {
                LOG(ERROR) << "Required element mach is missing";
            }
            
            // read element vTAS
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vTAS")) {
                m_vTAS = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vTAS");
            }
            else {
                LOG(ERROR) << "Required element vTAS is missing";
            }
            
            // read element alpha
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/alpha")) {
                m_alpha = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/alpha");
            }
            else {
                LOG(ERROR) << "Required element alpha is missing";
            }
            
            // read element altitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
                m_altitude = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/altitude");
            }
            else {
                LOG(ERROR) << "Required element altitude is missing";
            }
            
        }
        
        void CPACSFlightDynamicsTrimResult::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element mach
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mach");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/mach", m_mach);
            
            // write element vTAS
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vTAS");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vTAS", m_vTAS);
            
            // write element alpha
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alpha");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/alpha", m_alpha);
            
            // write element altitude
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/altitude");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/altitude", m_altitude);
            
        }
        
        const double& CPACSFlightDynamicsTrimResult::GetMach() const
        {
            return m_mach;
        }
        
        void CPACSFlightDynamicsTrimResult::SetMach(const double& value)
        {
            m_mach = value;
        }
        
        const double& CPACSFlightDynamicsTrimResult::GetVTAS() const
        {
            return m_vTAS;
        }
        
        void CPACSFlightDynamicsTrimResult::SetVTAS(const double& value)
        {
            m_vTAS = value;
        }
        
        const double& CPACSFlightDynamicsTrimResult::GetAlpha() const
        {
            return m_alpha;
        }
        
        void CPACSFlightDynamicsTrimResult::SetAlpha(const double& value)
        {
            m_alpha = value;
        }
        
        const double& CPACSFlightDynamicsTrimResult::GetAltitude() const
        {
            return m_altitude;
        }
        
        void CPACSFlightDynamicsTrimResult::SetAltitude(const double& value)
        {
            m_altitude = value;
        }
        
    }
}
