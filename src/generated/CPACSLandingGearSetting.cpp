// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGearSetting.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGearSetting::CPACSLandingGearSetting(){}
        CPACSLandingGearSetting::~CPACSLandingGearSetting() {}
        
        void CPACSLandingGearSetting::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element landingGearUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearUID")) {
                m_landingGearUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/landingGearUID");
            }
            else {
                LOG(ERROR) << "Required element landingGearUID is missing";
            }
            
            // read element extended
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/extended")) {
                m_extended = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/extended");
            }
            else {
                LOG(ERROR) << "Required element extended is missing";
            }
            
            // read element relDeflection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relDeflection")) {
                m_relDeflection = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relDeflection");
            }
            else {
                LOG(ERROR) << "Required element relDeflection is missing";
            }
            
        }
        
        void CPACSLandingGearSetting::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element landingGearUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/landingGearUID", m_landingGearUID);
            
            // write element extended
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/extended");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/extended", m_extended);
            
            // write element relDeflection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDeflection");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relDeflection", m_relDeflection);
            
        }
        
        const std::string& CPACSLandingGearSetting::GetLandingGearUID() const
        {
            return m_landingGearUID;
        }
        
        void CPACSLandingGearSetting::SetLandingGearUID(const std::string& value)
        {
            m_landingGearUID = value;
        }
        
        const bool& CPACSLandingGearSetting::GetExtended() const
        {
            return m_extended;
        }
        
        void CPACSLandingGearSetting::SetExtended(const bool& value)
        {
            m_extended = value;
        }
        
        const double& CPACSLandingGearSetting::GetRelDeflection() const
        {
            return m_relDeflection;
        }
        
        void CPACSLandingGearSetting::SetRelDeflection(const double& value)
        {
            m_relDeflection = value;
        }
        
    }
}
