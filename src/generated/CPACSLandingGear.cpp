// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGear.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGear::CPACSLandingGear(){}
        CPACSLandingGear::~CPACSLandingGear() {}
        
        void CPACSLandingGear::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element noseGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/noseGears")) {
                m_noseGears = boost::in_place();
                try {
                    m_noseGears->ReadCPACS(tixiHandle, xpath + "/noseGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read noseGears at xpath << " << xpath << ": " << e.what();
                    m_noseGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read noseGears at xpath << " << xpath << ": " << e.getError();
                    m_noseGears = boost::none;
                }
            }
            
            // read element mainGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mainGears")) {
                m_mainGears = boost::in_place();
                try {
                    m_mainGears->ReadCPACS(tixiHandle, xpath + "/mainGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mainGears at xpath << " << xpath << ": " << e.what();
                    m_mainGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mainGears at xpath << " << xpath << ": " << e.getError();
                    m_mainGears = boost::none;
                }
            }
            
            // read element skidGears
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/skidGears")) {
                m_skidGears = boost::in_place();
                try {
                    m_skidGears->ReadCPACS(tixiHandle, xpath + "/skidGears");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read skidGears at xpath << " << xpath << ": " << e.what();
                    m_skidGears = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read skidGears at xpath << " << xpath << ": " << e.getError();
                    m_skidGears = boost::none;
                }
            }
            
        }
        
        void CPACSLandingGear::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element noseGears
            if (m_noseGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/noseGears");
                m_noseGears->WriteCPACS(tixiHandle, xpath + "/noseGears");
            }
            
            // write element mainGears
            if (m_mainGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mainGears");
                m_mainGears->WriteCPACS(tixiHandle, xpath + "/mainGears");
            }
            
            // write element skidGears
            if (m_skidGears) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skidGears");
                m_skidGears->WriteCPACS(tixiHandle, xpath + "/skidGears");
            }
            
        }
        
        bool CPACSLandingGear::HasNoseGears() const
        {
            return static_cast<bool>(m_noseGears);
        }
        
        const CPACSNoseGears& CPACSLandingGear::GetNoseGears() const
        {
            return *m_noseGears;
        }
        
        CPACSNoseGears& CPACSLandingGear::GetNoseGears()
        {
            return *m_noseGears;
        }
        
        bool CPACSLandingGear::HasMainGears() const
        {
            return static_cast<bool>(m_mainGears);
        }
        
        const CPACSMainGears& CPACSLandingGear::GetMainGears() const
        {
            return *m_mainGears;
        }
        
        CPACSMainGears& CPACSLandingGear::GetMainGears()
        {
            return *m_mainGears;
        }
        
        bool CPACSLandingGear::HasSkidGears() const
        {
            return static_cast<bool>(m_skidGears);
        }
        
        const CPACSSkidGears& CPACSLandingGear::GetSkidGears() const
        {
            return *m_skidGears;
        }
        
        CPACSSkidGears& CPACSLandingGear::GetSkidGears()
        {
            return *m_skidGears;
        }
        
    }
}
