// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <CCPACSMaterialDefinition.h>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingCell;
class CCPACSWingShell;

namespace generated
{
    // This class is used in:
    // CPACSWingCell
    // CPACSWingShell

    // generated from /xsd:schema/xsd:complexType[977]
    /// @brief Material properties of the wing skin.
    /// 
    /// The wingSkinType describes the material properties of
    /// the wing.
    /// For composites materials: the positive z-direction is
    /// from the outer side to the inner side.
    /// For composites materials: the reference axis for the
    /// orthotropyDirection is defined by the two leading edge points of
    /// the 'from'- and the 'to'-element of the componentSegment
    /// definition. The angle between the reference axis and the
    /// orthotropyDirection equals the rotation around the z-reference
    /// axis. For details, please refer to the picture below:
    /// @see wingskinorthotropydir
    /// 
    class CPACSWingSkin
    {
    public:
        TIGL_EXPORT CPACSWingSkin(CCPACSWingCell* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSWingSkin(CCPACSWingShell* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWingSkin();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSWingCell>::value || std::is_same<P, CCPACSWingShell>::value, "template argument for P is not a parent class of CPACSWingSkin");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSWingCell>::value || std::is_same<P, CCPACSWingShell>::value, "template argument for P is not a parent class of CPACSWingSkin");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CCPACSMaterialDefinition& GetMaterial() const;
        TIGL_EXPORT virtual CCPACSMaterialDefinition& GetMaterial();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// Material properties of the wing skin.
        CCPACSMaterialDefinition m_material;

    private:
        CPACSWingSkin(const CPACSWingSkin&) = delete;
        CPACSWingSkin& operator=(const CPACSWingSkin&) = delete;

        CPACSWingSkin(CPACSWingSkin&&) = delete;
        CPACSWingSkin& operator=(CPACSWingSkin&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSWingSkin = generated::CPACSWingSkin;
} // namespace tigl
