// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSWingCell.h"
#include "CPACSCellPositioningSpanwise.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCellPositioningSpanwise::CPACSCellPositioningSpanwise(CCPACSWingCell* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCellPositioningSpanwise::~CPACSCellPositioningSpanwise()
    {
        if (m_uidMgr) {
            if (m_ribDefinitionUID_choice3 && !m_ribDefinitionUID_choice3->empty()) m_uidMgr->TryUnregisterReference(*m_ribDefinitionUID_choice3, *this);
        }
    }

    const CCPACSWingCell* CPACSCellPositioningSpanwise::GetParent() const
    {
        return m_parent;
    }

    CCPACSWingCell* CPACSCellPositioningSpanwise::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCellPositioningSpanwise::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSCellPositioningSpanwise::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSCellPositioningSpanwise::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCellPositioningSpanwise::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSCellPositioningSpanwise::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element contourCoordinate
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/contourCoordinate")) {
            m_contourCoordinate_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/contourCoordinate");
        }

        // read element eta1
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta1")) {
            m_eta1_choice2 = boost::in_place(reinterpret_cast<CCPACSWingCellPositionSpanwise*>(this), m_uidMgr);
            try {
                m_eta1_choice2->ReadCPACS(tixiHandle, xpath + "/eta1");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read eta1 at xpath " << xpath << ": " << e.what();
                m_eta1_choice2 = boost::none;
            }
        }

        // read element eta2
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta2")) {
            m_eta2_choice2 = boost::in_place(reinterpret_cast<CCPACSWingCellPositionSpanwise*>(this), m_uidMgr);
            try {
                m_eta2_choice2->ReadCPACS(tixiHandle, xpath + "/eta2");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read eta2 at xpath " << xpath << ": " << e.what();
                m_eta2_choice2 = boost::none;
            }
        }

        // read element ribNumber
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
            m_ribNumber_choice3 = tixi::TixiGetElement<int>(tixiHandle, xpath + "/ribNumber");
        }

        // read element ribDefinitionUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
            m_ribDefinitionUID_choice3 = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/ribDefinitionUID");
            if (m_ribDefinitionUID_choice3->empty()) {
                LOG(WARNING) << "Optional element ribDefinitionUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_ribDefinitionUID_choice3->empty()) m_uidMgr->RegisterReference(*m_ribDefinitionUID_choice3, *this);
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSCellPositioningSpanwise::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element contourCoordinate
        if (m_contourCoordinate_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/contourCoordinate");
            tixi::TixiSaveElement(tixiHandle, xpath + "/contourCoordinate", *m_contourCoordinate_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/contourCoordinate")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/contourCoordinate");
            }
        }

        // write element eta1
        if (m_eta1_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta1");
            m_eta1_choice2->WriteCPACS(tixiHandle, xpath + "/eta1");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta1")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/eta1");
            }
        }

        // write element eta2
        if (m_eta2_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta2");
            m_eta2_choice2->WriteCPACS(tixiHandle, xpath + "/eta2");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta2")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/eta2");
            }
        }

        // write element ribNumber
        if (m_ribNumber_choice3) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribNumber");
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribNumber", *m_ribNumber_choice3);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribNumber")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribNumber");
            }
        }

        // write element ribDefinitionUID
        if (m_ribDefinitionUID_choice3) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribDefinitionUID");
            tixi::TixiSaveElement(tixiHandle, xpath + "/ribDefinitionUID", *m_ribDefinitionUID_choice3);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribDefinitionUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ribDefinitionUID");
            }
        }

    }

    bool CPACSCellPositioningSpanwise::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_contourCoordinate_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_eta1_choice2.is_initialized()
                        ||
                        m_eta2_choice2.is_initialized()
                        ||
                        m_ribNumber_choice3.is_initialized()
                        ||
                        m_ribDefinitionUID_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_eta1_choice2.is_initialized()
                    &&
                    m_eta2_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_contourCoordinate_choice1.is_initialized()
                        ||
                        m_ribNumber_choice3.is_initialized()
                        ||
                        m_ribDefinitionUID_choice3.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_ribNumber_choice3.is_initialized()
                    &&
                    m_ribDefinitionUID_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_contourCoordinate_choice1.is_initialized()
                        ||
                        m_eta1_choice2.is_initialized()
                        ||
                        m_eta2_choice2.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<double>& CPACSCellPositioningSpanwise::GetContourCoordinate_choice1() const
    {
        return m_contourCoordinate_choice1;
    }

    void CPACSCellPositioningSpanwise::SetContourCoordinate_choice1(const boost::optional<double>& value)
    {
        m_contourCoordinate_choice1 = value;
    }

    const boost::optional<CCPACSEtaIsoLine>& CPACSCellPositioningSpanwise::GetEta1_choice2() const
    {
        return m_eta1_choice2;
    }

    boost::optional<CCPACSEtaIsoLine>& CPACSCellPositioningSpanwise::GetEta1_choice2()
    {
        return m_eta1_choice2;
    }

    const boost::optional<CCPACSEtaIsoLine>& CPACSCellPositioningSpanwise::GetEta2_choice2() const
    {
        return m_eta2_choice2;
    }

    boost::optional<CCPACSEtaIsoLine>& CPACSCellPositioningSpanwise::GetEta2_choice2()
    {
        return m_eta2_choice2;
    }

    const boost::optional<int>& CPACSCellPositioningSpanwise::GetRibNumber_choice3() const
    {
        return m_ribNumber_choice3;
    }

    void CPACSCellPositioningSpanwise::SetRibNumber_choice3(const boost::optional<int>& value)
    {
        m_ribNumber_choice3 = value;
    }

    const boost::optional<std::string>& CPACSCellPositioningSpanwise::GetRibDefinitionUID_choice3() const
    {
        return m_ribDefinitionUID_choice3;
    }

    void CPACSCellPositioningSpanwise::SetRibDefinitionUID_choice3(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_ribDefinitionUID_choice3 && !m_ribDefinitionUID_choice3->empty()) m_uidMgr->TryUnregisterReference(*m_ribDefinitionUID_choice3, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_ribDefinitionUID_choice3 = value;
    }

    CCPACSEtaIsoLine& CPACSCellPositioningSpanwise::GetEta1_choice2(CreateIfNotExistsTag)
    {
        if (!m_eta1_choice2)
            m_eta1_choice2 = boost::in_place(reinterpret_cast<CCPACSWingCellPositionSpanwise*>(this), m_uidMgr);
        return *m_eta1_choice2;
    }

    void CPACSCellPositioningSpanwise::RemoveEta1_choice2()
    {
        m_eta1_choice2 = boost::none;
    }

    CCPACSEtaIsoLine& CPACSCellPositioningSpanwise::GetEta2_choice2(CreateIfNotExistsTag)
    {
        if (!m_eta2_choice2)
            m_eta2_choice2 = boost::in_place(reinterpret_cast<CCPACSWingCellPositionSpanwise*>(this), m_uidMgr);
        return *m_eta2_choice2;
    }

    void CPACSCellPositioningSpanwise::RemoveEta2_choice2()
    {
        m_eta2_choice2 = boost::none;
    }

    const CTiglUIDObject* CPACSCellPositioningSpanwise::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSCellPositioningSpanwise::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_ribDefinitionUID_choice3 && *m_ribDefinitionUID_choice3 == oldUid) {
            m_ribDefinitionUID_choice3 = newUid;
        }
    }

} // namespace generated
} // namespace tigl
