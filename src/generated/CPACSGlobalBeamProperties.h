// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSBeamCrossSection.h"
#include "CPACSPointXY.h"
#include "CPACSPointXY.h"
#include "CPACSBeamStiffness.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSProfileBasedStructuralElement
        
        // generated from /xsd:schema/xsd:complexType[416]
        class CPACSGlobalBeamProperties
        {
        public:
            TIGL_EXPORT CPACSGlobalBeamProperties();
            TIGL_EXPORT virtual ~CPACSGlobalBeamProperties();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUID() const;
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT const std::string& GetSource() const;
            TIGL_EXPORT void SetSource(const std::string& value);
            
            TIGL_EXPORT const bool& GetConsistancy() const;
            TIGL_EXPORT void SetConsistancy(const bool& value);
            
            TIGL_EXPORT const CPACSBeamCrossSection& GetBeamCrossSection() const;
            TIGL_EXPORT CPACSBeamCrossSection& GetBeamCrossSection();
            
            TIGL_EXPORT const CPACSPointXY& GetBeamCOG() const;
            TIGL_EXPORT CPACSPointXY& GetBeamCOG();
            
            TIGL_EXPORT bool HasBeamShearCenter() const;
            TIGL_EXPORT const CPACSPointXY& GetBeamShearCenter() const;
            TIGL_EXPORT CPACSPointXY& GetBeamShearCenter();
            
            TIGL_EXPORT bool HasBeamStiffness() const;
            TIGL_EXPORT const CPACSBeamStiffness& GetBeamStiffness() const;
            TIGL_EXPORT CPACSBeamStiffness& GetBeamStiffness();
            
            TIGL_EXPORT bool HasBeamSpecificMass() const;
            TIGL_EXPORT const double& GetBeamSpecificMass() const;
            TIGL_EXPORT void SetBeamSpecificMass(const double& value);
            
        protected:
            boost::optional<std::string>        m_uID;
            std::string                         m_source;
            bool                                m_consistancy;
            CPACSBeamCrossSection               m_beamCrossSection;
            CPACSPointXY                        m_beamCOG;
            boost::optional<CPACSPointXY>       m_beamShearCenter;
            boost::optional<CPACSBeamStiffness> m_beamStiffness;
            boost::optional<double>             m_beamSpecificMass;
            
        private:
            #ifdef HAVE_CPP11
            CPACSGlobalBeamProperties(const CPACSGlobalBeamProperties&) = delete;
            CPACSGlobalBeamProperties& operator=(const CPACSGlobalBeamProperties&) = delete;
            
            CPACSGlobalBeamProperties(CPACSGlobalBeamProperties&&) = delete;
            CPACSGlobalBeamProperties& operator=(CPACSGlobalBeamProperties&&) = delete;
            #else
            CPACSGlobalBeamProperties(const CPACSGlobalBeamProperties&);
            CPACSGlobalBeamProperties& operator=(const CPACSGlobalBeamProperties&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSGlobalBeamProperties = generated::CPACSGlobalBeamProperties;
    #else
    typedef generated::CPACSGlobalBeamProperties CCPACSGlobalBeamProperties;
    #endif
}
