// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSTrackJointPosition.h"
#include "CPACSTrackJointPositions.h"
#include "CPACSTrackStructure.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTrackJointPositions::CPACSTrackJointPositions(CPACSTrackStructure* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTrackJointPositions::~CPACSTrackJointPositions()
    {
    }

    const CPACSTrackStructure* CPACSTrackJointPositions::GetParent() const
    {
        return m_parent;
    }

    CPACSTrackStructure* CPACSTrackJointPositions::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTrackJointPositions::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTrackJointPositions::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSTrackJointPositions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element jointPosition
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/jointPosition")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/jointPosition", m_jointPositions, 1, tixi::xsdUnbounded, this);
        }

    }

    void CPACSTrackJointPositions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element jointPosition
        tixi::TixiSaveElements(tixiHandle, xpath + "/jointPosition", m_jointPositions);

    }

    const std::vector<std::unique_ptr<CPACSTrackJointPosition>>& CPACSTrackJointPositions::GetJointPositions() const
    {
        return m_jointPositions;
    }

    std::vector<std::unique_ptr<CPACSTrackJointPosition>>& CPACSTrackJointPositions::GetJointPositions()
    {
        return m_jointPositions;
    }

    size_t CPACSTrackJointPositions::GetJointPositionCount() const
    {
        return m_jointPositions.size();
    }

    size_t CPACSTrackJointPositions::GetJointPositionIndex(const std::string& UID) const
    {
        for (size_t i=0; i < GetJointPositionCount(); i++) {
            const std::string tmpUID(m_jointPositions[i]->GetUID());
            if (tmpUID == UID) {
                return i+1;
            }
        }
    }

    CPACSTrackJointPosition& CPACSTrackJointPositions::GetJointPosition(size_t index)
    {
        if (index < 1 || index > GetJointPositionCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSTrackJointPosition>>::GetJointPosition", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_jointPositions[index];
    }

    const CPACSTrackJointPosition& CPACSTrackJointPositions::GetJointPosition(size_t index) const
    {
        if (index < 1 || index > GetJointPositionCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSTrackJointPosition>>::GetJointPosition", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_jointPositions[index];
    }

    CPACSTrackJointPosition& CPACSTrackJointPositions::GetJointPosition(const std::string& UID)
    {
        for (auto& elem : m_jointPositions ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSTrackJointPositions::GetJointPosition. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }

    const CPACSTrackJointPosition& CPACSTrackJointPositions::GetJointPosition(const std::string& UID) const
    {
        for (auto& elem : m_jointPositions ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSTrackJointPositions::GetJointPosition. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }


    CPACSTrackJointPosition& CPACSTrackJointPositions::AddJointPosition()
    {
        m_jointPositions.push_back(make_unique<CPACSTrackJointPosition>(this));
        return *m_jointPositions.back();
    }

    void CPACSTrackJointPositions::RemoveJointPosition(CPACSTrackJointPosition& ref)
    {
        for (std::size_t i = 0; i < m_jointPositions.size(); i++) {
            if (m_jointPositions[i].get() == &ref) {
                m_jointPositions.erase(m_jointPositions.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
