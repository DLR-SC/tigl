// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSMaterialDefinitionForProfileBased_standardProfileSheetID.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSProfileBasedStructuralElement;

namespace generated
{
    // This class is used in:
    // CPACSProfileBasedStructuralElement

    /// @brief Definition of the properties of the structural
    /// profile sheet
    /// 
    /// MaterialDefinitionForProfileBased type, containing a
    /// material definition (Reference to material and thickness) for
    /// profile based objects.
    /// 
    class CPACSMaterialDefinitionForProfileBased : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSMaterialDefinitionForProfileBased(CCPACSProfileBasedStructuralElement* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSMaterialDefinitionForProfileBased();

        TIGL_EXPORT CCPACSProfileBasedStructuralElement* GetParent();

        TIGL_EXPORT const CCPACSProfileBasedStructuralElement* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetSheetUID_choice1() const;
        TIGL_EXPORT virtual void SetSheetUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSMaterialDefinitionForProfileBased_standardProfileSheetID>& GetStandardProfileSheetID_choice2() const;
        TIGL_EXPORT virtual void SetStandardProfileSheetID_choice2(const boost::optional<CPACSMaterialDefinitionForProfileBased_standardProfileSheetID>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetLength_choice2() const;
        TIGL_EXPORT virtual void SetLength_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetCompositeUID_choice1() const;
        TIGL_EXPORT virtual void SetCompositeUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetOrthotropyDirection_choice1() const;
        TIGL_EXPORT virtual void SetOrthotropyDirection_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetThicknessScaling_choice1() const;
        TIGL_EXPORT virtual void SetThicknessScaling_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetMaterialUID_choice2() const;
        TIGL_EXPORT virtual void SetMaterialUID_choice2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetThickness_choice2() const;
        TIGL_EXPORT virtual void SetThickness_choice2(const boost::optional<double>& value);

    protected:
        CCPACSProfileBasedStructuralElement* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// UID of the sheet to which the material
        /// properties shall be applied
        boost::optional<std::string>                                                   m_sheetUID_choice1;

        /// Predefined ID of the sheet of a standard profile
        boost::optional<CPACSMaterialDefinitionForProfileBased_standardProfileSheetID> m_standardProfileSheetID_choice2;

        /// Length of the sheet of a standard profile [m]
        boost::optional<double>                                                        m_length_choice2;

        /// uID of a composite definition.
        boost::optional<std::string>                                                   m_compositeUID_choice1;

        /// Orthoropy direction of the composite.
        boost::optional<double>                                                        m_orthotropyDirection_choice1;

        /// Scaling factor of the composite thickness.
        boost::optional<double>                                                        m_thicknessScaling_choice1;

        /// uID of a material definition.
        boost::optional<std::string>                                                   m_materialUID_choice2;

        /// Absolute thickness of the material [m]
        boost::optional<double>                                                        m_thickness_choice2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSMaterialDefinitionForProfileBased(const CPACSMaterialDefinitionForProfileBased&) = delete;
        CPACSMaterialDefinitionForProfileBased& operator=(const CPACSMaterialDefinitionForProfileBased&) = delete;

        CPACSMaterialDefinitionForProfileBased(CPACSMaterialDefinitionForProfileBased&&) = delete;
        CPACSMaterialDefinitionForProfileBased& operator=(CPACSMaterialDefinitionForProfileBased&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSMaterialDefinitionForProfileBased = generated::CPACSMaterialDefinitionForProfileBased;
} // namespace tigl
