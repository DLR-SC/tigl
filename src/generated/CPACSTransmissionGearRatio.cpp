// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTransmissionGearRatio.h"

namespace tigl
{
    namespace generated
    {
        CPACSTransmissionGearRatio::CPACSTransmissionGearRatio(){}
        CPACSTransmissionGearRatio::~CPACSTransmissionGearRatio() {}
        
        void CPACSTransmissionGearRatio::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element referenceShaftInputUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/referenceShaftInputUID")) {
                m_referenceShaftInputUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/referenceShaftInputUID");
            }
            
            // read element ratio
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/ratio")) {
                m_ratio = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/ratio");
            }
            else {
                LOG(ERROR) << "Required element ratio is missing";
            }
            
        }
        
        void CPACSTransmissionGearRatio::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element referenceShaftInputUID
            if (m_referenceShaftInputUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceShaftInputUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/referenceShaftInputUID", *m_referenceShaftInputUID);
            }
            
            // write element ratio
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ratio");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/ratio", m_ratio);
            
        }
        
        bool CPACSTransmissionGearRatio::HasReferenceShaftInputUID() const
        {
            return static_cast<bool>(m_referenceShaftInputUID);
        }
        
        const std::string& CPACSTransmissionGearRatio::GetReferenceShaftInputUID() const
        {
            return *m_referenceShaftInputUID;
        }
        
        void CPACSTransmissionGearRatio::SetReferenceShaftInputUID(const std::string& value)
        {
            m_referenceShaftInputUID = value;
        }
        
        const double& CPACSTransmissionGearRatio::GetRatio() const
        {
            return m_ratio;
        }
        
        void CPACSTransmissionGearRatio::SetRatio(const double& value)
        {
            m_ratio = value;
        }
        
    }
}
