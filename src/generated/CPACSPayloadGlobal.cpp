// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSPayloadGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSPayloadGlobal::CPACSPayloadGlobal(){}
        CPACSPayloadGlobal::~CPACSPayloadGlobal() {}
        
        void CPACSPayloadGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element paxSeats
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/paxSeats")) {
                m_paxSeats = boost::in_place();
                try {
                    m_paxSeats->ReadCPACS(tixiHandle, xpath + "/paxSeats");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read paxSeats at xpath << " << xpath << ": " << e.what();
                    m_paxSeats = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read paxSeats at xpath << " << xpath << ": " << e.getError();
                    m_paxSeats = boost::none;
                }
            }
            
            // read element cargoCapacity
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cargoCapacity")) {
                m_cargoCapacity = boost::in_place();
                try {
                    m_cargoCapacity->ReadCPACS(tixiHandle, xpath + "/cargoCapacity");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cargoCapacity at xpath << " << xpath << ": " << e.what();
                    m_cargoCapacity = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cargoCapacity at xpath << " << xpath << ": " << e.getError();
                    m_cargoCapacity = boost::none;
                }
            }
            
        }
        
        void CPACSPayloadGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element paxSeats
            if (m_paxSeats) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/paxSeats");
                m_paxSeats->WriteCPACS(tixiHandle, xpath + "/paxSeats");
            }
            
            // write element cargoCapacity
            if (m_cargoCapacity) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cargoCapacity");
                m_cargoCapacity->WriteCPACS(tixiHandle, xpath + "/cargoCapacity");
            }
            
        }
        
        bool CPACSPayloadGlobal::HasPaxSeats() const
        {
            return static_cast<bool>(m_paxSeats);
        }
        
        const CPACSRequirement& CPACSPayloadGlobal::GetPaxSeats() const
        {
            return *m_paxSeats;
        }
        
        CPACSRequirement& CPACSPayloadGlobal::GetPaxSeats()
        {
            return *m_paxSeats;
        }
        
        bool CPACSPayloadGlobal::HasCargoCapacity() const
        {
            return static_cast<bool>(m_cargoCapacity);
        }
        
        const CPACSRequirement& CPACSPayloadGlobal::GetCargoCapacity() const
        {
            return *m_cargoCapacity;
        }
        
        CPACSRequirement& CPACSPayloadGlobal::GetCargoCapacity()
        {
            return *m_cargoCapacity;
        }
        
    }
}
