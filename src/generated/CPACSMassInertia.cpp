// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMassInertia.h"

namespace tigl
{
    namespace generated
    {
        CPACSMassInertia::CPACSMassInertia(){}
        CPACSMassInertia::~CPACSMassInertia() {}
        
        void CPACSMassInertia::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element Jxx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxx")) {
                m_Jxx = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jxx");
            }
            else {
                LOG(ERROR) << "Required element Jxx is missing";
            }
            
            // read element Jyy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jyy")) {
                m_Jyy = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jyy");
            }
            else {
                LOG(ERROR) << "Required element Jyy is missing";
            }
            
            // read element Jzz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jzz")) {
                m_Jzz = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jzz");
            }
            else {
                LOG(ERROR) << "Required element Jzz is missing";
            }
            
            // read element Jxy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxy")) {
                m_Jxy = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jxy");
            }
            else {
                LOG(ERROR) << "Required element Jxy is missing";
            }
            
            // read element Jxz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxz")) {
                m_Jxz = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jxz");
            }
            else {
                LOG(ERROR) << "Required element Jxz is missing";
            }
            
            // read element Jyz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jyz")) {
                m_Jyz = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/Jyz");
            }
            else {
                LOG(ERROR) << "Required element Jyz is missing";
            }
            
        }
        
        void CPACSMassInertia::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element Jxx
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxx");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jxx", m_Jxx);
            
            // write element Jyy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jyy");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jyy", m_Jyy);
            
            // write element Jzz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jzz");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jzz", m_Jzz);
            
            // write element Jxy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxy");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jxy", m_Jxy);
            
            // write element Jxz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxz");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jxz", m_Jxz);
            
            // write element Jyz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jyz");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/Jyz", m_Jyz);
            
        }
        
        const double& CPACSMassInertia::GetJxx() const
        {
            return m_Jxx;
        }
        
        void CPACSMassInertia::SetJxx(const double& value)
        {
            m_Jxx = value;
        }
        
        const double& CPACSMassInertia::GetJyy() const
        {
            return m_Jyy;
        }
        
        void CPACSMassInertia::SetJyy(const double& value)
        {
            m_Jyy = value;
        }
        
        const double& CPACSMassInertia::GetJzz() const
        {
            return m_Jzz;
        }
        
        void CPACSMassInertia::SetJzz(const double& value)
        {
            m_Jzz = value;
        }
        
        const double& CPACSMassInertia::GetJxy() const
        {
            return m_Jxy;
        }
        
        void CPACSMassInertia::SetJxy(const double& value)
        {
            m_Jxy = value;
        }
        
        const double& CPACSMassInertia::GetJxz() const
        {
            return m_Jxz;
        }
        
        void CPACSMassInertia::SetJxz(const double& value)
        {
            m_Jxz = value;
        }
        
        const double& CPACSMassInertia::GetJyz() const
        {
            return m_Jyz;
        }
        
        void CPACSMassInertia::SetJyz(const double& value)
        {
            m_Jyz = value;
        }
        
    }
}
