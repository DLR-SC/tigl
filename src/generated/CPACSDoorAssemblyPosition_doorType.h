// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"
#include "to_string.h"

namespace tigl
{
namespace generated
{
    // This enum is used in:
    // CPACSDoorAssemblyPosition

    // generated from /xsd:schema/xsd:complexType[289]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[3]/xsd:complexType/xsd:simpleContent
    enum CPACSDoorAssemblyPosition_doorType
    {
        pax,
        service,
        emergency,
        cargo
    };

    inline std::string CPACSDoorAssemblyPosition_doorTypeToString(const CPACSDoorAssemblyPosition_doorType& value)
    {
        switch(value) {
        case pax: return "pax";
        case service: return "service";
        case emergency: return "emergency";
        case cargo: return "cargo";
        default: throw CTiglError("Invalid enum value \"" + std_to_string(static_cast<int>(value)) + "\" for enum type CPACSDoorAssemblyPosition_doorType");
        }
    }
    inline CPACSDoorAssemblyPosition_doorType stringToCPACSDoorAssemblyPosition_doorType(const std::string& value)
    {
        auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
        if (toLower(value) == "pax") { return pax; }
        if (toLower(value) == "service") { return service; }
        if (toLower(value) == "emergency") { return emergency; }
        if (toLower(value) == "cargo") { return cargo; }
        throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSDoorAssemblyPosition_doorType");
    }
} // namespace generated

// Aliases in tigl namespace
using ECPACSDoorAssemblyPosition_doorType = generated::CPACSDoorAssemblyPosition_doorType;
} // namespace tigl
