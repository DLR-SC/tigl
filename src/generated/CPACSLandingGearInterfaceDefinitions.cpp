// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLandingGearInterfaceDefinitions.h"

namespace tigl
{
    namespace generated
    {
        CPACSLandingGearInterfaceDefinitions::CPACSLandingGearInterfaceDefinitions(){}
        CPACSLandingGearInterfaceDefinitions::~CPACSLandingGearInterfaceDefinitions() {}
        
        void CPACSLandingGearInterfaceDefinitions::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element landingGearInterfaceMainFrames
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfaceMainFrames")) {
                m_landingGearInterfaceMainFrames.ReadCPACS(tixiHandle, xpath + "/landingGearInterfaceMainFrames");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfaceMainFrames is missing";
            }
            
            // read element landingGearInterfacePressureFloor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfacePressureFloor")) {
                m_landingGearInterfacePressureFloor.ReadCPACS(tixiHandle, xpath + "/landingGearInterfacePressureFloor");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfacePressureFloor is missing";
            }
            
            // read element landingGearInterfaceSidebox
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfaceSidebox")) {
                m_landingGearInterfaceSidebox.ReadCPACS(tixiHandle, xpath + "/landingGearInterfaceSidebox");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfaceSidebox is missing";
            }
            
            // read element landingGearInterfaceLateralPanels
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfaceLateralPanels")) {
                m_landingGearInterfaceLateralPanels.ReadCPACS(tixiHandle, xpath + "/landingGearInterfaceLateralPanels");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfaceLateralPanels is missing";
            }
            
            // read element landingGearInterfaceKeelbeam
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfaceKeelbeam")) {
                m_landingGearInterfaceKeelbeam.ReadCPACS(tixiHandle, xpath + "/landingGearInterfaceKeelbeam");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfaceKeelbeam is missing";
            }
            
            // read element landingGearInterfaceLongFloorBeamsConnection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/landingGearInterfaceLongFloorBeamsConnection")) {
                m_landingGearInterfaceLongFloorBeamsConnection.ReadCPACS(tixiHandle, xpath + "/landingGearInterfaceLongFloorBeamsConnection");
            }
            else {
                LOG(ERROR) << "Required element landingGearInterfaceLongFloorBeamsConnection is missing";
            }
            
        }
        
        void CPACSLandingGearInterfaceDefinitions::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element landingGearInterfaceMainFrames
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfaceMainFrames");
            m_landingGearInterfaceMainFrames.WriteCPACS(tixiHandle, xpath + "/landingGearInterfaceMainFrames");
            
            // write element landingGearInterfacePressureFloor
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfacePressureFloor");
            m_landingGearInterfacePressureFloor.WriteCPACS(tixiHandle, xpath + "/landingGearInterfacePressureFloor");
            
            // write element landingGearInterfaceSidebox
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfaceSidebox");
            m_landingGearInterfaceSidebox.WriteCPACS(tixiHandle, xpath + "/landingGearInterfaceSidebox");
            
            // write element landingGearInterfaceLateralPanels
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfaceLateralPanels");
            m_landingGearInterfaceLateralPanels.WriteCPACS(tixiHandle, xpath + "/landingGearInterfaceLateralPanels");
            
            // write element landingGearInterfaceKeelbeam
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfaceKeelbeam");
            m_landingGearInterfaceKeelbeam.WriteCPACS(tixiHandle, xpath + "/landingGearInterfaceKeelbeam");
            
            // write element landingGearInterfaceLongFloorBeamsConnection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/landingGearInterfaceLongFloorBeamsConnection");
            m_landingGearInterfaceLongFloorBeamsConnection.WriteCPACS(tixiHandle, xpath + "/landingGearInterfaceLongFloorBeamsConnection");
            
        }
        
        bool CPACSLandingGearInterfaceDefinitions::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSLandingGearInterfaceDefinitions::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSLandingGearInterfaceDefinitions::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const CPACSLandingGearInterfaceMainFrames& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceMainFrames() const
        {
            return m_landingGearInterfaceMainFrames;
        }
        
        CPACSLandingGearInterfaceMainFrames& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceMainFrames()
        {
            return m_landingGearInterfaceMainFrames;
        }
        
        const CPACSLandingGearInterfacePressureFloor& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfacePressureFloor() const
        {
            return m_landingGearInterfacePressureFloor;
        }
        
        CPACSLandingGearInterfacePressureFloor& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfacePressureFloor()
        {
            return m_landingGearInterfacePressureFloor;
        }
        
        const CPACSLandingGearInterfaceSidebox& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceSidebox() const
        {
            return m_landingGearInterfaceSidebox;
        }
        
        CPACSLandingGearInterfaceSidebox& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceSidebox()
        {
            return m_landingGearInterfaceSidebox;
        }
        
        const CPACSLandingGearInterfaceLateralPanels& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceLateralPanels() const
        {
            return m_landingGearInterfaceLateralPanels;
        }
        
        CPACSLandingGearInterfaceLateralPanels& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceLateralPanels()
        {
            return m_landingGearInterfaceLateralPanels;
        }
        
        const CPACSLandingGearInterfaceKeelbeam& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceKeelbeam() const
        {
            return m_landingGearInterfaceKeelbeam;
        }
        
        CPACSLandingGearInterfaceKeelbeam& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceKeelbeam()
        {
            return m_landingGearInterfaceKeelbeam;
        }
        
        const CPACSLandingGearInterfaceLongFloorBeamsConnection& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceLongFloorBeamsConnection() const
        {
            return m_landingGearInterfaceLongFloorBeamsConnection;
        }
        
        CPACSLandingGearInterfaceLongFloorBeamsConnection& CPACSLandingGearInterfaceDefinitions::GetLandingGearInterfaceLongFloorBeamsConnection()
        {
            return m_landingGearInterfaceLongFloorBeamsConnection;
        }
        
    }
}
