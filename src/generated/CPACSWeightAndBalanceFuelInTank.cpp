// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWeightAndBalanceFuelInTank.h"

namespace tigl
{
    namespace generated
    {
        CPACSWeightAndBalanceFuelInTank::CPACSWeightAndBalanceFuelInTank(){}
        CPACSWeightAndBalanceFuelInTank::~CPACSWeightAndBalanceFuelInTank() {}
        
        void CPACSWeightAndBalanceFuelInTank::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element tankUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tankUID")) {
                m_tankUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/tankUID");
            }
            else {
                LOG(ERROR) << "Required element tankUID is missing";
            }
            
            // read element fuelUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuelUID")) {
                m_fuelUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fuelUID");
            }
            
            // read element mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                m_mass.ReadCPACS(tixiHandle, xpath + "/mass");
            }
            else {
                LOG(ERROR) << "Required element mass is missing";
            }
            
            // read element coG
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/coG")) {
                m_coG.ReadCPACS(tixiHandle, xpath + "/coG");
            }
            else {
                LOG(ERROR) << "Required element coG is missing";
            }
            
            // read element massInertia
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
                m_massInertia.ReadCPACS(tixiHandle, xpath + "/massInertia");
            }
            else {
                LOG(ERROR) << "Required element massInertia is missing";
            }
            
            // read element tankFillLevel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/tankFillLevel")) {
                m_tankFillLevel = boost::in_place();
                try {
                    m_tankFillLevel->ReadCPACS(tixiHandle, xpath + "/tankFillLevel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read tankFillLevel at xpath << " << xpath << ": " << e.what();
                    m_tankFillLevel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read tankFillLevel at xpath << " << xpath << ": " << e.getError();
                    m_tankFillLevel = boost::none;
                }
            }
            
        }
        
        void CPACSWeightAndBalanceFuelInTank::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element tankUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tankUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/tankUID", m_tankUID);
            
            // write element fuelUID
            if (m_fuelUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuelUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/fuelUID", *m_fuelUID);
            }
            
            // write element mass
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
            m_mass.WriteCPACS(tixiHandle, xpath + "/mass");
            
            // write element coG
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/coG");
            m_coG.WriteCPACS(tixiHandle, xpath + "/coG");
            
            // write element massInertia
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massInertia");
            m_massInertia.WriteCPACS(tixiHandle, xpath + "/massInertia");
            
            // write element tankFillLevel
            if (m_tankFillLevel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/tankFillLevel");
                m_tankFillLevel->WriteCPACS(tixiHandle, xpath + "/tankFillLevel");
            }
            
        }
        
        const std::string& CPACSWeightAndBalanceFuelInTank::GetTankUID() const
        {
            return m_tankUID;
        }
        
        void CPACSWeightAndBalanceFuelInTank::SetTankUID(const std::string& value)
        {
            m_tankUID = value;
        }
        
        bool CPACSWeightAndBalanceFuelInTank::HasFuelUID() const
        {
            return static_cast<bool>(m_fuelUID);
        }
        
        const std::string& CPACSWeightAndBalanceFuelInTank::GetFuelUID() const
        {
            return *m_fuelUID;
        }
        
        void CPACSWeightAndBalanceFuelInTank::SetFuelUID(const std::string& value)
        {
            m_fuelUID = value;
        }
        
        const CCPACSStringVector& CPACSWeightAndBalanceFuelInTank::GetMass() const
        {
            return m_mass;
        }
        
        CCPACSStringVector& CPACSWeightAndBalanceFuelInTank::GetMass()
        {
            return m_mass;
        }
        
        const CCPACSPointListXYZ& CPACSWeightAndBalanceFuelInTank::GetCoG() const
        {
            return m_coG;
        }
        
        CCPACSPointListXYZ& CPACSWeightAndBalanceFuelInTank::GetCoG()
        {
            return m_coG;
        }
        
        const CPACSMassInertiaVector& CPACSWeightAndBalanceFuelInTank::GetMassInertia() const
        {
            return m_massInertia;
        }
        
        CPACSMassInertiaVector& CPACSWeightAndBalanceFuelInTank::GetMassInertia()
        {
            return m_massInertia;
        }
        
        bool CPACSWeightAndBalanceFuelInTank::HasTankFillLevel() const
        {
            return static_cast<bool>(m_tankFillLevel);
        }
        
        const CCPACSStringVector& CPACSWeightAndBalanceFuelInTank::GetTankFillLevel() const
        {
            return *m_tankFillLevel;
        }
        
        CCPACSStringVector& CPACSWeightAndBalanceFuelInTank::GetTankFillLevel()
        {
            return *m_tankFillLevel;
        }
        
    }
}
