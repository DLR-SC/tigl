// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSSheet_continuityAtP1
        
        // generated from /xsd:schema/xsd:complexType[776]/xsd:complexContent/xsd:extension/xsd:all/xsd:element[4]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSSheet_continuityAtP1_SimpleContent
        #else
        enum CPACSSheet_continuityAtP1_SimpleContent
        #endif
        {
            _0,
            _1,
            _2
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSSheet_continuityAtP1_SimpleContentToString(const CPACSSheet_continuityAtP1_SimpleContent& value)
        {
            switch(value) {
            case CPACSSheet_continuityAtP1_SimpleContent::_0: return "0";
            case CPACSSheet_continuityAtP1_SimpleContent::_1: return "1";
            case CPACSSheet_continuityAtP1_SimpleContent::_2: return "2";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSSheet_continuityAtP1_SimpleContent");
            }
        }
        inline CPACSSheet_continuityAtP1_SimpleContent stringToCPACSSheet_continuityAtP1_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "0") { return CPACSSheet_continuityAtP1_SimpleContent::_0; }
            if (toLower(value) == "1") { return CPACSSheet_continuityAtP1_SimpleContent::_1; }
            if (toLower(value) == "2") { return CPACSSheet_continuityAtP1_SimpleContent::_2; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSSheet_continuityAtP1_SimpleContent");
        }
        #else
        inline std::string CPACSSheet_continuityAtP1_SimpleContentToString(const CPACSSheet_continuityAtP1_SimpleContent& value)
        {
            switch(value) {
            case _0: return "0";
            case _1: return "1";
            case _2: return "2";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSSheet_continuityAtP1_SimpleContent");
            }
        }
        inline CPACSSheet_continuityAtP1_SimpleContent stringToCPACSSheet_continuityAtP1_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "0") { return _0; }
            if (toLower(value) == "1") { return _1; }
            if (toLower(value) == "2") { return _2; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSSheet_continuityAtP1_SimpleContent");
        }
        #endif
    }
}
