// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlFunction.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlFunction::CPACSControlFunction(){}
        CPACSControlFunction::~CPACSControlFunction() {}
        
        void CPACSControlFunction::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element controlDistributorUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlDistributorUID")) {
                m_controlDistributorUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/controlDistributorUID");
            }
            else {
                LOG(ERROR) << "Required element controlDistributorUID is missing";
            }
            
            // read element kRate
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kRate")) {
                m_kRate = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kRate");
            }
            else {
                LOG(ERROR) << "Required element kRate is missing";
            }
            
            // read element kRateI
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kRateI")) {
                m_kRateI = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kRateI");
            }
            else {
                LOG(ERROR) << "Required element kRateI is missing";
            }
            
            // read element kAngle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kAngle")) {
                m_kAngle = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kAngle");
            }
            else {
                LOG(ERROR) << "Required element kAngle is missing";
            }
            
            // read element kAngleI
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kAngleI")) {
                m_kAngleI = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kAngleI");
            }
            else {
                LOG(ERROR) << "Required element kAngleI is missing";
            }
            
            // read element kAngleRateF1
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kAngleRateF1")) {
                m_kAngleRateF1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kAngleRateF1");
            }
            else {
                LOG(ERROR) << "Required element kAngleRateF1 is missing";
            }
            
            // read element kAngleRateF2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/kAngleRateF2")) {
                m_kAngleRateF2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/kAngleRateF2");
            }
            else {
                LOG(ERROR) << "Required element kAngleRateF2 is missing";
            }
            
        }
        
        void CPACSControlFunction::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element controlDistributorUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlDistributorUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/controlDistributorUID", m_controlDistributorUID);
            
            // write element kRate
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kRate");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kRate", m_kRate);
            
            // write element kRateI
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kRateI");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kRateI", m_kRateI);
            
            // write element kAngle
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kAngle");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kAngle", m_kAngle);
            
            // write element kAngleI
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kAngleI");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kAngleI", m_kAngleI);
            
            // write element kAngleRateF1
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kAngleRateF1");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kAngleRateF1", m_kAngleRateF1);
            
            // write element kAngleRateF2
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/kAngleRateF2");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/kAngleRateF2", m_kAngleRateF2);
            
        }
        
        const std::string& CPACSControlFunction::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSControlFunction::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSControlFunction::GetControlDistributorUID() const
        {
            return m_controlDistributorUID;
        }
        
        void CPACSControlFunction::SetControlDistributorUID(const std::string& value)
        {
            m_controlDistributorUID = value;
        }
        
        const double& CPACSControlFunction::GetKRate() const
        {
            return m_kRate;
        }
        
        void CPACSControlFunction::SetKRate(const double& value)
        {
            m_kRate = value;
        }
        
        const double& CPACSControlFunction::GetKRateI() const
        {
            return m_kRateI;
        }
        
        void CPACSControlFunction::SetKRateI(const double& value)
        {
            m_kRateI = value;
        }
        
        const double& CPACSControlFunction::GetKAngle() const
        {
            return m_kAngle;
        }
        
        void CPACSControlFunction::SetKAngle(const double& value)
        {
            m_kAngle = value;
        }
        
        const double& CPACSControlFunction::GetKAngleI() const
        {
            return m_kAngleI;
        }
        
        void CPACSControlFunction::SetKAngleI(const double& value)
        {
            m_kAngleI = value;
        }
        
        const double& CPACSControlFunction::GetKAngleRateF1() const
        {
            return m_kAngleRateF1;
        }
        
        void CPACSControlFunction::SetKAngleRateF1(const double& value)
        {
            m_kAngleRateF1 = value;
        }
        
        const double& CPACSControlFunction::GetKAngleRateF2() const
        {
            return m_kAngleRateF2;
        }
        
        void CPACSControlFunction::SetKAngleRateF2(const double& value)
        {
            m_kAngleRateF2 = value;
        }
        
    }
}
