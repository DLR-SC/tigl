// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSBeamStiffness.h"
#include "CPACSGlobalBeamProperties.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSBeamStiffness::CPACSBeamStiffness(CPACSGlobalBeamProperties* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_EA(0)
        , m_EIxx(0)
        , m_EIyy(0)
        , m_EIxy(0)
        , m_GIt(0)
        , m_G(0)
        , m_It(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSBeamStiffness::~CPACSBeamStiffness()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CPACSGlobalBeamProperties* CPACSBeamStiffness::GetParent() const
    {
        return m_parent;
    }

    CPACSGlobalBeamProperties* CPACSBeamStiffness::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSBeamStiffness::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSBeamStiffness::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSBeamStiffness::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSBeamStiffness::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSBeamStiffness::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element EA
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/EA")) {
            m_EA = tixi::TixiGetElement<double>(tixiHandle, xpath + "/EA");
        }
        else {
            LOG(ERROR) << "Required element EA is missing at xpath " << xpath;
        }

        // read element EIxx
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/EIxx")) {
            m_EIxx = tixi::TixiGetElement<double>(tixiHandle, xpath + "/EIxx");
        }
        else {
            LOG(ERROR) << "Required element EIxx is missing at xpath " << xpath;
        }

        // read element EIyy
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/EIyy")) {
            m_EIyy = tixi::TixiGetElement<double>(tixiHandle, xpath + "/EIyy");
        }
        else {
            LOG(ERROR) << "Required element EIyy is missing at xpath " << xpath;
        }

        // read element EIxy
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/EIxy")) {
            m_EIxy = tixi::TixiGetElement<double>(tixiHandle, xpath + "/EIxy");
        }
        else {
            LOG(ERROR) << "Required element EIxy is missing at xpath " << xpath;
        }

        // read element GIt
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/GIt")) {
            m_GIt = tixi::TixiGetElement<double>(tixiHandle, xpath + "/GIt");
        }
        else {
            LOG(ERROR) << "Required element GIt is missing at xpath " << xpath;
        }

        // read element G
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/G")) {
            m_G = tixi::TixiGetElement<double>(tixiHandle, xpath + "/G");
        }
        else {
            LOG(ERROR) << "Required element G is missing at xpath " << xpath;
        }

        // read element It
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/It")) {
            m_It = tixi::TixiGetElement<double>(tixiHandle, xpath + "/It");
        }
        else {
            LOG(ERROR) << "Required element It is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSBeamStiffness::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "EA", "EIxx", "EIyy", "EIxy", "GIt", "G", "It" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element EA
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/EA", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/EA", m_EA);

        // write element EIxx
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/EIxx", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/EIxx", m_EIxx);

        // write element EIyy
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/EIyy", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/EIyy", m_EIyy);

        // write element EIxy
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/EIxy", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/EIxy", m_EIxy);

        // write element GIt
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/GIt", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/GIt", m_GIt);

        // write element G
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/G", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/G", m_G);

        // write element It
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/It", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/It", m_It);

    }

    const std::string& CPACSBeamStiffness::GetUID() const
    {
        return m_uID;
    }

    void CPACSBeamStiffness::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSBeamStiffness::GetEA() const
    {
        return m_EA;
    }

    void CPACSBeamStiffness::SetEA(const double& value)
    {
        m_EA = value;
    }

    const double& CPACSBeamStiffness::GetEIxx() const
    {
        return m_EIxx;
    }

    void CPACSBeamStiffness::SetEIxx(const double& value)
    {
        m_EIxx = value;
    }

    const double& CPACSBeamStiffness::GetEIyy() const
    {
        return m_EIyy;
    }

    void CPACSBeamStiffness::SetEIyy(const double& value)
    {
        m_EIyy = value;
    }

    const double& CPACSBeamStiffness::GetEIxy() const
    {
        return m_EIxy;
    }

    void CPACSBeamStiffness::SetEIxy(const double& value)
    {
        m_EIxy = value;
    }

    const double& CPACSBeamStiffness::GetGIt() const
    {
        return m_GIt;
    }

    void CPACSBeamStiffness::SetGIt(const double& value)
    {
        m_GIt = value;
    }

    const double& CPACSBeamStiffness::GetG() const
    {
        return m_G;
    }

    void CPACSBeamStiffness::SetG(const double& value)
    {
        m_G = value;
    }

    const double& CPACSBeamStiffness::GetIt() const
    {
        return m_It;
    }

    void CPACSBeamStiffness::SetIt(const double& value)
    {
        m_It = value;
    }

} // namespace generated
} // namespace tigl
