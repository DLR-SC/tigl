// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqLateral.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqLateral::CPACSFqLateral(){}
        CPACSFqLateral::~CPACSFqLateral() {}
        
        void CPACSFqLateral::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element numPhiDas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPhiDas")) {
                m_numPhiDas.ReadCPACS(tixiHandle, xpath + "/numPhiDas");
            }
            else {
                LOG(ERROR) << "Required element numPhiDas is missing";
            }
            
            // read element numRDas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numRDas")) {
                m_numRDas.ReadCPACS(tixiHandle, xpath + "/numRDas");
            }
            else {
                LOG(ERROR) << "Required element numRDas is missing";
            }
            
            // read element numBetaDas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numBetaDas")) {
                m_numBetaDas.ReadCPACS(tixiHandle, xpath + "/numBetaDas");
            }
            else {
                LOG(ERROR) << "Required element numBetaDas is missing";
            }
            
            // read element numPhiDasRed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPhiDasRed")) {
                m_numPhiDasRed.ReadCPACS(tixiHandle, xpath + "/numPhiDasRed");
            }
            else {
                LOG(ERROR) << "Required element numPhiDasRed is missing";
            }
            
            // read element numBetaDasRed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numBetaDasRed")) {
                m_numBetaDasRed.ReadCPACS(tixiHandle, xpath + "/numBetaDasRed");
            }
            else {
                LOG(ERROR) << "Required element numBetaDasRed is missing";
            }
            
            // read element numRDrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numRDrp")) {
                m_numRDrp.ReadCPACS(tixiHandle, xpath + "/numRDrp");
            }
            else {
                LOG(ERROR) << "Required element numRDrp is missing";
            }
            
            // read element numBetaDrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numBetaDrp")) {
                m_numBetaDrp.ReadCPACS(tixiHandle, xpath + "/numBetaDrp");
            }
            else {
                LOG(ERROR) << "Required element numBetaDrp is missing";
            }
            
            // read element numPFas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPFas")) {
                m_numPFas.ReadCPACS(tixiHandle, xpath + "/numPFas");
            }
            else {
                LOG(ERROR) << "Required element numPFas is missing";
            }
            
            // read element numRFas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numRFas")) {
                m_numRFas.ReadCPACS(tixiHandle, xpath + "/numRFas");
            }
            else {
                LOG(ERROR) << "Required element numRFas is missing";
            }
            
            // read element numPhiFas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPhiFas")) {
                m_numPhiFas.ReadCPACS(tixiHandle, xpath + "/numPhiFas");
            }
            else {
                LOG(ERROR) << "Required element numPhiFas is missing";
            }
            
            // read element numBetaFas
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numBetaFas")) {
                m_numBetaFas.ReadCPACS(tixiHandle, xpath + "/numBetaFas");
            }
            else {
                LOG(ERROR) << "Required element numBetaFas is missing";
            }
            
            // read element numPFrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPFrp")) {
                m_numPFrp.ReadCPACS(tixiHandle, xpath + "/numPFrp");
            }
            else {
                LOG(ERROR) << "Required element numPFrp is missing";
            }
            
            // read element numRFrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numRFrp")) {
                m_numRFrp.ReadCPACS(tixiHandle, xpath + "/numRFrp");
            }
            else {
                LOG(ERROR) << "Required element numRFrp is missing";
            }
            
            // read element numPhiFrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numPhiFrp")) {
                m_numPhiFrp.ReadCPACS(tixiHandle, xpath + "/numPhiFrp");
            }
            else {
                LOG(ERROR) << "Required element numPhiFrp is missing";
            }
            
            // read element numBetaFrp
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numBetaFrp")) {
                m_numBetaFrp.ReadCPACS(tixiHandle, xpath + "/numBetaFrp");
            }
            else {
                LOG(ERROR) << "Required element numBetaFrp is missing";
            }
            
            // read element denLat
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/denLat")) {
                m_denLat.ReadCPACS(tixiHandle, xpath + "/denLat");
            }
            else {
                LOG(ERROR) << "Required element denLat is missing";
            }
            
            // read element denLatRed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/denLatRed")) {
                m_denLatRed.ReadCPACS(tixiHandle, xpath + "/denLatRed");
            }
            else {
                LOG(ERROR) << "Required element denLatRed is missing";
            }
            
        }
        
        void CPACSFqLateral::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element numPhiDas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPhiDas");
            m_numPhiDas.WriteCPACS(tixiHandle, xpath + "/numPhiDas");
            
            // write element numRDas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numRDas");
            m_numRDas.WriteCPACS(tixiHandle, xpath + "/numRDas");
            
            // write element numBetaDas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numBetaDas");
            m_numBetaDas.WriteCPACS(tixiHandle, xpath + "/numBetaDas");
            
            // write element numPhiDasRed
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPhiDasRed");
            m_numPhiDasRed.WriteCPACS(tixiHandle, xpath + "/numPhiDasRed");
            
            // write element numBetaDasRed
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numBetaDasRed");
            m_numBetaDasRed.WriteCPACS(tixiHandle, xpath + "/numBetaDasRed");
            
            // write element numRDrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numRDrp");
            m_numRDrp.WriteCPACS(tixiHandle, xpath + "/numRDrp");
            
            // write element numBetaDrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numBetaDrp");
            m_numBetaDrp.WriteCPACS(tixiHandle, xpath + "/numBetaDrp");
            
            // write element numPFas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPFas");
            m_numPFas.WriteCPACS(tixiHandle, xpath + "/numPFas");
            
            // write element numRFas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numRFas");
            m_numRFas.WriteCPACS(tixiHandle, xpath + "/numRFas");
            
            // write element numPhiFas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPhiFas");
            m_numPhiFas.WriteCPACS(tixiHandle, xpath + "/numPhiFas");
            
            // write element numBetaFas
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numBetaFas");
            m_numBetaFas.WriteCPACS(tixiHandle, xpath + "/numBetaFas");
            
            // write element numPFrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPFrp");
            m_numPFrp.WriteCPACS(tixiHandle, xpath + "/numPFrp");
            
            // write element numRFrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numRFrp");
            m_numRFrp.WriteCPACS(tixiHandle, xpath + "/numRFrp");
            
            // write element numPhiFrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numPhiFrp");
            m_numPhiFrp.WriteCPACS(tixiHandle, xpath + "/numPhiFrp");
            
            // write element numBetaFrp
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numBetaFrp");
            m_numBetaFrp.WriteCPACS(tixiHandle, xpath + "/numBetaFrp");
            
            // write element denLat
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/denLat");
            m_denLat.WriteCPACS(tixiHandle, xpath + "/denLat");
            
            // write element denLatRed
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/denLatRed");
            m_denLatRed.WriteCPACS(tixiHandle, xpath + "/denLatRed");
            
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPhiDas() const
        {
            return m_numPhiDas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPhiDas()
        {
            return m_numPhiDas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumRDas() const
        {
            return m_numRDas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumRDas()
        {
            return m_numRDas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumBetaDas() const
        {
            return m_numBetaDas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumBetaDas()
        {
            return m_numBetaDas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPhiDasRed() const
        {
            return m_numPhiDasRed;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPhiDasRed()
        {
            return m_numPhiDasRed;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumBetaDasRed() const
        {
            return m_numBetaDasRed;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumBetaDasRed()
        {
            return m_numBetaDasRed;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumRDrp() const
        {
            return m_numRDrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumRDrp()
        {
            return m_numRDrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumBetaDrp() const
        {
            return m_numBetaDrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumBetaDrp()
        {
            return m_numBetaDrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPFas() const
        {
            return m_numPFas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPFas()
        {
            return m_numPFas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumRFas() const
        {
            return m_numRFas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumRFas()
        {
            return m_numRFas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPhiFas() const
        {
            return m_numPhiFas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPhiFas()
        {
            return m_numPhiFas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumBetaFas() const
        {
            return m_numBetaFas;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumBetaFas()
        {
            return m_numBetaFas;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPFrp() const
        {
            return m_numPFrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPFrp()
        {
            return m_numPFrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumRFrp() const
        {
            return m_numRFrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumRFrp()
        {
            return m_numRFrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumPhiFrp() const
        {
            return m_numPhiFrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumPhiFrp()
        {
            return m_numPhiFrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetNumBetaFrp() const
        {
            return m_numBetaFrp;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetNumBetaFrp()
        {
            return m_numBetaFrp;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetDenLat() const
        {
            return m_denLat;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetDenLat()
        {
            return m_denLat;
        }
        
        const CCPACSStringVector& CPACSFqLateral::GetDenLatRed() const
        {
            return m_denLatRed;
        }
        
        CCPACSStringVector& CPACSFqLateral::GetDenLatRed()
        {
            return m_denLatRed;
        }
        
    }
}
