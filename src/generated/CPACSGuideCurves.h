// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include <vector>
#include "CTiglError.h"
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSGuideCurve;
class CCPACSFuselageSegment;
class CCPACSWingSegment;

namespace generated
{
    // This class is used in:
    // CPACSFuselageSegment
    // CPACSWingSegment

    // generated from /xsd:schema/xsd:complexType[442]
    /// @brief Guide Curves Type
    /// 
    /// Guide Curve type. This type is used to describe guide
    /// curves that enable designers to create a geometry that deviates
    /// from a standard loft.
    /// 
    class CPACSGuideCurves
    {
    public:
        TIGL_EXPORT CPACSGuideCurves(CCPACSFuselageSegment* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSGuideCurves(CCPACSWingSegment* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSGuideCurves();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSFuselageSegment>::value || std::is_same<P, CCPACSWingSegment>::value, "template argument for P is not a parent class of CPACSGuideCurves");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
#ifdef HAVE_STDIS_SAME
            static_assert(std::is_same<P, CCPACSFuselageSegment>::value || std::is_same<P, CCPACSWingSegment>::value, "template argument for P is not a parent class of CPACSGuideCurves");
#endif
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CCPACSGuideCurve>>& GetGuideCurves() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CCPACSGuideCurve>>& GetGuideCurves();

        TIGL_EXPORT virtual CCPACSGuideCurve& AddGuideCurve();
        TIGL_EXPORT virtual void RemoveGuideCurve(CCPACSGuideCurve& ref);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::vector<std::unique_ptr<CCPACSGuideCurve>> m_guideCurves;

    private:
        CPACSGuideCurves(const CPACSGuideCurves&) = delete;
        CPACSGuideCurves& operator=(const CPACSGuideCurves&) = delete;

        CPACSGuideCurves(CPACSGuideCurves&&) = delete;
        CPACSGuideCurves& operator=(CPACSGuideCurves&&) = delete;
    };
} // namespace generated

// CPACSGuideCurves is customized, use type CCPACSGuideCurves directly
} // namespace tigl
