// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingStringer.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingStringer::CPACSWingStringer(){}
        CPACSWingStringer::~CPACSWingStringer() {}
        
        void CPACSWingStringer::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element stringerStructureUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/stringerStructureUID")) {
                m_stringerStructureUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/stringerStructureUID");
            }
            else {
                LOG(ERROR) << "Required element stringerStructureUID is missing";
            }
            
            // read element pitch
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pitch")) {
                m_pitch_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/pitch");
            }
            
            // read element xsi
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsi")) {
                m_xsi_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsi");
            }
            
            // read element eta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eta")) {
                m_eta_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/eta");
            }
            
            // read element angle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angle")) {
                m_angle_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angle");
            }
            
            // read element angleReference
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleReference")) {
                m_angleReference_choice1 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/angleReference");
            }
            
            // read element numberOfStringers
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numberOfStringers")) {
                m_numberOfStringers_choice2 = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/numberOfStringers");
            }
            
            // read element angle
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angle")) {
                m_angle_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angle");
            }
            
            // read element angleReference
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleReference")) {
                m_angleReference_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/angleReference");
            }
            
            // read element innerBorderXsiLE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerBorderXsiLE")) {
                m_innerBorderXsiLE_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/innerBorderXsiLE");
            }
            
            // read element outerBorderXsiLE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerBorderXsiLE")) {
                m_outerBorderXsiLE_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/outerBorderXsiLE");
            }
            
            // read element innerBorderXsiTE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/innerBorderXsiTE")) {
                m_innerBorderXsiTE_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/innerBorderXsiTE");
            }
            
            // read element outerBorderXsiTE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/outerBorderXsiTE")) {
                m_outerBorderXsiTE_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/outerBorderXsiTE");
            }
            
        }
        
        void CPACSWingStringer::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element stringerStructureUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringerStructureUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/stringerStructureUID", m_stringerStructureUID);
            
            // write element pitch
            if (m_pitch_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pitch");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/pitch", *m_pitch_choice1);
            }
            
            // write element xsi
            if (m_xsi_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsi");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsi", *m_xsi_choice1);
            }
            
            // write element eta
            if (m_eta_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/eta", *m_eta_choice1);
            }
            
            // write element angle
            if (m_angle_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angle");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angle", *m_angle_choice1);
            }
            
            // write element angleReference
            if (m_angleReference_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleReference");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleReference", *m_angleReference_choice1);
            }
            
            // write element numberOfStringers
            if (m_numberOfStringers_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numberOfStringers");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/numberOfStringers", *m_numberOfStringers_choice2);
            }
            
            // write element angle
            if (m_angle_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angle");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angle", *m_angle_choice2);
            }
            
            // write element angleReference
            if (m_angleReference_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleReference");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleReference", *m_angleReference_choice2);
            }
            
            // write element innerBorderXsiLE
            if (m_innerBorderXsiLE_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerBorderXsiLE");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/innerBorderXsiLE", *m_innerBorderXsiLE_choice2);
            }
            
            // write element outerBorderXsiLE
            if (m_outerBorderXsiLE_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerBorderXsiLE");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/outerBorderXsiLE", *m_outerBorderXsiLE_choice2);
            }
            
            // write element innerBorderXsiTE
            if (m_innerBorderXsiTE_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/innerBorderXsiTE");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/innerBorderXsiTE", *m_innerBorderXsiTE_choice2);
            }
            
            // write element outerBorderXsiTE
            if (m_outerBorderXsiTE_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/outerBorderXsiTE");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/outerBorderXsiTE", *m_outerBorderXsiTE_choice2);
            }
            
        }
        
        const std::string& CPACSWingStringer::GetStringerStructureUID() const
        {
            return m_stringerStructureUID;
        }
        
        void CPACSWingStringer::SetStringerStructureUID(const std::string& value)
        {
            m_stringerStructureUID = value;
        }
        
        bool CPACSWingStringer::HasPitch_choice1() const
        {
            return static_cast<bool>(m_pitch_choice1);
        }
        
        const double& CPACSWingStringer::GetPitch_choice1() const
        {
            return *m_pitch_choice1;
        }
        
        void CPACSWingStringer::SetPitch_choice1(const double& value)
        {
            m_pitch_choice1 = value;
        }
        
        bool CPACSWingStringer::HasXsi_choice1() const
        {
            return static_cast<bool>(m_xsi_choice1);
        }
        
        const double& CPACSWingStringer::GetXsi_choice1() const
        {
            return *m_xsi_choice1;
        }
        
        void CPACSWingStringer::SetXsi_choice1(const double& value)
        {
            m_xsi_choice1 = value;
        }
        
        bool CPACSWingStringer::HasEta_choice1() const
        {
            return static_cast<bool>(m_eta_choice1);
        }
        
        const double& CPACSWingStringer::GetEta_choice1() const
        {
            return *m_eta_choice1;
        }
        
        void CPACSWingStringer::SetEta_choice1(const double& value)
        {
            m_eta_choice1 = value;
        }
        
        bool CPACSWingStringer::HasAngle_choice1() const
        {
            return static_cast<bool>(m_angle_choice1);
        }
        
        const double& CPACSWingStringer::GetAngle_choice1() const
        {
            return *m_angle_choice1;
        }
        
        void CPACSWingStringer::SetAngle_choice1(const double& value)
        {
            m_angle_choice1 = value;
        }
        
        bool CPACSWingStringer::HasAngleReference_choice1() const
        {
            return static_cast<bool>(m_angleReference_choice1);
        }
        
        const std::string& CPACSWingStringer::GetAngleReference_choice1() const
        {
            return *m_angleReference_choice1;
        }
        
        void CPACSWingStringer::SetAngleReference_choice1(const std::string& value)
        {
            m_angleReference_choice1 = value;
        }
        
        bool CPACSWingStringer::HasNumberOfStringers_choice2() const
        {
            return static_cast<bool>(m_numberOfStringers_choice2);
        }
        
        const int& CPACSWingStringer::GetNumberOfStringers_choice2() const
        {
            return *m_numberOfStringers_choice2;
        }
        
        void CPACSWingStringer::SetNumberOfStringers_choice2(const int& value)
        {
            m_numberOfStringers_choice2 = value;
        }
        
        bool CPACSWingStringer::HasAngle_choice2() const
        {
            return static_cast<bool>(m_angle_choice2);
        }
        
        const double& CPACSWingStringer::GetAngle_choice2() const
        {
            return *m_angle_choice2;
        }
        
        void CPACSWingStringer::SetAngle_choice2(const double& value)
        {
            m_angle_choice2 = value;
        }
        
        bool CPACSWingStringer::HasAngleReference_choice2() const
        {
            return static_cast<bool>(m_angleReference_choice2);
        }
        
        const std::string& CPACSWingStringer::GetAngleReference_choice2() const
        {
            return *m_angleReference_choice2;
        }
        
        void CPACSWingStringer::SetAngleReference_choice2(const std::string& value)
        {
            m_angleReference_choice2 = value;
        }
        
        bool CPACSWingStringer::HasInnerBorderXsiLE_choice2() const
        {
            return static_cast<bool>(m_innerBorderXsiLE_choice2);
        }
        
        const double& CPACSWingStringer::GetInnerBorderXsiLE_choice2() const
        {
            return *m_innerBorderXsiLE_choice2;
        }
        
        void CPACSWingStringer::SetInnerBorderXsiLE_choice2(const double& value)
        {
            m_innerBorderXsiLE_choice2 = value;
        }
        
        bool CPACSWingStringer::HasOuterBorderXsiLE_choice2() const
        {
            return static_cast<bool>(m_outerBorderXsiLE_choice2);
        }
        
        const double& CPACSWingStringer::GetOuterBorderXsiLE_choice2() const
        {
            return *m_outerBorderXsiLE_choice2;
        }
        
        void CPACSWingStringer::SetOuterBorderXsiLE_choice2(const double& value)
        {
            m_outerBorderXsiLE_choice2 = value;
        }
        
        bool CPACSWingStringer::HasInnerBorderXsiTE_choice2() const
        {
            return static_cast<bool>(m_innerBorderXsiTE_choice2);
        }
        
        const double& CPACSWingStringer::GetInnerBorderXsiTE_choice2() const
        {
            return *m_innerBorderXsiTE_choice2;
        }
        
        void CPACSWingStringer::SetInnerBorderXsiTE_choice2(const double& value)
        {
            m_innerBorderXsiTE_choice2 = value;
        }
        
        bool CPACSWingStringer::HasOuterBorderXsiTE_choice2() const
        {
            return static_cast<bool>(m_outerBorderXsiTE_choice2);
        }
        
        const double& CPACSWingStringer::GetOuterBorderXsiTE_choice2() const
        {
            return *m_outerBorderXsiTE_choice2;
        }
        
        void CPACSWingStringer::SetOuterBorderXsiTE_choice2(const double& value)
        {
            m_outerBorderXsiTE_choice2 = value;
        }
        
    }
}
