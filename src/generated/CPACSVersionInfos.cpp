// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSHeader.h"
#include "CPACSVersionInfo.h"
#include "CPACSVersionInfos.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSVersionInfos::CPACSVersionInfos(CPACSHeader* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSVersionInfos::~CPACSVersionInfos()
    {
    }

    const CPACSHeader* CPACSVersionInfos::GetParent() const
    {
        return m_parent;
    }

    CPACSHeader* CPACSVersionInfos::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSVersionInfos::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSVersionInfos::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSVersionInfos::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element versionInfo
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/versionInfo")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/versionInfo", m_versionInfos, 1, tixi::xsdUnbounded, this);
        }

    }

    void CPACSVersionInfos::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element versionInfo
        tixi::TixiSaveElements(tixiHandle, xpath + "/versionInfo", m_versionInfos);

    }

    const std::vector<std::unique_ptr<CPACSVersionInfo>>& CPACSVersionInfos::GetVersionInfos() const
    {
        return m_versionInfos;
    }

    std::vector<std::unique_ptr<CPACSVersionInfo>>& CPACSVersionInfos::GetVersionInfos()
    {
        return m_versionInfos;
    }

    size_t CPACSVersionInfos::GetVersionInfoCount() const
    {
        return m_versionInfos.size();
    }

    size_t CPACSVersionInfos::GetVersionInfoIndex(const std::string& UID) const
    {
        for (size_t i=0; i < GetVersionInfoCount(); i++) {
            const std::string tmpUID(m_versionInfos[i]->GetUID());
            if (tmpUID == UID) {
                return i+1;
            }
        }
    }

    CPACSVersionInfo& CPACSVersionInfos::GetVersionInfo(size_t index)
    {
        if (index < 1 || index > GetVersionInfoCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSVersionInfo>>::GetVersionInfo", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_versionInfos[index];
    }

    const CPACSVersionInfo& CPACSVersionInfos::GetVersionInfo(size_t index) const
    {
        if (index < 1 || index > GetVersionInfoCount()) {
            throw CTiglError("Invalid index in std::vector<std::unique_ptr<CPACSVersionInfo>>::GetVersionInfo", TIGL_INDEX_ERROR);
        }
        index--;
        return *m_versionInfos[index];
    }

    CPACSVersionInfo& CPACSVersionInfos::GetVersionInfo(const std::string& UID)
    {
        for (auto& elem : m_versionInfos ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSVersionInfos::GetVersionInfo. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }

    const CPACSVersionInfo& CPACSVersionInfos::GetVersionInfo(const std::string& UID) const
    {
        for (auto& elem : m_versionInfos ) {
            if (elem->GetUID() == UID)
                return *elem;
            throw CTiglError("Invalid UID in CPACSVersionInfos::GetVersionInfo. \""+ UID + "\" not found in CPACS file!" , TIGL_UID_ERROR);
        }
    }


    CPACSVersionInfo& CPACSVersionInfos::AddVersionInfo()
    {
        m_versionInfos.push_back(make_unique<CPACSVersionInfo>(this));
        return *m_versionInfos.back();
    }

    void CPACSVersionInfos::RemoveVersionInfo(CPACSVersionInfo& ref)
    {
        for (std::size_t i = 0; i < m_versionInfos.size(); i++) {
            if (m_versionInfos[i].get() == &ref) {
                m_versionInfos.erase(m_versionInfos.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
