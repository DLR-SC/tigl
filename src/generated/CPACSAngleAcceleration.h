// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSLoadCaseRotation
        
        // generated from /xsd:schema/xsd:complexType[70]
        class CPACSAngleAcceleration
        {
        public:
            TIGL_EXPORT CPACSAngleAcceleration();
            TIGL_EXPORT virtual ~CPACSAngleAcceleration();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasPDot_choice1() const;
            TIGL_EXPORT const double& GetPDot_choice1() const;
            TIGL_EXPORT void SetPDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasQDot_choice1() const;
            TIGL_EXPORT const double& GetQDot_choice1() const;
            TIGL_EXPORT void SetQDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasRDot_choice1() const;
            TIGL_EXPORT const double& GetRDot_choice1() const;
            TIGL_EXPORT void SetRDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasPhiDotDot_choice2() const;
            TIGL_EXPORT const double& GetPhiDotDot_choice2() const;
            TIGL_EXPORT void SetPhiDotDot_choice2(const double& value);
            
            TIGL_EXPORT bool HasThetaDotDot_choice2() const;
            TIGL_EXPORT const double& GetThetaDotDot_choice2() const;
            TIGL_EXPORT void SetThetaDotDot_choice2(const double& value);
            
            TIGL_EXPORT bool HasPsiDotDot_choice2() const;
            TIGL_EXPORT const double& GetPsiDotDot_choice2() const;
            TIGL_EXPORT void SetPsiDotDot_choice2(const double& value);
            
        protected:
            boost::optional<double> m_pDot_choice1;
            boost::optional<double> m_qDot_choice1;
            boost::optional<double> m_rDot_choice1;
            boost::optional<double> m_phiDotDot_choice2;
            boost::optional<double> m_thetaDotDot_choice2;
            boost::optional<double> m_psiDotDot_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSAngleAcceleration(const CPACSAngleAcceleration&) = delete;
            CPACSAngleAcceleration& operator=(const CPACSAngleAcceleration&) = delete;
            
            CPACSAngleAcceleration(CPACSAngleAcceleration&&) = delete;
            CPACSAngleAcceleration& operator=(CPACSAngleAcceleration&&) = delete;
            #else
            CPACSAngleAcceleration(const CPACSAngleAcceleration&);
            CPACSAngleAcceleration& operator=(const CPACSAngleAcceleration&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSAngleAcceleration = generated::CPACSAngleAcceleration;
    #else
    typedef generated::CPACSAngleAcceleration CCPACSAngleAcceleration;
    #endif
}
