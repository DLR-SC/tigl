// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashJobDefinition.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashJobDefinition::CPACSCrashJobDefinition(){}
        CPACSCrashJobDefinition::~CPACSCrashJobDefinition() {}
        
        void CPACSCrashJobDefinition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element aircraftModelUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/aircraftModelUID")) {
                m_aircraftModelUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/aircraftModelUID");
            }
            else {
                LOG(ERROR) << "Required element aircraftModelUID is missing";
            }
            
            // read element fuselageUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuselageUID")) {
                m_fuselageUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/fuselageUID");
            }
            else {
                LOG(ERROR) << "Required element fuselageUID is missing";
            }
            
            // read element deckUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/deckUID")) {
                m_deckUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/deckUID");
            }
            else {
                LOG(ERROR) << "Required element deckUID is missing";
            }
            
            // read element crashLoadcaseUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashLoadcaseUID")) {
                m_crashLoadcaseUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/crashLoadcaseUID");
            }
            else {
                LOG(ERROR) << "Required element crashLoadcaseUID is missing";
            }
            
            // read element bkMassCaseUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/bkMassCaseUID")) {
                m_bkMassCaseUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/bkMassCaseUID");
            }
            
        }
        
        void CPACSCrashJobDefinition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element aircraftModelUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/aircraftModelUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/aircraftModelUID", m_aircraftModelUID);
            
            // write element fuselageUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuselageUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fuselageUID", m_fuselageUID);
            
            // write element deckUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deckUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/deckUID", m_deckUID);
            
            // write element crashLoadcaseUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashLoadcaseUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashLoadcaseUID", m_crashLoadcaseUID);
            
            // write element bkMassCaseUID
            if (m_bkMassCaseUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/bkMassCaseUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/bkMassCaseUID", *m_bkMassCaseUID);
            }
            
        }
        
        const std::string& CPACSCrashJobDefinition::GetAircraftModelUID() const
        {
            return m_aircraftModelUID;
        }
        
        void CPACSCrashJobDefinition::SetAircraftModelUID(const std::string& value)
        {
            m_aircraftModelUID = value;
        }
        
        const std::string& CPACSCrashJobDefinition::GetFuselageUID() const
        {
            return m_fuselageUID;
        }
        
        void CPACSCrashJobDefinition::SetFuselageUID(const std::string& value)
        {
            m_fuselageUID = value;
        }
        
        const std::string& CPACSCrashJobDefinition::GetDeckUID() const
        {
            return m_deckUID;
        }
        
        void CPACSCrashJobDefinition::SetDeckUID(const std::string& value)
        {
            m_deckUID = value;
        }
        
        const std::string& CPACSCrashJobDefinition::GetCrashLoadcaseUID() const
        {
            return m_crashLoadcaseUID;
        }
        
        void CPACSCrashJobDefinition::SetCrashLoadcaseUID(const std::string& value)
        {
            m_crashLoadcaseUID = value;
        }
        
        bool CPACSCrashJobDefinition::HasBkMassCaseUID() const
        {
            return static_cast<bool>(m_bkMassCaseUID);
        }
        
        const std::string& CPACSCrashJobDefinition::GetBkMassCaseUID() const
        {
            return *m_bkMassCaseUID;
        }
        
        void CPACSCrashJobDefinition::SetBkMassCaseUID(const std::string& value)
        {
            m_bkMassCaseUID = value;
        }
        
    }
}
