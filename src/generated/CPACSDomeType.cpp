// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSHull.h"
#include "CPACSDomeType.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDomeType::CPACSDomeType(CCPACSHull* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSDomeType::~CPACSDomeType()
    {
    }

    const CCPACSHull* CPACSDomeType::GetParent() const
    {
        return m_parent;
    }

    CCPACSHull* CPACSDomeType::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSDomeType::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSDomeType::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSDomeType::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element spherical
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/spherical")) {
            m_spherical_choice1 = boost::in_place(this);
            try {
                m_spherical_choice1->ReadCPACS(tixiHandle, xpath + "/spherical");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read spherical at xpath " << xpath << ": " << e.what();
                m_spherical_choice1 = boost::none;
            }
        }

        // read element ellipsoid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
            m_ellipsoid_choice2 = boost::in_place(this);
            try {
                m_ellipsoid_choice2->ReadCPACS(tixiHandle, xpath + "/ellipsoid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read ellipsoid at xpath " << xpath << ": " << e.what();
                m_ellipsoid_choice2 = boost::none;
            }
        }

        // read element torispherical
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/torispherical")) {
            m_torispherical_choice3 = boost::in_place(this);
            try {
                m_torispherical_choice3->ReadCPACS(tixiHandle, xpath + "/torispherical");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read torispherical at xpath " << xpath << ": " << e.what();
                m_torispherical_choice3 = boost::none;
            }
        }

        // read element isotensoid
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/isotensoid")) {
            m_isotensoid_choice4 = boost::in_place(this);
            try {
                m_isotensoid_choice4->ReadCPACS(tixiHandle, xpath + "/isotensoid");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read isotensoid at xpath " << xpath << ": " << e.what();
                m_isotensoid_choice4 = boost::none;
            }
        }

        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSDomeType::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element spherical
        if (m_spherical_choice1) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spherical");
            m_spherical_choice1->WriteCPACS(tixiHandle, xpath + "/spherical");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/spherical")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/spherical");
            }
        }

        // write element ellipsoid
        if (m_ellipsoid_choice2) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ellipsoid");
            m_ellipsoid_choice2->WriteCPACS(tixiHandle, xpath + "/ellipsoid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ellipsoid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/ellipsoid");
            }
        }

        // write element torispherical
        if (m_torispherical_choice3) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/torispherical");
            m_torispherical_choice3->WriteCPACS(tixiHandle, xpath + "/torispherical");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/torispherical")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/torispherical");
            }
        }

        // write element isotensoid
        if (m_isotensoid_choice4) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/isotensoid");
            m_isotensoid_choice4->WriteCPACS(tixiHandle, xpath + "/isotensoid");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/isotensoid")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/isotensoid");
            }
        }

    }

    bool CPACSDomeType::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_spherical_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_ellipsoid_choice2.is_initialized()
                        ||
                        m_torispherical_choice3.is_initialized()
                        ||
                        m_isotensoid_choice4.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_ellipsoid_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_spherical_choice1.is_initialized()
                        ||
                        m_torispherical_choice3.is_initialized()
                        ||
                        m_isotensoid_choice4.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_torispherical_choice3.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_spherical_choice1.is_initialized()
                        ||
                        m_ellipsoid_choice2.is_initialized()
                        ||
                        m_isotensoid_choice4.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_isotensoid_choice4.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_spherical_choice1.is_initialized()
                        ||
                        m_ellipsoid_choice2.is_initialized()
                        ||
                        m_torispherical_choice3.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<CPACSEmptyElementBase>& CPACSDomeType::GetSpherical_choice1() const
    {
        return m_spherical_choice1;
    }

    boost::optional<CPACSEmptyElementBase>& CPACSDomeType::GetSpherical_choice1()
    {
        return m_spherical_choice1;
    }

    const boost::optional<CPACSEllipsoidDome>& CPACSDomeType::GetEllipsoid_choice2() const
    {
        return m_ellipsoid_choice2;
    }

    boost::optional<CPACSEllipsoidDome>& CPACSDomeType::GetEllipsoid_choice2()
    {
        return m_ellipsoid_choice2;
    }

    const boost::optional<CPACSTorisphericalDome>& CPACSDomeType::GetTorispherical_choice3() const
    {
        return m_torispherical_choice3;
    }

    boost::optional<CPACSTorisphericalDome>& CPACSDomeType::GetTorispherical_choice3()
    {
        return m_torispherical_choice3;
    }

    const boost::optional<CPACSIsotensoidDome>& CPACSDomeType::GetIsotensoid_choice4() const
    {
        return m_isotensoid_choice4;
    }

    boost::optional<CPACSIsotensoidDome>& CPACSDomeType::GetIsotensoid_choice4()
    {
        return m_isotensoid_choice4;
    }

    CPACSEmptyElementBase& CPACSDomeType::GetSpherical_choice1(CreateIfNotExistsTag)
    {
        if (!m_spherical_choice1)
            m_spherical_choice1 = boost::in_place(this);
        return *m_spherical_choice1;
    }

    void CPACSDomeType::RemoveSpherical_choice1()
    {
        m_spherical_choice1 = boost::none;
    }

    CPACSEllipsoidDome& CPACSDomeType::GetEllipsoid_choice2(CreateIfNotExistsTag)
    {
        if (!m_ellipsoid_choice2)
            m_ellipsoid_choice2 = boost::in_place(this);
        return *m_ellipsoid_choice2;
    }

    void CPACSDomeType::RemoveEllipsoid_choice2()
    {
        m_ellipsoid_choice2 = boost::none;
    }

    CPACSTorisphericalDome& CPACSDomeType::GetTorispherical_choice3(CreateIfNotExistsTag)
    {
        if (!m_torispherical_choice3)
            m_torispherical_choice3 = boost::in_place(this);
        return *m_torispherical_choice3;
    }

    void CPACSDomeType::RemoveTorispherical_choice3()
    {
        m_torispherical_choice3 = boost::none;
    }

    CPACSIsotensoidDome& CPACSDomeType::GetIsotensoid_choice4(CreateIfNotExistsTag)
    {
        if (!m_isotensoid_choice4)
            m_isotensoid_choice4 = boost::in_place(this);
        return *m_isotensoid_choice4;
    }

    void CPACSDomeType::RemoveIsotensoid_choice4()
    {
        m_isotensoid_choice4 = boost::none;
    }

} // namespace generated
} // namespace tigl
