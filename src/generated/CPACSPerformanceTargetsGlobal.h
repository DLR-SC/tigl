// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"
#include "CPACSRequirement.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAircraftGlobal
        
        // generated from /xsd:schema/xsd:complexType[678]
        class CPACSPerformanceTargetsGlobal
        {
        public:
            TIGL_EXPORT CPACSPerformanceTargetsGlobal();
            TIGL_EXPORT virtual ~CPACSPerformanceTargetsGlobal();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasCruiseMach() const;
            TIGL_EXPORT const CPACSRequirement& GetCruiseMach() const;
            TIGL_EXPORT CPACSRequirement& GetCruiseMach();
            
            TIGL_EXPORT bool HasMaximumOperatingVelocity() const;
            TIGL_EXPORT const CPACSRequirement& GetMaximumOperatingVelocity() const;
            TIGL_EXPORT CPACSRequirement& GetMaximumOperatingVelocity();
            
            TIGL_EXPORT bool HasMaximumOperatingMach() const;
            TIGL_EXPORT const CPACSRequirement& GetMaximumOperatingMach() const;
            TIGL_EXPORT CPACSRequirement& GetMaximumOperatingMach();
            
            TIGL_EXPORT bool HasInitialCruiseAltitude() const;
            TIGL_EXPORT const CPACSRequirement& GetInitialCruiseAltitude() const;
            TIGL_EXPORT CPACSRequirement& GetInitialCruiseAltitude();
            
            TIGL_EXPORT bool HasTimeToClimb() const;
            TIGL_EXPORT const CPACSRequirement& GetTimeToClimb() const;
            TIGL_EXPORT CPACSRequirement& GetTimeToClimb();
            
            TIGL_EXPORT bool HasMaxOperatingAltitude() const;
            TIGL_EXPORT const CPACSRequirement& GetMaxOperatingAltitude() const;
            TIGL_EXPORT CPACSRequirement& GetMaxOperatingAltitude();
            
            TIGL_EXPORT bool HasApproachSpeed() const;
            TIGL_EXPORT const CPACSRequirement& GetApproachSpeed() const;
            TIGL_EXPORT CPACSRequirement& GetApproachSpeed();
            
        protected:
            boost::optional<CPACSRequirement> m_cruiseMach;
            boost::optional<CPACSRequirement> m_maximumOperatingVelocity;
            boost::optional<CPACSRequirement> m_maximumOperatingMach;
            boost::optional<CPACSRequirement> m_initialCruiseAltitude;
            boost::optional<CPACSRequirement> m_timeToClimb;
            boost::optional<CPACSRequirement> m_maxOperatingAltitude;
            boost::optional<CPACSRequirement> m_approachSpeed;
            
        private:
            #ifdef HAVE_CPP11
            CPACSPerformanceTargetsGlobal(const CPACSPerformanceTargetsGlobal&) = delete;
            CPACSPerformanceTargetsGlobal& operator=(const CPACSPerformanceTargetsGlobal&) = delete;
            
            CPACSPerformanceTargetsGlobal(CPACSPerformanceTargetsGlobal&&) = delete;
            CPACSPerformanceTargetsGlobal& operator=(CPACSPerformanceTargetsGlobal&&) = delete;
            #else
            CPACSPerformanceTargetsGlobal(const CPACSPerformanceTargetsGlobal&);
            CPACSPerformanceTargetsGlobal& operator=(const CPACSPerformanceTargetsGlobal&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSPerformanceTargetsGlobal = generated::CPACSPerformanceTargetsGlobal;
    #else
    typedef generated::CPACSPerformanceTargetsGlobal CCPACSPerformanceTargetsGlobal;
    #endif
}
