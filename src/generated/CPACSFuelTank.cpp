// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSFuelTanks.h"
#include "CPACSFuelTank.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSFuelTank::CPACSFuelTank(CCPACSFuelTanks* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_transformation(reinterpret_cast<CCPACSFuelTank*>(this), m_uidMgr)
        , m_hulls(reinterpret_cast<CCPACSFuelTank*>(this), m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSFuelTank::~CPACSFuelTank()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (m_parentUID && !m_parentUID->empty()) m_uidMgr->TryUnregisterReference(*m_parentUID, *this);
        }
    }

    const CCPACSFuelTanks* CPACSFuelTank::GetParent() const
    {
        return m_parent;
    }

    CCPACSFuelTanks* CPACSFuelTank::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSFuelTank::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSFuelTank::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSFuelTank::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSFuelTank::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSFuelTank::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read attribute symmetry
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
            m_symmetry = stringToTiglSymmetryAxis(tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "symmetry"));
        }

        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description->empty()) {
                LOG(WARNING) << "Optional element description is present but empty at xpath " << xpath;
            }
        }

        // read element parentUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
            m_parentUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/parentUID");
            if (m_parentUID->empty()) {
                LOG(WARNING) << "Optional element parentUID is present but empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_parentUID->empty()) m_uidMgr->RegisterReference(*m_parentUID, *this);
        }

        // read element transformation
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
            m_transformation.ReadCPACS(tixiHandle, xpath + "/transformation");
        }
        else {
            LOG(ERROR) << "Required element transformation is missing at xpath " << xpath;
        }

        // read element hulls
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/hulls")) {
            m_hulls.ReadCPACS(tixiHandle, xpath + "/hulls");
        }
        else {
            LOG(ERROR) << "Required element hulls is missing at xpath " << xpath;
        }

        // read element volume
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/volume")) {
            m_volume = boost::in_place(reinterpret_cast<CCPACSFuelTank*>(this));
            try {
                m_volume->ReadCPACS(tixiHandle, xpath + "/volume");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read volume at xpath " << xpath << ": " << e.what();
                m_volume = boost::none;
            }
        }

        // read element burstPressure
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/burstPressure")) {
            m_burstPressure = tixi::TixiGetElement<double>(tixiHandle, xpath + "/burstPressure");
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSFuelTank::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "name", "description", "parentUID", "transformation", "hulls", "volume", "burstPressure" };

        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write attribute symmetry
        if (m_symmetry) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "symmetry", TiglSymmetryAxisToString(*m_symmetry));
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "symmetry")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "symmetry");
            }
        }

        // write element name
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/name", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        if (m_description) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/description", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/description");
            }
        }

        // write element parentUID
        if (m_parentUID) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/parentUID", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/parentUID", *m_parentUID);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/parentUID")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/parentUID");
            }
        }

        // write element transformation
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/transformation", childElemOrder);
        m_transformation.WriteCPACS(tixiHandle, xpath + "/transformation");

        // write element hulls
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/hulls", childElemOrder);
        m_hulls.WriteCPACS(tixiHandle, xpath + "/hulls");

        // write element volume
        if (m_volume) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/volume", childElemOrder);
            m_volume->WriteCPACS(tixiHandle, xpath + "/volume");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/volume")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/volume");
            }
        }

        // write element burstPressure
        if (m_burstPressure) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/burstPressure", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/burstPressure", *m_burstPressure);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/burstPressure")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/burstPressure");
            }
        }

    }

    const std::string& CPACSFuelTank::GetUID() const
    {
        return m_uID;
    }

    void CPACSFuelTank::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<TiglSymmetryAxis>& CPACSFuelTank::GetSymmetry() const
    {
        return m_symmetry;
    }

    void CPACSFuelTank::SetSymmetry(const boost::optional<TiglSymmetryAxis>& value)
    {
        m_symmetry = value;
    }

    const std::string& CPACSFuelTank::GetName() const
    {
        return m_name;
    }

    void CPACSFuelTank::SetName(const std::string& value)
    {
        m_name = value;
    }

    const boost::optional<std::string>& CPACSFuelTank::GetDescription() const
    {
        return m_description;
    }

    void CPACSFuelTank::SetDescription(const boost::optional<std::string>& value)
    {
        m_description = value;
    }

    const boost::optional<std::string>& CPACSFuelTank::GetParentUID() const
    {
        return m_parentUID;
    }

    void CPACSFuelTank::SetParentUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr) {
            if (m_parentUID && !m_parentUID->empty()) m_uidMgr->TryUnregisterReference(*m_parentUID, *this);
            if (value && !value->empty()) m_uidMgr->RegisterReference(*value, *this);
        }
        m_parentUID = value;
    }

    const CCPACSTransformation& CPACSFuelTank::GetTransformation() const
    {
        return m_transformation;
    }

    CCPACSTransformation& CPACSFuelTank::GetTransformation()
    {
        return m_transformation;
    }

    const CCPACSHulls& CPACSFuelTank::GetHulls() const
    {
        return m_hulls;
    }

    CCPACSHulls& CPACSFuelTank::GetHulls()
    {
        return m_hulls;
    }

    const boost::optional<CPACSFuelTankVolume>& CPACSFuelTank::GetVolume() const
    {
        return m_volume;
    }

    boost::optional<CPACSFuelTankVolume>& CPACSFuelTank::GetVolume()
    {
        return m_volume;
    }

    const boost::optional<double>& CPACSFuelTank::GetBurstPressure() const
    {
        return m_burstPressure;
    }

    void CPACSFuelTank::SetBurstPressure(const boost::optional<double>& value)
    {
        m_burstPressure = value;
    }

    CPACSFuelTankVolume& CPACSFuelTank::GetVolume(CreateIfNotExistsTag)
    {
        if (!m_volume)
            m_volume = boost::in_place(reinterpret_cast<CCPACSFuelTank*>(this));
        return *m_volume;
    }

    void CPACSFuelTank::RemoveVolume()
    {
        m_volume = boost::none;
    }

    const CTiglUIDObject* CPACSFuelTank::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSFuelTank::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_parentUID && *m_parentUID == oldUid) {
            m_parentUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
