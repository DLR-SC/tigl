// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTransmission.h"

namespace tigl
{
    namespace generated
    {
        CPACSTransmission::CPACSTransmission(){}
        CPACSTransmission::~CPACSTransmission() {}
        
        void CPACSTransmission::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            else {
                LOG(ERROR) << "Required element name is missing";
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element transformation
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/transformation")) {
                m_transformation = boost::in_place();
                try {
                    m_transformation->ReadCPACS(tixiHandle, xpath + "/transformation");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read transformation at xpath << " << xpath << ": " << e.what();
                    m_transformation = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read transformation at xpath << " << xpath << ": " << e.getError();
                    m_transformation = boost::none;
                }
            }
            
            // read element shaftInputs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shaftInputs")) {
                m_shaftInputs = boost::in_place();
                try {
                    m_shaftInputs->ReadCPACS(tixiHandle, xpath + "/shaftInputs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read shaftInputs at xpath << " << xpath << ": " << e.what();
                    m_shaftInputs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read shaftInputs at xpath << " << xpath << ": " << e.getError();
                    m_shaftInputs = boost::none;
                }
            }
            
            // read element shaftOutputs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/shaftOutputs")) {
                m_shaftOutputs = boost::in_place();
                try {
                    m_shaftOutputs->ReadCPACS(tixiHandle, xpath + "/shaftOutputs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read shaftOutputs at xpath << " << xpath << ": " << e.what();
                    m_shaftOutputs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read shaftOutputs at xpath << " << xpath << ": " << e.getError();
                    m_shaftOutputs = boost::none;
                }
            }
            
        }
        
        void CPACSTransmission::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", m_name);
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element transformation
            if (m_transformation) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/transformation");
                m_transformation->WriteCPACS(tixiHandle, xpath + "/transformation");
            }
            
            // write element shaftInputs
            if (m_shaftInputs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shaftInputs");
                m_shaftInputs->WriteCPACS(tixiHandle, xpath + "/shaftInputs");
            }
            
            // write element shaftOutputs
            if (m_shaftOutputs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/shaftOutputs");
                m_shaftOutputs->WriteCPACS(tixiHandle, xpath + "/shaftOutputs");
            }
            
        }
        
        const std::string& CPACSTransmission::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSTransmission::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSTransmission::GetName() const
        {
            return m_name;
        }
        
        void CPACSTransmission::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSTransmission::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSTransmission::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSTransmission::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        bool CPACSTransmission::HasTransformation() const
        {
            return static_cast<bool>(m_transformation);
        }
        
        const CCPACSTransformation& CPACSTransmission::GetTransformation() const
        {
            return *m_transformation;
        }
        
        CCPACSTransformation& CPACSTransmission::GetTransformation()
        {
            return *m_transformation;
        }
        
        bool CPACSTransmission::HasShaftInputs() const
        {
            return static_cast<bool>(m_shaftInputs);
        }
        
        const CPACSTransmissionShaftInputs& CPACSTransmission::GetShaftInputs() const
        {
            return *m_shaftInputs;
        }
        
        CPACSTransmissionShaftInputs& CPACSTransmission::GetShaftInputs()
        {
            return *m_shaftInputs;
        }
        
        bool CPACSTransmission::HasShaftOutputs() const
        {
            return static_cast<bool>(m_shaftOutputs);
        }
        
        const CPACSTransmissionShaftOutputs& CPACSTransmission::GetShaftOutputs() const
        {
            return *m_shaftOutputs;
        }
        
        CPACSTransmissionShaftOutputs& CPACSTransmission::GetShaftOutputs()
        {
            return *m_shaftOutputs;
        }
        
    }
}
