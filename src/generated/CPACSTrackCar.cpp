// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSTrackCar.h"
#include "CPACSTrackStructure.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSTrackCar::CPACSTrackCar(CPACSTrackStructure* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_material(this, m_uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSTrackCar::~CPACSTrackCar()
    {
    }

    const CPACSTrackStructure* CPACSTrackCar::GetParent() const
    {
        return m_parent;
    }

    CPACSTrackStructure* CPACSTrackCar::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSTrackCar::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSTrackCar::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSTrackCar::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSTrackCar::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSTrackCar::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element material
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/material")) {
            m_material.ReadCPACS(tixiHandle, xpath + "/material");
        }
        else {
            LOG(ERROR) << "Required element material is missing at xpath " << xpath;
        }

    }

    void CPACSTrackCar::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element material
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/material");
        m_material.WriteCPACS(tixiHandle, xpath + "/material");

    }

    const CCPACSMaterialDefinition& CPACSTrackCar::GetMaterial() const
    {
        return m_material;
    }

    CCPACSMaterialDefinition& CPACSTrackCar::GetMaterial()
    {
        return m_material;
    }

} // namespace generated
} // namespace tigl
