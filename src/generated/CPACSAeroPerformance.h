// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSGlobalAeroPerformance.h"
#include "CPACSFuselagesAeroPerformance.h"
#include "CPACSWingsAeroPerformance.h"
#include "CPACSControlSurfacePerformanceMaps.h"
#include "CPACSAirfoilsAeroPerformance.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSRotorcraftAnalyses
        
        // generated from /xsd:schema/xsd:complexType[36]
        class CPACSAeroPerformance
        {
        public:
            TIGL_EXPORT CPACSAeroPerformance();
            TIGL_EXPORT virtual ~CPACSAeroPerformance();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasGlobalAeroPerformance() const;
            TIGL_EXPORT const CPACSGlobalAeroPerformance& GetGlobalAeroPerformance() const;
            TIGL_EXPORT CPACSGlobalAeroPerformance& GetGlobalAeroPerformance();
            
            TIGL_EXPORT bool HasFuselagesAeroPerformance() const;
            TIGL_EXPORT const CPACSFuselagesAeroPerformance& GetFuselagesAeroPerformance() const;
            TIGL_EXPORT CPACSFuselagesAeroPerformance& GetFuselagesAeroPerformance();
            
            TIGL_EXPORT bool HasWingsAeroPerformance() const;
            TIGL_EXPORT const CPACSWingsAeroPerformance& GetWingsAeroPerformance() const;
            TIGL_EXPORT CPACSWingsAeroPerformance& GetWingsAeroPerformance();
            
            TIGL_EXPORT bool HasControlSurfacesAeroPerformance() const;
            TIGL_EXPORT const CPACSControlSurfacePerformanceMaps& GetControlSurfacesAeroPerformance() const;
            TIGL_EXPORT CPACSControlSurfacePerformanceMaps& GetControlSurfacesAeroPerformance();
            
            TIGL_EXPORT bool HasAirfoilsAeroPerformance() const;
            TIGL_EXPORT const CPACSAirfoilsAeroPerformance& GetAirfoilsAeroPerformance() const;
            TIGL_EXPORT CPACSAirfoilsAeroPerformance& GetAirfoilsAeroPerformance();
            
        protected:
            boost::optional<CPACSGlobalAeroPerformance>         m_globalAeroPerformance;
            boost::optional<CPACSFuselagesAeroPerformance>      m_fuselagesAeroPerformance;
            boost::optional<CPACSWingsAeroPerformance>          m_wingsAeroPerformance;
            boost::optional<CPACSControlSurfacePerformanceMaps> m_controlSurfacesAeroPerformance;
            boost::optional<CPACSAirfoilsAeroPerformance>       m_airfoilsAeroPerformance;
            
        private:
            #ifdef HAVE_CPP11
            CPACSAeroPerformance(const CPACSAeroPerformance&) = delete;
            CPACSAeroPerformance& operator=(const CPACSAeroPerformance&) = delete;
            
            CPACSAeroPerformance(CPACSAeroPerformance&&) = delete;
            CPACSAeroPerformance& operator=(CPACSAeroPerformance&&) = delete;
            #else
            CPACSAeroPerformance(const CPACSAeroPerformance&);
            CPACSAeroPerformance& operator=(const CPACSAeroPerformance&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSAeroPerformance = generated::CPACSAeroPerformance;
    #else
    typedef generated::CPACSAeroPerformance CCPACSAeroPerformance;
    #endif
}
