// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTrajectoryGlobal.h"

namespace tigl
{
    namespace generated
    {
        CPACSTrajectoryGlobal::CPACSTrajectoryGlobal(){}
        CPACSTrajectoryGlobal::~CPACSTrajectoryGlobal() {}
        
        void CPACSTrajectoryGlobal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element fuelMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuelMass")) {
                m_fuelMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/fuelMass");
            }
            else {
                LOG(ERROR) << "Required element fuelMass is missing";
            }
            
            // read element time
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/time")) {
                m_time = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/time");
            }
            else {
                LOG(ERROR) << "Required element time is missing";
            }
            
            // read element distance
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/distance")) {
                m_distance = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/distance");
            }
            else {
                LOG(ERROR) << "Required element distance is missing";
            }
            
            // read element radiativeForcing
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/radiativeForcing")) {
                m_radiativeForcing = boost::in_place();
                try {
                    m_radiativeForcing->ReadCPACS(tixiHandle, xpath + "/radiativeForcing");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read radiativeForcing at xpath << " << xpath << ": " << e.what();
                    m_radiativeForcing = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read radiativeForcing at xpath << " << xpath << ": " << e.getError();
                    m_radiativeForcing = boost::none;
                }
            }
            
            // read element deltaTemperature
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/deltaTemperature")) {
                m_deltaTemperature = boost::in_place();
                try {
                    m_deltaTemperature->ReadCPACS(tixiHandle, xpath + "/deltaTemperature");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read deltaTemperature at xpath << " << xpath << ": " << e.what();
                    m_deltaTemperature = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read deltaTemperature at xpath << " << xpath << ": " << e.getError();
                    m_deltaTemperature = boost::none;
                }
            }
            
            // read element nOXMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nOXMass")) {
                m_nOXMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/nOXMass");
            }
            
            // read element nOXMassHumid
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nOXMassHumid")) {
                m_nOXMassHumid = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/nOXMassHumid");
            }
            
            // read element cO2Mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cO2Mass")) {
                m_cO2Mass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cO2Mass");
            }
            
            // read element cOMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cOMass")) {
                m_cOMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cOMass");
            }
            
            // read element h2OMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/h2OMass")) {
                m_h2OMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/h2OMass");
            }
            
            // read element sO2Mass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sO2Mass")) {
                m_sO2Mass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/sO2Mass");
            }
            
            // read element hCMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hCMass")) {
                m_hCMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/hCMass");
            }
            
            // read element sootMass
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sootMass")) {
                m_sootMass = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/sootMass");
            }
            
        }
        
        void CPACSTrajectoryGlobal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element fuelMass
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuelMass");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/fuelMass", m_fuelMass);
            
            // write element time
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/time");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/time", m_time);
            
            // write element distance
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/distance");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/distance", m_distance);
            
            // write element radiativeForcing
            if (m_radiativeForcing) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/radiativeForcing");
                m_radiativeForcing->WriteCPACS(tixiHandle, xpath + "/radiativeForcing");
            }
            
            // write element deltaTemperature
            if (m_deltaTemperature) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deltaTemperature");
                m_deltaTemperature->WriteCPACS(tixiHandle, xpath + "/deltaTemperature");
            }
            
            // write element nOXMass
            if (m_nOXMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nOXMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/nOXMass", *m_nOXMass);
            }
            
            // write element nOXMassHumid
            if (m_nOXMassHumid) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nOXMassHumid");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/nOXMassHumid", *m_nOXMassHumid);
            }
            
            // write element cO2Mass
            if (m_cO2Mass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cO2Mass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cO2Mass", *m_cO2Mass);
            }
            
            // write element cOMass
            if (m_cOMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cOMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cOMass", *m_cOMass);
            }
            
            // write element h2OMass
            if (m_h2OMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/h2OMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/h2OMass", *m_h2OMass);
            }
            
            // write element sO2Mass
            if (m_sO2Mass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sO2Mass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/sO2Mass", *m_sO2Mass);
            }
            
            // write element hCMass
            if (m_hCMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hCMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/hCMass", *m_hCMass);
            }
            
            // write element sootMass
            if (m_sootMass) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sootMass");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/sootMass", *m_sootMass);
            }
            
        }
        
        const double& CPACSTrajectoryGlobal::GetFuelMass() const
        {
            return m_fuelMass;
        }
        
        void CPACSTrajectoryGlobal::SetFuelMass(const double& value)
        {
            m_fuelMass = value;
        }
        
        const double& CPACSTrajectoryGlobal::GetTime() const
        {
            return m_time;
        }
        
        void CPACSTrajectoryGlobal::SetTime(const double& value)
        {
            m_time = value;
        }
        
        const double& CPACSTrajectoryGlobal::GetDistance() const
        {
            return m_distance;
        }
        
        void CPACSTrajectoryGlobal::SetDistance(const double& value)
        {
            m_distance = value;
        }
        
        bool CPACSTrajectoryGlobal::HasRadiativeForcing() const
        {
            return static_cast<bool>(m_radiativeForcing);
        }
        
        const CPACSRadiativeForcing& CPACSTrajectoryGlobal::GetRadiativeForcing() const
        {
            return *m_radiativeForcing;
        }
        
        CPACSRadiativeForcing& CPACSTrajectoryGlobal::GetRadiativeForcing()
        {
            return *m_radiativeForcing;
        }
        
        bool CPACSTrajectoryGlobal::HasDeltaTemperature() const
        {
            return static_cast<bool>(m_deltaTemperature);
        }
        
        const CPACSDeltaTemperature& CPACSTrajectoryGlobal::GetDeltaTemperature() const
        {
            return *m_deltaTemperature;
        }
        
        CPACSDeltaTemperature& CPACSTrajectoryGlobal::GetDeltaTemperature()
        {
            return *m_deltaTemperature;
        }
        
        bool CPACSTrajectoryGlobal::HasNOXMass() const
        {
            return static_cast<bool>(m_nOXMass);
        }
        
        const double& CPACSTrajectoryGlobal::GetNOXMass() const
        {
            return *m_nOXMass;
        }
        
        void CPACSTrajectoryGlobal::SetNOXMass(const double& value)
        {
            m_nOXMass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasNOXMassHumid() const
        {
            return static_cast<bool>(m_nOXMassHumid);
        }
        
        const double& CPACSTrajectoryGlobal::GetNOXMassHumid() const
        {
            return *m_nOXMassHumid;
        }
        
        void CPACSTrajectoryGlobal::SetNOXMassHumid(const double& value)
        {
            m_nOXMassHumid = value;
        }
        
        bool CPACSTrajectoryGlobal::HasCO2Mass() const
        {
            return static_cast<bool>(m_cO2Mass);
        }
        
        const double& CPACSTrajectoryGlobal::GetCO2Mass() const
        {
            return *m_cO2Mass;
        }
        
        void CPACSTrajectoryGlobal::SetCO2Mass(const double& value)
        {
            m_cO2Mass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasCOMass() const
        {
            return static_cast<bool>(m_cOMass);
        }
        
        const double& CPACSTrajectoryGlobal::GetCOMass() const
        {
            return *m_cOMass;
        }
        
        void CPACSTrajectoryGlobal::SetCOMass(const double& value)
        {
            m_cOMass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasH2OMass() const
        {
            return static_cast<bool>(m_h2OMass);
        }
        
        const double& CPACSTrajectoryGlobal::GetH2OMass() const
        {
            return *m_h2OMass;
        }
        
        void CPACSTrajectoryGlobal::SetH2OMass(const double& value)
        {
            m_h2OMass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasSO2Mass() const
        {
            return static_cast<bool>(m_sO2Mass);
        }
        
        const double& CPACSTrajectoryGlobal::GetSO2Mass() const
        {
            return *m_sO2Mass;
        }
        
        void CPACSTrajectoryGlobal::SetSO2Mass(const double& value)
        {
            m_sO2Mass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasHCMass() const
        {
            return static_cast<bool>(m_hCMass);
        }
        
        const double& CPACSTrajectoryGlobal::GetHCMass() const
        {
            return *m_hCMass;
        }
        
        void CPACSTrajectoryGlobal::SetHCMass(const double& value)
        {
            m_hCMass = value;
        }
        
        bool CPACSTrajectoryGlobal::HasSootMass() const
        {
            return static_cast<bool>(m_sootMass);
        }
        
        const double& CPACSTrajectoryGlobal::GetSootMass() const
        {
            return *m_sootMass;
        }
        
        void CPACSTrajectoryGlobal::SetSootMass(const double& value)
        {
            m_sootMass = value;
        }
        
    }
}
