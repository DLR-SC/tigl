// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSControlSurfacePerformanceMap.h"

namespace tigl
{
    namespace generated
    {
        CPACSControlSurfacePerformanceMap::CPACSControlSurfacePerformanceMap(){}
        CPACSControlSurfacePerformanceMap::~CPACSControlSurfacePerformanceMap() {}
        
        void CPACSControlSurfacePerformanceMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element controlSurfaceUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaceUID")) {
                m_controlSurfaceUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/controlSurfaceUID");
            }
            else {
                LOG(ERROR) << "Required element controlSurfaceUID is missing";
            }
            
            // read element relDeflection
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relDeflection")) {
                m_relDeflection.ReadCPACS(tixiHandle, xpath + "/relDeflection");
            }
            else {
                LOG(ERROR) << "Required element relDeflection is missing";
            }
            
            // read element dcfx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcfx")) {
                m_dcfx = boost::in_place();
                try {
                    m_dcfx->ReadCPACS(tixiHandle, xpath + "/dcfx");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcfx at xpath << " << xpath << ": " << e.what();
                    m_dcfx = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcfx at xpath << " << xpath << ": " << e.getError();
                    m_dcfx = boost::none;
                }
            }
            
            // read element dcfy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcfy")) {
                m_dcfy = boost::in_place();
                try {
                    m_dcfy->ReadCPACS(tixiHandle, xpath + "/dcfy");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcfy at xpath << " << xpath << ": " << e.what();
                    m_dcfy = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcfy at xpath << " << xpath << ": " << e.getError();
                    m_dcfy = boost::none;
                }
            }
            
            // read element dcfz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcfz")) {
                m_dcfz = boost::in_place();
                try {
                    m_dcfz->ReadCPACS(tixiHandle, xpath + "/dcfz");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcfz at xpath << " << xpath << ": " << e.what();
                    m_dcfz = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcfz at xpath << " << xpath << ": " << e.getError();
                    m_dcfz = boost::none;
                }
            }
            
            // read element dcmx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcmx")) {
                m_dcmx = boost::in_place();
                try {
                    m_dcmx->ReadCPACS(tixiHandle, xpath + "/dcmx");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcmx at xpath << " << xpath << ": " << e.what();
                    m_dcmx = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcmx at xpath << " << xpath << ": " << e.getError();
                    m_dcmx = boost::none;
                }
            }
            
            // read element dcmy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcmy")) {
                m_dcmy = boost::in_place();
                try {
                    m_dcmy->ReadCPACS(tixiHandle, xpath + "/dcmy");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcmy at xpath << " << xpath << ": " << e.what();
                    m_dcmy = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcmy at xpath << " << xpath << ": " << e.getError();
                    m_dcmy = boost::none;
                }
            }
            
            // read element dcmz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dcmz")) {
                m_dcmz = boost::in_place();
                try {
                    m_dcmz->ReadCPACS(tixiHandle, xpath + "/dcmz");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dcmz at xpath << " << xpath << ": " << e.what();
                    m_dcmz = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dcmz at xpath << " << xpath << ": " << e.getError();
                    m_dcmz = boost::none;
                }
            }
            
        }
        
        void CPACSControlSurfacePerformanceMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element controlSurfaceUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaceUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/controlSurfaceUID", m_controlSurfaceUID);
            
            // write element relDeflection
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relDeflection");
            m_relDeflection.WriteCPACS(tixiHandle, xpath + "/relDeflection");
            
            // write element dcfx
            if (m_dcfx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcfx");
                m_dcfx->WriteCPACS(tixiHandle, xpath + "/dcfx");
            }
            
            // write element dcfy
            if (m_dcfy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcfy");
                m_dcfy->WriteCPACS(tixiHandle, xpath + "/dcfy");
            }
            
            // write element dcfz
            if (m_dcfz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcfz");
                m_dcfz->WriteCPACS(tixiHandle, xpath + "/dcfz");
            }
            
            // write element dcmx
            if (m_dcmx) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcmx");
                m_dcmx->WriteCPACS(tixiHandle, xpath + "/dcmx");
            }
            
            // write element dcmy
            if (m_dcmy) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcmy");
                m_dcmy->WriteCPACS(tixiHandle, xpath + "/dcmy");
            }
            
            // write element dcmz
            if (m_dcmz) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dcmz");
                m_dcmz->WriteCPACS(tixiHandle, xpath + "/dcmz");
            }
            
        }
        
        const std::string& CPACSControlSurfacePerformanceMap::GetControlSurfaceUID() const
        {
            return m_controlSurfaceUID;
        }
        
        void CPACSControlSurfacePerformanceMap::SetControlSurfaceUID(const std::string& value)
        {
            m_controlSurfaceUID = value;
        }
        
        const CCPACSStringVector& CPACSControlSurfacePerformanceMap::GetRelDeflection() const
        {
            return m_relDeflection;
        }
        
        CCPACSStringVector& CPACSControlSurfacePerformanceMap::GetRelDeflection()
        {
            return m_relDeflection;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcfx() const
        {
            return static_cast<bool>(m_dcfx);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfx() const
        {
            return *m_dcfx;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfx()
        {
            return *m_dcfx;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcfy() const
        {
            return static_cast<bool>(m_dcfy);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfy() const
        {
            return *m_dcfy;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfy()
        {
            return *m_dcfy;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcfz() const
        {
            return static_cast<bool>(m_dcfz);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfz() const
        {
            return *m_dcfz;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcfz()
        {
            return *m_dcfz;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcmx() const
        {
            return static_cast<bool>(m_dcmx);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmx() const
        {
            return *m_dcmx;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmx()
        {
            return *m_dcmx;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcmy() const
        {
            return static_cast<bool>(m_dcmy);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmy() const
        {
            return *m_dcmy;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmy()
        {
            return *m_dcmy;
        }
        
        bool CPACSControlSurfacePerformanceMap::HasDcmz() const
        {
            return static_cast<bool>(m_dcmz);
        }
        
        const CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmz() const
        {
            return *m_dcmz;
        }
        
        CPACSStringArrayBase& CPACSControlSurfacePerformanceMap::GetDcmz()
        {
            return *m_dcmz;
        }
        
    }
}
