// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSDomeType.h"
#include "CPACSIsotensoidDome.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSIsotensoidDome::CPACSIsotensoidDome(CPACSDomeType* parent)
        : m_polarOpeningRadius(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSIsotensoidDome::~CPACSIsotensoidDome()
    {
    }

    const CPACSDomeType* CPACSIsotensoidDome::GetParent() const
    {
        return m_parent;
    }

    CPACSDomeType* CPACSIsotensoidDome::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSIsotensoidDome::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSIsotensoidDome::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSIsotensoidDome::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element polarOpeningRadius
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/polarOpeningRadius")) {
            m_polarOpeningRadius = tixi::TixiGetElement<double>(tixiHandle, xpath + "/polarOpeningRadius");
        }
        else {
            LOG(ERROR) << "Required element polarOpeningRadius is missing at xpath " << xpath;
        }

    }

    void CPACSIsotensoidDome::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element polarOpeningRadius
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/polarOpeningRadius");
        tixi::TixiSaveElement(tixiHandle, xpath + "/polarOpeningRadius", m_polarOpeningRadius);

    }

    const double& CPACSIsotensoidDome::GetPolarOpeningRadius() const
    {
        return m_polarOpeningRadius;
    }

    void CPACSIsotensoidDome::SetPolarOpeningRadius(const double& value)
    {
        m_polarOpeningRadius = value;
    }

} // namespace generated
} // namespace tigl
