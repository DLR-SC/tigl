// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWindowAssemblyPosition.h"

namespace tigl
{
    namespace generated
    {
        CPACSWindowAssemblyPosition::CPACSWindowAssemblyPosition(){}
        CPACSWindowAssemblyPosition::~CPACSWindowAssemblyPosition() {}
        
        void CPACSWindowAssemblyPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element windowElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/windowElementUID")) {
                m_windowElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/windowElementUID");
            }
            else {
                LOG(ERROR) << "Required element windowElementUID is missing";
            }
            
            // read element positionX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionX")) {
                m_positionX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionX");
            }
            else {
                LOG(ERROR) << "Required element positionX is missing";
            }
            
            // read element positionZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionZ")) {
                m_positionZ = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionZ");
            }
            else {
                LOG(ERROR) << "Required element positionZ is missing";
            }
            
            // read element angleX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleX")) {
                m_angleX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angleX");
            }
            else {
                LOG(ERROR) << "Required element angleX is missing";
            }
            
        }
        
        void CPACSWindowAssemblyPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element windowElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/windowElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/windowElementUID", m_windowElementUID);
            
            // write element positionX
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionX");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionX", m_positionX);
            
            // write element positionZ
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionZ");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionZ", m_positionZ);
            
            // write element angleX
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleX");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleX", m_angleX);
            
        }
        
        bool CPACSWindowAssemblyPosition::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSWindowAssemblyPosition::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSWindowAssemblyPosition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSWindowAssemblyPosition::GetWindowElementUID() const
        {
            return m_windowElementUID;
        }
        
        void CPACSWindowAssemblyPosition::SetWindowElementUID(const std::string& value)
        {
            m_windowElementUID = value;
        }
        
        const double& CPACSWindowAssemblyPosition::GetPositionX() const
        {
            return m_positionX;
        }
        
        void CPACSWindowAssemblyPosition::SetPositionX(const double& value)
        {
            m_positionX = value;
        }
        
        const double& CPACSWindowAssemblyPosition::GetPositionZ() const
        {
            return m_positionZ;
        }
        
        void CPACSWindowAssemblyPosition::SetPositionZ(const double& value)
        {
            m_positionZ = value;
        }
        
        const double& CPACSWindowAssemblyPosition::GetAngleX() const
        {
            return m_angleX;
        }
        
        void CPACSWindowAssemblyPosition::SetAngleX(const double& value)
        {
            m_angleX = value;
        }
        
    }
}
