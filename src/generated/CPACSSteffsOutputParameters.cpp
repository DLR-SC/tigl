// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSSteffsOutputParameters.h"

namespace tigl
{
    namespace generated
    {
        CPACSSteffsOutputParameters::CPACSSteffsOutputParameters(){}
        CPACSSteffsOutputParameters::~CPACSSteffsOutputParameters() {}
        
        void CPACSSteffsOutputParameters::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element printCalcValues
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/printCalcValues")) {
                m_printCalcValues = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/printCalcValues");
            }
            else {
                LOG(ERROR) << "Required element printCalcValues is missing";
            }
            
            // read element plotForces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotForces")) {
                m_plotForces = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotForces");
            }
            else {
                LOG(ERROR) << "Required element plotForces is missing";
            }
            
            // read element plotMoments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotMoments")) {
                m_plotMoments = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotMoments");
            }
            else {
                LOG(ERROR) << "Required element plotMoments is missing";
            }
            
            // read element plotSkinThickness3D
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotSkinThickness3D")) {
                m_plotSkinThickness3D = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotSkinThickness3D");
            }
            else {
                LOG(ERROR) << "Required element plotSkinThickness3D is missing";
            }
            
            // read element plotMaxSkinThickness
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotMaxSkinThickness")) {
                m_plotMaxSkinThickness = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotMaxSkinThickness");
            }
            else {
                LOG(ERROR) << "Required element plotMaxSkinThickness is missing";
            }
            
            // read element plotSkinThicknessAtCrossSectionCut
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotSkinThicknessAtCrossSectionCut")) {
                m_plotSkinThicknessAtCrossSectionCut = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotSkinThicknessAtCrossSectionCut");
            }
            else {
                LOG(ERROR) << "Required element plotSkinThicknessAtCrossSectionCut is missing";
            }
            
            // read element calcValidationStresses
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/calcValidationStresses")) {
                m_calcValidationStresses = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/calcValidationStresses");
            }
            else {
                LOG(ERROR) << "Required element calcValidationStresses is missing";
            }
            
            // read element calcRealStresses
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/calcRealStresses")) {
                m_calcRealStresses = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/calcRealStresses");
            }
            else {
                LOG(ERROR) << "Required element calcRealStresses is missing";
            }
            
            // read element plotDimensioningCriteria
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/plotDimensioningCriteria")) {
                m_plotDimensioningCriteria = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/plotDimensioningCriteria");
            }
            else {
                LOG(ERROR) << "Required element plotDimensioningCriteria is missing";
            }
            
            // read element createExcelOutput
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/createExcelOutput")) {
                m_createExcelOutput = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/createExcelOutput");
            }
            else {
                LOG(ERROR) << "Required element createExcelOutput is missing";
            }
            
            // read element createLatexOutput
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/createLatexOutput")) {
                m_createLatexOutput = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/createLatexOutput");
            }
            else {
                LOG(ERROR) << "Required element createLatexOutput is missing";
            }
            
            // read element createCpacsFile
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/createCpacsFile")) {
                m_createCpacsFile = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/createCpacsFile");
            }
            else {
                LOG(ERROR) << "Required element createCpacsFile is missing";
            }
            
            // read element updateConsideredLoadCases
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/updateConsideredLoadCases")) {
                m_updateConsideredLoadCases = tixihelper::TixiGetElement<bool>(tixiHandle, xpath + "/updateConsideredLoadCases");
            }
            else {
                LOG(ERROR) << "Required element updateConsideredLoadCases is missing";
            }
            
            // read element consideredLoadCasesRatingType
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/consideredLoadCasesRatingType")) {
                m_consideredLoadCasesRatingType = boost::in_place();
                try {
                    m_consideredLoadCasesRatingType->ReadCPACS(tixiHandle, xpath + "/consideredLoadCasesRatingType");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read consideredLoadCasesRatingType at xpath << " << xpath << ": " << e.what();
                    m_consideredLoadCasesRatingType = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read consideredLoadCasesRatingType at xpath << " << xpath << ": " << e.getError();
                    m_consideredLoadCasesRatingType = boost::none;
                }
            }
            
            // read element consideredLoadCasesRelativeThreshold
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/consideredLoadCasesRelativeThreshold")) {
                m_consideredLoadCasesRelativeThreshold = boost::in_place();
                try {
                    m_consideredLoadCasesRelativeThreshold->ReadCPACS(tixiHandle, xpath + "/consideredLoadCasesRelativeThreshold");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read consideredLoadCasesRelativeThreshold at xpath << " << xpath << ": " << e.what();
                    m_consideredLoadCasesRelativeThreshold = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read consideredLoadCasesRelativeThreshold at xpath << " << xpath << ": " << e.getError();
                    m_consideredLoadCasesRelativeThreshold = boost::none;
                }
            }
            
            // read element consideredLoadCasesNumberAllowed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/consideredLoadCasesNumberAllowed")) {
                m_consideredLoadCasesNumberAllowed = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/consideredLoadCasesNumberAllowed");
            }
            
        }
        
        void CPACSSteffsOutputParameters::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element printCalcValues
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/printCalcValues");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/printCalcValues", m_printCalcValues);
            
            // write element plotForces
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotForces");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotForces", m_plotForces);
            
            // write element plotMoments
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotMoments");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotMoments", m_plotMoments);
            
            // write element plotSkinThickness3D
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotSkinThickness3D");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotSkinThickness3D", m_plotSkinThickness3D);
            
            // write element plotMaxSkinThickness
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotMaxSkinThickness");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotMaxSkinThickness", m_plotMaxSkinThickness);
            
            // write element plotSkinThicknessAtCrossSectionCut
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotSkinThicknessAtCrossSectionCut");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotSkinThicknessAtCrossSectionCut", m_plotSkinThicknessAtCrossSectionCut);
            
            // write element calcValidationStresses
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/calcValidationStresses");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/calcValidationStresses", m_calcValidationStresses);
            
            // write element calcRealStresses
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/calcRealStresses");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/calcRealStresses", m_calcRealStresses);
            
            // write element plotDimensioningCriteria
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/plotDimensioningCriteria");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/plotDimensioningCriteria", m_plotDimensioningCriteria);
            
            // write element createExcelOutput
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/createExcelOutput");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/createExcelOutput", m_createExcelOutput);
            
            // write element createLatexOutput
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/createLatexOutput");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/createLatexOutput", m_createLatexOutput);
            
            // write element createCpacsFile
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/createCpacsFile");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/createCpacsFile", m_createCpacsFile);
            
            // write element updateConsideredLoadCases
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/updateConsideredLoadCases");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/updateConsideredLoadCases", m_updateConsideredLoadCases);
            
            // write element consideredLoadCasesRatingType
            if (m_consideredLoadCasesRatingType) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/consideredLoadCasesRatingType");
                m_consideredLoadCasesRatingType->WriteCPACS(tixiHandle, xpath + "/consideredLoadCasesRatingType");
            }
            
            // write element consideredLoadCasesRelativeThreshold
            if (m_consideredLoadCasesRelativeThreshold) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/consideredLoadCasesRelativeThreshold");
                m_consideredLoadCasesRelativeThreshold->WriteCPACS(tixiHandle, xpath + "/consideredLoadCasesRelativeThreshold");
            }
            
            // write element consideredLoadCasesNumberAllowed
            if (m_consideredLoadCasesNumberAllowed) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/consideredLoadCasesNumberAllowed");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/consideredLoadCasesNumberAllowed", *m_consideredLoadCasesNumberAllowed);
            }
            
        }
        
        const bool& CPACSSteffsOutputParameters::GetPrintCalcValues() const
        {
            return m_printCalcValues;
        }
        
        void CPACSSteffsOutputParameters::SetPrintCalcValues(const bool& value)
        {
            m_printCalcValues = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotForces() const
        {
            return m_plotForces;
        }
        
        void CPACSSteffsOutputParameters::SetPlotForces(const bool& value)
        {
            m_plotForces = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotMoments() const
        {
            return m_plotMoments;
        }
        
        void CPACSSteffsOutputParameters::SetPlotMoments(const bool& value)
        {
            m_plotMoments = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotSkinThickness3D() const
        {
            return m_plotSkinThickness3D;
        }
        
        void CPACSSteffsOutputParameters::SetPlotSkinThickness3D(const bool& value)
        {
            m_plotSkinThickness3D = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotMaxSkinThickness() const
        {
            return m_plotMaxSkinThickness;
        }
        
        void CPACSSteffsOutputParameters::SetPlotMaxSkinThickness(const bool& value)
        {
            m_plotMaxSkinThickness = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotSkinThicknessAtCrossSectionCut() const
        {
            return m_plotSkinThicknessAtCrossSectionCut;
        }
        
        void CPACSSteffsOutputParameters::SetPlotSkinThicknessAtCrossSectionCut(const bool& value)
        {
            m_plotSkinThicknessAtCrossSectionCut = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetCalcValidationStresses() const
        {
            return m_calcValidationStresses;
        }
        
        void CPACSSteffsOutputParameters::SetCalcValidationStresses(const bool& value)
        {
            m_calcValidationStresses = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetCalcRealStresses() const
        {
            return m_calcRealStresses;
        }
        
        void CPACSSteffsOutputParameters::SetCalcRealStresses(const bool& value)
        {
            m_calcRealStresses = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetPlotDimensioningCriteria() const
        {
            return m_plotDimensioningCriteria;
        }
        
        void CPACSSteffsOutputParameters::SetPlotDimensioningCriteria(const bool& value)
        {
            m_plotDimensioningCriteria = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetCreateExcelOutput() const
        {
            return m_createExcelOutput;
        }
        
        void CPACSSteffsOutputParameters::SetCreateExcelOutput(const bool& value)
        {
            m_createExcelOutput = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetCreateLatexOutput() const
        {
            return m_createLatexOutput;
        }
        
        void CPACSSteffsOutputParameters::SetCreateLatexOutput(const bool& value)
        {
            m_createLatexOutput = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetCreateCpacsFile() const
        {
            return m_createCpacsFile;
        }
        
        void CPACSSteffsOutputParameters::SetCreateCpacsFile(const bool& value)
        {
            m_createCpacsFile = value;
        }
        
        const bool& CPACSSteffsOutputParameters::GetUpdateConsideredLoadCases() const
        {
            return m_updateConsideredLoadCases;
        }
        
        void CPACSSteffsOutputParameters::SetUpdateConsideredLoadCases(const bool& value)
        {
            m_updateConsideredLoadCases = value;
        }
        
        bool CPACSSteffsOutputParameters::HasConsideredLoadCasesRatingType() const
        {
            return static_cast<bool>(m_consideredLoadCasesRatingType);
        }
        
        const CPACSSteffsOutputParameters_consideredLoadCasesRatingType& CPACSSteffsOutputParameters::GetConsideredLoadCasesRatingType() const
        {
            return *m_consideredLoadCasesRatingType;
        }
        
        CPACSSteffsOutputParameters_consideredLoadCasesRatingType& CPACSSteffsOutputParameters::GetConsideredLoadCasesRatingType()
        {
            return *m_consideredLoadCasesRatingType;
        }
        
        bool CPACSSteffsOutputParameters::HasConsideredLoadCasesRelativeThreshold() const
        {
            return static_cast<bool>(m_consideredLoadCasesRelativeThreshold);
        }
        
        const CPACSSteffsOutputParameters_consideredLoadCasesRelativeThreshold& CPACSSteffsOutputParameters::GetConsideredLoadCasesRelativeThreshold() const
        {
            return *m_consideredLoadCasesRelativeThreshold;
        }
        
        CPACSSteffsOutputParameters_consideredLoadCasesRelativeThreshold& CPACSSteffsOutputParameters::GetConsideredLoadCasesRelativeThreshold()
        {
            return *m_consideredLoadCasesRelativeThreshold;
        }
        
        bool CPACSSteffsOutputParameters::HasConsideredLoadCasesNumberAllowed() const
        {
            return static_cast<bool>(m_consideredLoadCasesNumberAllowed);
        }
        
        const int& CPACSSteffsOutputParameters::GetConsideredLoadCasesNumberAllowed() const
        {
            return *m_consideredLoadCasesNumberAllowed;
        }
        
        void CPACSSteffsOutputParameters::SetConsideredLoadCasesNumberAllowed(const int& value)
        {
            m_consideredLoadCasesNumberAllowed = value;
        }
        
    }
}
