// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSCurvePoint.h>
#include <CCPACSEtaXsiPoint.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSWingRibsDefinition;

namespace generated
{
    // This class is used in:
    // CPACSWingRibsDefinition

    /// @brief Explicit positioning of a wing rib
    /// 
    /// Use this type for an explicit positioning of a rib. As opposed to
    /// ribsPositioning, this defines a single rib connecting a specified start
    /// and end point.
    /// 
    class CPACSWingRibExplicitPositioning : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSWingRibExplicitPositioning(CCPACSWingRibsDefinition* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSWingRibExplicitPositioning();

        TIGL_EXPORT CCPACSWingRibsDefinition* GetParent();

        TIGL_EXPORT const CCPACSWingRibsDefinition* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<CCPACSEtaXsiPoint>& GetStartEtaXsiPoint_choice1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEtaXsiPoint>& GetStartEtaXsiPoint_choice1();

        TIGL_EXPORT virtual const boost::optional<CCPACSCurvePoint>& GetStartCurvePoint_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSCurvePoint>& GetStartCurvePoint_choice2();

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStartSparPositionUID_choice3() const;
        TIGL_EXPORT virtual void SetStartSparPositionUID_choice3(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSEtaXsiPoint>& GetEndEtaXsiPoint_choice1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEtaXsiPoint>& GetEndEtaXsiPoint_choice1();

        TIGL_EXPORT virtual const boost::optional<CCPACSCurvePoint>& GetEndCurvePoint_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSCurvePoint>& GetEndCurvePoint_choice2();

        TIGL_EXPORT virtual const boost::optional<std::string>& GetEndSparPositionUID_choice3() const;
        TIGL_EXPORT virtual void SetEndSparPositionUID_choice3(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetRibStart() const;
        TIGL_EXPORT virtual void SetRibStart(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetRibEnd() const;
        TIGL_EXPORT virtual void SetRibEnd(const std::string& value);

        TIGL_EXPORT virtual CCPACSEtaXsiPoint& GetStartEtaXsiPoint_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveStartEtaXsiPoint_choice1();

        TIGL_EXPORT virtual CCPACSCurvePoint& GetStartCurvePoint_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveStartCurvePoint_choice2();

        TIGL_EXPORT virtual CCPACSEtaXsiPoint& GetEndEtaXsiPoint_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEndEtaXsiPoint_choice1();

        TIGL_EXPORT virtual CCPACSCurvePoint& GetEndCurvePoint_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEndCurvePoint_choice2();

    protected:
        CCPACSWingRibsDefinition* m_parent;

        CTiglUIDManager* m_uidMgr;

        /// Defines the start of the rib defined in eta-xsi coordinates of a reference plane
        boost::optional<CCPACSEtaXsiPoint> m_startEtaXsiPoint_choice1;

        /// Defines the start of the rib defined by a point on a reference curve
        /// such as a spar, but not an explicit sparPosition
        boost::optional<CCPACSCurvePoint>  m_startCurvePoint_choice2;

        /// Defines the location of the beginning of the rib using a specific sparPosition.
        boost::optional<std::string>       m_startSparPositionUID_choice3;

        /// Defines the end of the rib defined in eta-xsi coordinates of a reference plane
        boost::optional<CCPACSEtaXsiPoint> m_endEtaXsiPoint_choice1;

        /// Defines the end of the rib given by a point on a reference curve
        /// such as a spar, but not an explicit sparPosition
        boost::optional<CCPACSCurvePoint>  m_endCurvePoint_choice2;

        /// Defines the location of the end of the rib using a specific sparPosition.
        boost::optional<std::string>       m_endSparPositionUID_choice3;

        /// Defines the forward beginning of the ribs. It can either be a
        /// sparUID or "trailingEdge" or "leadingEdge".
        std::string                        m_ribStart;

        /// RibEnd defines the backward ending of the ribs. It can either be a
        /// sparUID or "trailingEdge" or "leadingEdge".
        std::string                        m_ribEnd;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSWingRibExplicitPositioning(const CPACSWingRibExplicitPositioning&) = delete;
        CPACSWingRibExplicitPositioning& operator=(const CPACSWingRibExplicitPositioning&) = delete;

        CPACSWingRibExplicitPositioning(CPACSWingRibExplicitPositioning&&) = delete;
        CPACSWingRibExplicitPositioning& operator=(CPACSWingRibExplicitPositioning&&) = delete;
    };
} // namespace generated

// CPACSWingRibExplicitPositioning is customized, use type CCPACSWingRibExplicitPositioning directly
} // namespace tigl
