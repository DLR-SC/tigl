// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <vector>
#include "CPACSGlobalBeamProperties.h"
#include "CPACSProfileBasedStructuralElement_standardProfileType.h"
#include "CPACSTransformation2D.h"
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSMaterialDefinitionForProfileBased;
    class CPACSMaterialDefinitionForProfileBasedPoint;
    class CPACSProfileBasedStructuralElements;

    // This class is used in:
    // CPACSProfileBasedStructuralElements

    /// @brief Structural elements based on profiles
    /// 
    /// Short description
    /// The ProfileBasedStructuralElement type containins the
    /// data of a structural element, that are based on 2-dimensional profiles.
    /// There are three approaches to model profile based structural elements: by specifying global beam properties by referencing a structuralProfile2D element by choosing one of the prescribed standard profiles 
    /// 1. Global beam properties
    /// In the section globalBeamProperties the properties
    /// of the structural profile in an equivalent beam representation
    /// are defined.
    /// 2. Structural 2D profile
    /// The structuralProfileUID element refers to the uID of the structuralProfile2D element.
    /// As described in the corresponding documentation, this profile is defined by several points in the x-y-space.
    /// Two points always form a sheet.
    /// The properties of each sheet are defined in the sheetProperties element.
    /// The orthotropy direction of composite materials equals the sheets' x-axis.
    /// The orthotropy direction angle equals a positive rotation around the sheets' z-axis as indicated in the picture below (part 3), which shows an example of a wing stringer.:
    /// @see stringer2
    /// 3. Standard structural 2D profile
    /// Instead of referencing a structuralProfile2D element, it is also possible to select a predefined standard profile.
    /// These profiles are listed in the figure below.
    /// Under sheetProperties , only the standardProfileSheetID (equals S1, S2, ...) must now be specified along with a corresponding length.
    /// @see standard_profile
    /// 
    class CPACSProfileBasedStructuralElement : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSProfileBasedStructuralElement(CPACSProfileBasedStructuralElements* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSProfileBasedStructuralElement();

        TIGL_EXPORT CPACSProfileBasedStructuralElements* GetParent();

        TIGL_EXPORT const CPACSProfileBasedStructuralElements* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
        TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSGlobalBeamProperties>& GetGlobalBeamProperties_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSGlobalBeamProperties>& GetGlobalBeamProperties_choice1();

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice2() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice2();

        TIGL_EXPORT virtual const boost::optional<CPACSProfileBasedStructuralElement_standardProfileType>& GetStandardProfileType_choice2_1() const;
        TIGL_EXPORT virtual void SetStandardProfileType_choice2_1(const boost::optional<CPACSProfileBasedStructuralElement_standardProfileType>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralProfileUID_choice2_2() const;
        TIGL_EXPORT virtual void SetStructuralProfileUID_choice2_2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>>& GetPointProperties_choice2_2() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>>& GetPointProperties_choice2_2();

        TIGL_EXPORT virtual const boost::optional<std::string>& GetReferencePointUID_choice2_2() const;
        TIGL_EXPORT virtual void SetReferencePointUID_choice2_2(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<CPACSTransformation2D>& GetTransformation() const;
        TIGL_EXPORT virtual boost::optional<CPACSTransformation2D>& GetTransformation();

        TIGL_EXPORT virtual CPACSGlobalBeamProperties& GetGlobalBeamProperties_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveGlobalBeamProperties_choice1();

        TIGL_EXPORT virtual CPACSMaterialDefinitionForProfileBased& AddSheetProperties_choice2();
        TIGL_EXPORT virtual void RemoveSheetProperties_choice2(CPACSMaterialDefinitionForProfileBased& ref);

        TIGL_EXPORT virtual CPACSMaterialDefinitionForProfileBasedPoint& AddPointProperties_choice2_2();
        TIGL_EXPORT virtual void RemovePointProperties_choice2_2(CPACSMaterialDefinitionForProfileBasedPoint& ref);

        TIGL_EXPORT virtual CPACSTransformation2D& GetTransformation(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveTransformation();

    protected:
        CPACSProfileBasedStructuralElements* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                                                               m_uID;

        /// Name of the profile based structural element
        boost::optional<std::string>                                              m_name;

        /// Description of the profile based structural
        /// element
        boost::optional<std::string>                                              m_description;

        boost::optional<CPACSGlobalBeamProperties>                                m_globalBeamProperties_choice1;

        std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBased>>      m_sheetProperties_choice2;

        /// Standard Profile Type, see picture below for
        /// further information.
        boost::optional<CPACSProfileBasedStructuralElement_standardProfileType>   m_standardProfileType_choice2_1;

        /// Reference to the structural profile profile
        /// uID
        boost::optional<std::string>                                              m_structuralProfileUID_choice2_2;

        std::vector<std::unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>> m_pointProperties_choice2_2;

        /// Reference point in structural profile
        /// definition for structural element definition
        boost::optional<std::string>                                              m_referencePointUID_choice2_2;

        boost::optional<CPACSTransformation2D>                                    m_transformation;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSProfileBasedStructuralElement(const CPACSProfileBasedStructuralElement&) = delete;
        CPACSProfileBasedStructuralElement& operator=(const CPACSProfileBasedStructuralElement&) = delete;

        CPACSProfileBasedStructuralElement(CPACSProfileBasedStructuralElement&&) = delete;
        CPACSProfileBasedStructuralElement& operator=(CPACSProfileBasedStructuralElement&&) = delete;
    };
} // namespace generated

// CPACSProfileBasedStructuralElement is customized, use type CCPACSProfileBasedStructuralElement directly

// Aliases in tigl namespace
using CCPACSMaterialDefinitionForProfileBased = generated::CPACSMaterialDefinitionForProfileBased;
using CCPACSMaterialDefinitionForProfileBasedPoint = generated::CPACSMaterialDefinitionForProfileBasedPoint;
using CCPACSProfileBasedStructuralElements = generated::CPACSProfileBasedStructuralElements;
} // namespace tigl
