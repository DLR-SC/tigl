// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <vector>
#include "UniquePtr.h"
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSTransformation2D.h"
#include "CPACSGlobalBeamProperties.h"
#include "CPACSProfileBasedStructuralElement_standardProfileType.h"

namespace tigl
{
    namespace generated
    {
        class CPACSMaterialDefinitionForProfileBased;
        class CPACSMaterialDefinitionForProfileBasedPoint;
        class CPACSMaterialDefinitionForProfileBased;
        
        // This class is used in:
        // CPACSProfileBasedStructuralElements
        
        // generated from /xsd:schema/xsd:complexType[704]
        class CPACSProfileBasedStructuralElement
        {
        public:
            TIGL_EXPORT CPACSProfileBasedStructuralElement();
            TIGL_EXPORT virtual ~CPACSProfileBasedStructuralElement();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT bool HasTransformation() const;
            TIGL_EXPORT const CPACSTransformation2D& GetTransformation() const;
            TIGL_EXPORT CPACSTransformation2D& GetTransformation();
            
            TIGL_EXPORT bool HasGlobalBeamProperties() const;
            TIGL_EXPORT const CPACSGlobalBeamProperties& GetGlobalBeamProperties() const;
            TIGL_EXPORT CPACSGlobalBeamProperties& GetGlobalBeamProperties();
            
            TIGL_EXPORT bool HasStructuralProfileUID_choice1() const;
            TIGL_EXPORT const std::string& GetStructuralProfileUID_choice1() const;
            TIGL_EXPORT void SetStructuralProfileUID_choice1(const std::string& value);
            
            TIGL_EXPORT const std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice1() const;
            TIGL_EXPORT std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice1();
            
            TIGL_EXPORT const std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>>& GetPointProperties_choice1() const;
            TIGL_EXPORT std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>>& GetPointProperties_choice1();
            
            TIGL_EXPORT bool HasReferencePointUID_choice1() const;
            TIGL_EXPORT const std::string& GetReferencePointUID_choice1() const;
            TIGL_EXPORT void SetReferencePointUID_choice1(const std::string& value);
            
            TIGL_EXPORT bool HasStandardProfileType_choice2() const;
            TIGL_EXPORT const CPACSProfileBasedStructuralElement_standardProfileType& GetStandardProfileType_choice2() const;
            TIGL_EXPORT CPACSProfileBasedStructuralElement_standardProfileType& GetStandardProfileType_choice2();
            
            TIGL_EXPORT const std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice2() const;
            TIGL_EXPORT std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>& GetSheetProperties_choice2();
            
        protected:
            std::string                                                             m_uID;
            boost::optional<std::string>                                            m_name;
            boost::optional<std::string>                                            m_description;
            boost::optional<CPACSTransformation2D>                                  m_transformation;
            boost::optional<CPACSGlobalBeamProperties>                              m_globalBeamProperties;
            boost::optional<std::string>                                            m_structuralProfileUID_choice1;
            std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>         m_sheetProperties_choice1;
            std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBasedPoint>>    m_pointProperties_choice1;
            boost::optional<std::string>                                            m_referencePointUID_choice1;
            boost::optional<CPACSProfileBasedStructuralElement_standardProfileType> m_standardProfileType_choice2;
            std::vector<unique_ptr<CPACSMaterialDefinitionForProfileBased>>         m_sheetProperties_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSProfileBasedStructuralElement(const CPACSProfileBasedStructuralElement&) = delete;
            CPACSProfileBasedStructuralElement& operator=(const CPACSProfileBasedStructuralElement&) = delete;
            
            CPACSProfileBasedStructuralElement(CPACSProfileBasedStructuralElement&&) = delete;
            CPACSProfileBasedStructuralElement& operator=(CPACSProfileBasedStructuralElement&&) = delete;
            #else
            CPACSProfileBasedStructuralElement(const CPACSProfileBasedStructuralElement&);
            CPACSProfileBasedStructuralElement& operator=(const CPACSProfileBasedStructuralElement&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSProfileBasedStructuralElement = generated::CPACSProfileBasedStructuralElement;
    #else
    typedef generated::CPACSProfileBasedStructuralElement CCPACSProfileBasedStructuralElement;
    #endif
    
    using generated::CPACSMaterialDefinitionForProfileBased;
    using generated::CPACSMaterialDefinitionForProfileBasedPoint;
    using generated::CPACSMaterialDefinitionForProfileBased;
}
