// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSRotorcraftMassBreakdown.h"

namespace tigl
{
    namespace generated
    {
        CPACSRotorcraftMassBreakdown::CPACSRotorcraftMassBreakdown(){}
        CPACSRotorcraftMassBreakdown::~CPACSRotorcraftMassBreakdown() {}
        
        void CPACSRotorcraftMassBreakdown::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element designMasses
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/designMasses")) {
                m_designMasses.ReadCPACS(tixiHandle, xpath + "/designMasses");
            }
            else {
                LOG(ERROR) << "Required element designMasses is missing";
            }
            
            // read element payload
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/payload")) {
                m_payload.ReadCPACS(tixiHandle, xpath + "/payload");
            }
            else {
                LOG(ERROR) << "Required element payload is missing";
            }
            
            // read element fuel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fuel")) {
                m_fuel.ReadCPACS(tixiHandle, xpath + "/fuel");
            }
            else {
                LOG(ERROR) << "Required element fuel is missing";
            }
            
            // read element mOEM
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mOEM")) {
                m_mOEM.ReadCPACS(tixiHandle, xpath + "/mOEM");
            }
            else {
                LOG(ERROR) << "Required element mOEM is missing";
            }
            
        }
        
        void CPACSRotorcraftMassBreakdown::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element designMasses
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/designMasses");
            m_designMasses.WriteCPACS(tixiHandle, xpath + "/designMasses");
            
            // write element payload
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/payload");
            m_payload.WriteCPACS(tixiHandle, xpath + "/payload");
            
            // write element fuel
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fuel");
            m_fuel.WriteCPACS(tixiHandle, xpath + "/fuel");
            
            // write element mOEM
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mOEM");
            m_mOEM.WriteCPACS(tixiHandle, xpath + "/mOEM");
            
        }
        
        const CPACSDesignMasses& CPACSRotorcraftMassBreakdown::GetDesignMasses() const
        {
            return m_designMasses;
        }
        
        CPACSDesignMasses& CPACSRotorcraftMassBreakdown::GetDesignMasses()
        {
            return m_designMasses;
        }
        
        const CPACSMPayload& CPACSRotorcraftMassBreakdown::GetPayload() const
        {
            return m_payload;
        }
        
        CPACSMPayload& CPACSRotorcraftMassBreakdown::GetPayload()
        {
            return m_payload;
        }
        
        const CPACSMFuel& CPACSRotorcraftMassBreakdown::GetFuel() const
        {
            return m_fuel;
        }
        
        CPACSMFuel& CPACSRotorcraftMassBreakdown::GetFuel()
        {
            return m_fuel;
        }
        
        const CPACSRotorcraftMassOEM& CPACSRotorcraftMassBreakdown::GetMOEM() const
        {
            return m_mOEM;
        }
        
        CPACSRotorcraftMassOEM& CPACSRotorcraftMassBreakdown::GetMOEM()
        {
            return m_mOEM;
        }
        
    }
}
