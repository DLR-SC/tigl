// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSEngineNacelle.h"
#include "CPACSNacelleCenterCowl.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSNacelleCenterCowl::CPACSNacelleCenterCowl(CPACSEngineNacelle* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_xOffset(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSNacelleCenterCowl::~CPACSNacelleCenterCowl()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_curveUID.empty()) m_uidMgr->TryUnregisterReference(m_curveUID, *this);
        }
    }

    const CPACSEngineNacelle* CPACSNacelleCenterCowl::GetParent() const
    {
        return m_parent;
    }

    CPACSEngineNacelle* CPACSNacelleCenterCowl::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSNacelleCenterCowl::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSNacelleCenterCowl::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSNacelleCenterCowl::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSNacelleCenterCowl::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSNacelleCenterCowl::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element xOffset
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/xOffset")) {
            m_xOffset = tixi::TixiGetElement<double>(tixiHandle, xpath + "/xOffset");
        }
        else {
            LOG(ERROR) << "Required element xOffset is missing at xpath " << xpath;
        }

        // read element curveUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/curveUID")) {
            m_curveUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/curveUID");
            if (m_curveUID.empty()) {
                LOG(WARNING) << "Required element curveUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_curveUID.empty()) m_uidMgr->RegisterReference(m_curveUID, *this);
        }
        else {
            LOG(ERROR) << "Required element curveUID is missing at xpath " << xpath;
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSNacelleCenterCowl::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element xOffset
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xOffset");
        tixi::TixiSaveElement(tixiHandle, xpath + "/xOffset", m_xOffset);

        // write element curveUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/curveUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/curveUID", m_curveUID);

    }

    const std::string& CPACSNacelleCenterCowl::GetUID() const
    {
        return m_uID;
    }

    void CPACSNacelleCenterCowl::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSNacelleCenterCowl::GetXOffset() const
    {
        return m_xOffset;
    }

    void CPACSNacelleCenterCowl::SetXOffset(const double& value)
    {
        m_xOffset = value;
    }

    const std::string& CPACSNacelleCenterCowl::GetCurveUID() const
    {
        return m_curveUID;
    }

    void CPACSNacelleCenterCowl::SetCurveUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_curveUID.empty()) m_uidMgr->TryUnregisterReference(m_curveUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_curveUID = value;
    }

    const CTiglUIDObject* CPACSNacelleCenterCowl::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSNacelleCenterCowl::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_curveUID == oldUid) {
            m_curveUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
