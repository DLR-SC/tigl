// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSFuselageSections.h>
#include <CCPACSFuselageSegments.h>
#include <string>
#include <TiglSymmetryAxis.h>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSElementGeometry;
    class CPACSElementGeometryAddtionalPart;

    // This class is used in:
    // CPACSElementGeometry
    // CPACSElementGeometryAddtionalPart

    /// @brief ...
    /// 
    /// 
    class CPACSMultiSegmentShape : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSMultiSegmentShape(CPACSElementGeometry* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSMultiSegmentShape(CPACSElementGeometryAddtionalPart* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSMultiSegmentShape();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSMultiSegmentShape");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSMultiSegmentShape");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<TiglSymmetryAxis>& GetSymmetry() const;
        TIGL_EXPORT virtual void SetSymmetry(const boost::optional<TiglSymmetryAxis>& value);

        TIGL_EXPORT virtual const CCPACSFuselageSections& GetSections() const;
        TIGL_EXPORT virtual CCPACSFuselageSections& GetSections();

        TIGL_EXPORT virtual const CCPACSFuselageSegments& GetSegments() const;
        TIGL_EXPORT virtual CCPACSFuselageSegments& GetSegments();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                       m_uID;
        boost::optional<TiglSymmetryAxis> m_symmetry;
        CCPACSFuselageSections            m_sections;
        CCPACSFuselageSegments            m_segments;

    private:
        CPACSMultiSegmentShape(const CPACSMultiSegmentShape&) = delete;
        CPACSMultiSegmentShape& operator=(const CPACSMultiSegmentShape&) = delete;

        CPACSMultiSegmentShape(CPACSMultiSegmentShape&&) = delete;
        CPACSMultiSegmentShape& operator=(CPACSMultiSegmentShape&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSMultiSegmentShape = generated::CPACSMultiSegmentShape;
using CCPACSElementGeometry = generated::CPACSElementGeometry;
using CCPACSElementGeometryAddtionalPart = generated::CPACSElementGeometryAddtionalPart;
} // namespace tigl
