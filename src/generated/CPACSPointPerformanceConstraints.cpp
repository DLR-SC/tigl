// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSPointPerformanceConstraints.h"
#include "CPACSPointPerformanceDefinition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSPointPerformanceConstraints::CPACSPointPerformanceConstraints(CPACSPointPerformanceDefinition* parent)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSPointPerformanceConstraints::~CPACSPointPerformanceConstraints()
    {
    }

    const CPACSPointPerformanceDefinition* CPACSPointPerformanceConstraints::GetParent() const
    {
        return m_parent;
    }

    CPACSPointPerformanceDefinition* CPACSPointPerformanceConstraints::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSPointPerformanceConstraints::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSPointPerformanceConstraints::GetNextUIDParent()
    {
        return m_parent;
    }

    void CPACSPointPerformanceConstraints::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element calibratedAirSpeed
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/calibratedAirSpeed")) {
            m_calibratedAirSpeed = boost::in_place(this);
            try {
                m_calibratedAirSpeed->ReadCPACS(tixiHandle, xpath + "/calibratedAirSpeed");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read calibratedAirSpeed at xpath " << xpath << ": " << e.what();
                m_calibratedAirSpeed = boost::none;
            }
        }

        // read element machNumber
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
            m_machNumber = boost::in_place(this);
            try {
                m_machNumber->ReadCPACS(tixiHandle, xpath + "/machNumber");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read machNumber at xpath " << xpath << ": " << e.what();
                m_machNumber = boost::none;
            }
        }

        // read element climbAngle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/climbAngle")) {
            m_climbAngle = boost::in_place(this);
            try {
                m_climbAngle->ReadCPACS(tixiHandle, xpath + "/climbAngle");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read climbAngle at xpath " << xpath << ": " << e.what();
                m_climbAngle = boost::none;
            }
        }

        // read element rateOfClimb
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rateOfClimb")) {
            m_rateOfClimb = boost::in_place(this);
            try {
                m_rateOfClimb->ReadCPACS(tixiHandle, xpath + "/rateOfClimb");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read rateOfClimb at xpath " << xpath << ": " << e.what();
                m_rateOfClimb = boost::none;
            }
        }

        // read element rateOfTurn
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/rateOfTurn")) {
            m_rateOfTurn = boost::in_place(this);
            try {
                m_rateOfTurn->ReadCPACS(tixiHandle, xpath + "/rateOfTurn");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read rateOfTurn at xpath " << xpath << ": " << e.what();
                m_rateOfTurn = boost::none;
            }
        }

        // read element thrustSetting
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/thrustSetting")) {
            m_thrustSetting = boost::in_place(this);
            try {
                m_thrustSetting->ReadCPACS(tixiHandle, xpath + "/thrustSetting");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read thrustSetting at xpath " << xpath << ": " << e.what();
                m_thrustSetting = boost::none;
            }
        }

        // read element acceleration
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/acceleration")) {
            m_acceleration = boost::in_place(this);
            try {
                m_acceleration->ReadCPACS(tixiHandle, xpath + "/acceleration");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read acceleration at xpath " << xpath << ": " << e.what();
                m_acceleration = boost::none;
            }
        }

        // read element duration
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/duration")) {
            m_duration = boost::in_place(this);
            try {
                m_duration->ReadCPACS(tixiHandle, xpath + "/duration");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read duration at xpath " << xpath << ": " << e.what();
                m_duration = boost::none;
            }
        }

        // read element angleOfAttack
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
            m_angleOfAttack = boost::in_place(this);
            try {
                m_angleOfAttack->ReadCPACS(tixiHandle, xpath + "/angleOfAttack");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read angleOfAttack at xpath " << xpath << ": " << e.what();
                m_angleOfAttack = boost::none;
            }
        }

        // read element altitude
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
            m_altitude = boost::in_place(this);
            try {
                m_altitude->ReadCPACS(tixiHandle, xpath + "/altitude");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read altitude at xpath " << xpath << ": " << e.what();
                m_altitude = boost::none;
            }
        }

    }

    void CPACSPointPerformanceConstraints::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element calibratedAirSpeed
        if (m_calibratedAirSpeed) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/calibratedAirSpeed");
            m_calibratedAirSpeed->WriteCPACS(tixiHandle, xpath + "/calibratedAirSpeed");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/calibratedAirSpeed")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/calibratedAirSpeed");
            }
        }

        // write element machNumber
        if (m_machNumber) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/machNumber");
            m_machNumber->WriteCPACS(tixiHandle, xpath + "/machNumber");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/machNumber");
            }
        }

        // write element climbAngle
        if (m_climbAngle) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/climbAngle");
            m_climbAngle->WriteCPACS(tixiHandle, xpath + "/climbAngle");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/climbAngle")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/climbAngle");
            }
        }

        // write element rateOfClimb
        if (m_rateOfClimb) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rateOfClimb");
            m_rateOfClimb->WriteCPACS(tixiHandle, xpath + "/rateOfClimb");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rateOfClimb")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rateOfClimb");
            }
        }

        // write element rateOfTurn
        if (m_rateOfTurn) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/rateOfTurn");
            m_rateOfTurn->WriteCPACS(tixiHandle, xpath + "/rateOfTurn");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/rateOfTurn")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/rateOfTurn");
            }
        }

        // write element thrustSetting
        if (m_thrustSetting) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/thrustSetting");
            m_thrustSetting->WriteCPACS(tixiHandle, xpath + "/thrustSetting");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/thrustSetting")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/thrustSetting");
            }
        }

        // write element acceleration
        if (m_acceleration) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/acceleration");
            m_acceleration->WriteCPACS(tixiHandle, xpath + "/acceleration");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/acceleration")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/acceleration");
            }
        }

        // write element duration
        if (m_duration) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/duration");
            m_duration->WriteCPACS(tixiHandle, xpath + "/duration");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/duration")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/duration");
            }
        }

        // write element angleOfAttack
        if (m_angleOfAttack) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfAttack");
            m_angleOfAttack->WriteCPACS(tixiHandle, xpath + "/angleOfAttack");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/angleOfAttack");
            }
        }

        // write element altitude
        if (m_altitude) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/altitude");
            m_altitude->WriteCPACS(tixiHandle, xpath + "/altitude");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/altitude")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/altitude");
            }
        }

    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetCalibratedAirSpeed() const
    {
        return m_calibratedAirSpeed;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetCalibratedAirSpeed()
    {
        return m_calibratedAirSpeed;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetMachNumber() const
    {
        return m_machNumber;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetMachNumber()
    {
        return m_machNumber;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetClimbAngle() const
    {
        return m_climbAngle;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetClimbAngle()
    {
        return m_climbAngle;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetRateOfClimb() const
    {
        return m_rateOfClimb;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetRateOfClimb()
    {
        return m_rateOfClimb;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetRateOfTurn() const
    {
        return m_rateOfTurn;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetRateOfTurn()
    {
        return m_rateOfTurn;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetThrustSetting() const
    {
        return m_thrustSetting;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetThrustSetting()
    {
        return m_thrustSetting;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAcceleration() const
    {
        return m_acceleration;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAcceleration()
    {
        return m_acceleration;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetDuration() const
    {
        return m_duration;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetDuration()
    {
        return m_duration;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAngleOfAttack() const
    {
        return m_angleOfAttack;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAngleOfAttack()
    {
        return m_angleOfAttack;
    }

    const boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAltitude() const
    {
        return m_altitude;
    }

    boost::optional<CPACSDoubleConstraintBase>& CPACSPointPerformanceConstraints::GetAltitude()
    {
        return m_altitude;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetCalibratedAirSpeed(CreateIfNotExistsTag)
    {
        if (!m_calibratedAirSpeed)
            m_calibratedAirSpeed = boost::in_place(this);
        return *m_calibratedAirSpeed;
    }

    void CPACSPointPerformanceConstraints::RemoveCalibratedAirSpeed()
    {
        m_calibratedAirSpeed = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetMachNumber(CreateIfNotExistsTag)
    {
        if (!m_machNumber)
            m_machNumber = boost::in_place(this);
        return *m_machNumber;
    }

    void CPACSPointPerformanceConstraints::RemoveMachNumber()
    {
        m_machNumber = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetClimbAngle(CreateIfNotExistsTag)
    {
        if (!m_climbAngle)
            m_climbAngle = boost::in_place(this);
        return *m_climbAngle;
    }

    void CPACSPointPerformanceConstraints::RemoveClimbAngle()
    {
        m_climbAngle = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetRateOfClimb(CreateIfNotExistsTag)
    {
        if (!m_rateOfClimb)
            m_rateOfClimb = boost::in_place(this);
        return *m_rateOfClimb;
    }

    void CPACSPointPerformanceConstraints::RemoveRateOfClimb()
    {
        m_rateOfClimb = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetRateOfTurn(CreateIfNotExistsTag)
    {
        if (!m_rateOfTurn)
            m_rateOfTurn = boost::in_place(this);
        return *m_rateOfTurn;
    }

    void CPACSPointPerformanceConstraints::RemoveRateOfTurn()
    {
        m_rateOfTurn = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetThrustSetting(CreateIfNotExistsTag)
    {
        if (!m_thrustSetting)
            m_thrustSetting = boost::in_place(this);
        return *m_thrustSetting;
    }

    void CPACSPointPerformanceConstraints::RemoveThrustSetting()
    {
        m_thrustSetting = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetAcceleration(CreateIfNotExistsTag)
    {
        if (!m_acceleration)
            m_acceleration = boost::in_place(this);
        return *m_acceleration;
    }

    void CPACSPointPerformanceConstraints::RemoveAcceleration()
    {
        m_acceleration = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetDuration(CreateIfNotExistsTag)
    {
        if (!m_duration)
            m_duration = boost::in_place(this);
        return *m_duration;
    }

    void CPACSPointPerformanceConstraints::RemoveDuration()
    {
        m_duration = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetAngleOfAttack(CreateIfNotExistsTag)
    {
        if (!m_angleOfAttack)
            m_angleOfAttack = boost::in_place(this);
        return *m_angleOfAttack;
    }

    void CPACSPointPerformanceConstraints::RemoveAngleOfAttack()
    {
        m_angleOfAttack = boost::none;
    }

    CPACSDoubleConstraintBase& CPACSPointPerformanceConstraints::GetAltitude(CreateIfNotExistsTag)
    {
        if (!m_altitude)
            m_altitude = boost::in_place(this);
        return *m_altitude;
    }

    void CPACSPointPerformanceConstraints::RemoveAltitude()
    {
        m_altitude = boost::none;
    }

} // namespace generated
} // namespace tigl
