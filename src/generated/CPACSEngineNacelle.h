// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSNacelleCenterCowl.h>
#include <CCPACSNacelleCowl.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSEngine;

    // This class is used in:
    // CPACSEngine

    // generated from /xsd:schema/xsd:complexType[311]
    /// @brief Definition of the engine nacelle type.
    /// 
    /// The engine nacelle is currently located together with
    /// the engine. It gives a simple description of the outer shell of
    /// the engine. All values are defined according to the base area,
    /// center point of the fan(i.e. negative values can occur in the
    /// definition) In most cases there will be a bypass engine. For
    /// non-bypass or mixed engines ignore the bypass nozzle. For further
    /// information on the geometric setup, please refer to the picture
    /// below.
    /// @see engineNacelle
    /// 
    class CPACSEngineNacelle : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSEngineNacelle(CPACSEngine* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSEngineNacelle();

        TIGL_EXPORT CPACSEngine* GetParent();

        TIGL_EXPORT const CPACSEngine* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const CCPACSNacelleCowl& GetFanCowl() const;
        TIGL_EXPORT virtual CCPACSNacelleCowl& GetFanCowl();

        TIGL_EXPORT virtual const boost::optional<CCPACSNacelleCowl>& GetCoreCowl() const;
        TIGL_EXPORT virtual boost::optional<CCPACSNacelleCowl>& GetCoreCowl();

        TIGL_EXPORT virtual const boost::optional<CCPACSNacelleCenterCowl>& GetCenterCowl() const;
        TIGL_EXPORT virtual boost::optional<CCPACSNacelleCenterCowl>& GetCenterCowl();

        TIGL_EXPORT virtual CCPACSNacelleCowl& GetCoreCowl(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCoreCowl();

        TIGL_EXPORT virtual CCPACSNacelleCenterCowl& GetCenterCowl(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCenterCowl();

    protected:
        CPACSEngine* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                              m_uID;
        CCPACSNacelleCowl                        m_fanCowl;
        boost::optional<CCPACSNacelleCowl>       m_coreCowl;
        boost::optional<CCPACSNacelleCenterCowl> m_centerCowl;

    private:
        CPACSEngineNacelle(const CPACSEngineNacelle&) = delete;
        CPACSEngineNacelle& operator=(const CPACSEngineNacelle&) = delete;

        CPACSEngineNacelle(CPACSEngineNacelle&&) = delete;
        CPACSEngineNacelle& operator=(CPACSEngineNacelle&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSEngineNacelle = generated::CPACSEngineNacelle;
using CCPACSEngine = generated::CPACSEngine;
} // namespace tigl
