// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSVessel.h"
#include "CPACSVesselStructure.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSVesselStructure::CPACSVesselStructure(CCPACSVessel* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSVesselStructure::~CPACSVesselStructure()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CCPACSVessel* CPACSVesselStructure::GetParent() const
    {
        return m_parent;
    }

    CCPACSVessel* CPACSVesselStructure::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSVesselStructure::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSVesselStructure::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSVesselStructure::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSVesselStructure::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSVesselStructure::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element stringers
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringers")) {
            m_stringers = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
            try {
                m_stringers->ReadCPACS(tixiHandle, xpath + "/stringers");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read stringers at xpath " << xpath << ": " << e.what();
                m_stringers = boost::none;
            }
        }

        // read element frames
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/frames")) {
            m_frames = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
            try {
                m_frames->ReadCPACS(tixiHandle, xpath + "/frames");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read frames at xpath " << xpath << ": " << e.what();
                m_frames = boost::none;
            }
        }

        // read element skinLayers
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/skinLayers")) {
            m_skinLayers = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
            try {
                m_skinLayers->ReadCPACS(tixiHandle, xpath + "/skinLayers");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read skinLayers at xpath " << xpath << ": " << e.what();
                m_skinLayers = boost::none;
            }
        }

        // read element walls
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/walls")) {
            m_walls = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
            try {
                m_walls->ReadCPACS(tixiHandle, xpath + "/walls");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read walls at xpath " << xpath << ": " << e.what();
                m_walls = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSVesselStructure::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element stringers
        if (m_stringers) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/stringers");
            m_stringers->WriteCPACS(tixiHandle, xpath + "/stringers");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringers")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/stringers");
            }
        }

        // write element frames
        if (m_frames) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frames");
            m_frames->WriteCPACS(tixiHandle, xpath + "/frames");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/frames")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/frames");
            }
        }

        // write element skinLayers
        if (m_skinLayers) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/skinLayers");
            m_skinLayers->WriteCPACS(tixiHandle, xpath + "/skinLayers");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/skinLayers")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/skinLayers");
            }
        }

        // write element walls
        if (m_walls) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/walls");
            m_walls->WriteCPACS(tixiHandle, xpath + "/walls");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/walls")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/walls");
            }
        }

    }

    const std::string& CPACSVesselStructure::GetUID() const
    {
        return m_uID;
    }

    void CPACSVesselStructure::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const boost::optional<CCPACSStringersAssembly>& CPACSVesselStructure::GetStringers() const
    {
        return m_stringers;
    }

    boost::optional<CCPACSStringersAssembly>& CPACSVesselStructure::GetStringers()
    {
        return m_stringers;
    }

    const boost::optional<CCPACSFramesAssembly>& CPACSVesselStructure::GetFrames() const
    {
        return m_frames;
    }

    boost::optional<CCPACSFramesAssembly>& CPACSVesselStructure::GetFrames()
    {
        return m_frames;
    }

    const boost::optional<CPACSVesselSkinLayers>& CPACSVesselStructure::GetSkinLayers() const
    {
        return m_skinLayers;
    }

    boost::optional<CPACSVesselSkinLayers>& CPACSVesselStructure::GetSkinLayers()
    {
        return m_skinLayers;
    }

    const boost::optional<CCPACSWalls>& CPACSVesselStructure::GetWalls() const
    {
        return m_walls;
    }

    boost::optional<CCPACSWalls>& CPACSVesselStructure::GetWalls()
    {
        return m_walls;
    }

    CCPACSStringersAssembly& CPACSVesselStructure::GetStringers(CreateIfNotExistsTag)
    {
        if (!m_stringers)
            m_stringers = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
        return *m_stringers;
    }

    void CPACSVesselStructure::RemoveStringers()
    {
        m_stringers = boost::none;
    }

    CCPACSFramesAssembly& CPACSVesselStructure::GetFrames(CreateIfNotExistsTag)
    {
        if (!m_frames)
            m_frames = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
        return *m_frames;
    }

    void CPACSVesselStructure::RemoveFrames()
    {
        m_frames = boost::none;
    }

    CPACSVesselSkinLayers& CPACSVesselStructure::GetSkinLayers(CreateIfNotExistsTag)
    {
        if (!m_skinLayers)
            m_skinLayers = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
        return *m_skinLayers;
    }

    void CPACSVesselStructure::RemoveSkinLayers()
    {
        m_skinLayers = boost::none;
    }

    CCPACSWalls& CPACSVesselStructure::GetWalls(CreateIfNotExistsTag)
    {
        if (!m_walls)
            m_walls = boost::in_place(reinterpret_cast<CCPACSVesselStructure*>(this), m_uidMgr);
        return *m_walls;
    }

    void CPACSVesselStructure::RemoveWalls()
    {
        m_walls = boost::none;
    }

} // namespace generated
} // namespace tigl
