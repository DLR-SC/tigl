// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCostSystems.h"

namespace tigl
{
    namespace generated
    {
        CPACSCostSystems::CPACSCostSystems(){}
        CPACSCostSystems::~CPACSCostSystems() {}
        
        void CPACSCostSystems::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element costDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/costDescription")) {
                m_costDescription.ReadCPACS(tixiHandle, xpath + "/costDescription");
            }
            else {
                LOG(ERROR) << "Required element costDescription is missing";
            }
            
            // read element auxilaryPowerUnits
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/auxilaryPowerUnits")) {
                m_auxilaryPowerUnits = boost::in_place();
                try {
                    m_auxilaryPowerUnits->ReadCPACS(tixiHandle, xpath + "/auxilaryPowerUnits");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read auxilaryPowerUnits at xpath << " << xpath << ": " << e.what();
                    m_auxilaryPowerUnits = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read auxilaryPowerUnits at xpath << " << xpath << ": " << e.getError();
                    m_auxilaryPowerUnits = boost::none;
                }
            }
            
            // read element hydraulicSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/hydraulicSystems")) {
                m_hydraulicSystems = boost::in_place();
                try {
                    m_hydraulicSystems->ReadCPACS(tixiHandle, xpath + "/hydraulicSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read hydraulicSystems at xpath << " << xpath << ": " << e.what();
                    m_hydraulicSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read hydraulicSystems at xpath << " << xpath << ": " << e.getError();
                    m_hydraulicSystems = boost::none;
                }
            }
            
            // read element airConditioningSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/airConditioningSystems")) {
                m_airConditioningSystems = boost::in_place();
                try {
                    m_airConditioningSystems->ReadCPACS(tixiHandle, xpath + "/airConditioningSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read airConditioningSystems at xpath << " << xpath << ": " << e.what();
                    m_airConditioningSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read airConditioningSystems at xpath << " << xpath << ": " << e.getError();
                    m_airConditioningSystems = boost::none;
                }
            }
            
            // read element deIcingSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/deIcingSystems")) {
                m_deIcingSystems = boost::in_place();
                try {
                    m_deIcingSystems->ReadCPACS(tixiHandle, xpath + "/deIcingSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read deIcingSystems at xpath << " << xpath << ": " << e.what();
                    m_deIcingSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read deIcingSystems at xpath << " << xpath << ": " << e.getError();
                    m_deIcingSystems = boost::none;
                }
            }
            
            // read element fireProtectionSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/fireProtectionSystems")) {
                m_fireProtectionSystems = boost::in_place();
                try {
                    m_fireProtectionSystems->ReadCPACS(tixiHandle, xpath + "/fireProtectionSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read fireProtectionSystems at xpath << " << xpath << ": " << e.what();
                    m_fireProtectionSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read fireProtectionSystems at xpath << " << xpath << ": " << e.getError();
                    m_fireProtectionSystems = boost::none;
                }
            }
            
            // read element flightControlSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/flightControlSystems")) {
                m_flightControlSystems = boost::in_place();
                try {
                    m_flightControlSystems->ReadCPACS(tixiHandle, xpath + "/flightControlSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read flightControlSystems at xpath << " << xpath << ": " << e.what();
                    m_flightControlSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read flightControlSystems at xpath << " << xpath << ": " << e.getError();
                    m_flightControlSystems = boost::none;
                }
            }
            
            // read element instrumentSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/instrumentSystems")) {
                m_instrumentSystems = boost::in_place();
                try {
                    m_instrumentSystems->ReadCPACS(tixiHandle, xpath + "/instrumentSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read instrumentSystems at xpath << " << xpath << ": " << e.what();
                    m_instrumentSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read instrumentSystems at xpath << " << xpath << ": " << e.getError();
                    m_instrumentSystems = boost::none;
                }
            }
            
            // read element automaticFlightSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/automaticFlightSystems")) {
                m_automaticFlightSystems = boost::in_place();
                try {
                    m_automaticFlightSystems->ReadCPACS(tixiHandle, xpath + "/automaticFlightSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read automaticFlightSystems at xpath << " << xpath << ": " << e.what();
                    m_automaticFlightSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read automaticFlightSystems at xpath << " << xpath << ": " << e.getError();
                    m_automaticFlightSystems = boost::none;
                }
            }
            
            // read element navigationSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/navigationSystems")) {
                m_navigationSystems = boost::in_place();
                try {
                    m_navigationSystems->ReadCPACS(tixiHandle, xpath + "/navigationSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read navigationSystems at xpath << " << xpath << ": " << e.what();
                    m_navigationSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read navigationSystems at xpath << " << xpath << ": " << e.getError();
                    m_navigationSystems = boost::none;
                }
            }
            
            // read element communicationSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/communicationSystems")) {
                m_communicationSystems = boost::in_place();
                try {
                    m_communicationSystems->ReadCPACS(tixiHandle, xpath + "/communicationSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read communicationSystems at xpath << " << xpath << ": " << e.what();
                    m_communicationSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read communicationSystems at xpath << " << xpath << ": " << e.getError();
                    m_communicationSystems = boost::none;
                }
            }
            
            // read element electricalSystems
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/electricalSystems")) {
                m_electricalSystems = boost::in_place();
                try {
                    m_electricalSystems->ReadCPACS(tixiHandle, xpath + "/electricalSystems");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read electricalSystems at xpath << " << xpath << ": " << e.what();
                    m_electricalSystems = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read electricalSystems at xpath << " << xpath << ": " << e.getError();
                    m_electricalSystems = boost::none;
                }
            }
            
        }
        
        void CPACSCostSystems::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element costDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/costDescription");
            m_costDescription.WriteCPACS(tixiHandle, xpath + "/costDescription");
            
            // write element auxilaryPowerUnits
            if (m_auxilaryPowerUnits) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/auxilaryPowerUnits");
                m_auxilaryPowerUnits->WriteCPACS(tixiHandle, xpath + "/auxilaryPowerUnits");
            }
            
            // write element hydraulicSystems
            if (m_hydraulicSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/hydraulicSystems");
                m_hydraulicSystems->WriteCPACS(tixiHandle, xpath + "/hydraulicSystems");
            }
            
            // write element airConditioningSystems
            if (m_airConditioningSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/airConditioningSystems");
                m_airConditioningSystems->WriteCPACS(tixiHandle, xpath + "/airConditioningSystems");
            }
            
            // write element deIcingSystems
            if (m_deIcingSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/deIcingSystems");
                m_deIcingSystems->WriteCPACS(tixiHandle, xpath + "/deIcingSystems");
            }
            
            // write element fireProtectionSystems
            if (m_fireProtectionSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fireProtectionSystems");
                m_fireProtectionSystems->WriteCPACS(tixiHandle, xpath + "/fireProtectionSystems");
            }
            
            // write element flightControlSystems
            if (m_flightControlSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/flightControlSystems");
                m_flightControlSystems->WriteCPACS(tixiHandle, xpath + "/flightControlSystems");
            }
            
            // write element instrumentSystems
            if (m_instrumentSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/instrumentSystems");
                m_instrumentSystems->WriteCPACS(tixiHandle, xpath + "/instrumentSystems");
            }
            
            // write element automaticFlightSystems
            if (m_automaticFlightSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/automaticFlightSystems");
                m_automaticFlightSystems->WriteCPACS(tixiHandle, xpath + "/automaticFlightSystems");
            }
            
            // write element navigationSystems
            if (m_navigationSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/navigationSystems");
                m_navigationSystems->WriteCPACS(tixiHandle, xpath + "/navigationSystems");
            }
            
            // write element communicationSystems
            if (m_communicationSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/communicationSystems");
                m_communicationSystems->WriteCPACS(tixiHandle, xpath + "/communicationSystems");
            }
            
            // write element electricalSystems
            if (m_electricalSystems) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/electricalSystems");
                m_electricalSystems->WriteCPACS(tixiHandle, xpath + "/electricalSystems");
            }
            
        }
        
        const CPACSGenericCost& CPACSCostSystems::GetCostDescription() const
        {
            return m_costDescription;
        }
        
        CPACSGenericCost& CPACSCostSystems::GetCostDescription()
        {
            return m_costDescription;
        }
        
        bool CPACSCostSystems::HasAuxilaryPowerUnits() const
        {
            return static_cast<bool>(m_auxilaryPowerUnits);
        }
        
        const CPACSCostAuxilaryPowerUnits& CPACSCostSystems::GetAuxilaryPowerUnits() const
        {
            return *m_auxilaryPowerUnits;
        }
        
        CPACSCostAuxilaryPowerUnits& CPACSCostSystems::GetAuxilaryPowerUnits()
        {
            return *m_auxilaryPowerUnits;
        }
        
        bool CPACSCostSystems::HasHydraulicSystems() const
        {
            return static_cast<bool>(m_hydraulicSystems);
        }
        
        const CPACSCostHydraulicSystems& CPACSCostSystems::GetHydraulicSystems() const
        {
            return *m_hydraulicSystems;
        }
        
        CPACSCostHydraulicSystems& CPACSCostSystems::GetHydraulicSystems()
        {
            return *m_hydraulicSystems;
        }
        
        bool CPACSCostSystems::HasAirConditioningSystems() const
        {
            return static_cast<bool>(m_airConditioningSystems);
        }
        
        const CPACSCostAirConditioningSystems& CPACSCostSystems::GetAirConditioningSystems() const
        {
            return *m_airConditioningSystems;
        }
        
        CPACSCostAirConditioningSystems& CPACSCostSystems::GetAirConditioningSystems()
        {
            return *m_airConditioningSystems;
        }
        
        bool CPACSCostSystems::HasDeIcingSystems() const
        {
            return static_cast<bool>(m_deIcingSystems);
        }
        
        const CPACSCostDeIcingSystems& CPACSCostSystems::GetDeIcingSystems() const
        {
            return *m_deIcingSystems;
        }
        
        CPACSCostDeIcingSystems& CPACSCostSystems::GetDeIcingSystems()
        {
            return *m_deIcingSystems;
        }
        
        bool CPACSCostSystems::HasFireProtectionSystems() const
        {
            return static_cast<bool>(m_fireProtectionSystems);
        }
        
        const CPACSCostFireProtectionSystems& CPACSCostSystems::GetFireProtectionSystems() const
        {
            return *m_fireProtectionSystems;
        }
        
        CPACSCostFireProtectionSystems& CPACSCostSystems::GetFireProtectionSystems()
        {
            return *m_fireProtectionSystems;
        }
        
        bool CPACSCostSystems::HasFlightControlSystems() const
        {
            return static_cast<bool>(m_flightControlSystems);
        }
        
        const CPACSCostFlightControlSystems& CPACSCostSystems::GetFlightControlSystems() const
        {
            return *m_flightControlSystems;
        }
        
        CPACSCostFlightControlSystems& CPACSCostSystems::GetFlightControlSystems()
        {
            return *m_flightControlSystems;
        }
        
        bool CPACSCostSystems::HasInstrumentSystems() const
        {
            return static_cast<bool>(m_instrumentSystems);
        }
        
        const CPACSCostInstrumentSystems& CPACSCostSystems::GetInstrumentSystems() const
        {
            return *m_instrumentSystems;
        }
        
        CPACSCostInstrumentSystems& CPACSCostSystems::GetInstrumentSystems()
        {
            return *m_instrumentSystems;
        }
        
        bool CPACSCostSystems::HasAutomaticFlightSystems() const
        {
            return static_cast<bool>(m_automaticFlightSystems);
        }
        
        const CPACSCostAutomaticFlightSystems& CPACSCostSystems::GetAutomaticFlightSystems() const
        {
            return *m_automaticFlightSystems;
        }
        
        CPACSCostAutomaticFlightSystems& CPACSCostSystems::GetAutomaticFlightSystems()
        {
            return *m_automaticFlightSystems;
        }
        
        bool CPACSCostSystems::HasNavigationSystems() const
        {
            return static_cast<bool>(m_navigationSystems);
        }
        
        const CPACSCostNavigationSystems& CPACSCostSystems::GetNavigationSystems() const
        {
            return *m_navigationSystems;
        }
        
        CPACSCostNavigationSystems& CPACSCostSystems::GetNavigationSystems()
        {
            return *m_navigationSystems;
        }
        
        bool CPACSCostSystems::HasCommunicationSystems() const
        {
            return static_cast<bool>(m_communicationSystems);
        }
        
        const CPACSCostCommunicationSystems& CPACSCostSystems::GetCommunicationSystems() const
        {
            return *m_communicationSystems;
        }
        
        CPACSCostCommunicationSystems& CPACSCostSystems::GetCommunicationSystems()
        {
            return *m_communicationSystems;
        }
        
        bool CPACSCostSystems::HasElectricalSystems() const
        {
            return static_cast<bool>(m_electricalSystems);
        }
        
        const CPACSCostElectricalSystems& CPACSCostSystems::GetElectricalSystems() const
        {
            return *m_electricalSystems;
        }
        
        CPACSCostElectricalSystems& CPACSCostSystems::GetElectricalSystems()
        {
            return *m_electricalSystems;
        }
        
    }
}
