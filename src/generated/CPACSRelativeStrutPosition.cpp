// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSRelativeStrutPosition.h"
#include "CPACSStrutAssembly.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSRelativeStrutPosition::CPACSRelativeStrutPosition(CPACSStrutAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_relativePosition(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSRelativeStrutPosition::~CPACSRelativeStrutPosition()
    {
        if (m_uidMgr) {
            if (!m_strutUID.empty()) m_uidMgr->TryUnregisterReference(m_strutUID, *this);
        }
    }

    const CPACSStrutAssembly* CPACSRelativeStrutPosition::GetParent() const
    {
        return m_parent;
    }

    CPACSStrutAssembly* CPACSRelativeStrutPosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSRelativeStrutPosition::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSRelativeStrutPosition::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSRelativeStrutPosition::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSRelativeStrutPosition::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSRelativeStrutPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element strutUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/strutUID")) {
            m_strutUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/strutUID");
            if (m_strutUID.empty()) {
                LOG(WARNING) << "Required element strutUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_strutUID.empty()) m_uidMgr->RegisterReference(m_strutUID, *this);
        }
        else {
            LOG(ERROR) << "Required element strutUID is missing at xpath " << xpath;
        }

        // read element relativePosition
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/relativePosition")) {
            m_relativePosition = tixi::TixiGetElement<double>(tixiHandle, xpath + "/relativePosition");
        }
        else {
            LOG(ERROR) << "Required element relativePosition is missing at xpath " << xpath;
        }

    }

    void CPACSRelativeStrutPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "strutUID", "relativePosition" };

        // write element strutUID
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/strutUID", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/strutUID", m_strutUID);

        // write element relativePosition
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/relativePosition", childElemOrder);
        tixi::TixiSaveElement(tixiHandle, xpath + "/relativePosition", m_relativePosition);

    }

    const std::string& CPACSRelativeStrutPosition::GetStrutUID() const
    {
        return m_strutUID;
    }

    void CPACSRelativeStrutPosition::SetStrutUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_strutUID.empty()) m_uidMgr->TryUnregisterReference(m_strutUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_strutUID = value;
    }

    const double& CPACSRelativeStrutPosition::GetRelativePosition() const
    {
        return m_relativePosition;
    }

    void CPACSRelativeStrutPosition::SetRelativePosition(const double& value)
    {
        m_relativePosition = value;
    }

    const CTiglUIDObject* CPACSRelativeStrutPosition::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSRelativeStrutPosition::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_strutUID == oldUid) {
            m_strutUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
