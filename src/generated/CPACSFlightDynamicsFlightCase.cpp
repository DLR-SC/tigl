// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFlightDynamicsFlightCase.h"

namespace tigl
{
    namespace generated
    {
        CPACSFlightDynamicsFlightCase::CPACSFlightDynamicsFlightCase(){}
        CPACSFlightDynamicsFlightCase::~CPACSFlightDynamicsFlightCase() {}
        
        void CPACSFlightDynamicsFlightCase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element weightAndBalanceUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/weightAndBalanceUID")) {
                m_weightAndBalanceUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/weightAndBalanceUID");
            }
            else {
                LOG(ERROR) << "Required element weightAndBalanceUID is missing";
            }
            
            // read element standardAltitude
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/standardAltitude")) {
                m_standardAltitude = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/standardAltitude");
            }
            else {
                LOG(ERROR) << "Required element standardAltitude is missing";
            }
            
            // read element vCAS
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/vCAS")) {
                m_vCAS = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/vCAS");
            }
            else {
                LOG(ERROR) << "Required element vCAS is missing";
            }
            
            // read element configuration
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/configuration")) {
                m_configuration = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/configuration");
            }
            else {
                LOG(ERROR) << "Required element configuration is missing";
            }
            
            // read element gear
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/gear")) {
                m_gear = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/gear");
            }
            else {
                LOG(ERROR) << "Required element gear is missing";
            }
            
            // read element linearModel
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/linearModel")) {
                m_linearModel = boost::in_place();
                try {
                    m_linearModel->ReadCPACS(tixiHandle, xpath + "/linearModel");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read linearModel at xpath << " << xpath << ": " << e.what();
                    m_linearModel = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read linearModel at xpath << " << xpath << ": " << e.getError();
                    m_linearModel = boost::none;
                }
            }
            
            // read element trimResult
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trimResult")) {
                m_trimResult = boost::in_place();
                try {
                    m_trimResult->ReadCPACS(tixiHandle, xpath + "/trimResult");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trimResult at xpath << " << xpath << ": " << e.what();
                    m_trimResult = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trimResult at xpath << " << xpath << ": " << e.getError();
                    m_trimResult = boost::none;
                }
            }
            
        }
        
        void CPACSFlightDynamicsFlightCase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element weightAndBalanceUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/weightAndBalanceUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/weightAndBalanceUID", m_weightAndBalanceUID);
            
            // write element standardAltitude
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/standardAltitude");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/standardAltitude", m_standardAltitude);
            
            // write element vCAS
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/vCAS");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/vCAS", m_vCAS);
            
            // write element configuration
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/configuration");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/configuration", m_configuration);
            
            // write element gear
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gear");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/gear", m_gear);
            
            // write element linearModel
            if (m_linearModel) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/linearModel");
                m_linearModel->WriteCPACS(tixiHandle, xpath + "/linearModel");
            }
            
            // write element trimResult
            if (m_trimResult) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trimResult");
                m_trimResult->WriteCPACS(tixiHandle, xpath + "/trimResult");
            }
            
        }
        
        const std::string& CPACSFlightDynamicsFlightCase::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSFlightDynamicsFlightCase::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSFlightDynamicsFlightCase::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSFlightDynamicsFlightCase::GetName() const
        {
            return *m_name;
        }
        
        void CPACSFlightDynamicsFlightCase::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSFlightDynamicsFlightCase::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSFlightDynamicsFlightCase::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSFlightDynamicsFlightCase::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const std::string& CPACSFlightDynamicsFlightCase::GetWeightAndBalanceUID() const
        {
            return m_weightAndBalanceUID;
        }
        
        void CPACSFlightDynamicsFlightCase::SetWeightAndBalanceUID(const std::string& value)
        {
            m_weightAndBalanceUID = value;
        }
        
        const double& CPACSFlightDynamicsFlightCase::GetStandardAltitude() const
        {
            return m_standardAltitude;
        }
        
        void CPACSFlightDynamicsFlightCase::SetStandardAltitude(const double& value)
        {
            m_standardAltitude = value;
        }
        
        const double& CPACSFlightDynamicsFlightCase::GetVCAS() const
        {
            return m_vCAS;
        }
        
        void CPACSFlightDynamicsFlightCase::SetVCAS(const double& value)
        {
            m_vCAS = value;
        }
        
        const int& CPACSFlightDynamicsFlightCase::GetConfiguration() const
        {
            return m_configuration;
        }
        
        void CPACSFlightDynamicsFlightCase::SetConfiguration(const int& value)
        {
            m_configuration = value;
        }
        
        const int& CPACSFlightDynamicsFlightCase::GetGear() const
        {
            return m_gear;
        }
        
        void CPACSFlightDynamicsFlightCase::SetGear(const int& value)
        {
            m_gear = value;
        }
        
        bool CPACSFlightDynamicsFlightCase::HasLinearModel() const
        {
            return static_cast<bool>(m_linearModel);
        }
        
        const CPACSFlightDynamicsLinearModel& CPACSFlightDynamicsFlightCase::GetLinearModel() const
        {
            return *m_linearModel;
        }
        
        CPACSFlightDynamicsLinearModel& CPACSFlightDynamicsFlightCase::GetLinearModel()
        {
            return *m_linearModel;
        }
        
        bool CPACSFlightDynamicsFlightCase::HasTrimResult() const
        {
            return static_cast<bool>(m_trimResult);
        }
        
        const CPACSFlightDynamicsTrimResult& CPACSFlightDynamicsFlightCase::GetTrimResult() const
        {
            return *m_trimResult;
        }
        
        CPACSFlightDynamicsTrimResult& CPACSFlightDynamicsFlightCase::GetTrimResult()
        {
            return *m_trimResult;
        }
        
    }
}
