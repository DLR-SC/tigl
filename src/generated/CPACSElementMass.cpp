// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSBattery.h"
#include "CPACSElectricMotor.h"
#include "CPACSElementMass.h"
#include "CPACSGasTurbine.h"
#include "CPACSGearBox.h"
#include "CPACSGenerator.h"
#include "CPACSHeatExchanger.h"
#include "CPACSTurboGenerator.h"
#include "CPACSVehicleElementBase.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSElementMass::CPACSElementMass(CPACSBattery* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSBattery);
    }

    CPACSElementMass::CPACSElementMass(CPACSElectricMotor* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSElectricMotor);
    }

    CPACSElementMass::CPACSElementMass(CPACSGasTurbine* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGasTurbine);
    }

    CPACSElementMass::CPACSElementMass(CPACSGearBox* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGearBox);
    }

    CPACSElementMass::CPACSElementMass(CPACSGenerator* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGenerator);
    }

    CPACSElementMass::CPACSElementMass(CPACSHeatExchanger* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSHeatExchanger);
    }

    CPACSElementMass::CPACSElementMass(CPACSTurboGenerator* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSTurboGenerator);
    }

    CPACSElementMass::CPACSElementMass(CPACSVehicleElementBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSVehicleElementBase);
    }

    CPACSElementMass::~CPACSElementMass()
    {
        if (m_uidMgr && m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
    }

    const CTiglUIDObject* CPACSElementMass::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSBattery>()) {
                return GetParent<CPACSBattery>();
            }
            if (IsParent<CPACSElectricMotor>()) {
                return GetParent<CPACSElectricMotor>();
            }
            if (IsParent<CPACSGasTurbine>()) {
                return GetParent<CPACSGasTurbine>();
            }
            if (IsParent<CPACSGearBox>()) {
                return GetParent<CPACSGearBox>();
            }
            if (IsParent<CPACSGenerator>()) {
                return GetParent<CPACSGenerator>();
            }
            if (IsParent<CPACSHeatExchanger>()) {
                return GetParent<CPACSHeatExchanger>();
            }
            if (IsParent<CPACSTurboGenerator>()) {
                return GetParent<CPACSTurboGenerator>();
            }
            if (IsParent<CPACSVehicleElementBase>()) {
                return GetParent<CPACSVehicleElementBase>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSElementMass::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSBattery>()) {
                return GetParent<CPACSBattery>();
            }
            if (IsParent<CPACSElectricMotor>()) {
                return GetParent<CPACSElectricMotor>();
            }
            if (IsParent<CPACSGasTurbine>()) {
                return GetParent<CPACSGasTurbine>();
            }
            if (IsParent<CPACSGearBox>()) {
                return GetParent<CPACSGearBox>();
            }
            if (IsParent<CPACSGenerator>()) {
                return GetParent<CPACSGenerator>();
            }
            if (IsParent<CPACSHeatExchanger>()) {
                return GetParent<CPACSHeatExchanger>();
            }
            if (IsParent<CPACSTurboGenerator>()) {
                return GetParent<CPACSTurboGenerator>();
            }
            if (IsParent<CPACSVehicleElementBase>()) {
                return GetParent<CPACSVehicleElementBase>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSElementMass::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSElementMass::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSElementMass::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID->empty()) {
                LOG(WARNING) << "Optional attribute uID is present but empty at xpath " << xpath;
            }
        }

        // read element density
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/density")) {
            m_density_choice1 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/density");
        }

        // read element mass
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mass")) {
            m_mass_choice2 = tixi::TixiGetElement<double>(tixiHandle, xpath + "/mass");
        }

        // read element location
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/location")) {
            m_location = boost::in_place(this, m_uidMgr);
            try {
                m_location->ReadCPACS(tixiHandle, xpath + "/location");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read location at xpath " << xpath << ": " << e.what();
                m_location = boost::none;
            }
        }

        // read element massInertia
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
            m_massInertia = boost::in_place(this);
            try {
                m_massInertia->ReadCPACS(tixiHandle, xpath + "/massInertia");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read massInertia at xpath " << xpath << ": " << e.what();
                m_massInertia = boost::none;
            }
        }

        if (m_uidMgr && m_uID) m_uidMgr->RegisterObject(*m_uID, *this);
        if (!ValidateChoices()) {
            LOG(ERROR) << "Invalid choice configuration at xpath " << xpath;
        }
    }

    void CPACSElementMass::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "density", "mass", "location", "massInertia" };

        // write attribute uID
        if (m_uID) {
            tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
        }
        else {
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                tixi::TixiRemoveAttribute(tixiHandle, xpath, "uID");
            }
        }

        // write element density
        if (m_density_choice1) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/density", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/density", *m_density_choice1);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/density")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/density");
            }
        }

        // write element mass
        if (m_mass_choice2) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/mass", childElemOrder);
            tixi::TixiSaveElement(tixiHandle, xpath + "/mass", *m_mass_choice2);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/mass")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/mass");
            }
        }

        // write element location
        if (m_location) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/location", childElemOrder);
            m_location->WriteCPACS(tixiHandle, xpath + "/location");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/location")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/location");
            }
        }

        // write element massInertia
        if (m_massInertia) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/massInertia", childElemOrder);
            m_massInertia->WriteCPACS(tixiHandle, xpath + "/massInertia");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/massInertia");
            }
        }

    }

    bool CPACSElementMass::ValidateChoices() const
    {
        return
        (
            (
                (
                    // mandatory elements of this choice must be there
                    m_density_choice1.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_mass_choice2.is_initialized()
                    )
                )
                +
                (
                    // mandatory elements of this choice must be there
                    m_mass_choice2.is_initialized()
                    &&
                    // elements of other choices must not be there
                    !(
                        m_density_choice1.is_initialized()
                    )
                )
                == 1
            )
        )
        ;
    }

    const boost::optional<std::string>& CPACSElementMass::GetUID() const
    {
        return m_uID;
    }

    void CPACSElementMass::SetUID(const boost::optional<std::string>& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (!m_uID && value) {
                m_uidMgr->RegisterObject(*value, *this);
            }
            else if (m_uID && !value) {
                m_uidMgr->TryUnregisterObject(*m_uID);
            }
            else if (m_uID && value) {
                m_uidMgr->UpdateObjectUID(*m_uID, *value);
            }
        }
        m_uID = value;
    }

    const boost::optional<double>& CPACSElementMass::GetDensity_choice1() const
    {
        return m_density_choice1;
    }

    void CPACSElementMass::SetDensity_choice1(const boost::optional<double>& value)
    {
        m_density_choice1 = value;
    }

    const boost::optional<double>& CPACSElementMass::GetMass_choice2() const
    {
        return m_mass_choice2;
    }

    void CPACSElementMass::SetMass_choice2(const boost::optional<double>& value)
    {
        m_mass_choice2 = value;
    }

    const boost::optional<CCPACSPoint>& CPACSElementMass::GetLocation() const
    {
        return m_location;
    }

    boost::optional<CCPACSPoint>& CPACSElementMass::GetLocation()
    {
        return m_location;
    }

    const boost::optional<CPACSMassInertia>& CPACSElementMass::GetMassInertia() const
    {
        return m_massInertia;
    }

    boost::optional<CPACSMassInertia>& CPACSElementMass::GetMassInertia()
    {
        return m_massInertia;
    }

    CCPACSPoint& CPACSElementMass::GetLocation(CreateIfNotExistsTag)
    {
        if (!m_location)
            m_location = boost::in_place(this, m_uidMgr);
        return *m_location;
    }

    void CPACSElementMass::RemoveLocation()
    {
        m_location = boost::none;
    }

    CPACSMassInertia& CPACSElementMass::GetMassInertia(CreateIfNotExistsTag)
    {
        if (!m_massInertia)
            m_massInertia = boost::in_place(this);
        return *m_massInertia;
    }

    void CPACSElementMass::RemoveMassInertia()
    {
        m_massInertia = boost::none;
    }

} // namespace generated
} // namespace tigl
