// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSNacelleGuideCurves.h"
#include "CPACSNacelleGuideCurve.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSNacelleGuideCurve::CPACSNacelleGuideCurve(CCPACSNacelleGuideCurves* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_fromZeta(0)
        , m_toZeta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSNacelleGuideCurve::~CPACSNacelleGuideCurve()
    {
        if (m_uidMgr) {
            if (!m_guideCurveProfileUID.empty()) m_uidMgr->TryUnregisterReference(m_guideCurveProfileUID, *this);
            if (!m_startSectionUID.empty()) m_uidMgr->TryUnregisterReference(m_startSectionUID, *this);
        }
    }

    const CCPACSNacelleGuideCurves* CPACSNacelleGuideCurve::GetParent() const
    {
        return m_parent;
    }

    CCPACSNacelleGuideCurves* CPACSNacelleGuideCurve::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSNacelleGuideCurve::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSNacelleGuideCurve::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSNacelleGuideCurve::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSNacelleGuideCurve::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSNacelleGuideCurve::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element name
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/name")) {
            m_name = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            if (m_name.empty()) {
                LOG(WARNING) << "Required element name is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element name is missing at xpath " << xpath;
        }

        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description.empty()) {
                LOG(WARNING) << "Required element description is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element description is missing at xpath " << xpath;
        }

        // read element guideCurveProfileUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/guideCurveProfileUID")) {
            m_guideCurveProfileUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/guideCurveProfileUID");
            if (m_guideCurveProfileUID.empty()) {
                LOG(WARNING) << "Required element guideCurveProfileUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_guideCurveProfileUID.empty()) m_uidMgr->RegisterReference(m_guideCurveProfileUID, *this);
        }
        else {
            LOG(ERROR) << "Required element guideCurveProfileUID is missing at xpath " << xpath;
        }

        // read element startSectionUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/startSectionUID")) {
            m_startSectionUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/startSectionUID");
            if (m_startSectionUID.empty()) {
                LOG(WARNING) << "Required element startSectionUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_startSectionUID.empty()) m_uidMgr->RegisterReference(m_startSectionUID, *this);
        }
        else {
            LOG(ERROR) << "Required element startSectionUID is missing at xpath " << xpath;
        }

        // read element fromZeta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromZeta")) {
            m_fromZeta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/fromZeta");
        }
        else {
            LOG(ERROR) << "Required element fromZeta is missing at xpath " << xpath;
        }

        // read element toZeta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/toZeta")) {
            m_toZeta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/toZeta");
        }
        else {
            LOG(ERROR) << "Required element toZeta is missing at xpath " << xpath;
        }

    }

    void CPACSNacelleGuideCurve::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element name
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
        tixi::TixiSaveElement(tixiHandle, xpath + "/name", m_name);

        // write element description
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
        tixi::TixiSaveElement(tixiHandle, xpath + "/description", m_description);

        // write element guideCurveProfileUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/guideCurveProfileUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/guideCurveProfileUID", m_guideCurveProfileUID);

        // write element startSectionUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/startSectionUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/startSectionUID", m_startSectionUID);

        // write element fromZeta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromZeta");
        tixi::TixiSaveElement(tixiHandle, xpath + "/fromZeta", m_fromZeta);

        // write element toZeta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toZeta");
        tixi::TixiSaveElement(tixiHandle, xpath + "/toZeta", m_toZeta);

    }

    const std::string& CPACSNacelleGuideCurve::GetName() const
    {
        return m_name;
    }

    void CPACSNacelleGuideCurve::SetName(const std::string& value)
    {
        m_name = value;
    }

    const std::string& CPACSNacelleGuideCurve::GetDescription() const
    {
        return m_description;
    }

    void CPACSNacelleGuideCurve::SetDescription(const std::string& value)
    {
        m_description = value;
    }

    const std::string& CPACSNacelleGuideCurve::GetGuideCurveProfileUID() const
    {
        return m_guideCurveProfileUID;
    }

    void CPACSNacelleGuideCurve::SetGuideCurveProfileUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_guideCurveProfileUID.empty()) m_uidMgr->TryUnregisterReference(m_guideCurveProfileUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_guideCurveProfileUID = value;
    }

    const std::string& CPACSNacelleGuideCurve::GetStartSectionUID() const
    {
        return m_startSectionUID;
    }

    void CPACSNacelleGuideCurve::SetStartSectionUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_startSectionUID.empty()) m_uidMgr->TryUnregisterReference(m_startSectionUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_startSectionUID = value;
    }

    const double& CPACSNacelleGuideCurve::GetFromZeta() const
    {
        return m_fromZeta;
    }

    void CPACSNacelleGuideCurve::SetFromZeta(const double& value)
    {
        m_fromZeta = value;
    }

    const double& CPACSNacelleGuideCurve::GetToZeta() const
    {
        return m_toZeta;
    }

    void CPACSNacelleGuideCurve::SetToZeta(const double& value)
    {
        m_toZeta = value;
    }

    const CTiglUIDObject* CPACSNacelleGuideCurve::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSNacelleGuideCurve::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_guideCurveProfileUID == oldUid) {
            m_guideCurveProfileUID = newUid;
        }
        if (m_startSectionUID == oldUid) {
            m_startSectionUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
