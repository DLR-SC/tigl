// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqLongitudinal.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqLongitudinal::CPACSFqLongitudinal(){}
        CPACSFqLongitudinal::~CPACSFqLongitudinal() {}
        
        void CPACSFqLongitudinal::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element numQFes
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numQFes")) {
                m_numQFes.ReadCPACS(tixiHandle, xpath + "/numQFes");
            }
            else {
                LOG(ERROR) << "Required element numQFes is missing";
            }
            
            // read element numThe
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numThe")) {
                m_numThe.ReadCPACS(tixiHandle, xpath + "/numThe");
            }
            else {
                LOG(ERROR) << "Required element numThe is missing";
            }
            
            // read element numTheFes
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numTheFes")) {
                m_numTheFes.ReadCPACS(tixiHandle, xpath + "/numTheFes");
            }
            else {
                LOG(ERROR) << "Required element numTheFes is missing";
            }
            
            // read element numAlFes
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numAlFes")) {
                m_numAlFes.ReadCPACS(tixiHandle, xpath + "/numAlFes");
            }
            else {
                LOG(ERROR) << "Required element numAlFes is missing";
            }
            
            // read element numNzFes
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/numNzFes")) {
                m_numNzFes.ReadCPACS(tixiHandle, xpath + "/numNzFes");
            }
            else {
                LOG(ERROR) << "Required element numNzFes is missing";
            }
            
            // read element denLon
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/denLon")) {
                m_denLon.ReadCPACS(tixiHandle, xpath + "/denLon");
            }
            else {
                LOG(ERROR) << "Required element denLon is missing";
            }
            
        }
        
        void CPACSFqLongitudinal::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element numQFes
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numQFes");
            m_numQFes.WriteCPACS(tixiHandle, xpath + "/numQFes");
            
            // write element numThe
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numThe");
            m_numThe.WriteCPACS(tixiHandle, xpath + "/numThe");
            
            // write element numTheFes
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numTheFes");
            m_numTheFes.WriteCPACS(tixiHandle, xpath + "/numTheFes");
            
            // write element numAlFes
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numAlFes");
            m_numAlFes.WriteCPACS(tixiHandle, xpath + "/numAlFes");
            
            // write element numNzFes
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/numNzFes");
            m_numNzFes.WriteCPACS(tixiHandle, xpath + "/numNzFes");
            
            // write element denLon
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/denLon");
            m_denLon.WriteCPACS(tixiHandle, xpath + "/denLon");
            
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetNumQFes() const
        {
            return m_numQFes;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetNumQFes()
        {
            return m_numQFes;
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetNumThe() const
        {
            return m_numThe;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetNumThe()
        {
            return m_numThe;
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetNumTheFes() const
        {
            return m_numTheFes;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetNumTheFes()
        {
            return m_numTheFes;
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetNumAlFes() const
        {
            return m_numAlFes;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetNumAlFes()
        {
            return m_numAlFes;
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetNumNzFes() const
        {
            return m_numNzFes;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetNumNzFes()
        {
            return m_numNzFes;
        }
        
        const CCPACSStringVector& CPACSFqLongitudinal::GetDenLon() const
        {
            return m_denLon;
        }
        
        CCPACSStringVector& CPACSFqLongitudinal::GetDenLon()
        {
            return m_denLon;
        }
        
    }
}
