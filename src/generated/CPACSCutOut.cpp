// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCutOut.h"

namespace tigl
{
    namespace generated
    {
        CPACSCutOut::CPACSCutOut(){}
        CPACSCutOut::~CPACSCutOut() {}
        
        void CPACSCutOut::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element name
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/name")) {
                m_name = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/name");
            }
            
            // read element description
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/description")) {
                m_description = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            }
            
            // read element width
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/width")) {
                m_width = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/width");
            }
            else {
                LOG(ERROR) << "Required element width is missing";
            }
            
            // read element height
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/height")) {
                m_height = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/height");
            }
            else {
                LOG(ERROR) << "Required element height is missing";
            }
            
            // read element filletRadius
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/filletRadius")) {
                m_filletRadius = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/filletRadius");
            }
            else {
                LOG(ERROR) << "Required element filletRadius is missing";
            }
            
            // read element reinforcementElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reinforcementElementUID")) {
                m_reinforcementElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/reinforcementElementUID");
            }
            
        }
        
        void CPACSCutOut::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element name
            if (m_name) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/name");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/name", *m_name);
            }
            
            // write element description
            if (m_description) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/description", *m_description);
            }
            
            // write element width
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/width");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/width", m_width);
            
            // write element height
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/height");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/height", m_height);
            
            // write element filletRadius
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/filletRadius");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/filletRadius", m_filletRadius);
            
            // write element reinforcementElementUID
            if (m_reinforcementElementUID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reinforcementElementUID");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/reinforcementElementUID", *m_reinforcementElementUID);
            }
            
        }
        
        const std::string& CPACSCutOut::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSCutOut::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSCutOut::HasName() const
        {
            return static_cast<bool>(m_name);
        }
        
        const std::string& CPACSCutOut::GetName() const
        {
            return *m_name;
        }
        
        void CPACSCutOut::SetName(const std::string& value)
        {
            m_name = value;
        }
        
        bool CPACSCutOut::HasDescription() const
        {
            return static_cast<bool>(m_description);
        }
        
        const std::string& CPACSCutOut::GetDescription() const
        {
            return *m_description;
        }
        
        void CPACSCutOut::SetDescription(const std::string& value)
        {
            m_description = value;
        }
        
        const double& CPACSCutOut::GetWidth() const
        {
            return m_width;
        }
        
        void CPACSCutOut::SetWidth(const double& value)
        {
            m_width = value;
        }
        
        const double& CPACSCutOut::GetHeight() const
        {
            return m_height;
        }
        
        void CPACSCutOut::SetHeight(const double& value)
        {
            m_height = value;
        }
        
        const double& CPACSCutOut::GetFilletRadius() const
        {
            return m_filletRadius;
        }
        
        void CPACSCutOut::SetFilletRadius(const double& value)
        {
            m_filletRadius = value;
        }
        
        bool CPACSCutOut::HasReinforcementElementUID() const
        {
            return static_cast<bool>(m_reinforcementElementUID);
        }
        
        const std::string& CPACSCutOut::GetReinforcementElementUID() const
        {
            return *m_reinforcementElementUID;
        }
        
        void CPACSCutOut::SetReinforcementElementUID(const std::string& value)
        {
            m_reinforcementElementUID = value;
        }
        
    }
}
