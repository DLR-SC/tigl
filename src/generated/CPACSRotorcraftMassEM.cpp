// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSRotorcraftMassEM.h"

namespace tigl
{
    namespace generated
    {
        CPACSRotorcraftMassEM::CPACSRotorcraftMassEM(){}
        CPACSRotorcraftMassEM::~CPACSRotorcraftMassEM() {}
        
        void CPACSRotorcraftMassEM::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mStructure
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mStructure")) {
                m_mStructure = boost::in_place();
                try {
                    m_mStructure->ReadCPACS(tixiHandle, xpath + "/mStructure");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mStructure at xpath << " << xpath << ": " << e.what();
                    m_mStructure = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mStructure at xpath << " << xpath << ": " << e.getError();
                    m_mStructure = boost::none;
                }
            }
            
            // read element mPropulsion
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mPropulsion")) {
                m_mPropulsion = boost::in_place();
                try {
                    m_mPropulsion->ReadCPACS(tixiHandle, xpath + "/mPropulsion");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mPropulsion at xpath << " << xpath << ": " << e.what();
                    m_mPropulsion = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mPropulsion at xpath << " << xpath << ": " << e.getError();
                    m_mPropulsion = boost::none;
                }
            }
            
            // read element mSystemsAndEquipment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mSystemsAndEquipment")) {
                m_mSystemsAndEquipment = boost::in_place();
                try {
                    m_mSystemsAndEquipment->ReadCPACS(tixiHandle, xpath + "/mSystemsAndEquipment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mSystemsAndEquipment at xpath << " << xpath << ": " << e.what();
                    m_mSystemsAndEquipment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mSystemsAndEquipment at xpath << " << xpath << ": " << e.getError();
                    m_mSystemsAndEquipment = boost::none;
                }
            }
            
        }
        
        void CPACSRotorcraftMassEM::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mStructure
            if (m_mStructure) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mStructure");
                m_mStructure->WriteCPACS(tixiHandle, xpath + "/mStructure");
            }
            
            // write element mPropulsion
            if (m_mPropulsion) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mPropulsion");
                m_mPropulsion->WriteCPACS(tixiHandle, xpath + "/mPropulsion");
            }
            
            // write element mSystemsAndEquipment
            if (m_mSystemsAndEquipment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mSystemsAndEquipment");
                m_mSystemsAndEquipment->WriteCPACS(tixiHandle, xpath + "/mSystemsAndEquipment");
            }
            
        }
        
        const CPACSGenericMass& CPACSRotorcraftMassEM::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSRotorcraftMassEM::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSRotorcraftMassEM::HasMStructure() const
        {
            return static_cast<bool>(m_mStructure);
        }
        
        const CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMStructure() const
        {
            return *m_mStructure;
        }
        
        CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMStructure()
        {
            return *m_mStructure;
        }
        
        bool CPACSRotorcraftMassEM::HasMPropulsion() const
        {
            return static_cast<bool>(m_mPropulsion);
        }
        
        const CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMPropulsion() const
        {
            return *m_mPropulsion;
        }
        
        CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMPropulsion()
        {
            return *m_mPropulsion;
        }
        
        bool CPACSRotorcraftMassEM::HasMSystemsAndEquipment() const
        {
            return static_cast<bool>(m_mSystemsAndEquipment);
        }
        
        const CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMSystemsAndEquipment() const
        {
            return *m_mSystemsAndEquipment;
        }
        
        CPACSRotorcraftMassGroupLevel1& CPACSRotorcraftMassEM::GetMSystemsAndEquipment()
        {
            return *m_mSystemsAndEquipment;
        }
        
    }
}
