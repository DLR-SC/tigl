// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSLandingGearBase.h"
#include "CPACSLandingGearControl.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLandingGearControl::CPACSLandingGearControl(CPACSLandingGearBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLandingGearControl::~CPACSLandingGearControl()
    {
    }

    const CPACSLandingGearBase* CPACSLandingGearControl::GetParent() const
    {
        return m_parent;
    }

    CPACSLandingGearBase* CPACSLandingGearControl::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLandingGearControl::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSLandingGearControl::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSLandingGearControl::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSLandingGearControl::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSLandingGearControl::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element retractAngle
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/retractAngle")) {
            m_retractAngle = tixi::TixiGetElement<double>(tixiHandle, xpath + "/retractAngle");
        }

        // read element controlFunctions
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlFunctions")) {
            m_controlFunctions = boost::in_place(this, m_uidMgr);
            try {
                m_controlFunctions->ReadCPACS(tixiHandle, xpath + "/controlFunctions");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read controlFunctions at xpath " << xpath << ": " << e.what();
                m_controlFunctions = boost::none;
            }
        }

        // read element offset
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/offset")) {
            m_offset = tixi::TixiGetElement<double>(tixiHandle, xpath + "/offset");
        }

    }

    void CPACSLandingGearControl::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element retractAngle
        if (m_retractAngle) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/retractAngle");
            tixi::TixiSaveElement(tixiHandle, xpath + "/retractAngle", *m_retractAngle);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/retractAngle")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/retractAngle");
            }
        }

        // write element controlFunctions
        if (m_controlFunctions) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlFunctions");
            m_controlFunctions->WriteCPACS(tixiHandle, xpath + "/controlFunctions");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/controlFunctions")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/controlFunctions");
            }
        }

        // write element offset
        if (m_offset) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/offset");
            tixi::TixiSaveElement(tixiHandle, xpath + "/offset", *m_offset);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/offset")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/offset");
            }
        }

    }

    const boost::optional<double>& CPACSLandingGearControl::GetRetractAngle() const
    {
        return m_retractAngle;
    }

    void CPACSLandingGearControl::SetRetractAngle(const boost::optional<double>& value)
    {
        m_retractAngle = value;
    }

    const boost::optional<CPACSLandingGearControlFunctions>& CPACSLandingGearControl::GetControlFunctions() const
    {
        return m_controlFunctions;
    }

    boost::optional<CPACSLandingGearControlFunctions>& CPACSLandingGearControl::GetControlFunctions()
    {
        return m_controlFunctions;
    }

    const boost::optional<double>& CPACSLandingGearControl::GetOffset() const
    {
        return m_offset;
    }

    void CPACSLandingGearControl::SetOffset(const boost::optional<double>& value)
    {
        m_offset = value;
    }

    CPACSLandingGearControlFunctions& CPACSLandingGearControl::GetControlFunctions(CreateIfNotExistsTag)
    {
        if (!m_controlFunctions)
            m_controlFunctions = boost::in_place(this, m_uidMgr);
        return *m_controlFunctions;
    }

    void CPACSLandingGearControl::RemoveControlFunctions()
    {
        m_controlFunctions = boost::none;
    }

} // namespace generated
} // namespace tigl
