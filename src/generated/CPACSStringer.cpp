// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include <CCPACSFuselageStringerFramePosition.h>
#include "CCPACSStringersAssembly.h"
#include "CPACSStringer.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSStringer::CPACSStringer(CCPACSStringersAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSStringer::~CPACSStringer()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CCPACSStringersAssembly* CPACSStringer::GetParent() const
    {
        return m_parent;
    }

    CCPACSStringersAssembly* CPACSStringer::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSStringer::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSStringer::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSStringer::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSStringer::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSStringer::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element stringerPosition
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/stringerPosition")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/stringerPosition", m_stringerPositions, 2, tixi::xsdUnbounded, reinterpret_cast<CCPACSFuselageStringer*>(this), m_uidMgr);
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSStringer::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element stringerPosition
        tixi::TixiSaveElements(tixiHandle, xpath + "/stringerPosition", m_stringerPositions);

    }

    const std::string& CPACSStringer::GetUID() const
    {
        return m_uID;
    }

    void CPACSStringer::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::vector<std::unique_ptr<CCPACSFuselageStringerFramePosition>>& CPACSStringer::GetStringerPositions() const
    {
        return m_stringerPositions;
    }

    std::vector<std::unique_ptr<CCPACSFuselageStringerFramePosition>>& CPACSStringer::GetStringerPositions()
    {
        return m_stringerPositions;
    }

    CCPACSFuselageStringerFramePosition& CPACSStringer::AddStringerPosition()
    {
        m_stringerPositions.push_back(make_unique<CCPACSFuselageStringerFramePosition>(reinterpret_cast<CCPACSFuselageStringer*>(this), m_uidMgr));
        return *m_stringerPositions.back();
    }

    void CPACSStringer::RemoveStringerPosition(CCPACSFuselageStringerFramePosition& ref)
    {
        for (std::size_t i = 0; i < m_stringerPositions.size(); i++) {
            if (m_stringerPositions[i].get() == &ref) {
                m_stringerPositions.erase(m_stringerPositions.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
