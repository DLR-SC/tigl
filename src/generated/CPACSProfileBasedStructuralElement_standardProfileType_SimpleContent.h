// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSProfileBasedStructuralElement_standardProfileType
        
        // generated from /xsd:schema/xsd:complexType[704]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:choice[1]/xsd:sequence[2]/xsd:element[1]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent
        #else
        enum CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent
        #endif
        {
            C,
            T,
            Z,
            L,
            HAT,
            ROD,
            TUBE,
            BAR,
            BOX
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSProfileBasedStructuralElement_standardProfileType_SimpleContentToString(const CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent& value)
        {
            switch(value) {
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::C: return "C";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::T: return "T";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::Z: return "Z";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::L: return "L";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::HAT: return "HAT";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::ROD: return "ROD";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::TUBE: return "TUBE";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::BAR: return "BAR";
            case CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::BOX: return "BOX";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent");
            }
        }
        inline CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent stringToCPACSProfileBasedStructuralElement_standardProfileType_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "c") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::C; }
            if (toLower(value) == "t") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::T; }
            if (toLower(value) == "z") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::Z; }
            if (toLower(value) == "l") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::L; }
            if (toLower(value) == "hat") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::HAT; }
            if (toLower(value) == "rod") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::ROD; }
            if (toLower(value) == "tube") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::TUBE; }
            if (toLower(value) == "bar") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::BAR; }
            if (toLower(value) == "box") { return CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent::BOX; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent");
        }
        #else
        inline std::string CPACSProfileBasedStructuralElement_standardProfileType_SimpleContentToString(const CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent& value)
        {
            switch(value) {
            case C: return "C";
            case T: return "T";
            case Z: return "Z";
            case L: return "L";
            case HAT: return "HAT";
            case ROD: return "ROD";
            case TUBE: return "TUBE";
            case BAR: return "BAR";
            case BOX: return "BOX";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent");
            }
        }
        inline CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent stringToCPACSProfileBasedStructuralElement_standardProfileType_SimpleContent(const std::string& value)
        {
            struct ToLower { std::string operator()(std::string str) { for (char& c : str) { c = std::tolower(c); } return str; } } toLower;
            if (toLower(value) == "c") { return C; }
            if (toLower(value) == "t") { return T; }
            if (toLower(value) == "z") { return Z; }
            if (toLower(value) == "l") { return L; }
            if (toLower(value) == "hat") { return HAT; }
            if (toLower(value) == "rod") { return ROD; }
            if (toLower(value) == "tube") { return TUBE; }
            if (toLower(value) == "bar") { return BAR; }
            if (toLower(value) == "box") { return BOX; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSProfileBasedStructuralElement_standardProfileType_SimpleContent");
        }
        #endif
    }
}
