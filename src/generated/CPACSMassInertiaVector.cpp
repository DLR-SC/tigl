// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMassInertiaVector.h"

namespace tigl
{
    namespace generated
    {
        CPACSMassInertiaVector::CPACSMassInertiaVector(){}
        CPACSMassInertiaVector::~CPACSMassInertiaVector() {}
        
        void CPACSMassInertiaVector::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element Jxx
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxx")) {
                m_Jxx.ReadCPACS(tixiHandle, xpath + "/Jxx");
            }
            else {
                LOG(ERROR) << "Required element Jxx is missing";
            }
            
            // read element Jyy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jyy")) {
                m_Jyy.ReadCPACS(tixiHandle, xpath + "/Jyy");
            }
            else {
                LOG(ERROR) << "Required element Jyy is missing";
            }
            
            // read element Jzz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jzz")) {
                m_Jzz.ReadCPACS(tixiHandle, xpath + "/Jzz");
            }
            else {
                LOG(ERROR) << "Required element Jzz is missing";
            }
            
            // read element Jxy
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxy")) {
                m_Jxy.ReadCPACS(tixiHandle, xpath + "/Jxy");
            }
            else {
                LOG(ERROR) << "Required element Jxy is missing";
            }
            
            // read element Jxz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jxz")) {
                m_Jxz.ReadCPACS(tixiHandle, xpath + "/Jxz");
            }
            else {
                LOG(ERROR) << "Required element Jxz is missing";
            }
            
            // read element Jyz
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/Jyz")) {
                m_Jyz.ReadCPACS(tixiHandle, xpath + "/Jyz");
            }
            else {
                LOG(ERROR) << "Required element Jyz is missing";
            }
            
        }
        
        void CPACSMassInertiaVector::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element Jxx
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxx");
            m_Jxx.WriteCPACS(tixiHandle, xpath + "/Jxx");
            
            // write element Jyy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jyy");
            m_Jyy.WriteCPACS(tixiHandle, xpath + "/Jyy");
            
            // write element Jzz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jzz");
            m_Jzz.WriteCPACS(tixiHandle, xpath + "/Jzz");
            
            // write element Jxy
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxy");
            m_Jxy.WriteCPACS(tixiHandle, xpath + "/Jxy");
            
            // write element Jxz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jxz");
            m_Jxz.WriteCPACS(tixiHandle, xpath + "/Jxz");
            
            // write element Jyz
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/Jyz");
            m_Jyz.WriteCPACS(tixiHandle, xpath + "/Jyz");
            
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJxx() const
        {
            return m_Jxx;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJxx()
        {
            return m_Jxx;
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJyy() const
        {
            return m_Jyy;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJyy()
        {
            return m_Jyy;
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJzz() const
        {
            return m_Jzz;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJzz()
        {
            return m_Jzz;
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJxy() const
        {
            return m_Jxy;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJxy()
        {
            return m_Jxy;
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJxz() const
        {
            return m_Jxz;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJxz()
        {
            return m_Jxz;
        }
        
        const CCPACSStringVector& CPACSMassInertiaVector::GetJyz() const
        {
            return m_Jyz;
        }
        
        CCPACSStringVector& CPACSMassInertiaVector::GetJyz()
        {
            return m_Jyz;
        }
        
    }
}
