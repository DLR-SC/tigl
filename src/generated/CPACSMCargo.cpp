// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMCargo.h"

namespace tigl
{
    namespace generated
    {
        CPACSMCargo::CPACSMCargo(){}
        CPACSMCargo::~CPACSMCargo() {}
        
        void CPACSMCargo::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element massDescription
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/massDescription")) {
                m_massDescription.ReadCPACS(tixiHandle, xpath + "/massDescription");
            }
            else {
                LOG(ERROR) << "Required element massDescription is missing";
            }
            
            // read element mEmptyULDs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mEmptyULDs")) {
                m_mEmptyULDs = boost::in_place();
                try {
                    m_mEmptyULDs->ReadCPACS(tixiHandle, xpath + "/mEmptyULDs");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mEmptyULDs at xpath << " << xpath << ": " << e.what();
                    m_mEmptyULDs = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mEmptyULDs at xpath << " << xpath << ": " << e.getError();
                    m_mEmptyULDs = boost::none;
                }
            }
            
            // read element mULDContents
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mULDContents")) {
                m_mULDContents = boost::in_place();
                try {
                    m_mULDContents->ReadCPACS(tixiHandle, xpath + "/mULDContents");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mULDContents at xpath << " << xpath << ": " << e.what();
                    m_mULDContents = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mULDContents at xpath << " << xpath << ": " << e.getError();
                    m_mULDContents = boost::none;
                }
            }
            
            // read element mBulkCargos
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/mBulkCargos")) {
                m_mBulkCargos = boost::in_place();
                try {
                    m_mBulkCargos->ReadCPACS(tixiHandle, xpath + "/mBulkCargos");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read mBulkCargos at xpath << " << xpath << ": " << e.what();
                    m_mBulkCargos = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read mBulkCargos at xpath << " << xpath << ": " << e.getError();
                    m_mBulkCargos = boost::none;
                }
            }
            
        }
        
        void CPACSMCargo::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element massDescription
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massDescription");
            m_massDescription.WriteCPACS(tixiHandle, xpath + "/massDescription");
            
            // write element mEmptyULDs
            if (m_mEmptyULDs) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mEmptyULDs");
                m_mEmptyULDs->WriteCPACS(tixiHandle, xpath + "/mEmptyULDs");
            }
            
            // write element mULDContents
            if (m_mULDContents) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mULDContents");
                m_mULDContents->WriteCPACS(tixiHandle, xpath + "/mULDContents");
            }
            
            // write element mBulkCargos
            if (m_mBulkCargos) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mBulkCargos");
                m_mBulkCargos->WriteCPACS(tixiHandle, xpath + "/mBulkCargos");
            }
            
        }
        
        const CPACSGenericMass& CPACSMCargo::GetMassDescription() const
        {
            return m_massDescription;
        }
        
        CPACSGenericMass& CPACSMCargo::GetMassDescription()
        {
            return m_massDescription;
        }
        
        bool CPACSMCargo::HasMEmptyULDs() const
        {
            return static_cast<bool>(m_mEmptyULDs);
        }
        
        const CPACSMEmptyULDs& CPACSMCargo::GetMEmptyULDs() const
        {
            return *m_mEmptyULDs;
        }
        
        CPACSMEmptyULDs& CPACSMCargo::GetMEmptyULDs()
        {
            return *m_mEmptyULDs;
        }
        
        bool CPACSMCargo::HasMULDContents() const
        {
            return static_cast<bool>(m_mULDContents);
        }
        
        const CPACSMULDContents& CPACSMCargo::GetMULDContents() const
        {
            return *m_mULDContents;
        }
        
        CPACSMULDContents& CPACSMCargo::GetMULDContents()
        {
            return *m_mULDContents;
        }
        
        bool CPACSMCargo::HasMBulkCargos() const
        {
            return static_cast<bool>(m_mBulkCargos);
        }
        
        const CPACSMBulkCargos& CPACSMCargo::GetMBulkCargos() const
        {
            return *m_mBulkCargos;
        }
        
        CPACSMBulkCargos& CPACSMCargo::GetMBulkCargos()
        {
            return *m_mBulkCargos;
        }
        
    }
}
