// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDateTimeBase.h"

namespace tigl
{
    namespace generated
    {
        CPACSDateTimeBase::CPACSDateTimeBase(){}
        CPACSDateTimeBase::~CPACSDateTimeBase() {}
        
        void CPACSDateTimeBase::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute externalDataNodePath
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "externalDataNodePath")) {
                m_externalDataNodePath = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalDataNodePath");
            }
            
            // read attribute externalFileName
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "externalFileName")) {
                m_externalFileName = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalFileName");
            }
            
            // read attribute externalDataDirectory
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "externalDataDirectory")) {
                m_externalDataDirectory = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "externalDataDirectory");
            }
            
            // read simpleContent 
            if (tixihelper::TixiCheckElement(tixiHandle, xpath)) {
                m_simpleContent = tixihelper::TixiGetElement<time_t>(tixiHandle, xpath);
            }
            else {
                LOG(ERROR) << "Required simpleContent  is missing";
            }
            
        }
        
        void CPACSDateTimeBase::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute externalDataNodePath
            if (m_externalDataNodePath) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/externalDataNodePath");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "externalDataNodePath", *m_externalDataNodePath);
            }
            
            // write attribute externalFileName
            if (m_externalFileName) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/externalFileName");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "externalFileName", *m_externalFileName);
            }
            
            // write attribute externalDataDirectory
            if (m_externalDataDirectory) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/externalDataDirectory");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "externalDataDirectory", *m_externalDataDirectory);
            }
            
            // write simpleContent 
            tixihelper::TixiSaveElement(tixiHandle, xpath, m_simpleContent);
            
        }
        
        bool CPACSDateTimeBase::HasExternalDataNodePath() const
        {
            return static_cast<bool>(m_externalDataNodePath);
        }
        
        const std::string& CPACSDateTimeBase::GetExternalDataNodePath() const
        {
            return *m_externalDataNodePath;
        }
        
        void CPACSDateTimeBase::SetExternalDataNodePath(const std::string& value)
        {
            m_externalDataNodePath = value;
        }
        
        bool CPACSDateTimeBase::HasExternalFileName() const
        {
            return static_cast<bool>(m_externalFileName);
        }
        
        const std::string& CPACSDateTimeBase::GetExternalFileName() const
        {
            return *m_externalFileName;
        }
        
        void CPACSDateTimeBase::SetExternalFileName(const std::string& value)
        {
            m_externalFileName = value;
        }
        
        bool CPACSDateTimeBase::HasExternalDataDirectory() const
        {
            return static_cast<bool>(m_externalDataDirectory);
        }
        
        const std::string& CPACSDateTimeBase::GetExternalDataDirectory() const
        {
            return *m_externalDataDirectory;
        }
        
        void CPACSDateTimeBase::SetExternalDataDirectory(const std::string& value)
        {
            m_externalDataDirectory = value;
        }
        
        const time_t& CPACSDateTimeBase::GetSimpleContent() const
        {
            return m_simpleContent;
        }
        
        void CPACSDateTimeBase::SetSimpleContent(const time_t& value)
        {
            m_simpleContent = value;
        }
        
    }
}
