// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSCargoCrossBeamStrutsAssembly.h"
#include "CPACSCrossBeamStrutAssemblyPosition.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCrossBeamStrutAssemblyPosition::CPACSCrossBeamStrutAssemblyPosition(CCPACSCargoCrossBeamStrutsAssembly* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_positionYAtCrossBeam(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCrossBeamStrutAssemblyPosition::~CPACSCrossBeamStrutAssemblyPosition()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
        if (m_uidMgr) {
            if (!m_structuralElementUID.empty()) m_uidMgr->TryUnregisterReference(m_structuralElementUID, *this);
            if (!m_frameUID.empty()) m_uidMgr->TryUnregisterReference(m_frameUID, *this);
            if (!m_crossBeamUID.empty()) m_uidMgr->TryUnregisterReference(m_crossBeamUID, *this);
        }
    }

    const CCPACSCargoCrossBeamStrutsAssembly* CPACSCrossBeamStrutAssemblyPosition::GetParent() const
    {
        return m_parent;
    }

    CCPACSCargoCrossBeamStrutsAssembly* CPACSCrossBeamStrutAssemblyPosition::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCrossBeamStrutAssemblyPosition::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCrossBeamStrutAssemblyPosition::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSCrossBeamStrutAssemblyPosition::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSCrossBeamStrutAssemblyPosition::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSCrossBeamStrutAssemblyPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element structuralElementUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/structuralElementUID")) {
            m_structuralElementUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementUID");
            if (m_structuralElementUID.empty()) {
                LOG(WARNING) << "Required element structuralElementUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_structuralElementUID.empty()) m_uidMgr->RegisterReference(m_structuralElementUID, *this);
        }
        else {
            LOG(ERROR) << "Required element structuralElementUID is missing at xpath " << xpath;
        }

        // read element frameUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/frameUID")) {
            m_frameUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/frameUID");
            if (m_frameUID.empty()) {
                LOG(WARNING) << "Required element frameUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_frameUID.empty()) m_uidMgr->RegisterReference(m_frameUID, *this);
        }
        else {
            LOG(ERROR) << "Required element frameUID is missing at xpath " << xpath;
        }

        // read element crossBeamUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/crossBeamUID")) {
            m_crossBeamUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/crossBeamUID");
            if (m_crossBeamUID.empty()) {
                LOG(WARNING) << "Required element crossBeamUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_crossBeamUID.empty()) m_uidMgr->RegisterReference(m_crossBeamUID, *this);
        }
        else {
            LOG(ERROR) << "Required element crossBeamUID is missing at xpath " << xpath;
        }

        // read element positionYAtCrossBeam
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/positionYAtCrossBeam")) {
            m_positionYAtCrossBeam = tixi::TixiGetElement<double>(tixiHandle, xpath + "/positionYAtCrossBeam");
        }
        else {
            LOG(ERROR) << "Required element positionYAtCrossBeam is missing at xpath " << xpath;
        }

        // read element angleX
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/angleX")) {
            m_angleX = tixi::TixiGetElement<double>(tixiHandle, xpath + "/angleX");
        }

        // read element alignment
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
            m_alignment = boost::in_place(reinterpret_cast<CCPACSCrossBeamStrutAssemblyPosition*>(this), m_uidMgr);
            try {
                m_alignment->ReadCPACS(tixiHandle, xpath + "/alignment");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read alignment at xpath " << xpath << ": " << e.what();
                m_alignment = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSCrossBeamStrutAssemblyPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element structuralElementUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/structuralElementUID", m_structuralElementUID);

        // write element frameUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frameUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/frameUID", m_frameUID);

        // write element crossBeamUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crossBeamUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/crossBeamUID", m_crossBeamUID);

        // write element positionYAtCrossBeam
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionYAtCrossBeam");
        tixi::TixiSaveElement(tixiHandle, xpath + "/positionYAtCrossBeam", m_positionYAtCrossBeam);

        // write element angleX
        if (m_angleX) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleX");
            tixi::TixiSaveElement(tixiHandle, xpath + "/angleX", *m_angleX);
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/angleX")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/angleX");
            }
        }

        // write element alignment
        if (m_alignment) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alignment");
            m_alignment->WriteCPACS(tixiHandle, xpath + "/alignment");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/alignment");
            }
        }

    }

    const std::string& CPACSCrossBeamStrutAssemblyPosition::GetUID() const
    {
        return m_uID;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const std::string& CPACSCrossBeamStrutAssemblyPosition::GetStructuralElementUID() const
    {
        return m_structuralElementUID;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetStructuralElementUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_structuralElementUID.empty()) m_uidMgr->TryUnregisterReference(m_structuralElementUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_structuralElementUID = value;
    }

    const std::string& CPACSCrossBeamStrutAssemblyPosition::GetFrameUID() const
    {
        return m_frameUID;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetFrameUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_frameUID.empty()) m_uidMgr->TryUnregisterReference(m_frameUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_frameUID = value;
    }

    const std::string& CPACSCrossBeamStrutAssemblyPosition::GetCrossBeamUID() const
    {
        return m_crossBeamUID;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetCrossBeamUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_crossBeamUID.empty()) m_uidMgr->TryUnregisterReference(m_crossBeamUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_crossBeamUID = value;
    }

    const double& CPACSCrossBeamStrutAssemblyPosition::GetPositionYAtCrossBeam() const
    {
        return m_positionYAtCrossBeam;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetPositionYAtCrossBeam(const double& value)
    {
        m_positionYAtCrossBeam = value;
    }

    const boost::optional<double>& CPACSCrossBeamStrutAssemblyPosition::GetAngleX() const
    {
        return m_angleX;
    }

    void CPACSCrossBeamStrutAssemblyPosition::SetAngleX(const boost::optional<double>& value)
    {
        m_angleX = value;
    }

    const boost::optional<CPACSAlignmentCrossBeam>& CPACSCrossBeamStrutAssemblyPosition::GetAlignment() const
    {
        return m_alignment;
    }

    boost::optional<CPACSAlignmentCrossBeam>& CPACSCrossBeamStrutAssemblyPosition::GetAlignment()
    {
        return m_alignment;
    }

    CPACSAlignmentCrossBeam& CPACSCrossBeamStrutAssemblyPosition::GetAlignment(CreateIfNotExistsTag)
    {
        if (!m_alignment)
            m_alignment = boost::in_place(reinterpret_cast<CCPACSCrossBeamStrutAssemblyPosition*>(this), m_uidMgr);
        return *m_alignment;
    }

    void CPACSCrossBeamStrutAssemblyPosition::RemoveAlignment()
    {
        m_alignment = boost::none;
    }

    const CTiglUIDObject* CPACSCrossBeamStrutAssemblyPosition::GetNextUIDObject() const
    {
        return this;
    }

    void CPACSCrossBeamStrutAssemblyPosition::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_structuralElementUID == oldUid) {
            m_structuralElementUID = newUid;
        }
        if (m_frameUID == oldUid) {
            m_frameUID = newUid;
        }
        if (m_crossBeamUID == oldUid) {
            m_crossBeamUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
