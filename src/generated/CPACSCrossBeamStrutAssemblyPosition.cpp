// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrossBeamStrutAssemblyPosition.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrossBeamStrutAssemblyPosition::CPACSCrossBeamStrutAssemblyPosition(){}
        CPACSCrossBeamStrutAssemblyPosition::~CPACSCrossBeamStrutAssemblyPosition() {}
        
        void CPACSCrossBeamStrutAssemblyPosition::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element structuralElementUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/structuralElementUID")) {
                m_structuralElementUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/structuralElementUID");
            }
            else {
                LOG(ERROR) << "Required element structuralElementUID is missing";
            }
            
            // read element frameUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/frameUID")) {
                m_frameUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/frameUID");
            }
            else {
                LOG(ERROR) << "Required element frameUID is missing";
            }
            
            // read element crossBeamUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crossBeamUID")) {
                m_crossBeamUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/crossBeamUID");
            }
            else {
                LOG(ERROR) << "Required element crossBeamUID is missing";
            }
            
            // read element positionYAtCrossBeam
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionYAtCrossBeam")) {
                m_positionYAtCrossBeam = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/positionYAtCrossBeam");
            }
            else {
                LOG(ERROR) << "Required element positionYAtCrossBeam is missing";
            }
            
            // read element angleX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleX")) {
                m_angleX = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/angleX");
            }
            
            // read element alignment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/alignment")) {
                m_alignment = boost::in_place();
                try {
                    m_alignment->ReadCPACS(tixiHandle, xpath + "/alignment");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.what();
                    m_alignment = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read alignment at xpath << " << xpath << ": " << e.getError();
                    m_alignment = boost::none;
                }
            }
            
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element structuralElementUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/structuralElementUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/structuralElementUID", m_structuralElementUID);
            
            // write element frameUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/frameUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/frameUID", m_frameUID);
            
            // write element crossBeamUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crossBeamUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/crossBeamUID", m_crossBeamUID);
            
            // write element positionYAtCrossBeam
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionYAtCrossBeam");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionYAtCrossBeam", m_positionYAtCrossBeam);
            
            // write element angleX
            if (m_angleX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleX");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/angleX", *m_angleX);
            }
            
            // write element alignment
            if (m_alignment) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/alignment");
                m_alignment->WriteCPACS(tixiHandle, xpath + "/alignment");
            }
            
        }
        
        bool CPACSCrossBeamStrutAssemblyPosition::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSCrossBeamStrutAssemblyPosition::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const std::string& CPACSCrossBeamStrutAssemblyPosition::GetStructuralElementUID() const
        {
            return m_structuralElementUID;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetStructuralElementUID(const std::string& value)
        {
            m_structuralElementUID = value;
        }
        
        const std::string& CPACSCrossBeamStrutAssemblyPosition::GetFrameUID() const
        {
            return m_frameUID;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetFrameUID(const std::string& value)
        {
            m_frameUID = value;
        }
        
        const std::string& CPACSCrossBeamStrutAssemblyPosition::GetCrossBeamUID() const
        {
            return m_crossBeamUID;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetCrossBeamUID(const std::string& value)
        {
            m_crossBeamUID = value;
        }
        
        const double& CPACSCrossBeamStrutAssemblyPosition::GetPositionYAtCrossBeam() const
        {
            return m_positionYAtCrossBeam;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetPositionYAtCrossBeam(const double& value)
        {
            m_positionYAtCrossBeam = value;
        }
        
        bool CPACSCrossBeamStrutAssemblyPosition::HasAngleX() const
        {
            return static_cast<bool>(m_angleX);
        }
        
        const double& CPACSCrossBeamStrutAssemblyPosition::GetAngleX() const
        {
            return *m_angleX;
        }
        
        void CPACSCrossBeamStrutAssemblyPosition::SetAngleX(const double& value)
        {
            m_angleX = value;
        }
        
        bool CPACSCrossBeamStrutAssemblyPosition::HasAlignment() const
        {
            return static_cast<bool>(m_alignment);
        }
        
        const CPACSAlignmentCrossBeam& CPACSCrossBeamStrutAssemblyPosition::GetAlignment() const
        {
            return *m_alignment;
        }
        
        CPACSAlignmentCrossBeam& CPACSCrossBeamStrutAssemblyPosition::GetAlignment()
        {
            return *m_alignment;
        }
        
    }
}
