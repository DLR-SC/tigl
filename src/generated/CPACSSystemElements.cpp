// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSSystemElements.h"
#include "CPACSVehicles.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSSystemElements::CPACSSystemElements(CPACSVehicles* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSSystemElements::~CPACSSystemElements()
    {
    }

    const CPACSVehicles* CPACSSystemElements::GetParent() const
    {
        return m_parent;
    }

    CPACSVehicles* CPACSSystemElements::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSSystemElements::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSSystemElements::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSSystemElements::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSSystemElements::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSSystemElements::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element electricMotors
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/electricMotors")) {
            m_electricMotors = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_electricMotors->ReadCPACS(tixiHandle, xpath + "/electricMotors");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read electricMotors at xpath " << xpath << ": " << e.what();
                m_electricMotors = boost::none;
            }
        }

        // read element turboGenerators
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/turboGenerators")) {
            m_turboGenerators = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_turboGenerators->ReadCPACS(tixiHandle, xpath + "/turboGenerators");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read turboGenerators at xpath " << xpath << ": " << e.what();
                m_turboGenerators = boost::none;
            }
        }

        // read element heatExchangers
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/heatExchangers")) {
            m_heatExchangers = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_heatExchangers->ReadCPACS(tixiHandle, xpath + "/heatExchangers");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read heatExchangers at xpath " << xpath << ": " << e.what();
                m_heatExchangers = boost::none;
            }
        }

        // read element batteries
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/batteries")) {
            m_batteries = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_batteries->ReadCPACS(tixiHandle, xpath + "/batteries");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read batteries at xpath " << xpath << ": " << e.what();
                m_batteries = boost::none;
            }
        }

        // read element gasTurbines
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/gasTurbines")) {
            m_gasTurbines = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_gasTurbines->ReadCPACS(tixiHandle, xpath + "/gasTurbines");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read gasTurbines at xpath " << xpath << ": " << e.what();
                m_gasTurbines = boost::none;
            }
        }

        // read element gearBoxes
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/gearBoxes")) {
            m_gearBoxes = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_gearBoxes->ReadCPACS(tixiHandle, xpath + "/gearBoxes");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read gearBoxes at xpath " << xpath << ": " << e.what();
                m_gearBoxes = boost::none;
            }
        }

        // read element generators
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/generators")) {
            m_generators = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_generators->ReadCPACS(tixiHandle, xpath + "/generators");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read generators at xpath " << xpath << ": " << e.what();
                m_generators = boost::none;
            }
        }

        // read element genericComponents
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericComponents")) {
            m_genericComponents = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
            try {
                m_genericComponents->ReadCPACS(tixiHandle, xpath + "/genericComponents");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read genericComponents at xpath " << xpath << ": " << e.what();
                m_genericComponents = boost::none;
            }
        }

    }

    void CPACSSystemElements::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element electricMotors
        if (m_electricMotors) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/electricMotors");
            m_electricMotors->WriteCPACS(tixiHandle, xpath + "/electricMotors");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/electricMotors")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/electricMotors");
            }
        }

        // write element turboGenerators
        if (m_turboGenerators) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/turboGenerators");
            m_turboGenerators->WriteCPACS(tixiHandle, xpath + "/turboGenerators");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/turboGenerators")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/turboGenerators");
            }
        }

        // write element heatExchangers
        if (m_heatExchangers) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/heatExchangers");
            m_heatExchangers->WriteCPACS(tixiHandle, xpath + "/heatExchangers");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/heatExchangers")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/heatExchangers");
            }
        }

        // write element batteries
        if (m_batteries) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/batteries");
            m_batteries->WriteCPACS(tixiHandle, xpath + "/batteries");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/batteries")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/batteries");
            }
        }

        // write element gasTurbines
        if (m_gasTurbines) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gasTurbines");
            m_gasTurbines->WriteCPACS(tixiHandle, xpath + "/gasTurbines");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/gasTurbines")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/gasTurbines");
            }
        }

        // write element gearBoxes
        if (m_gearBoxes) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gearBoxes");
            m_gearBoxes->WriteCPACS(tixiHandle, xpath + "/gearBoxes");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/gearBoxes")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/gearBoxes");
            }
        }

        // write element generators
        if (m_generators) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/generators");
            m_generators->WriteCPACS(tixiHandle, xpath + "/generators");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/generators")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/generators");
            }
        }

        // write element genericComponents
        if (m_genericComponents) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/genericComponents");
            m_genericComponents->WriteCPACS(tixiHandle, xpath + "/genericComponents");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericComponents")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/genericComponents");
            }
        }

    }

    const boost::optional<CPACSElectricMotors>& CPACSSystemElements::GetElectricMotors() const
    {
        return m_electricMotors;
    }

    boost::optional<CPACSElectricMotors>& CPACSSystemElements::GetElectricMotors()
    {
        return m_electricMotors;
    }

    const boost::optional<CPACSTurboGenerators>& CPACSSystemElements::GetTurboGenerators() const
    {
        return m_turboGenerators;
    }

    boost::optional<CPACSTurboGenerators>& CPACSSystemElements::GetTurboGenerators()
    {
        return m_turboGenerators;
    }

    const boost::optional<CPACSHeatExchangers>& CPACSSystemElements::GetHeatExchangers() const
    {
        return m_heatExchangers;
    }

    boost::optional<CPACSHeatExchangers>& CPACSSystemElements::GetHeatExchangers()
    {
        return m_heatExchangers;
    }

    const boost::optional<CPACSBatteries>& CPACSSystemElements::GetBatteries() const
    {
        return m_batteries;
    }

    boost::optional<CPACSBatteries>& CPACSSystemElements::GetBatteries()
    {
        return m_batteries;
    }

    const boost::optional<CPACSGasTurbines>& CPACSSystemElements::GetGasTurbines() const
    {
        return m_gasTurbines;
    }

    boost::optional<CPACSGasTurbines>& CPACSSystemElements::GetGasTurbines()
    {
        return m_gasTurbines;
    }

    const boost::optional<CPACSGearBoxes>& CPACSSystemElements::GetGearBoxes() const
    {
        return m_gearBoxes;
    }

    boost::optional<CPACSGearBoxes>& CPACSSystemElements::GetGearBoxes()
    {
        return m_gearBoxes;
    }

    const boost::optional<CPACSGenerators>& CPACSSystemElements::GetGenerators() const
    {
        return m_generators;
    }

    boost::optional<CPACSGenerators>& CPACSSystemElements::GetGenerators()
    {
        return m_generators;
    }

    const boost::optional<CPACSGenericComponents>& CPACSSystemElements::GetGenericComponents() const
    {
        return m_genericComponents;
    }

    boost::optional<CPACSGenericComponents>& CPACSSystemElements::GetGenericComponents()
    {
        return m_genericComponents;
    }

    CPACSElectricMotors& CPACSSystemElements::GetElectricMotors(CreateIfNotExistsTag)
    {
        if (!m_electricMotors)
            m_electricMotors = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_electricMotors;
    }

    void CPACSSystemElements::RemoveElectricMotors()
    {
        m_electricMotors = boost::none;
    }

    CPACSTurboGenerators& CPACSSystemElements::GetTurboGenerators(CreateIfNotExistsTag)
    {
        if (!m_turboGenerators)
            m_turboGenerators = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_turboGenerators;
    }

    void CPACSSystemElements::RemoveTurboGenerators()
    {
        m_turboGenerators = boost::none;
    }

    CPACSHeatExchangers& CPACSSystemElements::GetHeatExchangers(CreateIfNotExistsTag)
    {
        if (!m_heatExchangers)
            m_heatExchangers = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_heatExchangers;
    }

    void CPACSSystemElements::RemoveHeatExchangers()
    {
        m_heatExchangers = boost::none;
    }

    CPACSBatteries& CPACSSystemElements::GetBatteries(CreateIfNotExistsTag)
    {
        if (!m_batteries)
            m_batteries = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_batteries;
    }

    void CPACSSystemElements::RemoveBatteries()
    {
        m_batteries = boost::none;
    }

    CPACSGasTurbines& CPACSSystemElements::GetGasTurbines(CreateIfNotExistsTag)
    {
        if (!m_gasTurbines)
            m_gasTurbines = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_gasTurbines;
    }

    void CPACSSystemElements::RemoveGasTurbines()
    {
        m_gasTurbines = boost::none;
    }

    CPACSGearBoxes& CPACSSystemElements::GetGearBoxes(CreateIfNotExistsTag)
    {
        if (!m_gearBoxes)
            m_gearBoxes = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_gearBoxes;
    }

    void CPACSSystemElements::RemoveGearBoxes()
    {
        m_gearBoxes = boost::none;
    }

    CPACSGenerators& CPACSSystemElements::GetGenerators(CreateIfNotExistsTag)
    {
        if (!m_generators)
            m_generators = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_generators;
    }

    void CPACSSystemElements::RemoveGenerators()
    {
        m_generators = boost::none;
    }

    CPACSGenericComponents& CPACSSystemElements::GetGenericComponents(CreateIfNotExistsTag)
    {
        if (!m_genericComponents)
            m_genericComponents = boost::in_place(reinterpret_cast<CCPACSSystemElements*>(this), m_uidMgr);
        return *m_genericComponents;
    }

    void CPACSSystemElements::RemoveGenericComponents()
    {
        m_genericComponents = boost::none;
    }

} // namespace generated
} // namespace tigl
