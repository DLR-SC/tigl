// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "CPACSWingRibCell.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingRibCell::CPACSWingRibCell(CTiglUIDManager* uidMgr) :
            m_uidMgr(uidMgr), 
            m_ribRotation(m_uidMgr) {}
        
        CPACSWingRibCell::~CPACSWingRibCell()
        {
            if (m_uidMgr && m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
        }
        
        CTiglUIDManager& CPACSWingRibCell::GetUIDManager()
        {
            return *m_uidMgr;
        }
        
        const CTiglUIDManager& CPACSWingRibCell::GetUIDManager() const
        {
            return *m_uidMgr;
        }
        
        void CPACSWingRibCell::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
                if (m_uID->empty()) {
                    LOG(WARNING) << "Optional attribute uID is present but empty at xpath " << xpath;
                }
            }
            
            // read element fromRib
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/fromRib")) {
                m_fromRib = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/fromRib");
                if (m_fromRib.empty()) {
                    LOG(WARNING) << "Required element fromRib is empty at xpath " << xpath;
                }
            }
            else {
                LOG(ERROR) << "Required element fromRib is missing at xpath " << xpath;
            }
            
            // read element toRib
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/toRib")) {
                m_toRib = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/toRib");
                if (m_toRib.empty()) {
                    LOG(WARNING) << "Required element toRib is empty at xpath " << xpath;
                }
            }
            else {
                LOG(ERROR) << "Required element toRib is missing at xpath " << xpath;
            }
            
            // read element ribRotation
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/ribRotation")) {
                m_ribRotation.ReadCPACS(tixiHandle, xpath + "/ribRotation");
            }
            else {
                LOG(ERROR) << "Required element ribRotation is missing at xpath " << xpath;
            }
            
            // read element material
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/material")) {
                m_material.ReadCPACS(tixiHandle, xpath + "/material");
            }
            else {
                LOG(ERROR) << "Required element material is missing at xpath " << xpath;
            }
            
            // read element upperCap
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/upperCap")) {
                m_upperCap.ReadCPACS(tixiHandle, xpath + "/upperCap");
            }
            else {
                LOG(ERROR) << "Required element upperCap is missing at xpath " << xpath;
            }
            
            // read element lowerCap
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/lowerCap")) {
                m_lowerCap.ReadCPACS(tixiHandle, xpath + "/lowerCap");
            }
            else {
                LOG(ERROR) << "Required element lowerCap is missing at xpath " << xpath;
            }
            
            if (m_uidMgr && m_uID) m_uidMgr->RegisterObject(*m_uID, *this);
        }
        
        void CPACSWingRibCell::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            } else {
                if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                    tixi::TixiRemoveAttribute(tixiHandle, xpath, "uID");
                }
            }
            
            // write element fromRib
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/fromRib");
            tixi::TixiSaveElement(tixiHandle, xpath + "/fromRib", m_fromRib);
            
            // write element toRib
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toRib");
            tixi::TixiSaveElement(tixiHandle, xpath + "/toRib", m_toRib);
            
            // write element ribRotation
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/ribRotation");
            m_ribRotation.WriteCPACS(tixiHandle, xpath + "/ribRotation");
            
            // write element material
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/material");
            m_material.WriteCPACS(tixiHandle, xpath + "/material");
            
            // write element upperCap
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperCap");
            m_upperCap.WriteCPACS(tixiHandle, xpath + "/upperCap");
            
            // write element lowerCap
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerCap");
            m_lowerCap.WriteCPACS(tixiHandle, xpath + "/lowerCap");
            
        }
        
        const boost::optional<std::string>& CPACSWingRibCell::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSWingRibCell::SetUID(const std::string& value)
        {
            if (m_uidMgr) {
                if (m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
                m_uidMgr->RegisterObject(value, *this);
            }
            m_uID = value;
        }
        
        void CPACSWingRibCell::SetUID(const boost::optional<std::string>& value)
        {
            if (m_uidMgr) {
                if (m_uID) m_uidMgr->TryUnregisterObject(*m_uID);
                if (value) m_uidMgr->RegisterObject(*value, *this);
            }
            m_uID = value;
        }
        
        const std::string& CPACSWingRibCell::GetFromRib() const
        {
            return m_fromRib;
        }
        
        void CPACSWingRibCell::SetFromRib(const std::string& value)
        {
            m_fromRib = value;
        }
        
        const std::string& CPACSWingRibCell::GetToRib() const
        {
            return m_toRib;
        }
        
        void CPACSWingRibCell::SetToRib(const std::string& value)
        {
            m_toRib = value;
        }
        
        const CPACSPointX& CPACSWingRibCell::GetRibRotation() const
        {
            return m_ribRotation;
        }
        
        CPACSPointX& CPACSWingRibCell::GetRibRotation()
        {
            return m_ribRotation;
        }
        
        const CCPACSMaterialDefinition& CPACSWingRibCell::GetMaterial() const
        {
            return m_material;
        }
        
        CCPACSMaterialDefinition& CPACSWingRibCell::GetMaterial()
        {
            return m_material;
        }
        
        const CPACSCap& CPACSWingRibCell::GetUpperCap() const
        {
            return m_upperCap;
        }
        
        CPACSCap& CPACSWingRibCell::GetUpperCap()
        {
            return m_upperCap;
        }
        
        const CPACSCap& CPACSWingRibCell::GetLowerCap() const
        {
            return m_lowerCap;
        }
        
        CPACSCap& CPACSWingRibCell::GetLowerCap()
        {
            return m_lowerCap;
        }
        
    }
}
