// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCutLoadIntegrationPoints.h"

namespace tigl
{
    namespace generated
    {
        CPACSCutLoadIntegrationPoints::CPACSCutLoadIntegrationPoints(){}
        CPACSCutLoadIntegrationPoints::~CPACSCutLoadIntegrationPoints() {}
        
        void CPACSCutLoadIntegrationPoints::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element uIDs
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/uIDs")) {
                m_uIDs.ReadCPACS(tixiHandle, xpath + "/uIDs");
            }
            else {
                LOG(ERROR) << "Required element uIDs is missing";
            }
            
            // read element x
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/x")) {
                m_x.ReadCPACS(tixiHandle, xpath + "/x");
            }
            else {
                LOG(ERROR) << "Required element x is missing";
            }
            
            // read element y
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/y")) {
                m_y.ReadCPACS(tixiHandle, xpath + "/y");
            }
            else {
                LOG(ERROR) << "Required element y is missing";
            }
            
            // read element z
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/z")) {
                m_z.ReadCPACS(tixiHandle, xpath + "/z");
            }
            else {
                LOG(ERROR) << "Required element z is missing";
            }
            
            // read element orientationX
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientationX")) {
                m_orientationX = boost::in_place();
                try {
                    m_orientationX->ReadCPACS(tixiHandle, xpath + "/orientationX");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientationX at xpath << " << xpath << ": " << e.what();
                    m_orientationX = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientationX at xpath << " << xpath << ": " << e.getError();
                    m_orientationX = boost::none;
                }
            }
            
            // read element orientationY
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientationY")) {
                m_orientationY = boost::in_place();
                try {
                    m_orientationY->ReadCPACS(tixiHandle, xpath + "/orientationY");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientationY at xpath << " << xpath << ": " << e.what();
                    m_orientationY = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientationY at xpath << " << xpath << ": " << e.getError();
                    m_orientationY = boost::none;
                }
            }
            
            // read element orientationZ
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/orientationZ")) {
                m_orientationZ = boost::in_place();
                try {
                    m_orientationZ->ReadCPACS(tixiHandle, xpath + "/orientationZ");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read orientationZ at xpath << " << xpath << ": " << e.what();
                    m_orientationZ = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read orientationZ at xpath << " << xpath << ": " << e.getError();
                    m_orientationZ = boost::none;
                }
            }
            
        }
        
        void CPACSCutLoadIntegrationPoints::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element uIDs
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uIDs");
            m_uIDs.WriteCPACS(tixiHandle, xpath + "/uIDs");
            
            // write element x
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/x");
            m_x.WriteCPACS(tixiHandle, xpath + "/x");
            
            // write element y
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/y");
            m_y.WriteCPACS(tixiHandle, xpath + "/y");
            
            // write element z
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/z");
            m_z.WriteCPACS(tixiHandle, xpath + "/z");
            
            // write element orientationX
            if (m_orientationX) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationX");
                m_orientationX->WriteCPACS(tixiHandle, xpath + "/orientationX");
            }
            
            // write element orientationY
            if (m_orientationY) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationY");
                m_orientationY->WriteCPACS(tixiHandle, xpath + "/orientationY");
            }
            
            // write element orientationZ
            if (m_orientationZ) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/orientationZ");
                m_orientationZ->WriteCPACS(tixiHandle, xpath + "/orientationZ");
            }
            
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetUIDs() const
        {
            return m_uIDs;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetUIDs()
        {
            return m_uIDs;
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetX() const
        {
            return m_x;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetX()
        {
            return m_x;
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetY() const
        {
            return m_y;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetY()
        {
            return m_y;
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetZ() const
        {
            return m_z;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetZ()
        {
            return m_z;
        }
        
        bool CPACSCutLoadIntegrationPoints::HasOrientationX() const
        {
            return static_cast<bool>(m_orientationX);
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationX() const
        {
            return *m_orientationX;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationX()
        {
            return *m_orientationX;
        }
        
        bool CPACSCutLoadIntegrationPoints::HasOrientationY() const
        {
            return static_cast<bool>(m_orientationY);
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationY() const
        {
            return *m_orientationY;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationY()
        {
            return *m_orientationY;
        }
        
        bool CPACSCutLoadIntegrationPoints::HasOrientationZ() const
        {
            return static_cast<bool>(m_orientationZ);
        }
        
        const CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationZ() const
        {
            return *m_orientationZ;
        }
        
        CCPACSStringVector& CPACSCutLoadIntegrationPoints::GetOrientationZ()
        {
            return *m_orientationZ;
        }
        
    }
}
