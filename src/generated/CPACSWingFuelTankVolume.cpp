// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingFuelTankVolume.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingFuelTankVolume::CPACSWingFuelTankVolume(){}
        CPACSWingFuelTankVolume::~CPACSWingFuelTankVolume() {}
        
        void CPACSWingFuelTankVolume::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element optimalVolume
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/optimalVolume")) {
                m_optimalVolume = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/optimalVolume");
            }
            else {
                LOG(ERROR) << "Required element optimalVolume is missing";
            }
            
            // read element usableVolume
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/usableVolume")) {
                m_usableVolume_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/usableVolume");
            }
            
            // read element realVolume
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/realVolume")) {
                m_realVolume_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/realVolume");
            }
            
            // read element useableVolumeFactor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/useableVolumeFactor")) {
                m_useableVolumeFactor_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/useableVolumeFactor");
            }
            
            // read element realVolumeFactor
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/realVolumeFactor")) {
                m_realVolumeFactor_choice2 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/realVolumeFactor");
            }
            
        }
        
        void CPACSWingFuelTankVolume::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element optimalVolume
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/optimalVolume");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/optimalVolume", m_optimalVolume);
            
            // write element usableVolume
            if (m_usableVolume_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/usableVolume");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/usableVolume", *m_usableVolume_choice1);
            }
            
            // write element realVolume
            if (m_realVolume_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/realVolume");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/realVolume", *m_realVolume_choice1);
            }
            
            // write element useableVolumeFactor
            if (m_useableVolumeFactor_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/useableVolumeFactor");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/useableVolumeFactor", *m_useableVolumeFactor_choice2);
            }
            
            // write element realVolumeFactor
            if (m_realVolumeFactor_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/realVolumeFactor");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/realVolumeFactor", *m_realVolumeFactor_choice2);
            }
            
        }
        
        const double& CPACSWingFuelTankVolume::GetOptimalVolume() const
        {
            return m_optimalVolume;
        }
        
        void CPACSWingFuelTankVolume::SetOptimalVolume(const double& value)
        {
            m_optimalVolume = value;
        }
        
        bool CPACSWingFuelTankVolume::HasUsableVolume_choice1() const
        {
            return static_cast<bool>(m_usableVolume_choice1);
        }
        
        const double& CPACSWingFuelTankVolume::GetUsableVolume_choice1() const
        {
            return *m_usableVolume_choice1;
        }
        
        void CPACSWingFuelTankVolume::SetUsableVolume_choice1(const double& value)
        {
            m_usableVolume_choice1 = value;
        }
        
        bool CPACSWingFuelTankVolume::HasRealVolume_choice1() const
        {
            return static_cast<bool>(m_realVolume_choice1);
        }
        
        const double& CPACSWingFuelTankVolume::GetRealVolume_choice1() const
        {
            return *m_realVolume_choice1;
        }
        
        void CPACSWingFuelTankVolume::SetRealVolume_choice1(const double& value)
        {
            m_realVolume_choice1 = value;
        }
        
        bool CPACSWingFuelTankVolume::HasUseableVolumeFactor_choice2() const
        {
            return static_cast<bool>(m_useableVolumeFactor_choice2);
        }
        
        const double& CPACSWingFuelTankVolume::GetUseableVolumeFactor_choice2() const
        {
            return *m_useableVolumeFactor_choice2;
        }
        
        void CPACSWingFuelTankVolume::SetUseableVolumeFactor_choice2(const double& value)
        {
            m_useableVolumeFactor_choice2 = value;
        }
        
        bool CPACSWingFuelTankVolume::HasRealVolumeFactor_choice2() const
        {
            return static_cast<bool>(m_realVolumeFactor_choice2);
        }
        
        const double& CPACSWingFuelTankVolume::GetRealVolumeFactor_choice2() const
        {
            return *m_realVolumeFactor_choice2;
        }
        
        void CPACSWingFuelTankVolume::SetRealVolumeFactor_choice2(const double& value)
        {
            m_realVolumeFactor_choice2 = value;
        }
        
    }
}
