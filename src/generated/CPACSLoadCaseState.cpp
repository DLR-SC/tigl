// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLoadCaseState.h"

namespace tigl
{
    namespace generated
    {
        CPACSLoadCaseState::CPACSLoadCaseState(){}
        CPACSLoadCaseState::~CPACSLoadCaseState() {}
        
        void CPACSLoadCaseState::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element atmosphericConditions
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/atmosphericConditions")) {
                m_atmosphericConditions = boost::in_place();
                try {
                    m_atmosphericConditions->ReadCPACS(tixiHandle, xpath + "/atmosphericConditions");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read atmosphericConditions at xpath << " << xpath << ": " << e.what();
                    m_atmosphericConditions = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read atmosphericConditions at xpath << " << xpath << ": " << e.getError();
                    m_atmosphericConditions = boost::none;
                }
            }
            
            // read element trimParameters
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/trimParameters")) {
                m_trimParameters = boost::in_place();
                try {
                    m_trimParameters->ReadCPACS(tixiHandle, xpath + "/trimParameters");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read trimParameters at xpath << " << xpath << ": " << e.what();
                    m_trimParameters = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read trimParameters at xpath << " << xpath << ": " << e.getError();
                    m_trimParameters = boost::none;
                }
            }
            
            // read element wind
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/wind")) {
                m_wind = boost::in_place();
                try {
                    m_wind->ReadCPACS(tixiHandle, xpath + "/wind");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read wind at xpath << " << xpath << ": " << e.what();
                    m_wind = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read wind at xpath << " << xpath << ": " << e.getError();
                    m_wind = boost::none;
                }
            }
            
            // read element attitudeAndMotion
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/attitudeAndMotion")) {
                m_attitudeAndMotion = boost::in_place();
                try {
                    m_attitudeAndMotion->ReadCPACS(tixiHandle, xpath + "/attitudeAndMotion");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read attitudeAndMotion at xpath << " << xpath << ": " << e.what();
                    m_attitudeAndMotion = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read attitudeAndMotion at xpath << " << xpath << ": " << e.getError();
                    m_attitudeAndMotion = boost::none;
                }
            }
            
        }
        
        void CPACSLoadCaseState::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element atmosphericConditions
            if (m_atmosphericConditions) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/atmosphericConditions");
                m_atmosphericConditions->WriteCPACS(tixiHandle, xpath + "/atmosphericConditions");
            }
            
            // write element trimParameters
            if (m_trimParameters) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/trimParameters");
                m_trimParameters->WriteCPACS(tixiHandle, xpath + "/trimParameters");
            }
            
            // write element wind
            if (m_wind) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/wind");
                m_wind->WriteCPACS(tixiHandle, xpath + "/wind");
            }
            
            // write element attitudeAndMotion
            if (m_attitudeAndMotion) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/attitudeAndMotion");
                m_attitudeAndMotion->WriteCPACS(tixiHandle, xpath + "/attitudeAndMotion");
            }
            
        }
        
        bool CPACSLoadCaseState::HasAtmosphericConditions() const
        {
            return static_cast<bool>(m_atmosphericConditions);
        }
        
        const CPACSAtmosphericConditions& CPACSLoadCaseState::GetAtmosphericConditions() const
        {
            return *m_atmosphericConditions;
        }
        
        CPACSAtmosphericConditions& CPACSLoadCaseState::GetAtmosphericConditions()
        {
            return *m_atmosphericConditions;
        }
        
        bool CPACSLoadCaseState::HasTrimParameters() const
        {
            return static_cast<bool>(m_trimParameters);
        }
        
        const CPACSTrimParameters& CPACSLoadCaseState::GetTrimParameters() const
        {
            return *m_trimParameters;
        }
        
        CPACSTrimParameters& CPACSLoadCaseState::GetTrimParameters()
        {
            return *m_trimParameters;
        }
        
        bool CPACSLoadCaseState::HasWind() const
        {
            return static_cast<bool>(m_wind);
        }
        
        const CPACSPointXYZ& CPACSLoadCaseState::GetWind() const
        {
            return *m_wind;
        }
        
        CPACSPointXYZ& CPACSLoadCaseState::GetWind()
        {
            return *m_wind;
        }
        
        bool CPACSLoadCaseState::HasAttitudeAndMotion() const
        {
            return static_cast<bool>(m_attitudeAndMotion);
        }
        
        const CPACSAttitudeAndMotion& CPACSLoadCaseState::GetAttitudeAndMotion() const
        {
            return *m_attitudeAndMotion;
        }
        
        CPACSAttitudeAndMotion& CPACSLoadCaseState::GetAttitudeAndMotion()
        {
            return *m_attitudeAndMotion;
        }
        
    }
}
