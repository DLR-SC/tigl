// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDeltaTemperature.h"

namespace tigl
{
    namespace generated
    {
        CPACSDeltaTemperature::CPACSDeltaTemperature(){}
        CPACSDeltaTemperature::~CPACSDeltaTemperature() {}
        
        void CPACSDeltaTemperature::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element total
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/total")) {
                m_total.ReadCPACS(tixiHandle, xpath + "/total");
            }
            else {
                LOG(ERROR) << "Required element total is missing";
            }
            
            // read element cO2
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cO2")) {
                m_cO2.ReadCPACS(tixiHandle, xpath + "/cO2");
            }
            else {
                LOG(ERROR) << "Required element cO2 is missing";
            }
            
            // read element h2O
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/h2O")) {
                m_h2O.ReadCPACS(tixiHandle, xpath + "/h2O");
            }
            else {
                LOG(ERROR) << "Required element h2O is missing";
            }
            
            // read element o3
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/o3")) {
                m_o3.ReadCPACS(tixiHandle, xpath + "/o3");
            }
            else {
                LOG(ERROR) << "Required element o3 is missing";
            }
            
            // read element cH4
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cH4")) {
                m_cH4.ReadCPACS(tixiHandle, xpath + "/cH4");
            }
            else {
                LOG(ERROR) << "Required element cH4 is missing";
            }
            
            // read element cont
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cont")) {
                m_cont.ReadCPACS(tixiHandle, xpath + "/cont");
            }
            else {
                LOG(ERROR) << "Required element cont is missing";
            }
            
            // read element pmo
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/pmo")) {
                m_pmo.ReadCPACS(tixiHandle, xpath + "/pmo");
            }
            else {
                LOG(ERROR) << "Required element pmo is missing";
            }
            
        }
        
        void CPACSDeltaTemperature::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element total
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/total");
            m_total.WriteCPACS(tixiHandle, xpath + "/total");
            
            // write element cO2
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cO2");
            m_cO2.WriteCPACS(tixiHandle, xpath + "/cO2");
            
            // write element h2O
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/h2O");
            m_h2O.WriteCPACS(tixiHandle, xpath + "/h2O");
            
            // write element o3
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/o3");
            m_o3.WriteCPACS(tixiHandle, xpath + "/o3");
            
            // write element cH4
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cH4");
            m_cH4.WriteCPACS(tixiHandle, xpath + "/cH4");
            
            // write element cont
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cont");
            m_cont.WriteCPACS(tixiHandle, xpath + "/cont");
            
            // write element pmo
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/pmo");
            m_pmo.WriteCPACS(tixiHandle, xpath + "/pmo");
            
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetTotal() const
        {
            return m_total;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetTotal()
        {
            return m_total;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetCO2() const
        {
            return m_cO2;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetCO2()
        {
            return m_cO2;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetH2O() const
        {
            return m_h2O;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetH2O()
        {
            return m_h2O;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetO3() const
        {
            return m_o3;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetO3()
        {
            return m_o3;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetCH4() const
        {
            return m_cH4;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetCH4()
        {
            return m_cH4;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetCont() const
        {
            return m_cont;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetCont()
        {
            return m_cont;
        }
        
        const CCPACSStringVector& CPACSDeltaTemperature::GetPmo() const
        {
            return m_pmo;
        }
        
        CCPACSStringVector& CPACSDeltaTemperature::GetPmo()
        {
            return m_pmo;
        }
        
    }
}
