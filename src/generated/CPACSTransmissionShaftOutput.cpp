// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSTransmissionShaftOutput.h"

namespace tigl
{
    namespace generated
    {
        CPACSTransmissionShaftOutput::CPACSTransmissionShaftOutput(){}
        CPACSTransmissionShaftOutput::~CPACSTransmissionShaftOutput() {}
        
        void CPACSTransmissionShaftOutput::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            else {
                LOG(ERROR) << "Required attribute uID is missing";
            }
            
            // read element nominalRotationsPerMinute
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nominalRotationsPerMinute")) {
                m_nominalRotationsPerMinute_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/nominalRotationsPerMinute");
            }
            
            // read element gearRatio
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/gearRatio")) {
                m_gearRatio_choice2 = boost::in_place();
                try {
                    m_gearRatio_choice2->ReadCPACS(tixiHandle, xpath + "/gearRatio");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read gearRatio at xpath << " << xpath << ": " << e.what();
                    m_gearRatio_choice2 = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read gearRatio at xpath << " << xpath << ": " << e.getError();
                    m_gearRatio_choice2 = boost::none;
                }
            }
            
        }
        
        void CPACSTransmissionShaftOutput::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
            tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);
            
            // write element nominalRotationsPerMinute
            if (m_nominalRotationsPerMinute_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nominalRotationsPerMinute");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/nominalRotationsPerMinute", *m_nominalRotationsPerMinute_choice1);
            }
            
            // write element gearRatio
            if (m_gearRatio_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/gearRatio");
                m_gearRatio_choice2->WriteCPACS(tixiHandle, xpath + "/gearRatio");
            }
            
        }
        
        const std::string& CPACSTransmissionShaftOutput::GetUID() const
        {
            return m_uID;
        }
        
        void CPACSTransmissionShaftOutput::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSTransmissionShaftOutput::HasNominalRotationsPerMinute_choice1() const
        {
            return static_cast<bool>(m_nominalRotationsPerMinute_choice1);
        }
        
        const double& CPACSTransmissionShaftOutput::GetNominalRotationsPerMinute_choice1() const
        {
            return *m_nominalRotationsPerMinute_choice1;
        }
        
        void CPACSTransmissionShaftOutput::SetNominalRotationsPerMinute_choice1(const double& value)
        {
            m_nominalRotationsPerMinute_choice1 = value;
        }
        
        bool CPACSTransmissionShaftOutput::HasGearRatio_choice2() const
        {
            return static_cast<bool>(m_gearRatio_choice2);
        }
        
        const CPACSTransmissionGearRatio& CPACSTransmissionShaftOutput::GetGearRatio_choice2() const
        {
            return *m_gearRatio_choice2;
        }
        
        CPACSTransmissionGearRatio& CPACSTransmissionShaftOutput::GetGearRatio_choice2()
        {
            return *m_gearRatio_choice2;
        }
        
    }
}
