// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSTransformation.h>
#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSNacelleSections;

namespace generated
{
    // This class is used in:
    // CPACSNacelleSections

    /// @brief Section
    /// 
    /// An engine nacelle is defined by sections, where at least one and up to an infinite number of sections can be specified.
    /// Lofting of the nacelle surface along the sections is done in cylindrical coordinates.
    /// The coordinate origin refers to the center of the fan , i.e. the sections and their profiles are typically shifted in negative x-direction.
    /// Note : In the current CPACS release, transformations are still labeled as Cartesian coordinates.
    /// It is current work in progress to explicitly introduce cylindrical coordinates.
    /// Until this is implemented in a future CPACS release, the implicit conventions listed below apply:
    /// Translation component Cylindrical coordinate equivalent Description x ϑ Rotation angle around x y h Horizontal translation z r Radial translation The following example illustrates the setup of a nacelle with 4 sections.
    /// These are rotated by 0, 120, 180 and 240 degrees around the x -axis (given by translation/x ).
    /// To illustrate the possible transformations, the profile of the upper section is shifted slightly further in the negative x -direction ( translation/y ), while the lower section has a smaller radial distance from the rotation axis ( translation/z ).
    /// In addition, the sections are scaled differently ( transformation/scaling ; not shown in the example figures) in order to create a straight trailing edge and to realize a flattened profile near the ground.
    /// The following example also shows the profile cut-outs due to the radially symmetric inner region of the nacelle defined by the rotationCurve . For detailed information, please refer to the documentation of the rotationCurve element.
    /// @see nacelle_sections
    /// The first section is not rotated ( x=ϑ=0 ), but shifted vertically in negative direction ( y=h=-0.257 ).
    /// The radial distance is given by z=r=0.365 :
    /// 
    /// &lt;section uID="fanCowl_upperSection"&gt;
    /// &lt;name&gt;Upper section&lt;/name&gt;
    /// &lt;transformation&gt;
    /// &lt;scaling&gt;
    /// &lt;x&gt;1.055&lt;/x&gt;
    /// &lt;y&gt;1&lt;/y&gt;
    /// &lt;z&gt;1&lt;/z&gt;
    /// &lt;/scaling&gt;
    /// &lt;translation&gt;
    /// &lt;x&gt;0.0&lt;/x&gt;
    /// &lt;y&gt;-0.257&lt;/y&gt;
    /// &lt;z&gt;0.365&lt;/z&gt;
    /// &lt;/translation&gt;
    /// &lt;/transformation&gt;
    /// &lt;profileUID&gt;fanCowlUpperSectionProfile&lt;/profileUID&gt;
    /// &lt;/section&gt;
    /// The second section is rotated around the x -axis ( x=ϑ=120 ) as well as scaled by a factor of 1.1 in its profile height:
    /// 
    /// &lt;section uID="fanCowl_inboardSection"&gt;
    /// &lt;name&gt;Inboard section&lt;/name&gt;
    /// &lt;transformation&gt;
    /// &lt;scaling&gt;
    /// &lt;x&gt;1&lt;/x&gt;
    /// &lt;y&gt;1&lt;/y&gt;
    /// &lt;z&gt;1.1&lt;/z&gt;
    /// &lt;/scaling&gt;
    /// &lt;translation&gt;
    /// &lt;x&gt;120.0&lt;/x&gt;
    /// &lt;y&gt;-0.2&lt;/y&gt;
    /// &lt;z&gt;0.365&lt;/z&gt;
    /// &lt;/translation&gt;
    /// &lt;/transformation&gt;
    /// &lt;profileUID&gt;fanCowlUpperSectionProfile&lt;/profileUID&gt;
    /// &lt;/section&gt;
    /// The third section is rotated around the x -axis by 180° and scaled by a factor of 0.8 in its profile height:
    /// 
    /// &lt;section uID="fanCowl_lowerSection"&gt;
    /// &lt;name&gt;Lower section&lt;/name&gt;
    /// &lt;transformation&gt;
    /// &lt;scaling&gt;
    /// &lt;x&gt;1&lt;/x&gt;
    /// &lt;y&gt;1&lt;/y&gt;
    /// &lt;z&gt;0.8&lt;/z&gt;
    /// &lt;/scaling&gt;
    /// &lt;translation&gt;
    /// &lt;x&gt;180.0&lt;/x&gt;
    /// &lt;y&gt;-0.2&lt;/y&gt;
    /// &lt;z&gt;0.33&lt;/z&gt;
    /// &lt;/translation&gt;
    /// &lt;/transformation&gt;
    /// &lt;profileUID&gt;fanCowlUpperSectionProfile&lt;/profileUID&gt;
    /// &lt;/section&gt;
    /// 
    class CPACSNacelleSection : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSNacelleSection(CCPACSNacelleSections* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSNacelleSection();

        TIGL_EXPORT CCPACSNacelleSections* GetParent();

        TIGL_EXPORT const CCPACSNacelleSections* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetName() const;
        TIGL_EXPORT virtual void SetName(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const CCPACSTransformation& GetTransformation() const;
        TIGL_EXPORT virtual CCPACSTransformation& GetTransformation();

        TIGL_EXPORT virtual const std::string& GetProfileUID() const;
        TIGL_EXPORT virtual void SetProfileUID(const std::string& value);

    protected:
        CCPACSNacelleSections* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                  m_uID;

        /// Name
        std::string                  m_name;

        /// Description
        boost::optional<std::string> m_description;

        CCPACSTransformation         m_transformation;

        /// UID of the profile
        std::string                  m_profileUID;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSNacelleSection(const CPACSNacelleSection&) = delete;
        CPACSNacelleSection& operator=(const CPACSNacelleSection&) = delete;

        CPACSNacelleSection(CPACSNacelleSection&&) = delete;
        CPACSNacelleSection& operator=(CPACSNacelleSection&&) = delete;
    };
} // namespace generated

// CPACSNacelleSection is customized, use type CCPACSNacelleSection directly
} // namespace tigl
