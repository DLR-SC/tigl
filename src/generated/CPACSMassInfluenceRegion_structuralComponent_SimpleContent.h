// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <cctype>

#include "CTiglError.h"

namespace tigl
{
    namespace generated
    {
        // This enum is used in:
        // CPACSMassInfluenceRegion_structuralComponent
        
        // generated from /xsd:schema/xsd:complexType[637]/xsd:complexContent/xsd:extension/xsd:sequence/xsd:element[1]/xsd:complexType/xsd:simpleContent
        #ifdef HAVE_CPP11
        enum class CPACSMassInfluenceRegion_structuralComponent_SimpleContent
        #else
        enum CPACSMassInfluenceRegion_structuralComponent_SimpleContent
        #endif
        {
            all,
            surface,
            floor,
            cargoFloor,
            frame
        };
        
        #ifdef HAVE_CPP11
        inline std::string CPACSMassInfluenceRegion_structuralComponent_SimpleContentToString(const CPACSMassInfluenceRegion_structuralComponent_SimpleContent& value)
        {
            switch(value) {
            case CPACSMassInfluenceRegion_structuralComponent_SimpleContent::all: return "all";
            case CPACSMassInfluenceRegion_structuralComponent_SimpleContent::surface: return "surface";
            case CPACSMassInfluenceRegion_structuralComponent_SimpleContent::floor: return "floor";
            case CPACSMassInfluenceRegion_structuralComponent_SimpleContent::cargoFloor: return "cargoFloor";
            case CPACSMassInfluenceRegion_structuralComponent_SimpleContent::frame: return "frame";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSMassInfluenceRegion_structuralComponent_SimpleContent");
            }
        }
        inline CPACSMassInfluenceRegion_structuralComponent_SimpleContent stringToCPACSMassInfluenceRegion_structuralComponent_SimpleContent(const std::string& value)
        {
            auto toLower = [](std::string str) { for (char& c : str) { c = std::tolower(c); } return str; };
            if (toLower(value) == "all") { return CPACSMassInfluenceRegion_structuralComponent_SimpleContent::all; }
            if (toLower(value) == "surface") { return CPACSMassInfluenceRegion_structuralComponent_SimpleContent::surface; }
            if (toLower(value) == "floor") { return CPACSMassInfluenceRegion_structuralComponent_SimpleContent::floor; }
            if (toLower(value) == "cargofloor") { return CPACSMassInfluenceRegion_structuralComponent_SimpleContent::cargoFloor; }
            if (toLower(value) == "frame") { return CPACSMassInfluenceRegion_structuralComponent_SimpleContent::frame; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSMassInfluenceRegion_structuralComponent_SimpleContent");
        }
        #else
        inline std::string CPACSMassInfluenceRegion_structuralComponent_SimpleContentToString(const CPACSMassInfluenceRegion_structuralComponent_SimpleContent& value)
        {
            switch(value) {
            case all: return "all";
            case surface: return "surface";
            case floor: return "floor";
            case cargoFloor: return "cargoFloor";
            case frame: return "frame";
            default: throw CTiglError("Invalid enum value \"" + std::to_string(static_cast<int>(value)) + "\" for enum type CPACSMassInfluenceRegion_structuralComponent_SimpleContent");
            }
        }
        inline CPACSMassInfluenceRegion_structuralComponent_SimpleContent stringToCPACSMassInfluenceRegion_structuralComponent_SimpleContent(const std::string& value)
        {
            struct ToLower { std::string operator()(std::string str) { for (char& c : str) { c = std::tolower(c); } return str; } } toLower;
            if (toLower(value) == "all") { return all; }
            if (toLower(value) == "surface") { return surface; }
            if (toLower(value) == "floor") { return floor; }
            if (toLower(value) == "cargofloor") { return cargoFloor; }
            if (toLower(value) == "frame") { return frame; }
            throw CTiglError("Invalid string value \"" + value + "\" for enum type CPACSMassInfluenceRegion_structuralComponent_SimpleContent");
        }
        #endif
    }
}
