// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSHingeMomentsMap.h"

namespace tigl
{
    namespace generated
    {
        CPACSHingeMomentsMap::CPACSHingeMomentsMap(){}
        CPACSHingeMomentsMap::~CPACSHingeMomentsMap() {}
        
        void CPACSHingeMomentsMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element machNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/machNumber")) {
                m_machNumber.ReadCPACS(tixiHandle, xpath + "/machNumber");
            }
            else {
                LOG(ERROR) << "Required element machNumber is missing";
            }
            
            // read element reynoldsNumber
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/reynoldsNumber")) {
                m_reynoldsNumber.ReadCPACS(tixiHandle, xpath + "/reynoldsNumber");
            }
            else {
                LOG(ERROR) << "Required element reynoldsNumber is missing";
            }
            
            // read element angleOfYaw
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfYaw")) {
                m_angleOfYaw.ReadCPACS(tixiHandle, xpath + "/angleOfYaw");
            }
            else {
                LOG(ERROR) << "Required element angleOfYaw is missing";
            }
            
            // read element angleOfAttack
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/angleOfAttack")) {
                m_angleOfAttack.ReadCPACS(tixiHandle, xpath + "/angleOfAttack");
            }
            else {
                LOG(ERROR) << "Required element angleOfAttack is missing";
            }
            
            // read element controlSurfaces
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/controlSurfaces")) {
                m_controlSurfaces.ReadCPACS(tixiHandle, xpath + "/controlSurfaces");
            }
            else {
                LOG(ERROR) << "Required element controlSurfaces is missing";
            }
            
        }
        
        void CPACSHingeMomentsMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element machNumber
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/machNumber");
            m_machNumber.WriteCPACS(tixiHandle, xpath + "/machNumber");
            
            // write element reynoldsNumber
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/reynoldsNumber");
            m_reynoldsNumber.WriteCPACS(tixiHandle, xpath + "/reynoldsNumber");
            
            // write element angleOfYaw
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfYaw");
            m_angleOfYaw.WriteCPACS(tixiHandle, xpath + "/angleOfYaw");
            
            // write element angleOfAttack
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/angleOfAttack");
            m_angleOfAttack.WriteCPACS(tixiHandle, xpath + "/angleOfAttack");
            
            // write element controlSurfaces
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/controlSurfaces");
            m_controlSurfaces.WriteCPACS(tixiHandle, xpath + "/controlSurfaces");
            
        }
        
        const CCPACSStringVector& CPACSHingeMomentsMap::GetMachNumber() const
        {
            return m_machNumber;
        }
        
        CCPACSStringVector& CPACSHingeMomentsMap::GetMachNumber()
        {
            return m_machNumber;
        }
        
        const CCPACSStringVector& CPACSHingeMomentsMap::GetReynoldsNumber() const
        {
            return m_reynoldsNumber;
        }
        
        CCPACSStringVector& CPACSHingeMomentsMap::GetReynoldsNumber()
        {
            return m_reynoldsNumber;
        }
        
        const CCPACSStringVector& CPACSHingeMomentsMap::GetAngleOfYaw() const
        {
            return m_angleOfYaw;
        }
        
        CCPACSStringVector& CPACSHingeMomentsMap::GetAngleOfYaw()
        {
            return m_angleOfYaw;
        }
        
        const CCPACSStringVector& CPACSHingeMomentsMap::GetAngleOfAttack() const
        {
            return m_angleOfAttack;
        }
        
        CCPACSStringVector& CPACSHingeMomentsMap::GetAngleOfAttack()
        {
            return m_angleOfAttack;
        }
        
        const CPACSControlSurfaceHingeMomentMaps& CPACSHingeMomentsMap::GetControlSurfaces() const
        {
            return m_controlSurfaces;
        }
        
        CPACSControlSurfaceHingeMomentMaps& CPACSHingeMomentsMap::GetControlSurfaces()
        {
            return m_controlSurfaces;
        }
        
    }
}
