// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSFuselage.h"
#include "CPACSFuselageFuelTanks.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSFuselageFuelTanks::CPACSFuselageFuelTanks(CCPACSFuselage* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSFuselageFuelTanks::~CPACSFuselageFuelTanks()
    {
    }

    const CCPACSFuselage* CPACSFuselageFuelTanks::GetParent() const
    {
        return m_parent;
    }

    CCPACSFuselage* CPACSFuselageFuelTanks::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSFuselageFuelTanks::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSFuselageFuelTanks::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSFuselageFuelTanks::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSFuselageFuelTanks::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSFuselageFuelTanks::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element genericFuelTanks
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericFuelTanks")) {
            m_genericFuelTanks = boost::in_place(this, m_uidMgr);
            try {
                m_genericFuelTanks->ReadCPACS(tixiHandle, xpath + "/genericFuelTanks");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read genericFuelTanks at xpath " << xpath << ": " << e.what();
                m_genericFuelTanks = boost::none;
            }
        }

    }

    void CPACSFuselageFuelTanks::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "genericFuelTanks" };

        // write element genericFuelTanks
        if (m_genericFuelTanks) {
            tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/genericFuelTanks", childElemOrder);
            m_genericFuelTanks->WriteCPACS(tixiHandle, xpath + "/genericFuelTanks");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/genericFuelTanks")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/genericFuelTanks");
            }
        }

    }

    const boost::optional<CCPACSGenericFuelTanks>& CPACSFuselageFuelTanks::GetGenericFuelTanks() const
    {
        return m_genericFuelTanks;
    }

    boost::optional<CCPACSGenericFuelTanks>& CPACSFuselageFuelTanks::GetGenericFuelTanks()
    {
        return m_genericFuelTanks;
    }

    CCPACSGenericFuelTanks& CPACSFuselageFuelTanks::GetGenericFuelTanks(CreateIfNotExistsTag)
    {
        if (!m_genericFuelTanks)
            m_genericFuelTanks = boost::in_place(this, m_uidMgr);
        return *m_genericFuelTanks;
    }

    void CPACSFuselageFuelTanks::RemoveGenericFuelTanks()
    {
        m_genericFuelTanks = boost::none;
    }

} // namespace generated
} // namespace tigl
