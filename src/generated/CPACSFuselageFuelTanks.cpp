// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSFuselage.h"
#include "CPACSFuselageFuelTank.h"
#include "CPACSFuselageFuelTanks.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSFuselageFuelTanks::CPACSFuselageFuelTanks(CCPACSFuselage* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSFuselageFuelTanks::~CPACSFuselageFuelTanks()
    {
    }

    const CCPACSFuselage* CPACSFuselageFuelTanks::GetParent() const
    {
        return m_parent;
    }

    CCPACSFuselage* CPACSFuselageFuelTanks::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSFuselageFuelTanks::GetNextUIDParent() const
    {
        return m_parent;
    }

    CTiglUIDObject* CPACSFuselageFuelTanks::GetNextUIDParent()
    {
        return m_parent;
    }

    CTiglUIDManager& CPACSFuselageFuelTanks::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSFuselageFuelTanks::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSFuselageFuelTanks::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element fuselageFuelTank
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/fuselageFuelTank")) {
            tixi::TixiReadElements(tixiHandle, xpath + "/fuselageFuelTank", m_fuselageFuelTanks, 1, tixi::xsdUnbounded, this, m_uidMgr);
        }

    }

    void CPACSFuselageFuelTanks::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element fuselageFuelTank
        tixi::TixiSaveElements(tixiHandle, xpath + "/fuselageFuelTank", m_fuselageFuelTanks);

    }

    const std::vector<std::unique_ptr<CPACSFuselageFuelTank>>& CPACSFuselageFuelTanks::GetFuselageFuelTanks() const
    {
        return m_fuselageFuelTanks;
    }

    std::vector<std::unique_ptr<CPACSFuselageFuelTank>>& CPACSFuselageFuelTanks::GetFuselageFuelTanks()
    {
        return m_fuselageFuelTanks;
    }

    CPACSFuselageFuelTank& CPACSFuselageFuelTanks::AddFuselageFuelTank()
    {
        m_fuselageFuelTanks.push_back(make_unique<CPACSFuselageFuelTank>(this, m_uidMgr));
        return *m_fuselageFuelTanks.back();
    }

    void CPACSFuselageFuelTanks::RemoveFuselageFuelTank(CPACSFuselageFuelTank& ref)
    {
        for (std::size_t i = 0; i < m_fuselageFuelTanks.size(); i++) {
            if (m_fuselageFuelTanks[i].get() == &ref) {
                m_fuselageFuelTanks.erase(m_fuselageFuelTanks.begin() + i);
                return;
            }
        }
        throw CTiglError("Element not found");
    }

} // namespace generated
} // namespace tigl
