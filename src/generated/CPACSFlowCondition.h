// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include "CPACSQuasiSteadyRotation.h"
#include "CPACSControlSurfaceDeflections.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAeroDataSetForLoads
        // CPACSAeroFuseLoadCase
        // CPACSAeroToolLoadCase
        // CPACSHandbookAeroLoadCase
        
        // generated from /xsd:schema/xsd:complexType[338]
        class CPACSFlowCondition
        {
        public:
            TIGL_EXPORT CPACSFlowCondition();
            TIGL_EXPORT virtual ~CPACSFlowCondition();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const double& GetAngleOfYaw() const;
            TIGL_EXPORT void SetAngleOfYaw(const double& value);
            
            TIGL_EXPORT bool HasQuasiSteadyRotation() const;
            TIGL_EXPORT const CPACSQuasiSteadyRotation& GetQuasiSteadyRotation() const;
            TIGL_EXPORT CPACSQuasiSteadyRotation& GetQuasiSteadyRotation();
            
            TIGL_EXPORT bool HasControlSurfaces() const;
            TIGL_EXPORT const CPACSControlSurfaceDeflections& GetControlSurfaces() const;
            TIGL_EXPORT CPACSControlSurfaceDeflections& GetControlSurfaces();
            
            TIGL_EXPORT bool HasMachNumber_choice1() const;
            TIGL_EXPORT const double& GetMachNumber_choice1() const;
            TIGL_EXPORT void SetMachNumber_choice1(const double& value);
            
            TIGL_EXPORT bool HasReynoldsNumber_choice1() const;
            TIGL_EXPORT const double& GetReynoldsNumber_choice1() const;
            TIGL_EXPORT void SetReynoldsNumber_choice1(const double& value);
            
            TIGL_EXPORT bool HasStandardAltitude_choice1() const;
            TIGL_EXPORT const double& GetStandardAltitude_choice1() const;
            TIGL_EXPORT void SetStandardAltitude_choice1(const double& value);
            
            TIGL_EXPORT bool HasDeltaTemperature_choice1() const;
            TIGL_EXPORT const double& GetDeltaTemperature_choice1() const;
            TIGL_EXPORT void SetDeltaTemperature_choice1(const double& value);
            
            TIGL_EXPORT bool HasKinematicViscosity_choice1() const;
            TIGL_EXPORT const double& GetKinematicViscosity_choice1() const;
            TIGL_EXPORT void SetKinematicViscosity_choice1(const double& value);
            
            TIGL_EXPORT bool HasAirspeed_choice1() const;
            TIGL_EXPORT const double& GetAirspeed_choice1() const;
            TIGL_EXPORT void SetAirspeed_choice1(const double& value);
            
            TIGL_EXPORT bool HasSpeedOfSound_choice1() const;
            TIGL_EXPORT const double& GetSpeedOfSound_choice1() const;
            TIGL_EXPORT void SetSpeedOfSound_choice1(const double& value);
            
            TIGL_EXPORT bool HasReynoldsNumber_choice2() const;
            TIGL_EXPORT const double& GetReynoldsNumber_choice2() const;
            TIGL_EXPORT void SetReynoldsNumber_choice2(const double& value);
            
            TIGL_EXPORT bool HasStandardAltitude_choice2() const;
            TIGL_EXPORT const double& GetStandardAltitude_choice2() const;
            TIGL_EXPORT void SetStandardAltitude_choice2(const double& value);
            
            TIGL_EXPORT bool HasDeltaTemperature_choice2() const;
            TIGL_EXPORT const double& GetDeltaTemperature_choice2() const;
            TIGL_EXPORT void SetDeltaTemperature_choice2(const double& value);
            
            TIGL_EXPORT bool HasSpeedOfSound_choice2() const;
            TIGL_EXPORT const double& GetSpeedOfSound_choice2() const;
            TIGL_EXPORT void SetSpeedOfSound_choice2(const double& value);
            
            TIGL_EXPORT bool HasAirspeed_choice2() const;
            TIGL_EXPORT const double& GetAirspeed_choice2() const;
            TIGL_EXPORT void SetAirspeed_choice2(const double& value);
            
            TIGL_EXPORT bool HasKinematicViscosity_choice2() const;
            TIGL_EXPORT const double& GetKinematicViscosity_choice2() const;
            TIGL_EXPORT void SetKinematicViscosity_choice2(const double& value);
            
            TIGL_EXPORT bool HasAirspeed_choice3() const;
            TIGL_EXPORT const double& GetAirspeed_choice3() const;
            TIGL_EXPORT void SetAirspeed_choice3(const double& value);
            
            TIGL_EXPORT bool HasStandardAltitude_choice3() const;
            TIGL_EXPORT const double& GetStandardAltitude_choice3() const;
            TIGL_EXPORT void SetStandardAltitude_choice3(const double& value);
            
            TIGL_EXPORT bool HasDeltaTemperature_choice3() const;
            TIGL_EXPORT const double& GetDeltaTemperature_choice3() const;
            TIGL_EXPORT void SetDeltaTemperature_choice3(const double& value);
            
            TIGL_EXPORT bool HasKinematicViscosity_choice3() const;
            TIGL_EXPORT const double& GetKinematicViscosity_choice3() const;
            TIGL_EXPORT void SetKinematicViscosity_choice3(const double& value);
            
            TIGL_EXPORT bool HasSpeedOfSound_choice3() const;
            TIGL_EXPORT const double& GetSpeedOfSound_choice3() const;
            TIGL_EXPORT void SetSpeedOfSound_choice3(const double& value);
            
            TIGL_EXPORT bool HasAngleOfAttack_choice1() const;
            TIGL_EXPORT const double& GetAngleOfAttack_choice1() const;
            TIGL_EXPORT void SetAngleOfAttack_choice1(const double& value);
            
            TIGL_EXPORT bool HasTargetLiftCoefficient_choice2() const;
            TIGL_EXPORT const double& GetTargetLiftCoefficient_choice2() const;
            TIGL_EXPORT void SetTargetLiftCoefficient_choice2(const double& value);
            
        protected:
            double                                          m_angleOfYaw;
            boost::optional<CPACSQuasiSteadyRotation>       m_quasiSteadyRotation;
            boost::optional<CPACSControlSurfaceDeflections> m_controlSurfaces;
            boost::optional<double>                         m_machNumber_choice1;
            boost::optional<double>                         m_reynoldsNumber_choice1;
            boost::optional<double>                         m_standardAltitude_choice1;
            boost::optional<double>                         m_deltaTemperature_choice1;
            boost::optional<double>                         m_kinematicViscosity_choice1;
            boost::optional<double>                         m_airspeed_choice1;
            boost::optional<double>                         m_speedOfSound_choice1;
            boost::optional<double>                         m_reynoldsNumber_choice2;
            boost::optional<double>                         m_standardAltitude_choice2;
            boost::optional<double>                         m_deltaTemperature_choice2;
            boost::optional<double>                         m_speedOfSound_choice2;
            boost::optional<double>                         m_airspeed_choice2;
            boost::optional<double>                         m_kinematicViscosity_choice2;
            boost::optional<double>                         m_airspeed_choice3;
            boost::optional<double>                         m_standardAltitude_choice3;
            boost::optional<double>                         m_deltaTemperature_choice3;
            boost::optional<double>                         m_kinematicViscosity_choice3;
            boost::optional<double>                         m_speedOfSound_choice3;
            boost::optional<double>                         m_angleOfAttack_choice1;
            boost::optional<double>                         m_targetLiftCoefficient_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSFlowCondition(const CPACSFlowCondition&) = delete;
            CPACSFlowCondition& operator=(const CPACSFlowCondition&) = delete;
            
            CPACSFlowCondition(CPACSFlowCondition&&) = delete;
            CPACSFlowCondition& operator=(CPACSFlowCondition&&) = delete;
            #else
            CPACSFlowCondition(const CPACSFlowCondition&);
            CPACSFlowCondition& operator=(const CPACSFlowCondition&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSFlowCondition = generated::CPACSFlowCondition;
    #else
    typedef generated::CPACSFlowCondition CCPACSFlowCondition;
    #endif
}
