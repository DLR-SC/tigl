// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDynamicAircraftModel.h"

namespace tigl
{
    namespace generated
    {
        CPACSDynamicAircraftModel::CPACSDynamicAircraftModel(){}
        CPACSDynamicAircraftModel::~CPACSDynamicAircraftModel() {}
        
        void CPACSDynamicAircraftModel::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element loadReferenceAxisPoints
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/loadReferenceAxisPoints")) {
                m_loadReferenceAxisPoints = boost::in_place();
                try {
                    m_loadReferenceAxisPoints->ReadCPACS(tixiHandle, xpath + "/loadReferenceAxisPoints");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read loadReferenceAxisPoints at xpath << " << xpath << ": " << e.what();
                    m_loadReferenceAxisPoints = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read loadReferenceAxisPoints at xpath << " << xpath << ": " << e.getError();
                    m_loadReferenceAxisPoints = boost::none;
                }
            }
            
            // read element dynamicAircraftModelPoints
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/dynamicAircraftModelPoints")) {
                m_dynamicAircraftModelPoints = boost::in_place();
                try {
                    m_dynamicAircraftModelPoints->ReadCPACS(tixiHandle, xpath + "/dynamicAircraftModelPoints");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModelPoints at xpath << " << xpath << ": " << e.what();
                    m_dynamicAircraftModelPoints = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read dynamicAircraftModelPoints at xpath << " << xpath << ": " << e.getError();
                    m_dynamicAircraftModelPoints = boost::none;
                }
            }
            
            // read element cutLoadIntegrationPoints
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cutLoadIntegrationPoints")) {
                m_cutLoadIntegrationPoints = boost::in_place();
                try {
                    m_cutLoadIntegrationPoints->ReadCPACS(tixiHandle, xpath + "/cutLoadIntegrationPoints");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read cutLoadIntegrationPoints at xpath << " << xpath << ": " << e.what();
                    m_cutLoadIntegrationPoints = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read cutLoadIntegrationPoints at xpath << " << xpath << ": " << e.getError();
                    m_cutLoadIntegrationPoints = boost::none;
                }
            }
            
            // read element connectivities
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/connectivities")) {
                m_connectivities = boost::in_place();
                try {
                    m_connectivities->ReadCPACS(tixiHandle, xpath + "/connectivities");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read connectivities at xpath << " << xpath << ": " << e.what();
                    m_connectivities = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read connectivities at xpath << " << xpath << ": " << e.getError();
                    m_connectivities = boost::none;
                }
            }
            
        }
        
        void CPACSDynamicAircraftModel::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element loadReferenceAxisPoints
            if (m_loadReferenceAxisPoints) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/loadReferenceAxisPoints");
                m_loadReferenceAxisPoints->WriteCPACS(tixiHandle, xpath + "/loadReferenceAxisPoints");
            }
            
            // write element dynamicAircraftModelPoints
            if (m_dynamicAircraftModelPoints) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/dynamicAircraftModelPoints");
                m_dynamicAircraftModelPoints->WriteCPACS(tixiHandle, xpath + "/dynamicAircraftModelPoints");
            }
            
            // write element cutLoadIntegrationPoints
            if (m_cutLoadIntegrationPoints) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cutLoadIntegrationPoints");
                m_cutLoadIntegrationPoints->WriteCPACS(tixiHandle, xpath + "/cutLoadIntegrationPoints");
            }
            
            // write element connectivities
            if (m_connectivities) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/connectivities");
                m_connectivities->WriteCPACS(tixiHandle, xpath + "/connectivities");
            }
            
        }
        
        bool CPACSDynamicAircraftModel::HasLoadReferenceAxisPoints() const
        {
            return static_cast<bool>(m_loadReferenceAxisPoints);
        }
        
        const CPACSLoadReferenceAxisPoints& CPACSDynamicAircraftModel::GetLoadReferenceAxisPoints() const
        {
            return *m_loadReferenceAxisPoints;
        }
        
        CPACSLoadReferenceAxisPoints& CPACSDynamicAircraftModel::GetLoadReferenceAxisPoints()
        {
            return *m_loadReferenceAxisPoints;
        }
        
        bool CPACSDynamicAircraftModel::HasDynamicAircraftModelPoints() const
        {
            return static_cast<bool>(m_dynamicAircraftModelPoints);
        }
        
        const CPACSDynamicAircraftModelPoints& CPACSDynamicAircraftModel::GetDynamicAircraftModelPoints() const
        {
            return *m_dynamicAircraftModelPoints;
        }
        
        CPACSDynamicAircraftModelPoints& CPACSDynamicAircraftModel::GetDynamicAircraftModelPoints()
        {
            return *m_dynamicAircraftModelPoints;
        }
        
        bool CPACSDynamicAircraftModel::HasCutLoadIntegrationPoints() const
        {
            return static_cast<bool>(m_cutLoadIntegrationPoints);
        }
        
        const CPACSCutLoadIntegrationPoints& CPACSDynamicAircraftModel::GetCutLoadIntegrationPoints() const
        {
            return *m_cutLoadIntegrationPoints;
        }
        
        CPACSCutLoadIntegrationPoints& CPACSDynamicAircraftModel::GetCutLoadIntegrationPoints()
        {
            return *m_cutLoadIntegrationPoints;
        }
        
        bool CPACSDynamicAircraftModel::HasConnectivities() const
        {
            return static_cast<bool>(m_connectivities);
        }
        
        const CPACSConnectivities& CPACSDynamicAircraftModel::GetConnectivities() const
        {
            return *m_connectivities;
        }
        
        CPACSConnectivities& CPACSDynamicAircraftModel::GetConnectivities()
        {
            return *m_connectivities;
        }
        
    }
}
