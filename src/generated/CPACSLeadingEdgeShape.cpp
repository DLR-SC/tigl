// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSLeadingEdgeShape.h"

namespace tigl
{
    namespace generated
    {
        CPACSLeadingEdgeShape::CPACSLeadingEdgeShape(){}
        CPACSLeadingEdgeShape::~CPACSLeadingEdgeShape() {}
        
        void CPACSLeadingEdgeShape::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element relHeightLE
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relHeightLE")) {
                m_relHeightLE = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relHeightLE");
            }
            else {
                LOG(ERROR) << "Required element relHeightLE is missing";
            }
            
            // read element xsiUpperSkin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsiUpperSkin")) {
                m_xsiUpperSkin = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsiUpperSkin");
            }
            else {
                LOG(ERROR) << "Required element xsiUpperSkin is missing";
            }
            
            // read element xsiLowerSkin
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsiLowerSkin")) {
                m_xsiLowerSkin = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsiLowerSkin");
            }
            else {
                LOG(ERROR) << "Required element xsiLowerSkin is missing";
            }
            
        }
        
        void CPACSLeadingEdgeShape::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element relHeightLE
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relHeightLE");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relHeightLE", m_relHeightLE);
            
            // write element xsiUpperSkin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsiUpperSkin");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsiUpperSkin", m_xsiUpperSkin);
            
            // write element xsiLowerSkin
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsiLowerSkin");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsiLowerSkin", m_xsiLowerSkin);
            
        }
        
        const double& CPACSLeadingEdgeShape::GetRelHeightLE() const
        {
            return m_relHeightLE;
        }
        
        void CPACSLeadingEdgeShape::SetRelHeightLE(const double& value)
        {
            m_relHeightLE = value;
        }
        
        const double& CPACSLeadingEdgeShape::GetXsiUpperSkin() const
        {
            return m_xsiUpperSkin;
        }
        
        void CPACSLeadingEdgeShape::SetXsiUpperSkin(const double& value)
        {
            m_xsiUpperSkin = value;
        }
        
        const double& CPACSLeadingEdgeShape::GetXsiLowerSkin() const
        {
            return m_xsiLowerSkin;
        }
        
        void CPACSLeadingEdgeShape::SetXsiLowerSkin(const double& value)
        {
            m_xsiLowerSkin = value;
        }
        
    }
}
