// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSDampingDerivativesRates.h"

namespace tigl
{
    namespace generated
    {
        CPACSDampingDerivativesRates::CPACSDampingDerivativesRates(){}
        CPACSDampingDerivativesRates::~CPACSDampingDerivativesRates() {}
        
        void CPACSDampingDerivativesRates::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element positiveRates
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positiveRates")) {
                m_positiveRates = boost::in_place();
                try {
                    m_positiveRates->ReadCPACS(tixiHandle, xpath + "/positiveRates");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read positiveRates at xpath << " << xpath << ": " << e.what();
                    m_positiveRates = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read positiveRates at xpath << " << xpath << ": " << e.getError();
                    m_positiveRates = boost::none;
                }
            }
            
            // read element negativeRates
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/negativeRates")) {
                m_negativeRates = boost::in_place();
                try {
                    m_negativeRates->ReadCPACS(tixiHandle, xpath + "/negativeRates");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read negativeRates at xpath << " << xpath << ": " << e.what();
                    m_negativeRates = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read negativeRates at xpath << " << xpath << ": " << e.getError();
                    m_negativeRates = boost::none;
                }
            }
            
        }
        
        void CPACSDampingDerivativesRates::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element positiveRates
            if (m_positiveRates) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positiveRates");
                m_positiveRates->WriteCPACS(tixiHandle, xpath + "/positiveRates");
            }
            
            // write element negativeRates
            if (m_negativeRates) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/negativeRates");
                m_negativeRates->WriteCPACS(tixiHandle, xpath + "/negativeRates");
            }
            
        }
        
        bool CPACSDampingDerivativesRates::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSDampingDerivativesRates::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSDampingDerivativesRates::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        bool CPACSDampingDerivativesRates::HasPositiveRates() const
        {
            return static_cast<bool>(m_positiveRates);
        }
        
        const CPACSDampingDerivatives& CPACSDampingDerivativesRates::GetPositiveRates() const
        {
            return *m_positiveRates;
        }
        
        CPACSDampingDerivatives& CPACSDampingDerivativesRates::GetPositiveRates()
        {
            return *m_positiveRates;
        }
        
        bool CPACSDampingDerivativesRates::HasNegativeRates() const
        {
            return static_cast<bool>(m_negativeRates);
        }
        
        const CPACSDampingDerivatives& CPACSDampingDerivativesRates::GetNegativeRates() const
        {
            return *m_negativeRates;
        }
        
        CPACSDampingDerivatives& CPACSDampingDerivativesRates::GetNegativeRates()
        {
            return *m_negativeRates;
        }
        
    }
}
