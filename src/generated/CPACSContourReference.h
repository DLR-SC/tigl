// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;
class CCPACSControlSurfaceBorderTrailingEdge;

namespace generated
{
    class CPACSControlSurfaceBorderLeadingEdge;
    class CPACSControlSurfaceBorderSpoiler;

    // This class is used in:
    // CPACSControlSurfaceBorderLeadingEdge
    // CPACSControlSurfaceBorderSpoiler
    // CPACSControlSurfaceBorderTrailingEdge

    /// @brief Airfoil definition of an control surface at the
    /// inner/outer border.
    /// 
    /// Optional definition of the exact airfoil shape at the
    /// inner/outer border of the control surface.
    /// The airfoil shape is defined via referencing to the
    /// airfoilUID. As the leading and trailing edge point is fix due to
    /// the outer shape definition of the control surface the airfoil
    /// can only be rotated around the x-axis (axis going from leading
    /// to trailing edge of the inner/outer border of the control
    /// surface). Scaling in x-direction is also defined by the outer
    /// shape, wherefore only scaling in y and z direction is allowed.
    /// 
    class CPACSContourReference : public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSContourReference(CPACSControlSurfaceBorderLeadingEdge* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSContourReference(CPACSControlSurfaceBorderSpoiler* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSContourReference(CCPACSControlSurfaceBorderTrailingEdge* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSContourReference();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSControlSurfaceBorderLeadingEdge>::value || std::is_same<P, CPACSControlSurfaceBorderSpoiler>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value, "template argument for P is not a parent class of CPACSContourReference");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSControlSurfaceBorderLeadingEdge>::value || std::is_same<P, CPACSControlSurfaceBorderSpoiler>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value, "template argument for P is not a parent class of CPACSContourReference");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetAirfoilUID() const;
        TIGL_EXPORT virtual void SetAirfoilUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetRotX() const;
        TIGL_EXPORT virtual void SetRotX(const double& value);

        TIGL_EXPORT virtual const double& GetScalY() const;
        TIGL_EXPORT virtual void SetScalY(const double& value);

        TIGL_EXPORT virtual const double& GetScalZ() const;
        TIGL_EXPORT virtual void SetScalZ(const double& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        /// Reference to the airfoil uID.
        std::string m_airfoilUID;

        /// Rotation around an axis, going from the
        /// leading edge point to the trailing edge point of the inner/outer
        /// border of the control surface. Defaults to 90Â°, which is
        /// equivalent to perpendicular on the control surface middle plane.
        double      m_rotX;

        /// Scaling of the airfoil in spanwise direction
        /// (not used for 2D airfoils).
        double      m_scalY;

        /// Scaling in thickness direction of the airfoil.
        double      m_scalZ;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSContourReference(const CPACSContourReference&) = delete;
        CPACSContourReference& operator=(const CPACSContourReference&) = delete;

        CPACSContourReference(CPACSContourReference&&) = delete;
        CPACSContourReference& operator=(CPACSContourReference&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSContourReference = generated::CPACSContourReference;
using CCPACSControlSurfaceBorderLeadingEdge = generated::CPACSControlSurfaceBorderLeadingEdge;
using CCPACSControlSurfaceBorderSpoiler = generated::CPACSControlSurfaceBorderSpoiler;
} // namespace tigl
