// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSChangeLog.h"
#include "CPACSLogEntry.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSLogEntry::CPACSLogEntry(CPACSChangeLog* parent)
        : m_timestamp(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSLogEntry::~CPACSLogEntry()
    {
    }

    const CPACSChangeLog* CPACSLogEntry::GetParent() const
    {
        return m_parent;
    }

    CPACSChangeLog* CPACSLogEntry::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSLogEntry::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSLogEntry::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSLogEntry::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element description
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/description")) {
            m_description = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/description");
            if (m_description.empty()) {
                LOG(WARNING) << "Required element description is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element description is missing at xpath " << xpath;
        }

        // read element timestamp
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/timestamp")) {
            m_timestamp = tixi::TixiGetElement<std::time_t>(tixiHandle, xpath + "/timestamp");
        }
        else {
            LOG(ERROR) << "Required element timestamp is missing at xpath " << xpath;
        }

        // read element creator
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/creator")) {
            m_creator = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/creator");
            if (m_creator.empty()) {
                LOG(WARNING) << "Required element creator is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required element creator is missing at xpath " << xpath;
        }

    }

    void CPACSLogEntry::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element description
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/description");
        tixi::TixiSaveElement(tixiHandle, xpath + "/description", m_description);

        // write element timestamp
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/timestamp");
        tixi::TixiSaveElement(tixiHandle, xpath + "/timestamp", m_timestamp);

        // write element creator
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/creator");
        tixi::TixiSaveElement(tixiHandle, xpath + "/creator", m_creator);

    }

    const std::string& CPACSLogEntry::GetDescription() const
    {
        return m_description;
    }

    void CPACSLogEntry::SetDescription(const std::string& value)
    {
        m_description = value;
    }

    const std::time_t& CPACSLogEntry::GetTimestamp() const
    {
        return m_timestamp;
    }

    void CPACSLogEntry::SetTimestamp(const std::time_t& value)
    {
        m_timestamp = value;
    }

    const std::string& CPACSLogEntry::GetCreator() const
    {
        return m_creator;
    }

    void CPACSLogEntry::SetCreator(const std::string& value)
    {
        m_creator = value;
    }

} // namespace generated
} // namespace tigl
