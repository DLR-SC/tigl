// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSElementGeometry;
    class CPACSElementGeometryAddtionalPart;

    // This class is used in:
    // CPACSElementGeometry
    // CPACSElementGeometryAddtionalPart

    /// @brief Polyeder
    /// 
    /// ...
    /// 
    class CPACSCuboid
    {
    public:
        TIGL_EXPORT CPACSCuboid(CPACSElementGeometry* parent);
        TIGL_EXPORT CPACSCuboid(CPACSElementGeometryAddtionalPart* parent);

        TIGL_EXPORT virtual ~CPACSCuboid();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSCuboid");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSElementGeometry>::value || std::is_same<P, CPACSElementGeometryAddtionalPart>::value, "template argument for P is not a parent class of CPACSCuboid");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const double& GetLengthX() const;
        TIGL_EXPORT virtual void SetLengthX(const double& value);

        TIGL_EXPORT virtual const double& GetDepthY() const;
        TIGL_EXPORT virtual void SetDepthY(const double& value);

        TIGL_EXPORT virtual const double& GetHeightZ() const;
        TIGL_EXPORT virtual void SetHeightZ(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetAlpha_choice1() const;
        TIGL_EXPORT virtual void SetAlpha_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetBeta_choice1() const;
        TIGL_EXPORT virtual void SetBeta_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetGamma_choice1() const;
        TIGL_EXPORT virtual void SetGamma_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperFaceXmin_choice2() const;
        TIGL_EXPORT virtual void SetUpperFaceXmin_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperFaceXmax_choice2() const;
        TIGL_EXPORT virtual void SetUpperFaceXmax_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperFaceYmin_choice2() const;
        TIGL_EXPORT virtual void SetUpperFaceYmin_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetUpperFaceYmax_choice2() const;
        TIGL_EXPORT virtual void SetUpperFaceYmax_choice2(const boost::optional<double>& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        /// Length of edge a (if cuboid, then a equals the total length in x-direction) [m]
        double                  m_lengthX;

        /// Length of edge b (if cuboid, then b equals the total width in y-direction) [m]
        double                  m_depthY;

        /// Length of edge c (if cuboid, then c equals the total height in z-direction) [m]
        double                  m_heightZ;

        /// Angle between edges in width and height direction (default: 90deg) [deg]
        boost::optional<double> m_alpha_choice1;

        /// Angle between edges in length and height direction (default: 90deg) [deg]
        boost::optional<double> m_beta_choice1;

        /// Angle between edges in length and width direction (default: 90deg) [deg]
        boost::optional<double> m_gamma_choice1;

        /// ...
        boost::optional<double> m_upperFaceXmin_choice2;

        /// ...
        boost::optional<double> m_upperFaceXmax_choice2;

        /// ...
        boost::optional<double> m_upperFaceYmin_choice2;

        /// ...
        boost::optional<double> m_upperFaceYmax_choice2;

    private:
        CPACSCuboid(const CPACSCuboid&) = delete;
        CPACSCuboid& operator=(const CPACSCuboid&) = delete;

        CPACSCuboid(CPACSCuboid&&) = delete;
        CPACSCuboid& operator=(CPACSCuboid&&) = delete;
    };
} // namespace generated

// CPACSCuboid is customized, use type CCPACSCuboid directly

// Aliases in tigl namespace
using CCPACSElementGeometry = generated::CPACSElementGeometry;
using CCPACSElementGeometryAddtionalPart = generated::CPACSElementGeometryAddtionalPart;
} // namespace tigl
