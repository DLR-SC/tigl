// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSPressureBulkheads;

    // This class is used in:
    // CPACSPressureBulkheads

    /// @brief pressureBulkheadType
    /// 
    /// PressureBulkhead type, containing data of a pressure
    /// bulkhead
    /// 
    class CPACSPressureBulkhead : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSPressureBulkhead(CPACSPressureBulkheads* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSPressureBulkhead();

        TIGL_EXPORT CPACSPressureBulkheads* GetParent();

        TIGL_EXPORT const CPACSPressureBulkheads* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
        TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetSheetElementUID() const;
        TIGL_EXPORT virtual void SetSheetElementUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<int>& GetReinforcementNumberVertical_choice1() const;
        TIGL_EXPORT virtual void SetReinforcementNumberVertical_choice1(const boost::optional<int>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralElementVerticalUID_choice1() const;
        TIGL_EXPORT virtual void SetStructuralElementVerticalUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<int>& GetReinforcementNumberHorizontal_choice1() const;
        TIGL_EXPORT virtual void SetReinforcementNumberHorizontal_choice1(const boost::optional<int>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralElementHorizontalUID_choice1() const;
        TIGL_EXPORT virtual void SetStructuralElementHorizontalUID_choice1(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetBulkheadCalotteRadiusAtFrame_choice2() const;
        TIGL_EXPORT virtual void SetBulkheadCalotteRadiusAtFrame_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetMaxFlectionDepth_choice2() const;
        TIGL_EXPORT virtual void SetMaxFlectionDepth_choice2(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<int>& GetReinforcementNumberRadial_choice2() const;
        TIGL_EXPORT virtual void SetReinforcementNumberRadial_choice2(const boost::optional<int>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetStructuralElementRadialUID_choice2() const;
        TIGL_EXPORT virtual void SetStructuralElementRadialUID_choice2(const boost::optional<std::string>& value);

    protected:
        CPACSPressureBulkheads* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                  m_uID;

        /// Name of the pressure bulkhead structural
        /// element
        boost::optional<std::string> m_name;

        /// Description of the pressure bulkhead
        /// structural element
        boost::optional<std::string> m_description;

        /// UID of structural sheet element used for the
        /// bulkhead
        std::string                  m_sheetElementUID;

        /// Number of vertical reinforcements on flat
        /// bulhhead
        boost::optional<int>         m_reinforcementNumberVertical_choice1;

        /// UID of structural elements used as vertical
        /// reinforcements
        boost::optional<std::string> m_structuralElementVerticalUID_choice1;

        /// Number of horizontal reinforcements on flat
        /// bulhhead
        boost::optional<int>         m_reinforcementNumberHorizontal_choice1;

        /// UID of structural elements used as
        /// horizontal reinforcements
        boost::optional<std::string> m_structuralElementHorizontalUID_choice1;

        /// Radius of bulkhead calotte in the plane of
        /// the adjacent frame
        boost::optional<double>      m_bulkheadCalotteRadiusAtFrame_choice2;

        /// maximum flection of the pressure bulkhaed
        /// calotte
        boost::optional<double>      m_maxFlectionDepth_choice2;

        /// Number of radial reinforcements (equally
        /// distributed) on curved bulhhead
        boost::optional<int>         m_reinforcementNumberRadial_choice2;

        /// UID of structural elements used as radial
        /// reinforcements on curved bulkheads
        boost::optional<std::string> m_structuralElementRadialUID_choice2;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSPressureBulkhead(const CPACSPressureBulkhead&) = delete;
        CPACSPressureBulkhead& operator=(const CPACSPressureBulkhead&) = delete;

        CPACSPressureBulkhead(CPACSPressureBulkhead&&) = delete;
        CPACSPressureBulkhead& operator=(CPACSPressureBulkhead&&) = delete;
    };
} // namespace generated

// CPACSPressureBulkhead is customized, use type CCPACSPressureBulkhead directly

// Aliases in tigl namespace
using CCPACSPressureBulkheads = generated::CPACSPressureBulkheads;
} // namespace tigl
