// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSPressureBulkheads
        
        // generated from /xsd:schema/xsd:complexType[702]
        class CPACSPressureBulkhead
        {
        public:
            TIGL_EXPORT CPACSPressureBulkhead();
            TIGL_EXPORT virtual ~CPACSPressureBulkhead();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetUID() const;
            TIGL_EXPORT void SetUID(const std::string& value);
            
            TIGL_EXPORT bool HasName() const;
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const std::string& GetSheetElementUID() const;
            TIGL_EXPORT void SetSheetElementUID(const std::string& value);
            
            TIGL_EXPORT bool HasReinforcementNumberVertical_choice1() const;
            TIGL_EXPORT const int& GetReinforcementNumberVertical_choice1() const;
            TIGL_EXPORT void SetReinforcementNumberVertical_choice1(const int& value);
            
            TIGL_EXPORT bool HasStructuralElementVerticalUID_choice1() const;
            TIGL_EXPORT const std::string& GetStructuralElementVerticalUID_choice1() const;
            TIGL_EXPORT void SetStructuralElementVerticalUID_choice1(const std::string& value);
            
            TIGL_EXPORT bool HasReinforcementNumberHorizontal_choice1() const;
            TIGL_EXPORT const int& GetReinforcementNumberHorizontal_choice1() const;
            TIGL_EXPORT void SetReinforcementNumberHorizontal_choice1(const int& value);
            
            TIGL_EXPORT bool HasStructuralElementHorizontalUID_choice1() const;
            TIGL_EXPORT const std::string& GetStructuralElementHorizontalUID_choice1() const;
            TIGL_EXPORT void SetStructuralElementHorizontalUID_choice1(const std::string& value);
            
            TIGL_EXPORT bool HasBulkheadCalotteRadiusAtFrame_choice2() const;
            TIGL_EXPORT const double& GetBulkheadCalotteRadiusAtFrame_choice2() const;
            TIGL_EXPORT void SetBulkheadCalotteRadiusAtFrame_choice2(const double& value);
            
            TIGL_EXPORT bool HasMaxFlectionDepth_choice2() const;
            TIGL_EXPORT const double& GetMaxFlectionDepth_choice2() const;
            TIGL_EXPORT void SetMaxFlectionDepth_choice2(const double& value);
            
            TIGL_EXPORT bool HasReinforcementNumberRadial_choice2() const;
            TIGL_EXPORT const int& GetReinforcementNumberRadial_choice2() const;
            TIGL_EXPORT void SetReinforcementNumberRadial_choice2(const int& value);
            
            TIGL_EXPORT bool HasStructuralElementRadialUID_choice2() const;
            TIGL_EXPORT const std::string& GetStructuralElementRadialUID_choice2() const;
            TIGL_EXPORT void SetStructuralElementRadialUID_choice2(const std::string& value);
            
        protected:
            std::string                  m_uID;
            boost::optional<std::string> m_name;
            boost::optional<std::string> m_description;
            std::string                  m_sheetElementUID;
            boost::optional<int>         m_reinforcementNumberVertical_choice1;
            boost::optional<std::string> m_structuralElementVerticalUID_choice1;
            boost::optional<int>         m_reinforcementNumberHorizontal_choice1;
            boost::optional<std::string> m_structuralElementHorizontalUID_choice1;
            boost::optional<double>      m_bulkheadCalotteRadiusAtFrame_choice2;
            boost::optional<double>      m_maxFlectionDepth_choice2;
            boost::optional<int>         m_reinforcementNumberRadial_choice2;
            boost::optional<std::string> m_structuralElementRadialUID_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSPressureBulkhead(const CPACSPressureBulkhead&) = delete;
            CPACSPressureBulkhead& operator=(const CPACSPressureBulkhead&) = delete;
            
            CPACSPressureBulkhead(CPACSPressureBulkhead&&) = delete;
            CPACSPressureBulkhead& operator=(CPACSPressureBulkhead&&) = delete;
            #else
            CPACSPressureBulkhead(const CPACSPressureBulkhead&);
            CPACSPressureBulkhead& operator=(const CPACSPressureBulkhead&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSPressureBulkhead = generated::CPACSPressureBulkhead;
    #else
    typedef generated::CPACSPressureBulkhead CCPACSPressureBulkhead;
    #endif
}
