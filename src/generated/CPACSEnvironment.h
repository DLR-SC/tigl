// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSAtmosphericModel.h"
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSGlobalFlightPoint;
    class CPACSPointPerformanceDefinition;

    // This class is used in:
    // CPACSGlobalFlightPoint
    // CPACSPointPerformanceDefinition

    /// @brief Environmental conditions
    /// 
    /// Specification of environmental conditions
    /// 
    class CPACSEnvironment
    {
    public:
        TIGL_EXPORT CPACSEnvironment(CPACSGlobalFlightPoint* parent);
        TIGL_EXPORT CPACSEnvironment(CPACSPointPerformanceDefinition* parent);

        TIGL_EXPORT virtual ~CPACSEnvironment();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSGlobalFlightPoint>::value || std::is_same<P, CPACSPointPerformanceDefinition>::value, "template argument for P is not a parent class of CPACSEnvironment");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSGlobalFlightPoint>::value || std::is_same<P, CPACSPointPerformanceDefinition>::value, "template argument for P is not a parent class of CPACSEnvironment");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CPACSAtmosphericModel& GetAtmosphericModel() const;
        TIGL_EXPORT virtual void SetAtmosphericModel(const CPACSAtmosphericModel& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetDeltaTemperature() const;
        TIGL_EXPORT virtual void SetDeltaTemperature(const boost::optional<double>& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CPACSAtmosphericModel   m_atmosphericModel;

        /// Delta temperature
        boost::optional<double> m_deltaTemperature;

    private:
        CPACSEnvironment(const CPACSEnvironment&) = delete;
        CPACSEnvironment& operator=(const CPACSEnvironment&) = delete;

        CPACSEnvironment(CPACSEnvironment&&) = delete;
        CPACSEnvironment& operator=(CPACSEnvironment&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSEnvironment = generated::CPACSEnvironment;
using CCPACSGlobalFlightPoint = generated::CPACSGlobalFlightPoint;
using CCPACSPointPerformanceDefinition = generated::CPACSPointPerformanceDefinition;
} // namespace tigl
