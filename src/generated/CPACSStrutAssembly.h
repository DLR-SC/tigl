// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPointAbsRel.h>
#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CPACSEtaXsiRelHeightPoint.h"
#include "CPACSLandingGearStrutAttachment.h"
#include "CPACSRelativeStrutPosition.h"
#include "CPACSStrutProperties.h"
#include "CreateIfNotExists.h"
#include "CTiglError.h"
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSLandingGearComponentAssembly;
    class CPACSPintleStruts;
    class CPACSSideStruts;

    // This class is used in:
    // CPACSLandingGearComponentAssembly
    // CPACSPintleStruts
    // CPACSSideStruts

    /// @brief Strut assembly
    /// 
    /// Geometric description, spatial placement and specification of material parameters
    /// 
    class CPACSStrutAssembly : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSStrutAssembly(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStrutAssembly(CPACSPintleStruts* parent, CTiglUIDManager* uidMgr);
        TIGL_EXPORT CPACSStrutAssembly(CPACSSideStruts* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSStrutAssembly();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CPACSLandingGearComponentAssembly>::value || std::is_same<P, CPACSPintleStruts>::value || std::is_same<P, CPACSSideStruts>::value, "template argument for P is not a parent class of CPACSStrutAssembly");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CPACSLandingGearComponentAssembly>::value || std::is_same<P, CPACSPintleStruts>::value || std::is_same<P, CPACSSideStruts>::value, "template argument for P is not a parent class of CPACSStrutAssembly");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const CPACSStrutProperties& GetStrutProperties() const;
        TIGL_EXPORT virtual CPACSStrutProperties& GetStrutProperties();

        TIGL_EXPORT virtual const double& GetMainStrutRelativePosition() const;
        TIGL_EXPORT virtual void SetMainStrutRelativePosition(const double& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPointAbsRel>& GetEndPoint_choice1() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPointAbsRel>& GetEndPoint_choice1();

        TIGL_EXPORT virtual const boost::optional<CPACSEtaXsiRelHeightPoint>& GetRelEndPoint_choice2() const;
        TIGL_EXPORT virtual boost::optional<CPACSEtaXsiRelHeightPoint>& GetRelEndPoint_choice2();

        TIGL_EXPORT virtual const boost::optional<CPACSRelativeStrutPosition>& GetRelStrutEndPoint_choice3() const;
        TIGL_EXPORT virtual boost::optional<CPACSRelativeStrutPosition>& GetRelStrutEndPoint_choice3();

        TIGL_EXPORT virtual const boost::optional<CPACSLandingGearStrutAttachment>& GetAttachment() const;
        TIGL_EXPORT virtual boost::optional<CPACSLandingGearStrutAttachment>& GetAttachment();

        TIGL_EXPORT virtual const boost::optional<std::string>& GetActuatorUID() const;
        TIGL_EXPORT virtual void SetActuatorUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual CCPACSPointAbsRel& GetEndPoint_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveEndPoint_choice1();

        TIGL_EXPORT virtual CPACSEtaXsiRelHeightPoint& GetRelEndPoint_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRelEndPoint_choice2();

        TIGL_EXPORT virtual CPACSRelativeStrutPosition& GetRelStrutEndPoint_choice3(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveRelStrutEndPoint_choice3();

        TIGL_EXPORT virtual CPACSLandingGearStrutAttachment& GetAttachment(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveAttachment();

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        CTiglUIDManager* m_uidMgr;

        std::string                                      m_uID;

        /// Strut properties
        CPACSStrutProperties                             m_strutProperties;

        /// The starting point of the support strut must connect to the main strut. This element specifies the relative position on the main strut (0 -> top end, 1 -> bottom end).
        double                                           m_mainStrutRelativePosition;

        /// End position in absolute coordinates. Coordinates are relative to parent if it has a parentUID reference (otherwise global).
        boost::optional<CCPACSPointAbsRel>               m_endPoint_choice1;

        /// End position in eta/xsi/relHeight coordinates
        boost::optional<CPACSEtaXsiRelHeightPoint>       m_relEndPoint_choice2;

        /// End position as a relative position on another strut of this landing gear
        boost::optional<CPACSRelativeStrutPosition>      m_relStrutEndPoint_choice3;

        /// Attachment to an aircraft wing or fuselage component
        boost::optional<CPACSLandingGearStrutAttachment> m_attachment;

        /// Reference to an actuator uID
        boost::optional<std::string>                     m_actuatorUID;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSStrutAssembly(const CPACSStrutAssembly&) = delete;
        CPACSStrutAssembly& operator=(const CPACSStrutAssembly&) = delete;

        CPACSStrutAssembly(CPACSStrutAssembly&&) = delete;
        CPACSStrutAssembly& operator=(CPACSStrutAssembly&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSStrutAssembly = generated::CPACSStrutAssembly;
using CCPACSLandingGearComponentAssembly = generated::CPACSLandingGearComponentAssembly;
using CCPACSPintleStruts = generated::CPACSPintleStruts;
using CCPACSSideStruts = generated::CPACSSideStruts;
} // namespace tigl
