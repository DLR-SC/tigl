// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSAeroDataSetForLoads
        // CPACSFuselageCoefficients
        // CPACSFuselageSegmentsCoefficients
        // CPACSFuselagesCoefficients
        // CPACSGenericComponentCoefficients
        // CPACSHandbookAeroLoadCase
        // CPACSWingCoefficients
        // CPACSWingSegmentsCoefficients
        // CPACSWingsCoefficients
        
        // generated from /xsd:schema/xsd:complexType[134]
        class CPACSCoefficients
        {
        public:
            TIGL_EXPORT CPACSCoefficients();
            TIGL_EXPORT virtual ~CPACSCoefficients();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasCfx() const;
            TIGL_EXPORT const double& GetCfx() const;
            TIGL_EXPORT void SetCfx(const double& value);
            
            TIGL_EXPORT bool HasCfy() const;
            TIGL_EXPORT const double& GetCfy() const;
            TIGL_EXPORT void SetCfy(const double& value);
            
            TIGL_EXPORT bool HasCfz() const;
            TIGL_EXPORT const double& GetCfz() const;
            TIGL_EXPORT void SetCfz(const double& value);
            
            TIGL_EXPORT bool HasCmx() const;
            TIGL_EXPORT const double& GetCmx() const;
            TIGL_EXPORT void SetCmx(const double& value);
            
            TIGL_EXPORT bool HasCmy() const;
            TIGL_EXPORT const double& GetCmy() const;
            TIGL_EXPORT void SetCmy(const double& value);
            
            TIGL_EXPORT bool HasCmz() const;
            TIGL_EXPORT const double& GetCmz() const;
            TIGL_EXPORT void SetCmz(const double& value);
            
        protected:
            boost::optional<double> m_cfx;
            boost::optional<double> m_cfy;
            boost::optional<double> m_cfz;
            boost::optional<double> m_cmx;
            boost::optional<double> m_cmy;
            boost::optional<double> m_cmz;
            
        private:
            #ifdef HAVE_CPP11
            CPACSCoefficients(const CPACSCoefficients&) = delete;
            CPACSCoefficients& operator=(const CPACSCoefficients&) = delete;
            
            CPACSCoefficients(CPACSCoefficients&&) = delete;
            CPACSCoefficients& operator=(CPACSCoefficients&&) = delete;
            #else
            CPACSCoefficients(const CPACSCoefficients&);
            CPACSCoefficients& operator=(const CPACSCoefficients&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSCoefficients = generated::CPACSCoefficients;
    #else
    typedef generated::CPACSCoefficients CCPACSCoefficients;
    #endif
}
