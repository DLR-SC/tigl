// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CPACSCargoContainerElement.h"
#include "CPACSDeckElementBase.h"
#include "CPACSDeckElementMass.h"
#include "CPACSGalleyElement.h"
#include "CPACSSeatElement.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSDeckElementMass::CPACSDeckElementMass(CPACSCargoContainerElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_mass(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSCargoContainerElement);
    }

    CPACSDeckElementMass::CPACSDeckElementMass(CPACSDeckElementBase* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_mass(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSDeckElementBase);
    }

    CPACSDeckElementMass::CPACSDeckElementMass(CPACSGalleyElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_mass(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSGalleyElement);
    }

    CPACSDeckElementMass::CPACSDeckElementMass(CPACSSeatElement* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_mass(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSeatElement);
    }

    CPACSDeckElementMass::~CPACSDeckElementMass()
    {
        if (m_uidMgr) m_uidMgr->TryUnregisterObject(m_uID);
    }

    const CTiglUIDObject* CPACSDeckElementMass::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CPACSCargoContainerElement>()) {
                return GetParent<CPACSCargoContainerElement>();
            }
            if (IsParent<CPACSDeckElementBase>()) {
                return GetParent<CPACSDeckElementBase>();
            }
            if (IsParent<CPACSGalleyElement>()) {
                return GetParent<CPACSGalleyElement>();
            }
            if (IsParent<CPACSSeatElement>()) {
                return GetParent<CPACSSeatElement>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSDeckElementMass::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CPACSCargoContainerElement>()) {
                return GetParent<CPACSCargoContainerElement>();
            }
            if (IsParent<CPACSDeckElementBase>()) {
                return GetParent<CPACSDeckElementBase>();
            }
            if (IsParent<CPACSGalleyElement>()) {
                return GetParent<CPACSGalleyElement>();
            }
            if (IsParent<CPACSSeatElement>()) {
                return GetParent<CPACSSeatElement>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSDeckElementMass::GetUIDManager()
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSDeckElementMass::GetUIDManager() const
    {
        if (!m_uidMgr) {
            throw CTiglError("UIDManager is null");
        }
        return *m_uidMgr;
    }

    void CPACSDeckElementMass::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read attribute uID
        if (tixi::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
            m_uID = tixi::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            if (m_uID.empty()) {
                LOG(WARNING) << "Required attribute uID is empty at xpath " << xpath;
            }
        }
        else {
            LOG(ERROR) << "Required attribute uID is missing at xpath " << xpath;
        }

        // read element mass
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/mass")) {
            m_mass = tixi::TixiGetElement<double>(tixiHandle, xpath + "/mass");
        }
        else {
            LOG(ERROR) << "Required element mass is missing at xpath " << xpath;
        }

        // read element location
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/location")) {
            m_location = boost::in_place(this, m_uidMgr);
            try {
                m_location->ReadCPACS(tixiHandle, xpath + "/location");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read location at xpath " << xpath << ": " << e.what();
                m_location = boost::none;
            }
        }

        // read element massInertia
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
            m_massInertia = boost::in_place(this);
            try {
                m_massInertia->ReadCPACS(tixiHandle, xpath + "/massInertia");
            } catch(const std::exception& e) {
                LOG(ERROR) << "Failed to read massInertia at xpath " << xpath << ": " << e.what();
                m_massInertia = boost::none;
            }
        }

        if (m_uidMgr && !m_uID.empty()) m_uidMgr->RegisterObject(m_uID, *this);
    }

    void CPACSDeckElementMass::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write attribute uID
        tixi::TixiSaveAttribute(tixiHandle, xpath, "uID", m_uID);

        // write element mass
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/mass");
        tixi::TixiSaveElement(tixiHandle, xpath + "/mass", m_mass);

        // write element location
        if (m_location) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/location");
            m_location->WriteCPACS(tixiHandle, xpath + "/location");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/location")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/location");
            }
        }

        // write element massInertia
        if (m_massInertia) {
            tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/massInertia");
            m_massInertia->WriteCPACS(tixiHandle, xpath + "/massInertia");
        }
        else {
            if (tixi::TixiCheckElement(tixiHandle, xpath + "/massInertia")) {
                tixi::TixiRemoveElement(tixiHandle, xpath + "/massInertia");
            }
        }

    }

    const std::string& CPACSDeckElementMass::GetUID() const
    {
        return m_uID;
    }

    void CPACSDeckElementMass::SetUID(const std::string& value)
    {
        if (m_uidMgr && value != m_uID) {
            if (m_uID.empty()) {
                m_uidMgr->RegisterObject(value, *this);
            }
            else {
                m_uidMgr->UpdateObjectUID(m_uID, value);
            }
        }
        m_uID = value;
    }

    const double& CPACSDeckElementMass::GetMass() const
    {
        return m_mass;
    }

    void CPACSDeckElementMass::SetMass(const double& value)
    {
        m_mass = value;
    }

    const boost::optional<CCPACSPoint>& CPACSDeckElementMass::GetLocation() const
    {
        return m_location;
    }

    boost::optional<CCPACSPoint>& CPACSDeckElementMass::GetLocation()
    {
        return m_location;
    }

    const boost::optional<CPACSMassInertia>& CPACSDeckElementMass::GetMassInertia() const
    {
        return m_massInertia;
    }

    boost::optional<CPACSMassInertia>& CPACSDeckElementMass::GetMassInertia()
    {
        return m_massInertia;
    }

    CCPACSPoint& CPACSDeckElementMass::GetLocation(CreateIfNotExistsTag)
    {
        if (!m_location)
            m_location = boost::in_place(this, m_uidMgr);
        return *m_location;
    }

    void CPACSDeckElementMass::RemoveLocation()
    {
        m_location = boost::none;
    }

    CPACSMassInertia& CPACSDeckElementMass::GetMassInertia(CreateIfNotExistsTag)
    {
        if (!m_massInertia)
            m_massInertia = boost::in_place(this);
        return *m_massInertia;
    }

    void CPACSDeckElementMass::RemoveMassInertia()
    {
        m_massInertia = boost::none;
    }

} // namespace generated
} // namespace tigl
