// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>
#include <CCPACSStringVector.h>

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSComponentCutLoadsEnvelope
        // CPACSLoadBreakdown
        
        // generated from /xsd:schema/xsd:complexType[818]
        class CPACSSubLoad
        {
        public:
            TIGL_EXPORT CPACSSubLoad();
            TIGL_EXPORT virtual ~CPACSSubLoad();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT const std::string& GetName() const;
            TIGL_EXPORT void SetName(const std::string& value);
            
            TIGL_EXPORT bool HasDescription() const;
            TIGL_EXPORT const std::string& GetDescription() const;
            TIGL_EXPORT void SetDescription(const std::string& value);
            
            TIGL_EXPORT const CCPACSStringVector& GetFx() const;
            TIGL_EXPORT CCPACSStringVector& GetFx();
            
            TIGL_EXPORT const CCPACSStringVector& GetFy() const;
            TIGL_EXPORT CCPACSStringVector& GetFy();
            
            TIGL_EXPORT const CCPACSStringVector& GetFz() const;
            TIGL_EXPORT CCPACSStringVector& GetFz();
            
            TIGL_EXPORT const CCPACSStringVector& GetMx() const;
            TIGL_EXPORT CCPACSStringVector& GetMx();
            
            TIGL_EXPORT const CCPACSStringVector& GetMy() const;
            TIGL_EXPORT CCPACSStringVector& GetMy();
            
            TIGL_EXPORT const CCPACSStringVector& GetMz() const;
            TIGL_EXPORT CCPACSStringVector& GetMz();
            
        protected:
            std::string                  m_name;
            boost::optional<std::string> m_description;
            CCPACSStringVector           m_fx;
            CCPACSStringVector           m_fy;
            CCPACSStringVector           m_fz;
            CCPACSStringVector           m_mx;
            CCPACSStringVector           m_my;
            CCPACSStringVector           m_mz;
            
        private:
            #ifdef HAVE_CPP11
            CPACSSubLoad(const CPACSSubLoad&) = delete;
            CPACSSubLoad& operator=(const CPACSSubLoad&) = delete;
            
            CPACSSubLoad(CPACSSubLoad&&) = delete;
            CPACSSubLoad& operator=(CPACSSubLoad&&) = delete;
            #else
            CPACSSubLoad(const CPACSSubLoad&);
            CPACSSubLoad& operator=(const CPACSSubLoad&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSSubLoad = generated::CPACSSubLoad;
    #else
    typedef generated::CPACSSubLoad CCPACSSubLoad;
    #endif
}
