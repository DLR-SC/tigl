// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include "CPACSStrutProperties.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSLandingGearComponentAssembly;

    // This class is used in:
    // CPACSLandingGearComponentAssembly

    /// @brief Piston
    /// 
    /// Geometric description and material properties of the
    /// landing gear piston. The figure below shows the condition of the
    /// uncompressed piston, where the length of the exposed part is the
    /// sum of the maxSpringDeflection and the compressedExternalLength :
    /// @see landingGearPiston
    /// 
    class CPACSPiston : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSPiston(CPACSLandingGearComponentAssembly* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSPiston();

        TIGL_EXPORT CPACSLandingGearComponentAssembly* GetParent();

        TIGL_EXPORT const CPACSLandingGearComponentAssembly* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetLength() const;
        TIGL_EXPORT virtual void SetLength(const double& value);

        TIGL_EXPORT virtual const CPACSStrutProperties& GetStrutProperties() const;
        TIGL_EXPORT virtual CPACSStrutProperties& GetStrutProperties();

        TIGL_EXPORT virtual const double& GetMaxSpringDeflection() const;
        TIGL_EXPORT virtual void SetMaxSpringDeflection(const double& value);

        TIGL_EXPORT virtual const double& GetCompressedExternalLength() const;
        TIGL_EXPORT virtual void SetCompressedExternalLength(const double& value);

    protected:
        CPACSLandingGearComponentAssembly* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string          m_uID;

        /// Length of the piston
        double               m_length;

        CPACSStrutProperties m_strutProperties;

        /// Maximum spring deflection of the piston (difference between minimum and maximum deflection)
        double               m_maxSpringDeflection;

        /// Length of the piston that remains outside of the main strut in fully compressed state
        double               m_compressedExternalLength;

    private:
        CPACSPiston(const CPACSPiston&) = delete;
        CPACSPiston& operator=(const CPACSPiston&) = delete;

        CPACSPiston(CPACSPiston&&) = delete;
        CPACSPiston& operator=(CPACSPiston&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSPiston = generated::CPACSPiston;
using CCPACSLandingGearComponentAssembly = generated::CPACSLandingGearComponentAssembly;
} // namespace tigl
