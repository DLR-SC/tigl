// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSControlSurfaceBorderTrailingEdge.h"
#include "CCPACSControlSurfaceSkinCutOutBorder.h"
#include "CCPACSControlSurfaceTrackType.h"
#include "CCPACSWingCellPositionSpanwise.h"
#include "CPACSControlSurfaceAirfoil.h"
#include "CPACSCutOutProfile.h"
#include "CPACSEtaIsoLine.h"
#include "CPACSSparCell.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDManager.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSEtaIsoLine::CPACSEtaIsoLine(CCPACSWingCellPositionSpanwise* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSWingCellPositionSpanwise);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CPACSControlSurfaceAirfoil* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSControlSurfaceAirfoil);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CCPACSControlSurfaceBorderTrailingEdge* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSControlSurfaceBorderTrailingEdge);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CCPACSControlSurfaceSkinCutOutBorder* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSControlSurfaceSkinCutOutBorder);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CCPACSControlSurfaceTrackType* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CCPACSControlSurfaceTrackType);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CPACSCutOutProfile* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSCutOutProfile);
    }

    CPACSEtaIsoLine::CPACSEtaIsoLine(CPACSSparCell* parent, CTiglUIDManager* uidMgr)
        : m_uidMgr(uidMgr)
        , m_eta(0)
    {
        //assert(parent != NULL);
        m_parent = parent;
        m_parentType = &typeid(CPACSSparCell);
    }

    CPACSEtaIsoLine::~CPACSEtaIsoLine()
    {
        if (m_uidMgr) {
            if (!m_referenceUID.empty()) m_uidMgr->TryUnregisterReference(m_referenceUID, *this);
        }
    }

    const CTiglUIDObject* CPACSEtaIsoLine::GetNextUIDParent() const
    {
        if (m_parent) {
            if (IsParent<CCPACSWingCellPositionSpanwise>()) {
                return GetParent<CCPACSWingCellPositionSpanwise>()->GetNextUIDParent();
            }
            if (IsParent<CPACSControlSurfaceAirfoil>()) {
                return GetParent<CPACSControlSurfaceAirfoil>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceBorderTrailingEdge>()) {
                return GetParent<CCPACSControlSurfaceBorderTrailingEdge>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceSkinCutOutBorder>()) {
                return GetParent<CCPACSControlSurfaceSkinCutOutBorder>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceTrackType>()) {
                return GetParent<CCPACSControlSurfaceTrackType>();
            }
            if (IsParent<CPACSCutOutProfile>()) {
                return GetParent<CPACSCutOutProfile>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSparCell>()) {
                return GetParent<CPACSSparCell>();
            }
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSEtaIsoLine::GetNextUIDParent()
    {
        if (m_parent) {
            if (IsParent<CCPACSWingCellPositionSpanwise>()) {
                return GetParent<CCPACSWingCellPositionSpanwise>()->GetNextUIDParent();
            }
            if (IsParent<CPACSControlSurfaceAirfoil>()) {
                return GetParent<CPACSControlSurfaceAirfoil>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceBorderTrailingEdge>()) {
                return GetParent<CCPACSControlSurfaceBorderTrailingEdge>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceSkinCutOutBorder>()) {
                return GetParent<CCPACSControlSurfaceSkinCutOutBorder>()->GetNextUIDParent();
            }
            if (IsParent<CCPACSControlSurfaceTrackType>()) {
                return GetParent<CCPACSControlSurfaceTrackType>();
            }
            if (IsParent<CPACSCutOutProfile>()) {
                return GetParent<CPACSCutOutProfile>()->GetNextUIDParent();
            }
            if (IsParent<CPACSSparCell>()) {
                return GetParent<CPACSSparCell>();
            }
        }
        return nullptr;
    }

    CTiglUIDManager& CPACSEtaIsoLine::GetUIDManager()
    {
        return *m_uidMgr;
    }

    const CTiglUIDManager& CPACSEtaIsoLine::GetUIDManager() const
    {
        return *m_uidMgr;
    }

    void CPACSEtaIsoLine::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element eta
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/eta")) {
            m_eta = tixi::TixiGetElement<double>(tixiHandle, xpath + "/eta");
        }
        else {
            LOG(ERROR) << "Required element eta is missing at xpath " << xpath;
        }

        // read element referenceUID
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/referenceUID")) {
            m_referenceUID = tixi::TixiGetElement<std::string>(tixiHandle, xpath + "/referenceUID");
            if (m_referenceUID.empty()) {
                LOG(WARNING) << "Required element referenceUID is empty at xpath " << xpath;
            }
            if (m_uidMgr && !m_referenceUID.empty()) m_uidMgr->RegisterReference(m_referenceUID, *this);
        }
        else {
            LOG(ERROR) << "Required element referenceUID is missing at xpath " << xpath;
        }

    }

    void CPACSEtaIsoLine::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        // write element eta
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
        tixi::TixiSaveElement(tixiHandle, xpath + "/eta", m_eta);

        // write element referenceUID
        tixi::TixiCreateElementIfNotExists(tixiHandle, xpath + "/referenceUID");
        tixi::TixiSaveElement(tixiHandle, xpath + "/referenceUID", m_referenceUID);

    }

    const double& CPACSEtaIsoLine::GetEta() const
    {
        return m_eta;
    }

    void CPACSEtaIsoLine::SetEta(const double& value)
    {
        m_eta = value;
    }

    const std::string& CPACSEtaIsoLine::GetReferenceUID() const
    {
        return m_referenceUID;
    }

    void CPACSEtaIsoLine::SetReferenceUID(const std::string& value)
    {
        if (m_uidMgr) {
            if (!m_referenceUID.empty()) m_uidMgr->TryUnregisterReference(m_referenceUID, *this);
            if (!value.empty()) m_uidMgr->RegisterReference(value, *this);
        }
        m_referenceUID = value;
    }

    const CTiglUIDObject* CPACSEtaIsoLine::GetNextUIDObject() const
    {
        return GetNextUIDParent();
    }

    void CPACSEtaIsoLine::NotifyUIDChange(const std::string& oldUid, const std::string& newUid)
    {
        if (m_referenceUID == oldUid) {
            m_referenceUID = newUid;
        }
    }

} // namespace generated
} // namespace tigl
