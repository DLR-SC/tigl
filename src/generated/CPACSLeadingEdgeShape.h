// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <typeinfo>
#include "CTiglError.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;
class CCPACSControlSurfaceBorderLeadingEdge;
class CCPACSControlSurfaceBorderTrailingEdge;

namespace generated
{
    // This class is used in:
    // CPACSControlSurfaceBorderLeadingEdge
    // CPACSControlSurfaceBorderTrailingEdge

    /// @brief Optional definition of the leading edge shape of
    /// trailing edge devices (TED).
    /// 
    /// All parameters are optional. For the definition of the
    /// parameters, please refer to the picture below. Parameters from
    /// the outer border default to the parameters of the inner border.
    /// @see outerShape2
    /// 
    class CPACSLeadingEdgeShape
    {
    public:
        TIGL_EXPORT CPACSLeadingEdgeShape(CCPACSControlSurfaceBorderLeadingEdge* parent);
        TIGL_EXPORT CPACSLeadingEdgeShape(CCPACSControlSurfaceBorderTrailingEdge* parent);

        TIGL_EXPORT virtual ~CPACSLeadingEdgeShape();

        template<typename P>
        bool IsParent() const
        {
            return m_parentType != NULL && *m_parentType == typeid(P);
        }

        template<typename P>
        P* GetParent()
        {
            static_assert(std::is_same<P, CCPACSControlSurfaceBorderLeadingEdge>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value, "template argument for P is not a parent class of CPACSLeadingEdgeShape");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        template<typename P>
        const P* GetParent() const
        {
            static_assert(std::is_same<P, CCPACSControlSurfaceBorderLeadingEdge>::value || std::is_same<P, CCPACSControlSurfaceBorderTrailingEdge>::value, "template argument for P is not a parent class of CPACSLeadingEdgeShape");
            if (!IsParent<P>()) {
                throw CTiglError("bad parent");
            }
            return static_cast<P*>(m_parent);
        }

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const double& GetRelHeightLE() const;
        TIGL_EXPORT virtual void SetRelHeightLE(const double& value);

        TIGL_EXPORT virtual const double& GetXsiUpperSkin() const;
        TIGL_EXPORT virtual void SetXsiUpperSkin(const double& value);

        TIGL_EXPORT virtual const double& GetXsiLowerSkin() const;
        TIGL_EXPORT virtual void SetXsiLowerSkin(const double& value);

    protected:
        void* m_parent;
        const std::type_info* m_parentType;

        /// Relative height of the leading edge of the TED,
        /// based on the airfoil height of the parent at this position.
        /// Optional.
        double m_relHeightLE;

        /// Relative chordwise upper skin position, of the
        /// border, where the airfoil of the TED is equivalent of the
        /// airfoil from the parent. Measured from the rear to the front (0
        /// = TED trailing edge; 1 = TED leading edge). Values form the
        /// outer border default to the value of the inner border. Optional.
        double m_xsiUpperSkin;

        /// Relative chordwise lower skin position, of the
        /// border, where the airfoil of the TED is equivalent of the
        /// airfoil from the parent. Measured from the rear to the front (0
        /// = TED trailing edge; 1 = TED leading edge). Values form the
        /// outer border default to the value of the inner border. Optional.
        double m_xsiLowerSkin;

    private:
        CPACSLeadingEdgeShape(const CPACSLeadingEdgeShape&) = delete;
        CPACSLeadingEdgeShape& operator=(const CPACSLeadingEdgeShape&) = delete;

        CPACSLeadingEdgeShape(CPACSLeadingEdgeShape&&) = delete;
        CPACSLeadingEdgeShape& operator=(CPACSLeadingEdgeShape&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSLeadingEdgeShape = generated::CPACSLeadingEdgeShape;
} // namespace tigl
