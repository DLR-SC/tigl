// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSPoint.h>
#include <string>
#include <tixi.h>
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;

namespace generated
{
    class CPACSSeatModules;

    // This class is used in:
    // CPACSSeatModules

    // generated from /xsd:schema/xsd:complexType[802]
    /// @brief seatModuleType
    /// 
    /// SeatModule type, containing data of a seat module
    /// 
    class CPACSSeatModule : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSSeatModule(CPACSSeatModules* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSSeatModule();

        TIGL_EXPORT CPACSSeatModules* GetParent();

        TIGL_EXPORT const CPACSSeatModules* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetName() const;
        TIGL_EXPORT virtual void SetName(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetDescription() const;
        TIGL_EXPORT virtual void SetDescription(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const int& GetNumberOfSeats() const;
        TIGL_EXPORT virtual void SetNumberOfSeats(const int& value);

        TIGL_EXPORT virtual const double& GetWidthOfSeatModule() const;
        TIGL_EXPORT virtual void SetWidthOfSeatModule(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetModuleMass() const;
        TIGL_EXPORT virtual void SetModuleMass(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<CCPACSPoint>& GetModuleCoG() const;
        TIGL_EXPORT virtual boost::optional<CCPACSPoint>& GetModuleCoG();

        TIGL_EXPORT virtual CCPACSPoint& GetModuleCoG(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveModuleCoG();

    protected:
        CPACSSeatModules* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                  m_uID;

        /// Name of the seat module
        boost::optional<std::string> m_name;

        /// Description of the seat module
        boost::optional<std::string> m_description;

        /// Number of seats in the seat module, e.g 1, 2
        /// or 3
        int                          m_numberOfSeats;

        /// Total width of the seat module
        double                       m_widthOfSeatModule;

        /// seat module mass (optional, use of data to be
        /// clarified)
        boost::optional<double>      m_moduleMass;

        /// seat module mass CoG (optional, use of data to
        /// be clarified)
        boost::optional<CCPACSPoint> m_moduleCoG;

    private:
        CPACSSeatModule(const CPACSSeatModule&) = delete;
        CPACSSeatModule& operator=(const CPACSSeatModule&) = delete;

        CPACSSeatModule(CPACSSeatModule&&) = delete;
        CPACSSeatModule& operator=(CPACSSeatModule&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSSeatModule = generated::CPACSSeatModule;
using CCPACSSeatModules = generated::CPACSSeatModules;
} // namespace tigl
