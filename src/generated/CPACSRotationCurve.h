// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include "CTiglUIDObject.h"
#include "ITiglUIDRefObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSNacelleCowl;

namespace generated
{
    // This class is used in:
    // CPACSNacelleCowl

    /// @brief Rotation curve
    /// 
    /// The figure below shows an example of a rotation curve.
    /// Together with the corresponding XML code, the definition is explained in more detail.
    /// @see nacelle_rotationCurve
    /// First, the reference system is defined via referenceSectionUID , for which in this example the section with uID="engine_nacelle_fanCowl_section1" is referenced.
    /// This in turn contains a transformation (not shown here), for example a translation by z=0.4 and a scaling, where the x -direction is stretched by a factor of two.
    /// The rotation curve is now described in this reference system.
    /// It is predefined in the profile library and referenced via a its uID .
    /// Note that the curve is defined in the range x=[0,..,1] in order to be reasonably transformed by the reference system.
    /// Next, the blending from the rotated profile of the nacelle segment to the rotation curve is defined.
    /// The corresponding start and end points are given in curve coordinates zeta of the corresponding profiles.
    /// Note that the lower part of the segment profile counts from zeta=[-1,..,0] and the upper part counts from zeta=[0,..,1] .
    /// In between, the blending is linear.
    /// 
    /// &lt;rotationCurve uID="rotationCurve"&gt;
    /// &lt;referenceSectionUID&gt;engine_nacelle_fanCowl_section1&lt;/referenceSectionUID&gt;
    /// &lt;curveProfileUID&gt;fanCowl_upperSection&lt;/curveProfileUID&gt;
    /// &lt;startZetaBlending&gt;-0.6&lt;/startZetaBlending&gt;
    /// &lt;startZeta&gt;-0.5&lt;/startZeta&gt;
    /// &lt;endZeta&gt;-0.2&lt;/endZeta&gt;s
    /// &lt;endZetaBlending&gt;-0.1&lt;/endZetaBlending&gt;
    /// &lt;/rotationCurve&gt;
    /// 
    /// &lt;curveProfile uID="fanCowlRotationCurve"&gt;
    /// &lt;name&gt;Fan cowl rotation curve profile&lt;/name&gt;
    /// &lt;pointList&gt;
    /// &lt;x mapType="vector"&gt;0;0.5;1&lt;/x&gt;
    /// &lt;y mapType="vector"&gt;-0.1;-0.2;-0.05&lt;/y&gt;
    /// &lt;/pointList&gt;
    /// &lt;/curveProfile&gt;
    /// 
    class CPACSRotationCurve : public CTiglReqUIDObject, public ITiglUIDRefObject
    {
    public:
        TIGL_EXPORT CPACSRotationCurve(CCPACSNacelleCowl* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSRotationCurve();

        TIGL_EXPORT CCPACSNacelleCowl* GetParent();

        TIGL_EXPORT const CCPACSNacelleCowl* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const std::string& GetReferenceSectionUID() const;
        TIGL_EXPORT virtual void SetReferenceSectionUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetStartZeta() const;
        TIGL_EXPORT virtual void SetStartZeta(const double& value);

        TIGL_EXPORT virtual const double& GetEndZeta() const;
        TIGL_EXPORT virtual void SetEndZeta(const double& value);

        TIGL_EXPORT virtual const double& GetStartZetaBlending() const;
        TIGL_EXPORT virtual void SetStartZetaBlending(const double& value);

        TIGL_EXPORT virtual const double& GetEndZetaBlending() const;
        TIGL_EXPORT virtual void SetEndZetaBlending(const double& value);

        TIGL_EXPORT virtual const std::string& GetCurveProfileUID() const;
        TIGL_EXPORT virtual void SetCurveProfileUID(const std::string& value);

    protected:
        CCPACSNacelleCowl* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string m_uID;

        /// UID of the section which serves as reference
        std::string m_referenceSectionUID;

        /// Start zeta [-1,..,1]; relative curve coordante along the rotation curve from which it will be inserted in the nacelle.
        double      m_startZeta;

        /// End zeta [-1,..,1]; relative curve coordante along the rotation curve up to which it will be inserted in the nacelle.
        double      m_endZeta;

        /// Start zeta for blending [-1..1]; relative curve coordinate along the nacelle profile at which blending from the nacelle profile to the rotation curve will begin.
        double      m_startZetaBlending;

        /// End zeta for blending; relative curve coordinate along the nacelle profile at which blending from the rotation curve to the nacelle profile will end.
        double      m_endZetaBlending;

        /// UID of the rotation curve profile; the profile should be defined in x=[0..1] to be transformed by the section which is referenced by referenceSectionUID.
        std::string m_curveProfileUID;

    private:
        TIGL_EXPORT const CTiglUIDObject* GetNextUIDObject() const final;
        TIGL_EXPORT void NotifyUIDChange(const std::string& oldUid, const std::string& newUid) final;

        CPACSRotationCurve(const CPACSRotationCurve&) = delete;
        CPACSRotationCurve& operator=(const CPACSRotationCurve&) = delete;

        CPACSRotationCurve(CPACSRotationCurve&&) = delete;
        CPACSRotationCurve& operator=(CPACSRotationCurve&&) = delete;
    };
} // namespace generated

// CPACSRotationCurve is customized, use type CCPACSRotationCurve directly
} // namespace tigl
