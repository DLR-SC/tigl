// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <CCPACSEtaXsiPoint.h>
#include <string>
#include <tixi.h>
#include "CPACSWingRibPoint.h"
#include "CreateIfNotExists.h"
#include "CTiglUIDObject.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSWingSparPositions;

namespace generated
{
    // This class is used in:
    // CPACSSparPositions

    // generated from /xsd:schema/xsd:complexType[825]
    /// @brief Spar position on the wing
    /// 
    /// sparPositionType, a sparPostion defines a location
    /// within the componentSegment where a spar in mounted. Eta and xsi
    /// are relative to the componentSegment.
    /// Please find below a picture for an example definition
    /// of 3 spars in one wing, by using spar position points and spar
    /// segments:
    /// @see spars1
    /// As an alternative to the relative eta coordinate it is
    /// possible to specify an elementUID so that the spar position is
    /// relative to the outer geometry, e.g. kink, of the wing.
    /// 
    class CPACSSparPosition : public CTiglReqUIDObject
    {
    public:
        TIGL_EXPORT CPACSSparPosition(CCPACSWingSparPositions* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSSparPosition();

        TIGL_EXPORT CCPACSWingSparPositions* GetParent();

        TIGL_EXPORT const CCPACSWingSparPositions* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const std::string& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const std::string& value);

        TIGL_EXPORT virtual const boost::optional<CPACSWingRibPoint>& GetSparPositionRib_choice1() const;
        TIGL_EXPORT virtual boost::optional<CPACSWingRibPoint>& GetSparPositionRib_choice1();

        TIGL_EXPORT virtual const boost::optional<CCPACSEtaXsiPoint>& GetSparPositionEtaXsi_choice2() const;
        TIGL_EXPORT virtual boost::optional<CCPACSEtaXsiPoint>& GetSparPositionEtaXsi_choice2();

        TIGL_EXPORT virtual CPACSWingRibPoint& GetSparPositionRib_choice1(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSparPositionRib_choice1();

        TIGL_EXPORT virtual CCPACSEtaXsiPoint& GetSparPositionEtaXsi_choice2(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveSparPositionEtaXsi_choice2();

    protected:
        CCPACSWingSparPositions* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::string                        m_uID;
        boost::optional<CPACSWingRibPoint> m_sparPositionRib_choice1;
        boost::optional<CCPACSEtaXsiPoint> m_sparPositionEtaXsi_choice2;

    private:
        CPACSSparPosition(const CPACSSparPosition&) = delete;
        CPACSSparPosition& operator=(const CPACSSparPosition&) = delete;

        CPACSSparPosition(CPACSSparPosition&&) = delete;
        CPACSSparPosition& operator=(CPACSSparPosition&&) = delete;
    };
} // namespace generated

// CPACSSparPosition is customized, use type CCPACSWingSparPosition directly
} // namespace tigl
