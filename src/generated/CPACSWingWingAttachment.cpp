// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSWingWingAttachment.h"

namespace tigl
{
    namespace generated
    {
        CPACSWingWingAttachment::CPACSWingWingAttachment(){}
        CPACSWingWingAttachment::~CPACSWingWingAttachment() {}
        
        void CPACSWingWingAttachment::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element toComponentSegmentUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/toComponentSegmentUID")) {
                m_toComponentSegmentUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/toComponentSegmentUID");
            }
            else {
                LOG(ERROR) << "Required element toComponentSegmentUID is missing";
            }
            
            // read element elements
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/elements")) {
                m_elements.ReadCPACS(tixiHandle, xpath + "/elements");
            }
            else {
                LOG(ERROR) << "Required element elements is missing";
            }
            
            // read element sparAttachments
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/sparAttachments")) {
                m_sparAttachments.ReadCPACS(tixiHandle, xpath + "/sparAttachments");
            }
            else {
                LOG(ERROR) << "Required element sparAttachments is missing";
            }
            
            // read element upperShellAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/upperShellAttachment")) {
                m_upperShellAttachment = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/upperShellAttachment");
            }
            else {
                LOG(ERROR) << "Required element upperShellAttachment is missing";
            }
            
            // read element lowerShellAttachment
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/lowerShellAttachment")) {
                m_lowerShellAttachment = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/lowerShellAttachment");
            }
            else {
                LOG(ERROR) << "Required element lowerShellAttachment is missing";
            }
            
        }
        
        void CPACSWingWingAttachment::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element toComponentSegmentUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/toComponentSegmentUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/toComponentSegmentUID", m_toComponentSegmentUID);
            
            // write element elements
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/elements");
            m_elements.WriteCPACS(tixiHandle, xpath + "/elements");
            
            // write element sparAttachments
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/sparAttachments");
            m_sparAttachments.WriteCPACS(tixiHandle, xpath + "/sparAttachments");
            
            // write element upperShellAttachment
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/upperShellAttachment");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/upperShellAttachment", m_upperShellAttachment);
            
            // write element lowerShellAttachment
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/lowerShellAttachment");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/lowerShellAttachment", m_lowerShellAttachment);
            
        }
        
        const std::string& CPACSWingWingAttachment::GetToComponentSegmentUID() const
        {
            return m_toComponentSegmentUID;
        }
        
        void CPACSWingWingAttachment::SetToComponentSegmentUID(const std::string& value)
        {
            m_toComponentSegmentUID = value;
        }
        
        const CPACSWingWingAttachmentElements& CPACSWingWingAttachment::GetElements() const
        {
            return m_elements;
        }
        
        CPACSWingWingAttachmentElements& CPACSWingWingAttachment::GetElements()
        {
            return m_elements;
        }
        
        const CPACSWingWingAttachmentsSpars& CPACSWingWingAttachment::GetSparAttachments() const
        {
            return m_sparAttachments;
        }
        
        CPACSWingWingAttachmentsSpars& CPACSWingWingAttachment::GetSparAttachments()
        {
            return m_sparAttachments;
        }
        
        const std::string& CPACSWingWingAttachment::GetUpperShellAttachment() const
        {
            return m_upperShellAttachment;
        }
        
        void CPACSWingWingAttachment::SetUpperShellAttachment(const std::string& value)
        {
            m_upperShellAttachment = value;
        }
        
        const std::string& CPACSWingWingAttachment::GetLowerShellAttachment() const
        {
            return m_lowerShellAttachment;
        }
        
        void CPACSWingWingAttachment::SetLowerShellAttachment(const std::string& value)
        {
            m_lowerShellAttachment = value;
        }
        
    }
}
