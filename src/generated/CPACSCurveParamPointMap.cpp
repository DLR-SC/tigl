// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include "CCPACSCurvePointListXYZ.h"
#include "CPACSCurveParamPointMap.h"
#include "CTiglError.h"
#include "CTiglLogging.h"
#include "CTiglUIDObject.h"
#include "TixiHelper.h"

namespace tigl
{
namespace generated
{
    CPACSCurveParamPointMap::CPACSCurveParamPointMap(CCPACSCurvePointListXYZ* parent)
        : m_pointIndex(reinterpret_cast<CCPACSCurveParamPointMap*>(this))
        , m_paramOnCurve(reinterpret_cast<CCPACSCurveParamPointMap*>(this))
    {
        //assert(parent != NULL);
        m_parent = parent;
    }

    CPACSCurveParamPointMap::~CPACSCurveParamPointMap()
    {
    }

    const CCPACSCurvePointListXYZ* CPACSCurveParamPointMap::GetParent() const
    {
        return m_parent;
    }

    CCPACSCurvePointListXYZ* CPACSCurveParamPointMap::GetParent()
    {
        return m_parent;
    }

    const CTiglUIDObject* CPACSCurveParamPointMap::GetNextUIDParent() const
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    CTiglUIDObject* CPACSCurveParamPointMap::GetNextUIDParent()
    {
        if (m_parent) {
            return m_parent->GetNextUIDParent();
        }
        return nullptr;
    }

    void CPACSCurveParamPointMap::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
    {
        // read element pointIndex
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/pointIndex")) {
            m_pointIndex.ReadCPACS(tixiHandle, xpath + "/pointIndex");
        }
        else {
            LOG(ERROR) << "Required element pointIndex is missing at xpath " << xpath;
        }

        // read element paramOnCurve
        if (tixi::TixiCheckElement(tixiHandle, xpath + "/paramOnCurve")) {
            m_paramOnCurve.ReadCPACS(tixiHandle, xpath + "/paramOnCurve");
        }
        else {
            LOG(ERROR) << "Required element paramOnCurve is missing at xpath " << xpath;
        }

    }

    void CPACSCurveParamPointMap::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
    {
        const std::vector<std::string> childElemOrder = { "pointIndex", "paramOnCurve" };

        // write element pointIndex
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/pointIndex", childElemOrder);
        m_pointIndex.WriteCPACS(tixiHandle, xpath + "/pointIndex");

        // write element paramOnCurve
        tixi::TixiCreateSequenceElementIfNotExists(tixiHandle, xpath + "/paramOnCurve", childElemOrder);
        m_paramOnCurve.WriteCPACS(tixiHandle, xpath + "/paramOnCurve");

    }

    const CCPACSStringVector& CPACSCurveParamPointMap::GetPointIndex() const
    {
        return m_pointIndex;
    }

    CCPACSStringVector& CPACSCurveParamPointMap::GetPointIndex()
    {
        return m_pointIndex;
    }

    const CCPACSStringVector& CPACSCurveParamPointMap::GetParamOnCurve() const
    {
        return m_paramOnCurve;
    }

    CCPACSStringVector& CPACSCurveParamPointMap::GetParamOnCurve()
    {
        return m_paramOnCurve;
    }

} // namespace generated
} // namespace tigl
