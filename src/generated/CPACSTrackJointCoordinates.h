// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSTrackJointCoordinates_name.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDObject;

namespace generated
{
    class CPACSTrackJointPosition;

    // This class is used in:
    // CPACSTrackJointPosition

    /// @brief Joint coordinates
    /// 
    /// Definition of a joint coordinates.
    /// 
    class CPACSTrackJointCoordinates
    {
    public:
        TIGL_EXPORT CPACSTrackJointCoordinates(CPACSTrackJointPosition* parent);

        TIGL_EXPORT virtual ~CPACSTrackJointCoordinates();

        TIGL_EXPORT CPACSTrackJointPosition* GetParent();

        TIGL_EXPORT const CPACSTrackJointPosition* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const CPACSTrackJointCoordinates_name& GetName() const;
        TIGL_EXPORT virtual void SetName(const CPACSTrackJointCoordinates_name& value);

        TIGL_EXPORT virtual const double& GetX() const;
        TIGL_EXPORT virtual void SetX(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetDy() const;
        TIGL_EXPORT virtual void SetDy(const boost::optional<double>& value);

        TIGL_EXPORT virtual const double& GetZ() const;
        TIGL_EXPORT virtual void SetZ(const double& value);

    protected:
        CPACSTrackJointPosition* m_parent;

        CPACSTrackJointCoordinates_name m_name;
        double                          m_x;
        boost::optional<double>         m_dy;
        double                          m_z;

    private:
        CPACSTrackJointCoordinates(const CPACSTrackJointCoordinates&) = delete;
        CPACSTrackJointCoordinates& operator=(const CPACSTrackJointCoordinates&) = delete;

        CPACSTrackJointCoordinates(CPACSTrackJointCoordinates&&) = delete;
        CPACSTrackJointCoordinates& operator=(CPACSTrackJointCoordinates&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSTrackJointCoordinates = generated::CPACSTrackJointCoordinates;
using CCPACSTrackJointPosition = generated::CPACSTrackJointPosition;
} // namespace tigl
