// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <tixi.h>
#include <string>
#include <boost/optional.hpp>
#include "tigl_internal.h"

namespace tigl
{
    namespace generated
    {
        // This class is used in:
        // CPACSLoadCaseTranslation
        
        // generated from /xsd:schema/xsd:complexType[496]
        class CPACSLoadCaseTranslationAcceleration
        {
        public:
            TIGL_EXPORT CPACSLoadCaseTranslationAcceleration();
            TIGL_EXPORT virtual ~CPACSLoadCaseTranslationAcceleration();
            
            TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
            TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;
            
            TIGL_EXPORT bool HasUDot_choice1() const;
            TIGL_EXPORT const double& GetUDot_choice1() const;
            TIGL_EXPORT void SetUDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasVDot_choice1() const;
            TIGL_EXPORT const double& GetVDot_choice1() const;
            TIGL_EXPORT void SetVDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasWDot_choice1() const;
            TIGL_EXPORT const double& GetWDot_choice1() const;
            TIGL_EXPORT void SetWDot_choice1(const double& value);
            
            TIGL_EXPORT bool HasXDotDot_choice2() const;
            TIGL_EXPORT const double& GetXDotDot_choice2() const;
            TIGL_EXPORT void SetXDotDot_choice2(const double& value);
            
            TIGL_EXPORT bool HasYDotDot_choice2() const;
            TIGL_EXPORT const double& GetYDotDot_choice2() const;
            TIGL_EXPORT void SetYDotDot_choice2(const double& value);
            
            TIGL_EXPORT bool HasZDotDot_choice2() const;
            TIGL_EXPORT const double& GetZDotDot_choice2() const;
            TIGL_EXPORT void SetZDotDot_choice2(const double& value);
            
        protected:
            boost::optional<double> m_uDot_choice1;
            boost::optional<double> m_vDot_choice1;
            boost::optional<double> m_wDot_choice1;
            boost::optional<double> m_xDotDot_choice2;
            boost::optional<double> m_yDotDot_choice2;
            boost::optional<double> m_zDotDot_choice2;
            
        private:
            #ifdef HAVE_CPP11
            CPACSLoadCaseTranslationAcceleration(const CPACSLoadCaseTranslationAcceleration&) = delete;
            CPACSLoadCaseTranslationAcceleration& operator=(const CPACSLoadCaseTranslationAcceleration&) = delete;
            
            CPACSLoadCaseTranslationAcceleration(CPACSLoadCaseTranslationAcceleration&&) = delete;
            CPACSLoadCaseTranslationAcceleration& operator=(CPACSLoadCaseTranslationAcceleration&&) = delete;
            #else
            CPACSLoadCaseTranslationAcceleration(const CPACSLoadCaseTranslationAcceleration&);
            CPACSLoadCaseTranslationAcceleration& operator=(const CPACSLoadCaseTranslationAcceleration&);
            #endif
        };
    }
    
    // This type is not customized, create alias in tigl namespace
    #ifdef CPP11
    using CCPACSLoadCaseTranslationAcceleration = generated::CPACSLoadCaseTranslationAcceleration;
    #else
    typedef generated::CPACSLoadCaseTranslationAcceleration CCPACSLoadCaseTranslationAcceleration;
    #endif
}
