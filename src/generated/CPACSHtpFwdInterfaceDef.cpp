// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSHtpFwdInterfaceDef.h"

namespace tigl
{
    namespace generated
    {
        CPACSHtpFwdInterfaceDef::CPACSHtpFwdInterfaceDef(){}
        CPACSHtpFwdInterfaceDef::~CPACSHtpFwdInterfaceDef() {}
        
        void CPACSHtpFwdInterfaceDef::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read attribute uID
            if (tixihelper::TixiCheckAttribute(tixiHandle, xpath, "uID")) {
                m_uID = tixihelper::TixiGetAttribute<std::string>(tixiHandle, xpath, "uID");
            }
            
            // read element htpFwdReinfRelWidth
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdReinfRelWidth")) {
                m_htpFwdReinfRelWidth = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpFwdReinfRelWidth");
            }
            else {
                LOG(ERROR) << "Required element htpFwdReinfRelWidth is missing";
            }
            
            // read element htpFwdPlateWidth
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdPlateWidth")) {
                m_htpFwdPlateWidth = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/htpFwdPlateWidth");
            }
            else {
                LOG(ERROR) << "Required element htpFwdPlateWidth is missing";
            }
            
            // read element htpFwdPlateXElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdPlateXElemUID")) {
                m_htpFwdPlateXElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFwdPlateXElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpFwdPlateXElemUID is missing";
            }
            
            // read element htpFwdPlateZElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdPlateZElemUID")) {
                m_htpFwdPlateZElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFwdPlateZElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpFwdPlateZElemUID is missing";
            }
            
            // read element htpFwdPlateZReinfStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdPlateZReinfStructElemUID")) {
                m_htpFwdPlateZReinfStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFwdPlateZReinfStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpFwdPlateZReinfStructElemUID is missing";
            }
            
            // read element htpFwdAttachmentStructElemUID
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/htpFwdAttachmentStructElemUID")) {
                m_htpFwdAttachmentStructElemUID = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/htpFwdAttachmentStructElemUID");
            }
            else {
                LOG(ERROR) << "Required element htpFwdAttachmentStructElemUID is missing";
            }
            
        }
        
        void CPACSHtpFwdInterfaceDef::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write attribute uID
            if (m_uID) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/uID");
                tixihelper::TixiSaveAttribute(tixiHandle, xpath, "uID", *m_uID);
            }
            
            // write element htpFwdReinfRelWidth
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdReinfRelWidth");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdReinfRelWidth", m_htpFwdReinfRelWidth);
            
            // write element htpFwdPlateWidth
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdPlateWidth");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdPlateWidth", m_htpFwdPlateWidth);
            
            // write element htpFwdPlateXElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdPlateXElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdPlateXElemUID", m_htpFwdPlateXElemUID);
            
            // write element htpFwdPlateZElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdPlateZElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdPlateZElemUID", m_htpFwdPlateZElemUID);
            
            // write element htpFwdPlateZReinfStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdPlateZReinfStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdPlateZReinfStructElemUID", m_htpFwdPlateZReinfStructElemUID);
            
            // write element htpFwdAttachmentStructElemUID
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/htpFwdAttachmentStructElemUID");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/htpFwdAttachmentStructElemUID", m_htpFwdAttachmentStructElemUID);
            
        }
        
        bool CPACSHtpFwdInterfaceDef::HasUID() const
        {
            return static_cast<bool>(m_uID);
        }
        
        const std::string& CPACSHtpFwdInterfaceDef::GetUID() const
        {
            return *m_uID;
        }
        
        void CPACSHtpFwdInterfaceDef::SetUID(const std::string& value)
        {
            m_uID = value;
        }
        
        const double& CPACSHtpFwdInterfaceDef::GetHtpFwdReinfRelWidth() const
        {
            return m_htpFwdReinfRelWidth;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdReinfRelWidth(const double& value)
        {
            m_htpFwdReinfRelWidth = value;
        }
        
        const double& CPACSHtpFwdInterfaceDef::GetHtpFwdPlateWidth() const
        {
            return m_htpFwdPlateWidth;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdPlateWidth(const double& value)
        {
            m_htpFwdPlateWidth = value;
        }
        
        const std::string& CPACSHtpFwdInterfaceDef::GetHtpFwdPlateXElemUID() const
        {
            return m_htpFwdPlateXElemUID;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdPlateXElemUID(const std::string& value)
        {
            m_htpFwdPlateXElemUID = value;
        }
        
        const std::string& CPACSHtpFwdInterfaceDef::GetHtpFwdPlateZElemUID() const
        {
            return m_htpFwdPlateZElemUID;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdPlateZElemUID(const std::string& value)
        {
            m_htpFwdPlateZElemUID = value;
        }
        
        const std::string& CPACSHtpFwdInterfaceDef::GetHtpFwdPlateZReinfStructElemUID() const
        {
            return m_htpFwdPlateZReinfStructElemUID;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdPlateZReinfStructElemUID(const std::string& value)
        {
            m_htpFwdPlateZReinfStructElemUID = value;
        }
        
        const std::string& CPACSHtpFwdInterfaceDef::GetHtpFwdAttachmentStructElemUID() const
        {
            return m_htpFwdAttachmentStructElemUID;
        }
        
        void CPACSHtpFwdInterfaceDef::SetHtpFwdAttachmentStructElemUID(const std::string& value)
        {
            m_htpFwdAttachmentStructElemUID = value;
        }
        
    }
}
