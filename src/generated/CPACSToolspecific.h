// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "CPACSCFDTool.h"
#include "CreateIfNotExists.h"
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSCpacs;

    // This class is used in:
    // CPACSCpacs

    // generated from /xsd:schema/xsd:complexType[875]
    /// @brief toolspecificType
    /// 
    /// Toolspecific type, containing specific data for the
    /// analysis tools. All types defined under this node will be removed from the schema with the next release. Toolspecifics can still be used but should be defined in their own namespaces. This way an update of toolspecific types is no longer depending on CPACS releases.
    /// 
    class CPACSToolspecific
    {
    public:
        TIGL_EXPORT CPACSToolspecific(CPACSCpacs* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSToolspecific();

        TIGL_EXPORT CPACSCpacs* GetParent();

        TIGL_EXPORT const CPACSCpacs* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<CPACSCFDTool>& GetCFD() const;
        TIGL_EXPORT virtual boost::optional<CPACSCFDTool>& GetCFD();

        TIGL_EXPORT virtual CPACSCFDTool& GetCFD(CreateIfNotExistsTag);
        TIGL_EXPORT virtual void RemoveCFD();

    protected:
        CPACSCpacs* m_parent;

        CTiglUIDManager* m_uidMgr;

        boost::optional<CPACSCFDTool> m_cFD;

    private:
        CPACSToolspecific(const CPACSToolspecific&) = delete;
        CPACSToolspecific& operator=(const CPACSToolspecific&) = delete;

        CPACSToolspecific(CPACSToolspecific&&) = delete;
        CPACSToolspecific& operator=(CPACSToolspecific&&) = delete;
    };
} // namespace generated

// Aliases in tigl namespace
using CCPACSToolspecific = generated::CPACSToolspecific;
using CCPACSCpacs = generated::CPACSCpacs;
} // namespace tigl
