// Copyright (c) 2020 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include <vector>
#include "tigl_internal.h"
#include "UniquePtr.h"

namespace tigl
{
class CTiglUIDManager;
class CTiglUIDObject;

namespace generated
{
    class CPACSProfileGeometry;
    class CPACSProfiles;

    // This class is used in:
    // CPACSProfiles

    /// @brief fuselageProfilesType
    /// 
    /// FuselageProfiles type, containing fuselage profile
    /// geometries. See profileGeometryType for further documentation
    /// 
    class CPACSFuselageProfiles
    {
    public:
        TIGL_EXPORT CPACSFuselageProfiles(CPACSProfiles* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSFuselageProfiles();

        TIGL_EXPORT CPACSProfiles* GetParent();

        TIGL_EXPORT const CPACSProfiles* GetParent() const;

        TIGL_EXPORT virtual CTiglUIDObject* GetNextUIDParent();
        TIGL_EXPORT virtual const CTiglUIDObject* GetNextUIDParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::vector<std::unique_ptr<CPACSProfileGeometry>>& GetFuselageProfiles() const;
        TIGL_EXPORT virtual std::vector<std::unique_ptr<CPACSProfileGeometry>>& GetFuselageProfiles();

        TIGL_EXPORT virtual size_t GetFuselageProfileCount() const;
        TIGL_EXPORT virtual size_t GetFuselageProfileIndex(const std::string& UID) const;

        TIGL_EXPORT virtual const CPACSProfileGeometry& GetFuselageProfile(size_t index) const;
        TIGL_EXPORT virtual CPACSProfileGeometry& GetFuselageProfile(size_t index);

        TIGL_EXPORT virtual const CPACSProfileGeometry& GetFuselageProfile(const std::string& UID) const;
        TIGL_EXPORT virtual CPACSProfileGeometry& GetFuselageProfile(const std::string& UID);

        TIGL_EXPORT virtual CPACSProfileGeometry& AddFuselageProfile();
        TIGL_EXPORT virtual void RemoveFuselageProfile(CPACSProfileGeometry& ref);

    protected:
        CPACSProfiles* m_parent;

        CTiglUIDManager* m_uidMgr;

        std::vector<std::unique_ptr<CPACSProfileGeometry>> m_fuselageProfiles;

    private:
        CPACSFuselageProfiles(const CPACSFuselageProfiles&) = delete;
        CPACSFuselageProfiles& operator=(const CPACSFuselageProfiles&) = delete;

        CPACSFuselageProfiles(CPACSFuselageProfiles&&) = delete;
        CPACSFuselageProfiles& operator=(CPACSFuselageProfiles&&) = delete;
    };
} // namespace generated

// CPACSFuselageProfiles is customized, use type CCPACSFuselageProfiles directly

// Aliases in tigl namespace
using CCPACSProfileGeometry = generated::CPACSProfileGeometry;
using CCPACSProfiles = generated::CPACSProfiles;
} // namespace tigl
