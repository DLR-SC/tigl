// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSMainGearWingAttachmentPositioning.h"

namespace tigl
{
    namespace generated
    {
        CPACSMainGearWingAttachmentPositioning::CPACSMainGearWingAttachmentPositioning(){}
        CPACSMainGearWingAttachmentPositioning::~CPACSMainGearWingAttachmentPositioning() {}
        
        void CPACSMainGearWingAttachmentPositioning::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element relHeight
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/relHeight")) {
                m_relHeight = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/relHeight");
            }
            else {
                LOG(ERROR) << "Required element relHeight is missing";
            }
            
            // read element eta
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/eta")) {
                m_eta = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/eta");
            }
            else {
                LOG(ERROR) << "Required element eta is missing";
            }
            
            // read element xsi
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/xsi")) {
                m_xsi_choice1 = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/xsi");
            }
            
            // read element positionOverlap
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/positionOverlap")) {
                m_positionOverlap_choice2 = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/positionOverlap");
            }
            
        }
        
        void CPACSMainGearWingAttachmentPositioning::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element relHeight
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/relHeight");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/relHeight", m_relHeight);
            
            // write element eta
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/eta");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/eta", m_eta);
            
            // write element xsi
            if (m_xsi_choice1) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/xsi");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/xsi", *m_xsi_choice1);
            }
            
            // write element positionOverlap
            if (m_positionOverlap_choice2) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/positionOverlap");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/positionOverlap", *m_positionOverlap_choice2);
            }
            
        }
        
        const double& CPACSMainGearWingAttachmentPositioning::GetRelHeight() const
        {
            return m_relHeight;
        }
        
        void CPACSMainGearWingAttachmentPositioning::SetRelHeight(const double& value)
        {
            m_relHeight = value;
        }
        
        const double& CPACSMainGearWingAttachmentPositioning::GetEta() const
        {
            return m_eta;
        }
        
        void CPACSMainGearWingAttachmentPositioning::SetEta(const double& value)
        {
            m_eta = value;
        }
        
        bool CPACSMainGearWingAttachmentPositioning::HasXsi_choice1() const
        {
            return static_cast<bool>(m_xsi_choice1);
        }
        
        const double& CPACSMainGearWingAttachmentPositioning::GetXsi_choice1() const
        {
            return *m_xsi_choice1;
        }
        
        void CPACSMainGearWingAttachmentPositioning::SetXsi_choice1(const double& value)
        {
            m_xsi_choice1 = value;
        }
        
        bool CPACSMainGearWingAttachmentPositioning::HasPositionOverlap_choice2() const
        {
            return static_cast<bool>(m_positionOverlap_choice2);
        }
        
        const std::string& CPACSMainGearWingAttachmentPositioning::GetPositionOverlap_choice2() const
        {
            return *m_positionOverlap_choice2;
        }
        
        void CPACSMainGearWingAttachmentPositioning::SetPositionOverlap_choice2(const std::string& value)
        {
            m_positionOverlap_choice2 = value;
        }
        
    }
}
