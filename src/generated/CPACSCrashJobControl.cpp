// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSCrashJobControl.h"

namespace tigl
{
    namespace generated
    {
        CPACSCrashJobControl::CPACSCrashJobControl(){}
        CPACSCrashJobControl::~CPACSCrashJobControl() {}
        
        void CPACSCrashJobControl::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element crashSolver
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashSolver")) {
                m_crashSolver.ReadCPACS(tixiHandle, xpath + "/crashSolver");
            }
            else {
                LOG(ERROR) << "Required element crashSolver is missing";
            }
            
            // read element crashSolverVersion
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashSolverVersion")) {
                m_crashSolverVersion = tixihelper::TixiGetElement<std::string>(tixiHandle, xpath + "/crashSolverVersion");
            }
            
            // read element crashTerminationTime
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashTerminationTime")) {
                m_crashTerminationTime = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/crashTerminationTime");
            }
            else {
                LOG(ERROR) << "Required element crashTerminationTime is missing";
            }
            
            // read element crashNoOfProcessors
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashNoOfProcessors")) {
                m_crashNoOfProcessors = tixihelper::TixiGetElement<int>(tixiHandle, xpath + "/crashNoOfProcessors");
            }
            
            // read element crashOutputFrequency
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashOutputFrequency")) {
                m_crashOutputFrequency = boost::in_place();
                try {
                    m_crashOutputFrequency->ReadCPACS(tixiHandle, xpath + "/crashOutputFrequency");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashOutputFrequency at xpath << " << xpath << ": " << e.what();
                    m_crashOutputFrequency = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashOutputFrequency at xpath << " << xpath << ": " << e.getError();
                    m_crashOutputFrequency = boost::none;
                }
            }
            
            // read element crashAdditionalOutput
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/crashAdditionalOutput")) {
                m_crashAdditionalOutput = boost::in_place();
                try {
                    m_crashAdditionalOutput->ReadCPACS(tixiHandle, xpath + "/crashAdditionalOutput");
                } catch(const std::exception& e) {
                    LOG(ERROR) << "Failed to read crashAdditionalOutput at xpath << " << xpath << ": " << e.what();
                    m_crashAdditionalOutput = boost::none;
                } catch(const CTiglError& e) {
                    LOG(ERROR) << "Failed to read crashAdditionalOutput at xpath << " << xpath << ": " << e.getError();
                    m_crashAdditionalOutput = boost::none;
                }
            }
            
        }
        
        void CPACSCrashJobControl::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element crashSolver
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashSolver");
            m_crashSolver.WriteCPACS(tixiHandle, xpath + "/crashSolver");
            
            // write element crashSolverVersion
            if (m_crashSolverVersion) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashSolverVersion");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashSolverVersion", *m_crashSolverVersion);
            }
            
            // write element crashTerminationTime
            tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashTerminationTime");
            tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashTerminationTime", m_crashTerminationTime);
            
            // write element crashNoOfProcessors
            if (m_crashNoOfProcessors) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashNoOfProcessors");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/crashNoOfProcessors", *m_crashNoOfProcessors);
            }
            
            // write element crashOutputFrequency
            if (m_crashOutputFrequency) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashOutputFrequency");
                m_crashOutputFrequency->WriteCPACS(tixiHandle, xpath + "/crashOutputFrequency");
            }
            
            // write element crashAdditionalOutput
            if (m_crashAdditionalOutput) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/crashAdditionalOutput");
                m_crashAdditionalOutput->WriteCPACS(tixiHandle, xpath + "/crashAdditionalOutput");
            }
            
        }
        
        const CPACSCrashJobControl_crashSolver& CPACSCrashJobControl::GetCrashSolver() const
        {
            return m_crashSolver;
        }
        
        CPACSCrashJobControl_crashSolver& CPACSCrashJobControl::GetCrashSolver()
        {
            return m_crashSolver;
        }
        
        bool CPACSCrashJobControl::HasCrashSolverVersion() const
        {
            return static_cast<bool>(m_crashSolverVersion);
        }
        
        const std::string& CPACSCrashJobControl::GetCrashSolverVersion() const
        {
            return *m_crashSolverVersion;
        }
        
        void CPACSCrashJobControl::SetCrashSolverVersion(const std::string& value)
        {
            m_crashSolverVersion = value;
        }
        
        const double& CPACSCrashJobControl::GetCrashTerminationTime() const
        {
            return m_crashTerminationTime;
        }
        
        void CPACSCrashJobControl::SetCrashTerminationTime(const double& value)
        {
            m_crashTerminationTime = value;
        }
        
        bool CPACSCrashJobControl::HasCrashNoOfProcessors() const
        {
            return static_cast<bool>(m_crashNoOfProcessors);
        }
        
        const int& CPACSCrashJobControl::GetCrashNoOfProcessors() const
        {
            return *m_crashNoOfProcessors;
        }
        
        void CPACSCrashJobControl::SetCrashNoOfProcessors(const int& value)
        {
            m_crashNoOfProcessors = value;
        }
        
        bool CPACSCrashJobControl::HasCrashOutputFrequency() const
        {
            return static_cast<bool>(m_crashOutputFrequency);
        }
        
        const CPACSCrashOutputFrequencyDef& CPACSCrashJobControl::GetCrashOutputFrequency() const
        {
            return *m_crashOutputFrequency;
        }
        
        CPACSCrashOutputFrequencyDef& CPACSCrashJobControl::GetCrashOutputFrequency()
        {
            return *m_crashOutputFrequency;
        }
        
        bool CPACSCrashJobControl::HasCrashAdditionalOutput() const
        {
            return static_cast<bool>(m_crashAdditionalOutput);
        }
        
        const CPACSCrashAdditionalOutputDef& CPACSCrashJobControl::GetCrashAdditionalOutput() const
        {
            return *m_crashAdditionalOutput;
        }
        
        CPACSCrashAdditionalOutputDef& CPACSCrashJobControl::GetCrashAdditionalOutput()
        {
            return *m_crashAdditionalOutput;
        }
        
    }
}
