// Copyright (c) 2016 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "TixiHelper.h"
#include "CTiglLogging.h"
#include "CTiglError.h"
#include "CPACSFqShortPeriod.h"

namespace tigl
{
    namespace generated
    {
        CPACSFqShortPeriod::CPACSFqShortPeriod(){}
        CPACSFqShortPeriod::~CPACSFqShortPeriod() {}
        
        void CPACSFqShortPeriod::ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath)
        {
            // read element nAlpha
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/nAlpha")) {
                m_nAlpha = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/nAlpha");
            }
            
            // read element spFrequency
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spFrequency")) {
                m_spFrequency = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/spFrequency");
            }
            
            // read element spDamping
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spDamping")) {
                m_spDamping = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/spDamping");
            }
            
            // read element spTauRed
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/spTauRed")) {
                m_spTauRed = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/spTauRed");
            }
            
            // read element cap
            if (tixihelper::TixiCheckElement(tixiHandle, xpath + "/cap")) {
                m_cap = tixihelper::TixiGetElement<double>(tixiHandle, xpath + "/cap");
            }
            
        }
        
        void CPACSFqShortPeriod::WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const
        {
            // write element nAlpha
            if (m_nAlpha) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/nAlpha");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/nAlpha", *m_nAlpha);
            }
            
            // write element spFrequency
            if (m_spFrequency) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spFrequency");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/spFrequency", *m_spFrequency);
            }
            
            // write element spDamping
            if (m_spDamping) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spDamping");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/spDamping", *m_spDamping);
            }
            
            // write element spTauRed
            if (m_spTauRed) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/spTauRed");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/spTauRed", *m_spTauRed);
            }
            
            // write element cap
            if (m_cap) {
                tixihelper::TixiCreateElementIfNotExists(tixiHandle, xpath + "/cap");
                tixihelper::TixiSaveElement(tixiHandle, xpath + "/cap", *m_cap);
            }
            
        }
        
        bool CPACSFqShortPeriod::HasNAlpha() const
        {
            return static_cast<bool>(m_nAlpha);
        }
        
        const double& CPACSFqShortPeriod::GetNAlpha() const
        {
            return *m_nAlpha;
        }
        
        void CPACSFqShortPeriod::SetNAlpha(const double& value)
        {
            m_nAlpha = value;
        }
        
        bool CPACSFqShortPeriod::HasSpFrequency() const
        {
            return static_cast<bool>(m_spFrequency);
        }
        
        const double& CPACSFqShortPeriod::GetSpFrequency() const
        {
            return *m_spFrequency;
        }
        
        void CPACSFqShortPeriod::SetSpFrequency(const double& value)
        {
            m_spFrequency = value;
        }
        
        bool CPACSFqShortPeriod::HasSpDamping() const
        {
            return static_cast<bool>(m_spDamping);
        }
        
        const double& CPACSFqShortPeriod::GetSpDamping() const
        {
            return *m_spDamping;
        }
        
        void CPACSFqShortPeriod::SetSpDamping(const double& value)
        {
            m_spDamping = value;
        }
        
        bool CPACSFqShortPeriod::HasSpTauRed() const
        {
            return static_cast<bool>(m_spTauRed);
        }
        
        const double& CPACSFqShortPeriod::GetSpTauRed() const
        {
            return *m_spTauRed;
        }
        
        void CPACSFqShortPeriod::SetSpTauRed(const double& value)
        {
            m_spTauRed = value;
        }
        
        bool CPACSFqShortPeriod::HasCap() const
        {
            return static_cast<bool>(m_cap);
        }
        
        const double& CPACSFqShortPeriod::GetCap() const
        {
            return *m_cap;
        }
        
        void CPACSFqShortPeriod::SetCap(const double& value)
        {
            m_cap = value;
        }
        
    }
}
