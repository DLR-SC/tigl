name: "Build and test TiGL"

on:

  workflow_call:

    secrets:
      GH_TOKEN:
        description: 'A Github PAT'
        required: false
      CODECOV_TOKEN:
        description: 'Needed to upload coverage report to codecov'
        required: false

    inputs:

      os:
        description: "Operating system to run the job on"
        required: true
        type: string

      config:
        description: "Build configuration (Debug or Release)"
        required: true
        type: string

      nightly:
        description: "CMake option to amend the version with the git hash (ON or OFF). Should be OFF for release builds."
        required: false
        default: "ON"
        type: string

      pixienv:
        description: "Which pixi environment to use"
        required: false 
        default: "occt-dynamic"
        type: string

      documentation:
        description: "Whether to build the documentation (ON or OFF)"
        required: false
        default: "OFF"
        type: string

      package:
        description: "Whether to create a package (ON or OFF)"
        required: false
        default: "OFF"
        type: string

jobs:

  build:
    runs-on: ${{ inputs.os }}
    steps:
      # checkout, setup pixi, compilers and ccache/sccache
      - uses: actions/checkout@v5
      - name: Set up Visual Studio shell
        if: startsWith(inputs.os, 'windows')
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64
      - uses: hendrikmuhs/ccache-action@v1
        if: startsWith(inputs.os, 'windows') == false
        with:
          key: compiler-cache-${{ inputs.os }}-${{ inputs.config }}-${{ inputs.pixienv }}
      - name: Run sccache-cache
        if: startsWith(inputs.os, 'windows')
        uses: mozilla-actions/sccache-action@v0.0.9
      - uses: prefix-dev/setup-pixi@v0.9.0
        with:
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          environments: ${{ inputs.pixienv }}

      # configure, build and install tigl3
      - run: pixi run -e ${{ inputs.pixienv }} configure ${{ inputs.config }} ${{ inputs.nightly }}
        if: startsWith(inputs.os, 'windows') == false
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
      - run: pixi run -e ${{ inputs.pixienv }} configure ${{ inputs.config }} ${{ inputs.nightly }}
        if: startsWith(inputs.os, 'windows')
        env:
          CMAKE_CXX_COMPILER_LAUNCHER: sccache
          SCCACHE_GHA_ENABLED: "true"
      - run: pixi run  -e ${{ inputs.pixienv }} install

      # save build artifacts

      - name: Create documentation
        if: inputs.documentation == 'ON' || inputs.package == 'ON'
        run: |
          cd build
          cmake --build . --target doc
      - name: Upload documentation as artifact
        if: inputs.documentation == 'ON'
        uses: actions/upload-artifact@v4
        with:
          name: html-documentation
          path: build/doc/html/*

      - name: Create MacOS package
        if: startsWith(inputs.os, 'macos') && inputs.package == 'ON'
        run: |
          cd build
          cmake --build . --target package
      - name: Upload MacOS package 
        uses: actions/upload-artifact@v4
        if: startsWith(inputs.os, 'maos') && inputs.package == 'ON'
        with:
         name: macos-package
         path: build/*.dmg

      - name: Create windows package
        if: startsWith(inputs.os, 'windows') && inputs.package == 'ON'
        shell: cmd
        run: |
          cd build
          cmake --build . --target doc
          cpack.exe -G ZIP & cpack.exe -G NSIS
      - name: Upload windows package as artifact
        if: startsWith(inputs.os, 'windows') && inputs.package == 'ON'
        uses: actions/upload-artifact@v4
        with:
          name: win-package
          path: build/*.zip

      - name: Upload windows installer as artifact
        if: startsWith(inputs.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
         name: win-installer
         path: build/*.exe


      - name: create build archive
        run: tar -czf build.tar.gz build
      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.os }}-${{ inputs.config }}
          path: build.tar.gz
          retention-days: 1

  test:
    runs-on: ${{ inputs.os }}
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Download build directory
        uses: actions/download-artifact@v4
        with:
          name: build-${{ inputs.os }}-${{ inputs.config }}
      - name: extract build archive
        run: tar -xzf build.tar.gz
      - uses: prefix-dev/setup-pixi@v0.9.0
        with:
          cache: true
          cache-write: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - run: pixi run -e ${{ inputs.pixienv }} tests

      - name: Publish coverage report to codecov.io (ubuntu debug)
        if: ${{ inputs.pixienv }} == 'coverage' && ${{ inputs.config }} == 'Debug'
        uses: codecov/codecov-action@v4
        with:
          files: ./build/tests/unittests/coverageReport-unit.info,./build/tests/integrationtests/coverageReport-integration.info
          token: ${{ secrets.CODECOV_TOKEN }}
          codecov_yml_path: codecov.yml
          disable_search: true
          verbose: true
          flags: unittests