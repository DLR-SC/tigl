name: TiGL Github CI

on: 
 schedule:
    - cron: "0 0 * * *"
 push:
 create:
    tags:
      - v*

env:
  CCACHE_DIR: ${{ github.workspace }}/compiler-cache
  CLCACHE_DIR: ${{ github.workspace }}\compiler-cache
  CLCACHE_HARDLINK: 1
  TIGL_PYTHON_VER: "=3.6"
  TIGL_TIXI3_VER: ">=3.0.3"
  TIGL_QT_VER: "=5.9.7"
  TIGL_PYTHONOCC_VER: "=0.17.3"
  TIGL_DOXYGEN_VER: "=1.8.16"
  TIGL_SWIG_VER: ">=3.0.11"
  TIGL_OCE_VER: "=0.17.2"
  TIGL_FREEIMAGEPLUS_VER: ""
  TIGL_NINJA_VER: ""
 
jobs:

  build-and-test:

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: 'Win64',
            os: windows-latest,
            arch: amd64,
            cmake_args: "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DOCE_STATIC_LIBS=ON -DTIGL_BUILD_TESTS=ON -DTIGL_CONCAT_GENERATED_FILES=ON -DTIGL_BINDINGS_PYTHON_INTERNAL=ON -DPythonOCC_SOURCE_DIR=C:/Miniconda/Library/src/pythonocc-core -DTIGL_BINDINGS_MATLAB=ON -DTIGL_BINDINGS_JAVA=ON"
          }
        - {
            name: 'Ubuntu Release',
            os: ubuntu-latest,
            cmake_args: "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DOCE_STATIC_LIBS=ON -DTIGL_BUILD_TESTS=ON -DTIGL_CONCAT_GENERATED_FILES=ON -DTIGL_BINDINGS_PYTHON_INTERNAL=ON -DPythonOCC_SOURCE_DIR=${CONDA_PREFIX}/src/pythonocc-core -DTIGL_BINDINGS_MATLAB=ON -DTIGL_BINDINGS_JAVA=ON"
          }
        - {
            name: 'Ubuntu Debug',
            os: ubuntu-latest,
            cmake_args: "-DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=install -DOCE_STATIC_LIBS=ON -DTIGL_BUILD_TESTS=ON -DTIGL_ENABLE_COVERAGE=ON -DTIGL_CONCAT_GENERATED_FILES=ON -DTIGL_BINDINGS_PYTHON_INTERNAL=ON -DPythonOCC_SOURCE_DIR=${CONDA_PREFIX}/src/pythonocc-core -DTIGL_BINDINGS_MATLAB=ON -DTIGL_BINDINGS_JAVA=ON"
          }
        - {
            name: 'MacOS',
            os: macos-latest,
            cmake_args: "-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DOCE_STATIC_LIBS=ON -DTIGL_BUILD_TESTS=ON -DTIGL_CONCAT_GENERATED_FILES=ON -DTIGL_BINDINGS_PYTHON_INTERNAL=ON -DPythonOCC_SOURCE_DIR=${CONDA_PREFIX}/src/pythonocc-core -DTIGL_BINDINGS_MATLAB=ON -DTIGL_BINDINGS_JAVA=ON"
          }

    runs-on: ${{ matrix.config.os }}    

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
  

#  setup:

  
    - name: Install libglu1-mesa-dev freeglut3-dev mesa-common-dev lcov gcovr (ubuntu)
      run: sudo apt-get update &&  sudo apt-get install -y --force-yes libglu1-mesa-dev freeglut3-dev mesa-common-dev lcov gcovr
      if: contains(matrix.config.os, 'ubuntu')
    
    - name: Setup conda
      uses: goanpeca/setup-miniconda@v1.0.2
      with:
        auto-update-conda: true
        auto-activate-base: true
        activate-environment: ''

    - name: Install dependencies using Miniconda
      run: |
        conda install pip python${{ env.TIGL_PYTHON_VER }} pythonocc-core${{ env.TIGL_PYTHONOCC_VER }} tixi3${{ env.TIGL_TIXI3_VER }} swig${{ env.TIGL_SWIG_VER }} qt${{ env.TIGL_QT_VER }} oce${{ env.TIGL_OCE_VER }} freeimageplus${{ env.TIGL_FREEIMAGEPLUS_VER }} ninja${{ env.TIGL_NINJA_VER }} -c dlr-sc -c dlr-sc/label/tigl-dev
        conda info -a
        conda list
        
    - name: Install doxygen (ubuntu, macos)
      if: contains(matrix.config.os, 'ubuntu') || contains(matrix.config.os, 'macos')
      run: conda install doxygen${{ env.TIGL_DOXYGEN_VER }} -c dlr-sc -c dlr-sc/label/tigl-dev
        
    - name: Install doxygen 1.8.16 (windows)
      if: contains(matrix.config.os, 'windows')
      run: |
       curl --max-time 900 --connect-timeout 60 -o doxygen.zip -L https://sourceforge.net/projects/doxygen/files/rel-1.8.16/doxygen-1.8.16.windows.x64.bin.zip
       unzip doxygen.zip -d doxygen

    - name: Install ccache (ubuntu)
      run: |
        sudo apt-get install ccache -y
        echo "::add-path::/usr/lib/ccache"
      if: contains(matrix.config.os, 'ubuntu')
      
    - name: Install ccache (macos)
      run: |
        brew install zstd libb2
        brew install --HEAD ccache
        echo "::add-path::/usr/local/opt/ccache/libexec"
        echo "::add-path::/usr/local/opt/ccache/bin"
      if: contains(matrix.config.os, 'macos')
      
    - name: Install clcache (windows)
      run: |
        python -m pip install git+https://github.com/frerich/clcache.git
      shell: cmd
      if: contains(matrix.config.os, 'windows')


#  build:


    - name: restore compiler cache
      uses: actions/cache@v1
      with:
        path: compiler-cache
        key: ${{ matrix.config.name }}-compiler-cache-${{ github.sha }}
        restore-keys: ${{ matrix.config.name }}-compiler-cache
      
    - name: Build TiGL (ubuntu, macos)
      shell: bash -l {0}
      run: |
        echo "::set-env name=CMAKE_PREFIX_PATH::${CONDA_PREFIX}/lib:${CONDA_PREFIX}/include"
        mkdir build
        cd build
        cmake .. -G "Ninja" ${{ matrix.config.cmake_args }}
        cmake --build . -j 4 --config Release --target install
      if: contains(matrix.config.os, 'ubuntu') || contains(matrix.config.os, 'macos')
      
    - name: Build TiGL (windows)
      shell: cmd /C call {0}
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.config.arch }}
        set CC=clcache.exe
        set CXX=clcache.exe
        clcache.exe -s
        set CMAKE_PREFIX_PATH=C:\Miniconda\Library;C:\Miniconda\Scripts;${{ github.workspace }}\doxygen
        mkdir build
        cd build
        cmake .. -G "Ninja" ${{ matrix.config.cmake_args }}
        cmake --build . -j 4 --config Release --target install
      if: contains(matrix.config.os, 'windows')
      
      
#  test:

    - name: Create coverage report (ubuntu debug)
      if: contains(matrix.config.name, 'Ubuntu Debug')
      run: |
        cd build
        cmake --build . --target coverage
        
    - name: Upload coverage report (ubuntu debug)
      if: contains(matrix.config.name, 'Ubuntu Debug')
      uses: actions/upload-artifact@v2-preview
      with:
       name: test-coverage-report
       path: coverageReport*
        
    - name: Publish coverage report to codecov.io (ubuntu debug)
      if: contains(matrix.config.name, 'Ubuntu Debug')
      uses: codecov/codecov-action@v1
      with:
        file: code_coverage.info
       
       
    - name: Run unit tests (ubuntu, macos)
      run: |
        cd build
        cd tests/unittests/
        ./TiGL-unittests --gtest_output=xml:test_results.xml
      if: contains(matrix.config.name, 'Ubuntu Release') || contains(matrix.config.os, 'macos')
      
    - name: Run unit tests (windows)
      run: 
        echo "::add-path::build\install\bin"
        cd build
        cmake --build . --target tigl-java-demo
        cd tests\unittests
        .\TiGL-unittests.exe --gtest_output=xml:test_results.xml
      if: contains(matrix.config.os, 'windows')
    
    
#  deploy:
      
    - name: Create package (macos)
      run: |
        cd build
        cmake --build . --target doc
        cmake --build . --target package
      if: contains(matrix.config.os, 'macos')
      
    - name: Upload package as artifact (macos)
      if: contains(matrix.config.os, 'macos')
      uses: actions/upload-artifact@v2-preview
      with:
       name: ${{ matrix.config.name }}-package
       path: build/*.dmg
      
    - name: Create package (windows)
      run: |
        cd build
        cmake --build . --target doc
        cpack -G ZIP
      if: contains(matrix.config.os, 'windows')
      
    - name: Upload package as artifact (windows)
      if: contains(matrix.config.os, 'windows')
      uses: actions/upload-artifact@v2-preview
      with:
       name: ${{ matrix.config.name }}-package
       path: build/*.zip
       
    - name: Create documentation (ubuntu)
      if: contains(matrix.config.os, 'ubuntu')
      run: |
        cd build
        cmake --build . --target doc
       
    - name: Upload documentation as artifact (ubuntu)
      if: contains(matrix.config.os, 'ubuntu')
      uses: actions/upload-artifact@v2-preview
      with:
       name: html-documentation
       path: build/doc/html/*
        
        
  deploy:
   
    if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest     
    needs: build-and-test

    steps:
      
    - uses: actions/checkout@v2
    
    - name: Create Release Description from Changelog
      run: |
        csplit -z ChangeLog /"Version "/ {1} 
        release_description=`cat xx01`
        echo $release_description
        echo "::set-env name=release_description::$release_description"
          
    - name: Parse version
      run: |
        version=`echo $github_ref | cut -c 12-`
        echo $version
        echo "::set-env name=version::$version"
      env:
         github_ref: ${{ github.ref }}
          
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: TiGL ${{ env.version }}
        body: ${{ env.release_description }}
        draft: false
        prerelease: false
      
    - name: download MacOS Build artifact
      uses: actions/download-artifact@v1
      with:
        name: MacOS-package
        path: TiGL-${{ env.version }}.dmg
          
    - name: Upload MacOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./TiGL-${{ env.version }}.dmg
        asset_name: TiGL-${{ env.version }}.dmg
        asset_content_type: application/zip
          
    - name: download Win64 Build artifact
      uses: actions/download-artifact@v1
      with:
        name: Win64-package
        path: TiGL-${{ env.version }}-Win64.zip
         
    - name: Upload Win64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./TiGL-${{ env.version }}-Win64.zip
        asset_name: TiGL-${{ env.version }}-Win64.zip
        asset_content_type: application/zip
           
    - name: download html-documentation
      uses: actions/download-artifact@v1
      with:
        name: html-documentation
        path: TiGL-${{ env.version }}-documentation.zip
            
    - name: Upload documentation Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./TiGL-${{ env.version }}-documentation.zip
        asset_name: TiGL-${{ env.version }}-documentation.zip
        asset_content_type: application/zip
    
