name: "Reusable Continuous Integration workflow"

on:

  workflow_call:

    secrets:
      GH_TOKEN:
        description: 'A Github PAT'
        required: true
      CODECOV_TOKEN:
        description: 'Needed to upload coverage report to codecov'
        required: true

    inputs:

      draft-release:
        # This should be a Boolean, but https://github.com/actions/runner/issues/1483
        description: "Set to true, if the workflow shall draft a release"
        required: false
        default: "false"
        type: string

      tigl_nightly:
        description: "CMake option to amend the version with the git hash (ON or OFF). Should be OFF for release builds."
        required: false
        default: "ON"
        type: string

      tigl_concat_generated_files:
        description: "CMake option to concatenate the generated source files (ON or OFF). Should be OFF for release builds."
        required: false
        default: "ON"
        type: string

      integration-tests:
        # This should be a Boolean, but https://github.com/actions/runner/issues/1483
        description: "Run integration tests"
        required: false
        default: "false"
        type: string

      documentation-artifact:
        description: "Name of the html documentation artifact. Will be build on Windows. Leave empty to skip documentation build."
        required: false
        default: ''
        type: string

      win-package-artifact:
        description: "Name of the windows package artifact. Leave empty to skip building the package."
        required: false
        default: ''
        type: string

      win-installer-artifact:
        description: "Name of the windows installer artifact. Leave empty to skip building the installer."
        required: false
        default: ''
        type: string

      macos-package-artifact:
        description: "Name of the Mac OS package artifact. Leave empty to skip building the package."
        required: false
        default: ''
        type: string

jobs:

  build-linux:
    strategy:
      matrix:
        config: ["Debug", "Release"]
        os: ["ubuntu-latest", "ubuntu-22.04"]
        # only enable coverage for Debug build on latest ubuntu
        include:
          - config: "Debug"
            os: "ubuntu-latest"
            coverage: "ON"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-linux
        with:
          config: ${{ matrix.config }}
          tigl_nightly: ${{ inputs.tigl_nightly }}
          tigl_concat_generated_files: ${{ inputs.tigl_concat_generated_files }}
          tigl_enable_coverage: ${{ matrix.coverage || 'OFF' }}
          build-artifact: build-${{ matrix.os }}-${{ matrix.config }}-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-${{ matrix.coverage || 'OFF' }}


  test-linux:
    needs: build-linux
    strategy:
      matrix:
        config: ["Debug", "Release"]
        os: ["ubuntu-latest", "ubuntu-22.04"]
        unit-tests: [true]
        # generate coverage reports on latest ubuntu debug builds
        exclude:
          - config: "Debug"
            os: "ubuntu-22.04"
        include:
          - config: "Debug"
            os: "ubuntu-22.04"
            coverage: "ON"
            unit-tests: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-linux
        with:
          build-artifact: build-${{ matrix.os }}-${{ matrix.config }}-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-${{ matrix.coverage || 'OFF' }}
          coverage: ${{ matrix.coverage == 'ON' || false }}
          unit-tests: ${{ matrix.unit-tests }}
          integration-tests: ${{ inputs.integration-tests == 'true' || false }}
          codecov_token: ${{ secrets.CODECOV_TOKEN }}


  build-windows:
    strategy:
      matrix:
        config: ["Release"]
        os: ["windows-2019", "windows-latest"]
        include:
         - config: "Release"
           os: "windows-2019"
           oce_static_libs: "ON"
           tigl_bindings_python_internal: "ON"
           documentation-artifact: ${{ inputs.documentation-artifact }}
           package-artifact: ${{ inputs.win-package-artifact }}
           installer-artifact: ${{ inputs.win-installer-artifact }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-win
        with:
          config: ${{ matrix.config }}
          tigl_nightly: ${{ inputs.tigl_nightly =='true' }}
          tigl_concat_generated_files: ${{ inputs.tigl_concat_generated_files == 'true' }}
          tigl_enable_coverage: 'OFF'
          oce_static_libs: ${{ matrix.oce_static_libs || 'OFF' }}
          tigl_bindings_python_internal: ${{ matrix.tigl_bindings_python_internal || 'OFF' }}
          documentation-artifact: ${{ matrix.documentation-artifact }}
          package-artifact: ${{ matrix.package-artifact }}
          installer-artifact: ${{ matrix.installer-artifact }}
          build-artifact: build-${{ matrix.os }}-${{ matrix.config }}-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-OFF-static-${{ matrix.oce_static_libs || 'OFF' }}-python-${{ matrix.tigl_bindings_python_internal || 'OFF' }}

  test-windows:
    needs: build-windows
    strategy:
      matrix:
        config: ["Release"]
        os: ["windows-2019", "windows-latest"]
        include:
         - config: "Release"
           os: "windows-2019"
           oce_static_libs: "ON"
           tigl_bindings_python_internal: "ON"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-win
        with:
          build-artifact: build-${{ matrix.os }}-${{ matrix.config }}-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-OFF-static-${{ matrix.oce_static_libs || 'OFF' }}-python-${{ matrix.tigl_bindings_python_internal || 'OFF' }}
          unit-tests: true
          integration-tests: ${{ inputs.integration-tests == 'true' }}

  build-macos:
    runs-on: "macos-13"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-macos
        with:
          config: "Release"
          tigl_nightly: ${{ inputs.tigl_nightly =='true' }}
          tigl_concat_generated_files: ${{ inputs.tigl_concat_generated_files == 'true' }}
          tigl_enable_coverage: 'OFF'
          package-artifact: ${{ inputs.macos-package-artifact }}
          build-artifact: build-macos-13-Release-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-OFF-static-ON-python-OFF

  test-macos:
    needs: build-macos
    runs-on: "macos-13"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/test-macos
        with:
          build-artifact: build-macos-13-Release-nightly-${{ inputs.tigl_nightly }}-concat-${{ inputs.tigl_concat_generated_files }}-cov-OFF-static-ON-python-OFF
          unit-tests: true
          integration-tests: ${{ inputs.integration-tests == 'true' }}

  draft-release:
    if: ${{ inputs.draft-release == 'true' }}
    needs: ["test-macos", "test-windows", "test-linux"]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/release
        with:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
