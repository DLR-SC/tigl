name: TiGL Github CI

on: 
 schedule:
    - cron: "0 0 * * *"
 push:
 pull_request:

env:
  CCACHE_DIR: ccache
  CLCACHE_DIR: clcache
  CLCACHE_HARDLINK: 1
  CMAKE_TIGL_ARGS: "-DCMAKE_BUILD_TYPE=Release -DOCE_STATIC_LIBS=ON -DTIGL_BUILD_TESTS=ON -DTIGL_CONCAT_GENERATED_FILES=ON -DTIGL_BINDINGS_PYTHON_INTERNAL=ON -DTIGL_BINDINGS_MATLAB=ON -DTIGL_BINDINGS_JAVA=ON"
 
jobs:

  build:

    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest,windows-latest]
        python: ['=3.6',]
        tixi3: ['>=3.0.3',]
        qt: ['=5.9.7',]
        pythonocc: ['=0.17.3',]
        doxygen: ['>=1.8.0',]
        swig: ['>=3.0.11',]
        oce: ['=0.17.2',]
        ninja: ['',]
        freeimageplus: ['',]
      fail-fast: false

    runs-on: ${{ matrix.os }}    

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
  

#  setup:

  
    - name: Install libglu1-mesa-dev freeglut3-dev mesa-common-dev (ubuntu)
      run: sudo apt-get update &&  sudo apt-get install -y --force-yes libglu1-mesa-dev freeglut3-dev mesa-common-dev
      if: contains(matrix.os, 'ubuntu')
    
    - name: Setup conda
      uses: goanpeca/setup-miniconda@v1.0.2
      with:
        auto-update-conda: true
        auto-activate-base: true
        activate-environment: ''

    - name: Install dependencies using Miniconda
      run: |
        conda install python${{ matrix.python }} pythonocc-core${{ matrix.pythonocc }} tixi3${{ matrix.tixi3 }} doxygen${{ matrix.doxygen }} swig${{ matrix.swig }} qt${{ matrix.qt }} oce${{ matrix.oce }} doxygen${{ matrix.doxygen }} freeimageplus${{ matrix.freeimageplus }} ninja${{ matrix.ninja }} -c dlr-sc -c dlr-sc/label/tigl-dev
        conda info -a
        conda list  

    - name: Install ccache (ubuntu)
      run: |
        sudo apt-get install ccache -y
        echo "::add-path::/usr/lib/ccache"
      if: contains(matrix.os, 'ubuntu')
      
    - name: Install ccache (macos)
      run: |
        brew install zstd libb2
        brew install --HEAD ccache
        echo "::add-path::/usr/local/opt/ccache/libexec"
      if: contains(matrix.os, 'macos')
      
    - name: Install clcache (windows)
      run: |
        call activate build_env
        pip install git+https://github.com/frerich/clcache.git
      shell: cmd
      if: contains(matrix.os, 'windows')


#  build:


    - name: restore ccache (ubuntu, macos)
      uses: actions/cache@v1
      with:
        path: ccache
        key: ${{ matrix.os }}-ccache-${{ github.sha }}
        restore-keys: ${{ matrix.os }}-ccache
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      
    - name: restore clcache (windows)
      uses: actions/cache@v1
      with:
        path: clcache
        key: ${{ matrix.os }}-clcache-${{ github.sha }}
        restore-keys: ${{ matrix.os }}-clcache
      if: contains(matrix.os, 'windows')
      
    - name: Build TiGL (ubuntu, macos)
      shell: bash -l {0}
      run: |
        echo "::set-env name=CMAKE_PREFIX_PATH::${CONDA_PREFIX}/lib:${CONDA_PREFIX}/include"
        mkdir build
        cd build
        cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX=install $CMAKE_TIGL_ARGS -DPythonOCC_SOURCE_DIR=${CONDA_PREFIX}/src/pythonocc-core
        cmake --build . -j 4 --config Release --target install
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      
    - name: Build TiGL (windows)
      shell: cmd /C call {0}
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set CC=clcache.exe
        set CXX=clcache.exe
        clcache.exe -s
        set CMAKE_PREFIX_PATH=C:\Miniconda\Library      
        echo %CMAKE_PREFIX_PATH%
        echo "**** Library: ****"
        dir C:\Miniconda\Library
        echo "**** lib: ****"
        dir C:\Miniconda\Library\lib
        echo "**** include: ****"
        dir C:\Miniconda\Library\include
        echo "**** bin: ****"
        dir C:\Miniconda\Library\bin
        echo "**** cmake: ****"
        dir C:\Miniconda\Library\cmake
        mkdir build
        cd build
        cmake .. -G "Ninja" -DCMAKE_INSTALL_PREFIX=install %CMAKE_TIGL_ARGS% -DPythonOCC_SOURCE_DIR=C:/Miniconda/Library/src/pythonocc-core
        cmake --build . -j 4 --config Release --target install
      if: contains(matrix.os, 'windows')
      
      
#  test:
       
       
    - name: Run unit tests (ubuntu, macos)
      run: |
        cd build
        cd tests/unittests/
        ./TiGL-unittests --gtest_output=xml:test_results.xml
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      
    - name: Run unit tests (windows)
      run: 
        echo "::add-path::build\install\bin"
        cd build
        cmake --build . --target tigl-java-demo
        cd tests\unittests
        .\TiGL-unittests.exe --gtest_output=xml:test_results.xml
      if: contains(matrix.os, 'windows')
      
    - name: upload test results
      uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: build/tests/unittests/test_results.xml
    
    
#  deploy:

      
    - name: Create package (macos)
      run: |
        cd build
        cmake --build . --target doc
        cmake --build . --target package
      if: contains(matrix.os, 'macos')
      
    - name: Create package (windows)
      run: |
        cd build
        cmake --build . --target doc
        cpack -G ZIP
      if: contains(matrix.os, 'windows')
        
