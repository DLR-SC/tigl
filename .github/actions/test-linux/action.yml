name: "Linux Tests"

description: "Test TiGL on Linux"

inputs:

  build-artifact:
    description: "Name of the build artifact that contains the unit test binary."
    required: true

  coverage:
    description: "Create coverage report (true or false)"
    required: false
    default: false

  unit-tests:
    description: "Set to true to run TiGLs unit tests (true or false)"
    required: false
    default: true

  integration-tests:
    description: "Set to true to run TiGLs integration tests (true or false)"
    required: false
    default: true

runs:

  using: "composite"

  steps:

    - name: Install dependencies
      shell: bash
      run: |
        curl http://download.opensuse.org/repositories/science:/dlr/xUbuntu_18.04/Release.key | sudo apt-key add -
        echo "deb http://download.opensuse.org/repositories/science:/dlr/xUbuntu_18.04/ /" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update -qq
        sudo apt-get install -y lcov
        
    - name: Setup miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        auto-activate-base: true
        activate-environment: ''

    # re-use build environment (only really needed: tixi and opencascade)
    - name: Install conda-dependencies
      shell: bash -l {0}
      run: |
        conda env create -f environment.yml
        conda info -a
        conda list

    - name: Download build directory
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.build-artifact }}

    - name: extract build archive
      shell: bash
      run: |
        tar -xzf build.tar.gz

    - name: Run unit tests
      if: ${{ inputs.unit-tests == 'true' }}
      shell: bash
      run: |
        conda activate tigl-bld
        cd build/tests/unittests/
        ./TiGL-unittests --gtest_shuffle --gtest_output=xml:unit_test_results.xml

    - name: Run integration tests
      if: ${{ inputs.integration-tests == 'true' }}
      shell: bash
      run: |
        conda activate tigl-bld
        cd build/tests/integrationtests/
        ./TiGL-integrationtests --gtest_shuffle --gtest_output=xml:integration_test_results.xml

    - name: Generate coverage report
      if: ${{ inputs.coverage == 'true' }}
      shell: bash
      run: |
        conda activate tigl-bld
        cd build
        cmake --build . --target coverage-unittests/fast
        cmake --build . --target coverage-integrationtests/fast

    - name: Publish coverage report to codecov.io (ubuntu debug)
      if: ${{ inputs.coverage == 'true' }}
      uses: codecov/codecov-action@v3
      with:
        files: ./build/tests/unittests/coverageReport-unit.info,./build/tests/integrationtests/coverageReport-integration.info
